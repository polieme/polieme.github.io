<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Activiti-工作流入门</title>
    <url>/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_92.jpg"></p>
<h1 id="Activiti部署"><a href="#Activiti部署" class="headerlink" title="Activiti部署"></a>Activiti部署</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>环境准备这块需要准备的东西不多，有一下三块，其中JDK是Java的运行环境，Tomcat是Activiti的运行容器，Activiti压缩包中主要是要其中的war包，用作部署在Tomcat容器中</p>
<ul>
<li>JDK1.8</li>
<li>Tomcat8</li>
<li>Activiti的压缩包</li>
</ul>
<h3 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h3><p>这块就不多讲了，自己百度，网上有很多资料，尽量不要使用CentOS自带的OpenJdk，容易出现问题</p>
<h3 id="Tomcat8安装"><a href="#Tomcat8安装" class="headerlink" title="Tomcat8安装"></a>Tomcat8安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Tomcat</span></span><br><span class="line">[root@localhost Download]<span class="comment"># wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.50/bin/apache-tomcat-8.0.50.zip</span></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">[root@localhost Download]<span class="comment"># unzip apache-tomcat-8.0.50.zip</span></span><br><span class="line"><span class="comment"># 创建Tomcat程序安装目录</span></span><br><span class="line">[root@localhost Download]<span class="comment"># mkdir /usr/local/tomcat</span></span><br><span class="line"><span class="comment"># 把Tomcat移到安装目录下</span></span><br><span class="line">[root@localhost Download]<span class="comment"># mv apache-tomcat-8.0.50 /usr/local/tomcat/</span></span><br><span class="line">[root@localhost Download]<span class="comment"># cd /usr/local/tomcat/bin/</span></span><br><span class="line"><span class="comment"># 添加执行权限，没有执行权限，文件是没法运行的</span></span><br><span class="line">[root@localhost bin]<span class="comment"># chmod +x *.sh</span></span><br><span class="line"><span class="comment"># 启动Tomcat程序</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./startup.sh</span></span><br><span class="line"><span class="comment"># 添加防火墙端口开放</span></span><br><span class="line">[root@localhost bin]<span class="comment">#  firewall-cmd --add-port=8080/tcp --permanent</span></span><br><span class="line">[root@localhost bin]<span class="comment">#  firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>
<h3 id="Activiti下载及部署"><a href="#Activiti下载及部署" class="headerlink" title="Activiti下载及部署"></a>Activiti下载及部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">[root@localhost Download]<span class="comment"># wget https://github.com/Activiti/Activiti/releases/download/activiti-6.0.0/activiti-6.0.0.zip</span></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">[root@localhost Download]<span class="comment"># unzip activiti-6.0.0.zip</span></span><br><span class="line">[root@localhost Download]<span class="comment"># cd activiti-6.0.0/</span></span><br><span class="line"><span class="comment"># 把activiti的war包拷贝到tomcat下进行部署</span></span><br><span class="line">[root@localhost activiti-6.0.0]<span class="comment"># cp wars/* /usr/local/tomcat/apache-tomcat-8.0.50/webapps/</span></span><br><span class="line"><span class="comment"># 重启Tomcat</span></span><br><span class="line">[root@localhost activiti-6.0.0]<span class="comment"># ps -ef|grep java</span></span><br><span class="line">[root@localhost activiti-6.0.0]<span class="comment"># kill -9 2642</span></span><br><span class="line">[root@localhost activiti-6.0.0]<span class="comment"># cd /usr/local/tomcat/apache-tomcat-8.0.50/bin/</span></span><br><span class="line">[root@localhost activiti-6.0.0]<span class="comment"># ./startup.sh</span></span><br></pre></td></tr></table></figure>

<h2 id="创建流程体验"><a href="#创建流程体验" class="headerlink" title="创建流程体验"></a>创建流程体验</h2><h3 id="创建三个不同的用户作为流程参与者"><a href="#创建三个不同的用户作为流程参与者" class="headerlink" title="创建三个不同的用户作为流程参与者"></a>创建三个不同的用户作为流程参与者</h3><table>
<thead>
<tr>
<th>ID</th>
<th>Email</th>
<th>Name</th>
<th>Remark</th>
</tr>
</thead>
<tbody><tr>
<td>admin</td>
<td>admin</td>
<td>Administrator</td>
<td>系统默认用户，不需要创建，默认就有</td>
</tr>
<tr>
<td>userdev</td>
<td><a href="mailto:&#117;&#115;&#x65;&#114;&#100;&#101;&#118;&#64;&#x31;&#x32;&#x36;&#x2e;&#99;&#111;&#109;">&#117;&#115;&#x65;&#114;&#100;&#101;&#118;&#64;&#x31;&#x32;&#x36;&#x2e;&#99;&#111;&#109;</a></td>
<td>userDEV</td>
<td>流程发起者，开发人员</td>
</tr>
<tr>
<td>userhr</td>
<td><a href="mailto:&#x75;&#115;&#x65;&#x72;&#x68;&#114;&#64;&#49;&#x32;&#x36;&#46;&#x63;&#x6f;&#109;">&#x75;&#115;&#x65;&#x72;&#x68;&#114;&#64;&#49;&#x32;&#x36;&#46;&#x63;&#x6f;&#109;</a></td>
<td>userHR</td>
<td>人资</td>
</tr>
<tr>
<td>usertl</td>
<td><a href="mailto:&#x75;&#115;&#101;&#x72;&#x74;&#x6c;&#x40;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#109;">&#x75;&#115;&#101;&#x72;&#x74;&#x6c;&#x40;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#109;</a></td>
<td>userTL</td>
<td>TeamLeader</td>
</tr>
</tbody></table>
<ol>
<li>登录系统，系统地址为<a href="http://192.168.2.163:8080/activiti-app">http://192.168.2.163:8080/activiti-app</a>，默认的<strong>admin</strong>密码为<strong>test</strong><img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_1.png" class=""></li>
<li>打开上面的界面后，点击“Users”TAB页卡，然后点击页面中的“Create User”按钮，打开用户创建界面<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_2.png" class=""></li>
<li>其中Password随意自己记下来就可以，后面会用到FirstName也是随意的<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_3.png" class=""></li>
</ol>
<h3 id="设计一个二级审批流程"><a href="#设计一个二级审批流程" class="headerlink" title="设计一个二级审批流程"></a>设计一个二级审批流程</h3><p>流程的流程图如下</p>
<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_flow.png" class="">
<ol>
<li>回到主页面，点击<code>Kickstart App</code>创建流程<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_4.png" class=""></li>
<li>点击“Create Process”按钮，打开新增流程界面<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_5.png" class=""></li>
<li>填写流程的基础信息，其中需要注意<code>Model Key</code>是作为流程之间唯一性的标识，也就是不能和其他流程重复<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_6.png" class=""></li>
<li>点击图中的圆圈，点击圆圈右侧的头像，可以新增一个节点<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_7.png" class=""></li>
<li>双击新增节点，可编辑节点的名称，点击节点，下方的Assignments可以设置本节点的参与者<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_8.png" class="">
<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_9.png" class=""></li>
<li>然后再设置下HR审批节点上的参与者信息<img src="/2020/09/24/Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%85%A5%E9%97%A8/screenshot_10.png" class=""></li>
</ol>
<h3 id="参与者协同完成流程"><a href="#参与者协同完成流程" class="headerlink" title="参与者协同完成流程"></a>参与者协同完成流程</h3>]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-源码初探</title>
    <url>/2020/09/25/Activiti-%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_93.jpg"></p>
<h2 id="Activiti代码下载"><a href="#Activiti代码下载" class="headerlink" title="Activiti代码下载"></a>Activiti代码下载</h2><p>首先是要下载Activiti的代码，Activiti在Github上的地址为：<a href="https://github.com/Activiti/Activiti">https://github.com/Activiti/Activiti</a>。建议是不要直接下载，而是:</p>
<ol>
<li>创建一个自己的Github的账号</li>
<li>然后Fork代码到自己的仓库</li>
<li>最后使用Idea下载自己仓库中的Activiti的代码</li>
<li>创建自己开发使用的分值<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b study6 6.x</span><br></pre></td></tr></table></figure>
<img src="/2020/09/25/Activiti-%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/screenshot_1.png" class=""></li>
</ol>
<h2 id="Activiti6-0模块介绍"><a href="#Activiti6-0模块介绍" class="headerlink" title="Activiti6.0模块介绍"></a>Activiti6.0模块介绍</h2><ol>
<li>核心模块</li>
</ol>
<ul>
<li>module/activiti-engine：核心引擎</li>
<li>module/activiti-spring：Spring集成模块</li>
<li>module/activiti-spring-boot SpringBoot集成模块</li>
<li>module/activiti-rest：对外提供无状态rest api 模块</li>
<li>module/activiti-form-engine：表单引擎模块</li>
<li>module/activiti-ldap:作用系统集成</li>
</ul>
]]></content>
      <categories>
        <category>源码初探</category>
      </categories>
  </entry>
  <entry>
    <title>Android 长摁连续触发事件，类似于Js里面的Interval</title>
    <url>/2019/02/18/Android-%E9%95%BF%E6%91%81%E8%BF%9E%E7%BB%AD%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6%EF%BC%8C%E7%B1%BB%E4%BC%BC%E4%BA%8EJs%E9%87%8C%E9%9D%A2%E7%9A%84Interval/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_11.jpg"></p>
<blockquote>
<p>大致原理是,如果手指按在view上，则使用ScheduledExecutorService对象执行scheduleWithFixedDelay()方法，每隔一个间隔不停地向Handler发送Message，此处Message里的信息是View id，然后由Handler在handlemessage的时候处理需要触发的事件。</p>
</blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li><p>首先,让对应的View设置一个OnTouchListener，在手指按下时触发不停的发送消息,手指抬起时停止发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subtractButton.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">                    updateAddOrSubtract(v.getId());    <span class="comment">//手指按下时触发不停的发送消息</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_UP)&#123;</span><br><span class="line">                    stopAddOrSubtract();    <span class="comment">//手指抬起时停止发送</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>发送消息与终止方法：先定义一个ScheduledExecutorService对象，然后调用scheduleWithFixedDelay()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ScheduledExecutorService scheduledExecutor;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateAddOrSubtract</span><span class="params">(<span class="keyword">int</span> viewId)</span> </span>&#123;</span><br><span class="line">           stop();<span class="comment">//如果同时摁两个按钮或两个以上，会出现定时器不能停止的问题，因此在这里加上这个，把之前的定时器先关掉</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> vid = viewId;</span><br><span class="line">        scheduledExecutor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        scheduledExecutor.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                msg.what = vid;</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);    <span class="comment">//每间隔100ms发送Message</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopAddOrSubtract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduledExecutor.shutdownNow();</span><br><span class="line">            scheduledExecutor = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用来处理Touch事件的Handler定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> viewId = msg.what;</span><br><span class="line">            <span class="keyword">switch</span> (viewId)&#123;</span><br><span class="line">                <span class="keyword">case</span> R.id.custom_number_picker_subtract_button:</span><br><span class="line">                    setValue(value - rangeability);    <span class="comment">//减小操作</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.custom_number_picker_add_button:</span><br><span class="line">                    setValue(value + rangeability);    <span class="comment">//增大操作</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>移动端</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>连续触发</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开机启动服务或者Activity</title>
    <url>/2019/02/18/Android%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E6%88%96%E8%80%85Activity/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<blockquote>
<p>有些时候，应用需要在开机时就自动运行，例如某个自动从网上更新内容的后台 service。怎样实现开机自动运行的应用？在撰写本文时，联想到高焕堂先生以“Don’’t call me, I’’ll call you back!”总结Android框架，真是说到点子上了。理解这句话的含义，许多有关Android平台上实现某种功能的问题，都能迎刃而解。</p>
</blockquote>
<p>使用场景：手机开机后，自动运行程序，在屏幕上显示”Hello. I started!”字样。</p>
<p>背景知识：当Android启动时，会发出一个系统广播，内容为 ACTION_BOOT_COMPLETED，它的字符串常量表示为android.intent.action.BOOT_COMPLETED。只要在程序中“捕捉”到这个消息，再启动之即可。记住，Android框架说：Don’’t call me, I’’ll call you back。我们要做的是做好接收这个消息的准备，而实现的手段就是实现一个BroadcastReceiver。</p>
<p>代码解析：</p>
<p>1、界面Activity：SayHello.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ghstudio.BootStartDemo;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    TextView tv = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">    tv.setText(<span class="string">&quot;Hello. I started!&quot;</span>);</span><br><span class="line">    setContentView(tv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码很简单，当Activity启动时，创建一个TextView，用它显示”Hello. I started!”字样。</p>
<p>2、接收广播消息：BootBroadcastReceiver.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ghstudio.BootStartDemo;</span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ACTION = <span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (intent.getAction().equals(ACTION))&#123;</span><br><span class="line">      Intent sayHelloIntent=<span class="keyword">new</span> Intent(context,SayHello.class);</span><br><span class="line">      sayHelloIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">      context.startActivity(sayHelloIntent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类派生自BroadcastReceiver，覆载方法onReceive中，检测接收到的Intent是否符合BOOT_COMPLETED，如果符合，则启动SayHello那个Activity。</p>
<p>3、配置文件：AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">package</span>=<span class="string">&quot;com.ghstudio.BootStartDemo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/icon&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.SayHello&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.BootBroadcastReceiver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意其中粗体字那一部分，该节点向系统注册了一个receiver，子节点intent-filter表示接收 android.intent.action.BOOT_COMPLETED消息。不要忘记配置 android.permission.RECEIVE_BOOT_COMPLETED权限。</p>
<p>完成后，编译出apk包，安装到模拟器或手机中。关机，重新开机。</p>
]]></content>
      <categories>
        <category>移动端</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>服务</tag>
        <tag>Activity</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS知识点</title>
    <url>/2019/02/01/CSS%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_23.jpg"></p>
<h2 id="CSS模糊筛选器"><a href="#CSS模糊筛选器" class="headerlink" title="CSS模糊筛选器"></a>CSS模糊筛选器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="selector-tag">p</span>是标签的类型，class是标签的属性，important是需要模糊查询的内容--&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class~=<span class="string">&#x27;important&#x27;</span>]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[id^=<span class="string">&#x27;filePicker&#x27;</span>]</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[title~=<span class="string">&#x27;Figure&#x27;</span>]</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid gray;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JQuery-给样式添加important的样式"><a href="#JQuery-给样式添加important的样式" class="headerlink" title="JQuery 给样式添加important的样式"></a>JQuery 给样式添加important的样式</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$(&quot;.tab_close&quot;).css(&quot;cssText&quot;,&quot;display:none !important&quot;);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>[abc^=”def”]</td>
<td>选择 abc 属性值以 “def” 开头的所有元素</td>
</tr>
<tr>
<td>[abc$=”def”]</td>
<td>选择 abc 属性值以 “def” 结尾的所有元素</td>
</tr>
<tr>
<td>[abc*=”def”]</td>
<td>选择 abc 属性值中包含子串 “def” 的所有元素</td>
</tr>
</tbody></table>
<h2 id="CSS3实现一直旋转的图片"><a href="#CSS3实现一直旋转的图片" class="headerlink" title="CSS3实现一直旋转的图片"></a>CSS3实现一直旋转的图片</h2><p>使用方法：①新建一个DIV，class=”demo_div”,div里面放一个图片，就能让图片一直进行旋转了，很好玩</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@-webkit-keyframes</span> rotation&#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;-webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);&#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;-webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo_div</span>&#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">animation</span>: rotation <span class="number">3s</span> linear infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>: rotation <span class="number">3s</span> linear infinite;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: rotation <span class="number">3s</span> linear infinite;</span><br><span class="line">  -o-<span class="attribute">animation</span>: rotation <span class="number">3s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS6.5中Tomcat部署及单机多Tomcat部署</title>
    <url>/2019/02/19/CentOS6-5%E4%B8%ADTomcat%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%8D%95%E6%9C%BA%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_17.jpg"></p>
<h2 id="Tomcat下载"><a href="#Tomcat下载" class="headerlink" title="Tomcat下载"></a>Tomcat下载</h2><p>Tomcat的<a href="http://tomcat.apache.org/download-70.cgi">下载地址</a>，根据自己的需求进行版本的下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.73/bin/apache-tomcat-7.0.73.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="Tomcat安装（Linux）"><a href="#Tomcat安装（Linux）" class="headerlink" title="Tomcat安装（Linux）"></a>Tomcat安装（Linux）</h2><p>解压tomcat并进行目录重命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf  apache-tomcat-7.0.73.tar.gz <span class="comment"># 解压</span></span><br><span class="line">mv apache-tomcat-7.0.73 tomcat1 <span class="comment"># 重命名为tomcat1</span></span><br><span class="line">tar -zxvf  apache-tomcat-7.0.73.tar.gz <span class="comment"># 解压</span></span><br><span class="line">mv apache-tomcat-7.0.73 tomcat2 <span class="comment"># 重命名为tomcat2</span></span><br><span class="line">rm -rf apache-tomcat-7.0.73.tar.gz <span class="comment"># 删除安装包</span></span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改两个tomcat的配置文件<code>server.xml</code>，修改的内容如下图所示</p>
<ul>
<li><p>tomcat1</p>
<img src="/2019/02/19/CentOS6-5%E4%B8%ADTomcat%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%8D%95%E6%9C%BA%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/screenshot_2.png" class="">
<img src="/2019/02/19/CentOS6-5%E4%B8%ADTomcat%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%8D%95%E6%9C%BA%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/screenshot_3.png" class=""></li>
<li><p>tomcat2</p>
<img src="/2019/02/19/CentOS6-5%E4%B8%ADTomcat%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%8D%95%E6%9C%BA%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/screenshot_4.png" class="">
<img src="/2019/02/19/CentOS6-5%E4%B8%ADTomcat%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%8D%95%E6%9C%BA%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/screenshot_5.png" class=""></li>
</ul>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>修改完成，启动Tomcat，访问对应的端口号进行验证</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>多节点</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS6安装Git</title>
    <url>/2019/02/19/CentOS6%E5%AE%89%E8%A3%85Git/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_33.jpg"></p>
<h2 id="1-git卸载"><a href="#1-git卸载" class="headerlink" title="1. git卸载"></a>1. git卸载</h2><blockquote>
<p>如果是之前安装过git，需要先进行卸载操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps git</span><br></pre></td></tr></table></figure>

<h2 id="2-下载最新版本的git"><a href="#2-下载最新版本的git" class="headerlink" title="2. 下载最新版本的git"></a>2. 下载最新版本的git</h2><blockquote>
<p>去Git的下载地址查找自己的Git版本，页面地址为<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">Git下载地址</a>，这个地方可以按照日期进行查询，找当年的最新发布的版本，文件名的格式为“git-2.18.0.tar.gz”，这里使用的下载地址为<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.0.tar.gz">https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.0.tar.gz</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载源程序包</span><br><span class="line">cd &#x2F;home&#x2F;Download</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.edge.kernel.org&#x2F;pub&#x2F;software&#x2F;scm&#x2F;git&#x2F;git-2.18.0.tar.gz</span><br><span class="line"></span><br><span class="line"># 安装依赖包</span><br><span class="line">yum -y install libcurl-devel expat-devel curl-devel  gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum -y install  gcc perl-ExtUtils-MakeMaker</span><br><span class="line"></span><br><span class="line"># 解压编译程序</span><br><span class="line">tar -zxvf git-2.18.0.tar.gz</span><br><span class="line">cd git-2.18.0</span><br><span class="line">make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all</span><br><span class="line">make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install</span><br><span class="line"></span><br><span class="line"># 添加git到环境变量</span><br><span class="line">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&quot; &gt;&gt; &#x2F;etc&#x2F;bashrc</span><br><span class="line">source &#x2F;etc&#x2F;bashrc</span><br><span class="line"></span><br><span class="line"># 查看git版本</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>

<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="git-clone的时候报SSL错误"><a href="#git-clone的时候报SSL错误" class="headerlink" title="git clone的时候报SSL错误"></a>git clone的时候报SSL错误</h3><blockquote>
<p>问题</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost temp]# git clone https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;anyproxy.git</span><br><span class="line">Cloning into &#39;anyproxy&#39;...</span><br><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;anyproxy.git&#x2F;&#39;: SSL connect error</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>更新系统的NNS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y update  nss</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 LVM添加硬盘及扩容</title>
    <url>/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_98.jpg"></p>
<blockquote>
<p>引自<a href="https://blog.csdn.net/u013408061/article/details/98945155">《CentOS7 LVM添加硬盘及扩容》</a><br>引自<a href="https://blog.csdn.net/littlehaes/article/details/103032658">《Linux扩容/home目录》</a><br>引自不是简简单单的拷贝，是要实践、吸收并转化</p>
</blockquote>
<h2 id="LVM简介"><a href="#LVM简介" class="headerlink" title="LVM简介"></a>LVM简介</h2><p>LVM是Logical Volume Manager（逻辑卷管理）的简写，他是Linux环境下对磁盘分区进行管理的一种机制。LVM将一个或多个磁盘分区（PV）虚拟为一个卷组（VG），相当于一个大的硬盘，我们可以在上面划分一些逻辑卷（LV）。当卷组的空间不足的时候，可以讲新的磁盘分区加入进来。我们还可以从卷组的剩余空间上划分一些空间给空间不足的逻辑卷使用。</p>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screen_shot_1.jpg" class="">

<h2 id="LVM添加硬盘和扩容"><a href="#LVM添加硬盘和扩容" class="headerlink" title="LVM添加硬盘和扩容"></a>LVM添加硬盘和扩容</h2><p>环境：CentOS7 64位（KVM虚拟主机）<br>新建虚拟机这里就不再赘述，直接从添加硬盘开始</p>
<ol>
<li><p>添加一块硬盘到系统中</p>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_2.png" class="">
<p>使用<code>fdisk -l</code>查看这块新盘为<code>/dev/sdb</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fdisk -l</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_3.png" class=""></li>
<li><p>对新盘分区<br>使用fdisk命令对新盘进行分区，这里建立一个主分区<code>/dev/sdb</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fdisk /dev/sdb</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_4.png" class="">
<p>最后使用<code>partprobe</code>命令重新读取分区列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># partprobe</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建物理卷（PV）<br>使用<code>pvcreate</code>创建物理卷，<code>pvdisplay</code>查看物理卷信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pvcreate /dev/sdb1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pvdisplay</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_5.png" class=""></li>
<li><p>将PV加入卷组（VG）<br>使用<code>vgdisplay</code>查看卷组信息，下图卷组名为<code>centos</code>，空闲大小为0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vgdisplay</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_6.png" class="">
<p>使用<code>vgextend</code>命令把<code>/dev/sdb1</code>物理卷加入到<code>centos</code>卷组中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vgextend centos /dev/sdb1</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_7.png" class="">
<p>使用命令<code>vgdisplay</code>重新查看下卷组信息</p>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_8.png" class=""></li>
</ol>
<blockquote>
<p>接下来有两种方案</p>
</blockquote>
<ul>
<li>一种是创建新的逻辑卷，绑定到你想绑定位置，如果是创建新的逻辑卷，可以看接下来的（5-6）  </li>
<li>另一种是直接给之前的逻辑卷扩容（之前逻辑卷对应的目录下是有东西的，这次是要进行扩容），那就直接跳到（7）</li>
</ul>
<ol start="5">
<li><p>创建逻辑卷（LV）<br>使用<code>lvcreate</code>命令从卷组中划分一个新的逻辑卷，这里创建名称为<code>newlv</code>，大小为5GB的逻辑卷分区；使用<code>lvdisplay</code>查看逻辑卷信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lvcreate -L 5G -n newlv centos</span></span><br><span class="line">[root@localhost ~]<span class="comment"># lvdisplay</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_9.png" class="">
<p>再查看下卷组的信息，这时卷组被上面的操作分出去了5GB的内容，应该就只剩下5GB的空间了</p>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_10.png" class=""></li>
<li><p>格式化逻辑卷并挂载<br>新逻辑卷经过格式化就可以挂载到系统中的存储数据了。使用mkfs.xfs格式化为CentOS7的xfs文件系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkfs.xfs /dev/centos/newlv</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_11.png" class="">
<p>在/mnt目录下（可以挂载到自己需要的目录下），挂载后查看容量大小为5GB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mnt]<span class="comment"># mkdir /mnt/newlv</span></span><br><span class="line">[root@localhost mnt]<span class="comment"># mount -t xfs /dev/centos/newlv /mnt/newlv</span></span><br><span class="line">[root@localhost mnt]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_12.png" class="">
<p>设置开机自动挂载，编辑<code>/etc/fstab</code>文件，加入最后一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/dev/centos/newlv     /mnt/newlv              xfs         default         1   2</span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_13.png" class=""></li>
<li><p>逻辑卷扩容<br>使用<code>lvextend</code>命令进行逻辑卷扩容。这里把剩余的空间分配给<code>/dev/centos/root</code>。增加5GB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mnt]<span class="comment"># lvextend -l +100%FREE /dev/centos/root</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_14.png" class="">
<p>自动扩展xfs文件系统到最大的可用大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mnt]<span class="comment"># xfs_growfs /dev/centos/root</span></span><br></pre></td></tr></table></figure>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_15.png" class="">
<p>最后使用命令<code>df -Th</code>查看是否动态扩容成功</p>
<img src="/2021/03/21/CentOS7-LVM%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E5%8F%8A%E6%89%A9%E5%AE%B9/screenshot_16.png" class=""></li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>磁盘扩容</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7中WebsphereV8.5.5.0安装教程</title>
    <url>/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_86.jpg"></p>
<p>WAS8之后，Websphere的安装包不在区分系统，一份安装包可以在多个平台安装，只是针对Installation Manager进行了操作系统的区分，Websphere的产品必须通过Install Manager安装</p>
<h2 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h2><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ol>
<li>目前手头的拿到的文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Installation Manager安装包</span></span><br><span class="line">InstalMgr1.6.2_LNX_X86_64_WAS_8.5.5.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># WAS-FP的安装包</span></span><br><span class="line">8.5.5-WS-WAS-FP017-part1.zip</span><br><span class="line">8.5.5-WS-WAS-FP017-part2.zip</span><br><span class="line">8.5.5-WS-WAS-FP017-part3.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># WAS_ND安装包</span></span><br><span class="line">WAS_ND_V8.5.5_1_OF_3.zip</span><br><span class="line">WAS_ND_V8.5.5_2_OF_3.zip</span><br><span class="line">WAS_ND_V8.5.5_3_OF_3.zip</span><br></pre></td></tr></table></figure></li>
<li>将上面的zip包放到<code>/opt/WebSphereInstallPackage/</code>下</li>
</ol>
<h2 id="Installation-Manager-安装"><a href="#Installation-Manager-安装" class="headerlink" title="Installation Manager 安装"></a>Installation Manager 安装</h2><h3 id="解压缩文件Installation-Manager安装文件"><a href="#解压缩文件Installation-Manager安装文件" class="headerlink" title="解压缩文件Installation Manager安装文件"></a>解压缩文件<code>Installation Manager</code>安装文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 切换到放压缩文件的目录下</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># cd /opt/WebSphereInstallPackage/</span></span><br><span class="line"><span class="comment">## 创建用于解压Installation Manager的目录</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># mkdir installManager</span></span><br><span class="line"><span class="comment">## 指定刚刚创建的目录进行解压</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d installManager/ InstalMgr1.6.2_LNX_X86_64_WAS_8.5.5.zip</span></span><br></pre></td></tr></table></figure>
<h3 id="确认下安装配置文件内容"><a href="#确认下安装配置文件内容" class="headerlink" title="确认下安装配置文件内容"></a>确认下安装配置文件内容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># cd installManager/</span></span><br><span class="line">[root@CDH1 installManager]<span class="comment"># cat install.xml</span></span><br></pre></td></tr></table></figure>
<p>确认下内容是否和下方的一致（版本version可能存在差异）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">agent-input</span> <span class="attr">clean</span>=<span class="string">&#x27;true&#x27;</span> <span class="attr">temporary</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span> <span class="attr">location</span>=<span class="string">&#x27;.&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">install</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">offering</span> <span class="attr">features</span>=<span class="string">&#x27;agent_core,agent_jre&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;com.ibm.cic.agent&#x27;</span> <span class="attr">version</span>=<span class="string">&#x27;1.6.2000.20130301_2248&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">install</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">agent-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="执行-consoleinst-sh脚本开始安装Installation-Manager"><a href="#执行-consoleinst-sh脚本开始安装Installation-Manager" class="headerlink" title="执行./consoleinst.sh脚本开始安装Installation Manager"></a>执行<code>./consoleinst.sh</code>脚本开始安装Installation Manager</h3><ol>
<li><p>执行<code>./consoleinst.sh</code>脚本，并输入<code>N</code>，进入下一页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 installManager]<span class="comment"># ./consoleinst.sh</span></span><br><span class="line">预处理输入。</span><br><span class="line">正在装入存储库...</span><br><span class="line">正在准备和解析所选软件包...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=====&gt; IBM Installation Manager&gt; 安装</span><br><span class="line"></span><br><span class="line">选择要安装的软件包：</span><br><span class="line">     1. [X] IBM Installation Manager 1.6.2</span><br><span class="line"></span><br><span class="line">     O. 检查其他版本、修订程序和扩展</span><br><span class="line"></span><br><span class="line">     N. 下一页,      C. 取消</span><br><span class="line">-----&gt; [N] N</span><br></pre></td></tr></table></figure></li>
<li><p>输入<code>A</code>，选择我接手许可协议中的条款</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=====&gt; IBM Installation Manager&gt; 安装&gt; 许可证</span><br><span class="line"></span><br><span class="line">仔细阅读下列许可证协议。</span><br><span class="line">通过输入编号来查看许可证协议：</span><br><span class="line">     1. IBM Installation Manager - 许可协议</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">     A. [ ] 我接受许可协议中的条款(A)</span><br><span class="line">     D. [ ] 我不接受许可协议中的条款(D)</span><br><span class="line"></span><br><span class="line">     B. 上一页,      C. 取消</span><br><span class="line">-----&gt; [C] A</span><br></pre></td></tr></table></figure></li>
<li><p>输入N，跳到下一页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=====&gt; IBM Installation Manager&gt; 安装&gt; 许可证</span><br><span class="line"></span><br><span class="line">仔细阅读下列许可证协议。</span><br><span class="line">通过输入编号来查看许可证协议：</span><br><span class="line">     1. IBM Installation Manager - 许可协议</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">     A. [X] 我接受许可协议中的条款(A)</span><br><span class="line">     D. [ ] 我不接受许可协议中的条款(D)</span><br><span class="line"></span><br><span class="line">     B. 上一页,      N. 下一页,      C. 取消</span><br><span class="line">-----&gt; [N] N</span><br></pre></td></tr></table></figure></li>
<li><p>界面会显示<code>Installation Manager</code>默认安装的路径，确认后输入<code>N</code>，继续下一项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=====&gt; IBM Installation Manager&gt; 安装&gt; 许可证&gt; 位置</span><br><span class="line"></span><br><span class="line">Installation Manager 安装位置：</span><br><span class="line">        /opt/IBM/InstallationManager/eclipse</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">     L. 更改 Installation Manager 安装位置</span><br><span class="line"></span><br><span class="line">     B. 上一页,      N. 下一页,      C. 取消</span><br><span class="line">-----&gt; [N] N</span><br></pre></td></tr></table></figure></li>
<li><p>安装摘要信息确认，输入<code>I</code>，选择安装。等待安装完成后，输入<code>R</code>重启<code>Installation Manager</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=====&gt; IBM Installation Manager&gt; 安装&gt; 许可证&gt; 位置&gt; 摘要</span><br><span class="line"></span><br><span class="line">目标位置：</span><br><span class="line">  软件包组名                      :  IBM Installation Manager</span><br><span class="line">  安装目录                       :  /opt/IBM/InstallationManager/eclipse</span><br><span class="line"></span><br><span class="line">要安装的软件包：</span><br><span class="line">        IBM Installation Manager 1.6.2</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">     G. 生成安装响应文件</span><br><span class="line"></span><br><span class="line">     B. 上一页,      I. 安装,      C. 取消</span><br><span class="line">-----&gt; [I] I</span><br><span class="line">                 25%                50%                75%                100%</span><br><span class="line">------------------|------------------|------------------|------------------|</span><br><span class="line">............................................................................</span><br><span class="line"></span><br><span class="line">=====&gt; IBM Installation Manager&gt; 安装&gt; 许可证&gt; 位置&gt; 摘要&gt; 完成</span><br><span class="line"></span><br><span class="line">安装已成功完成。</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">     R. 重新启动 Installation Manager</span><br><span class="line">-----&gt; [R] R</span><br></pre></td></tr></table></figure></li>
<li><p>输入<code>X</code>退出<code>Installation Manager</code>。至此，Installation Manager安装完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=====&gt; IBM Installation Manager</span><br><span class="line"></span><br><span class="line">选择：</span><br><span class="line">     1. 安装 - 安装软件包</span><br><span class="line">     2. 更新 - 查找并安装对已安装软件包的更新和修订</span><br><span class="line">     3. 修改 - 更改已安装的软件包</span><br><span class="line">     4. 回滚 - 还原到已安装软件包的较低版本</span><br><span class="line">     5. 卸载 - 除去已安装的软件包。</span><br><span class="line"></span><br><span class="line">其他选项：</span><br><span class="line">     L. 查看日志</span><br><span class="line">     S. 查看安装历史记录</span><br><span class="line">     V. 查看已安装的软件包</span><br><span class="line">        ------------------------</span><br><span class="line">     P. 首选项</span><br><span class="line">        ------------------------</span><br><span class="line">     A. 关于 IBM Installation Manager</span><br><span class="line">        ------------------------</span><br><span class="line">     X. 退出 Installation Manager</span><br><span class="line"></span><br><span class="line">-----&gt; X</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="WAS安装"><a href="#WAS安装" class="headerlink" title="WAS安装"></a>WAS安装</h2><h3 id="安装前准备-1"><a href="#安装前准备-1" class="headerlink" title="安装前准备"></a>安装前准备</h3><ol>
<li>创建目录，解压文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># cd /opt/WebSphereInstallPackage/</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># mkdir wasfp wasnd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压WS-WAS-FP</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d wasfp 8.5.5-WS-WAS-FP017-part1.zip</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d wasfp 8.5.5-WS-WAS-FP017-part2.zip</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d wasfp 8.5.5-WS-WAS-FP017-part3.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压WAS_ND</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d wasnd WAS_ND_V8.5.5_1_OF_3.zip</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d wasnd WAS_ND_V8.5.5_2_OF_3.zip</span></span><br><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># unzip -d wasnd WAS_ND_V8.5.5_3_OF_3.zip</span></span><br></pre></td></tr></table></figure>
解压完的<code>wasnd</code>下的目录结构<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># ll wasnd/</span></span><br><span class="line">总用量 12</span><br><span class="line">-rw-r--r--  1 root root  380 5月  14 2013 Copyright.txt</span><br><span class="line">drwxr-xr-x  5 root root   56 5月  14 2013 disk1</span><br><span class="line">drwxr-xr-x  3 root root   35 5月  14 2013 disk2</span><br><span class="line">drwxr-xr-x  3 root root   35 5月  14 2013 disk3</span><br><span class="line">drwxr-xr-x  2 root root 4096 5月  14 2013 lafiles</span><br><span class="line">drwxr-xr-x 10 root root  156 5月  14 2013 readme</span><br><span class="line">drwxr-xr-x  3 root root   43 5月  14 2013 Remote_Installation_Tool_for_IBM_i</span><br><span class="line">-rw-r--r--  1 root root   81 5月  14 2013 repository.config</span><br><span class="line">drwxr-xr-x  3 root root   21 5月  14 2013 responsefiles</span><br></pre></td></tr></table></figure>
解压完的<code>wasfp</code>下的目录结构<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># ll wasfp</span></span><br><span class="line">总用量 3920</span><br><span class="line">drwxr-xr-x 3 root root     32 2月   9 16:55 atoc</span><br><span class="line">drwxr-xr-x 2 root root 237568 2月   9 16:56 files</span><br><span class="line">drwxr-xr-x 2 root root  65536 7月   9 16:25 native</span><br><span class="line">drwxr-xr-x 2 root root   4096 2月   9 16:56 Offerings</span><br><span class="line">drwxr-xr-x 2 root root   4096 2月   9 16:56 plugins</span><br><span class="line">-rw-r--r-- 1 root root   1284 2月   9 16:56 repository.config</span><br><span class="line">-rw-r--r-- 1 root root 149657 2月   9 16:56 repository.xml</span><br><span class="line">-rw-r--r-- 1 root root 394210 2月   9 16:55 update_com.ibm.websphere.BASETRIAL.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 394676 2月   9 16:55 update_com.ibm.websphere.BASE.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 394218 2月   9 16:56 update_com.ibm.websphere.DEVELOPERSILAN.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 394412 2月   9 16:56 update_com.ibm.websphere.DEVELOPERS.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 394653 2月   9 16:56 update_com.ibm.websphere.EXPRESSTRIAL.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 395131 2月   9 16:56 update_com.ibm.websphere.EXPRESS.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 135101 2月   9 16:56 update_com.ibm.websphere.NDDMZTRIAL.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 135262 2月   9 16:56 update_com.ibm.websphere.NDDMZ.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 411363 2月   9 16:55 update_com.ibm.websphere.NDTRIAL.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br><span class="line">-rw-r--r-- 1 root root 411815 2月   9 16:55 update_com.ibm.websphere.ND.v85_8.5.5017.20200205_1450_from_8.5.0.20120501_1108.xml</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装Websphere"><a href="#安装Websphere" class="headerlink" title="安装Websphere"></a>安装Websphere</h3><ol>
<li>使用<code>Installation Manager</code>安装前面解压的Websphere<br>进入install Manager安装目录<code>cd /opt/IBM/InstallationManager/eclipse/</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 WebSphereInstallPackage]<span class="comment"># cd /opt/IBM/InstallationManager/eclipse/</span></span><br><span class="line">[root@CDH1 eclipse]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
执行<code>./IBMIM</code>，启动Install Manager的界面，使用Install Manager 安装Websphere应用服务器<br><font color='red'>这个启动的时候需要服务器有GUI，也就是有界面，发现使用Xmanager不好使不知道为什么</font></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 eclipse]<span class="comment"># ./IBMIM</span></span><br></pre></td></tr></table></figure>
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_1.png" class="">

<ol start="2">
<li>点击“文件-首选项”，添加Websphere产品的各个组件存储库位置，分别选择<code>/opt/WebSphereInstallPackage/wasnd</code>和<code>/opt/WebSphereInstallPackage/wasfp</code>文件夹下面的仓库配置文件<code>repository.config</code><img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_2.png" class=""></li>
<li>点击“安装”按钮，点击下一步，选择接受协议<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_3.png" class="">
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_4.png" class=""></li>
<li>点击“下一步”，选择共享目录位置，默认即可<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_5.png" class=""></li>
<li>点击“下一步”，为对应的软件包Application Server设置安装目录<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_6.png" class=""></li>
<li>设置好安装目录后，点击“下一步”，如果想在管理控制台显示中文，选择简体中文，再点击“下一步”，如果是测试环境，可勾选”样本应用程序，点击“下一步”<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_7.png" class="">
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_8.png" class=""></li>
<li>显示“摘要信息”，点击“安装”按钮<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_9.png" class=""></li>
<li>完成后，勾选右侧区域中的“无”，点击“完成”按钮<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_10.png" class=""></li>
</ol>
<h2 id="创建Dmgr管理概要文件"><a href="#创建Dmgr管理概要文件" class="headerlink" title="创建Dmgr管理概要文件"></a>创建Dmgr管理概要文件</h2><p>WAS中的概要文件和Weblogic中的domain类似，是WAS中的服务</p>
<h3 id="使用概要管理工具创建概要文件"><a href="#使用概要管理工具创建概要文件" class="headerlink" title="使用概要管理工具创建概要文件"></a>使用概要管理工具创建概要文件</h3><ol>
<li>进入目录<code>/opt/IBM/WebSphere/AppServer/bin/ProfileManagement/</code>，启动<code>./wct.sh</code>，选择概要管理工具，点击启动所选工具<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/IBM/WebSphere/AppServer/bin/ProfileManagement/</span><br><span class="line"><span class="comment"># ./wct.sh</span></span><br></pre></td></tr></table></figure>
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_11.png" class=""></li>
<li>点击“创建”，选择类型为“管理”即Dmgr管理概要文件，点击“下一步”<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_12.png" class=""></li>
<li>选择“Development Manager”，点击“下一步”，选择“高级概要文件创建”，点击“下一步”<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_13.png" class="">
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_14.png" class=""></li>
<li>选择“部署管理控制台（建议）”（这个必选），点击“下一步”，填写<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_15.png" class=""></li>
<li>填写单名、主机名和单元名、特别注意此处填写的主机名必须能通过ping解析为相应的ip地址，否则实例将不能启动。节点名和单元名可随便。点击“下一步”<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_16.png" class=""></li>
<li>填写用户名和密码，用来管理Websphere服务器启动豆浆用到，设置好并记住<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_17.png" class=""></li>
<li>安全证书默认，点击“下一步”，然后再点击“下一步”<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_18.png" class="">
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_19.png" class=""></li>
<li>端口分配，可按照需要选择，点击下一步<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_20.png" class=""></li>
<li>“Linux服务定义”默认，点击“下一步”<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_21.png" class=""></li>
<li>“概要文件创建已完成”界面，去掉“启动第一步…”的勾选，点击完成，创建好的概要文件位置在<code>/opt/IBM/Websphere/AppServer/profiles/</code>目录下<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_22.png" class="">
<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_23.png" class=""></li>
</ol>
<h3 id="通过命令行启动概要管理服务器"><a href="#通过命令行启动概要管理服务器" class="headerlink" title="通过命令行启动概要管理服务器"></a>通过命令行启动概要管理服务器</h3><ol>
<li>进入概要管理文件所在的目录<code>/opt/IBM/WebSphere/AppServer/profiles/Dmgr01/bin</code>，执行<code>./startManager.sh</code>启动管理服务进程，在<code>/opt/IBM/WebSphere/AppServer/profiles/Dmgr01/logs/dmgr/</code>目录下查看对应的日志<code>SystemOut</code>文件，查看启动过程是否正常<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CDH1 bin]<span class="comment"># cd /opt/IBM/WebSphere/AppServer/profiles/Dmgr01/bin</span></span><br><span class="line">[root@CDH1 bin]<span class="comment"># ./startManager.sh</span></span><br><span class="line">ADMU0116I: 正在文件</span><br><span class="line">           /opt/IBM/WebSphere/AppServer/profiles/Dmgr01/logs/dmgr/startServer.log</span><br><span class="line">           中记录工具信息</span><br><span class="line">ADMU0128I: 正在启动具有 Dmgr01 概要文件的工具</span><br><span class="line">ADMU3100I: 正在从服务器读取配置：dmgr</span><br><span class="line">ADMU3200I: 服务器已启动。正在等待初始化状态。</span><br><span class="line">ADMU3000I: 为电子商务开放服务器 dmgr；进程标识为 82127</span><br></pre></td></tr></table></figure>
<h3 id="通过浏览器验证Development-Manager启动成功及管理"><a href="#通过浏览器验证Development-Manager启动成功及管理" class="headerlink" title="通过浏览器验证Development Manager启动成功及管理"></a>通过浏览器验证<code>Development Manager</code>启动成功及管理</h3></li>
<li>在浏览器<a href="https://192.168.2.201:9043/ibm/console">https://192.168.2.201:9043/ibm/console</a>，应该出现Websphere管理控制台登录页面，输入之前记住的账号和密码<img src="/2020/07/09/CentOS7%E4%B8%ADWebsphereV8-5-5-0%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/screenshot_24.png" class="">
如果安装完成，就验证完毕了，已经安装完成</li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>Websphere</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>中间件</tag>
        <tag>Websphere</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7修改静态IP地址</title>
    <url>/2019/02/18/CentOS7%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_4.jpg"></p>
<blockquote>
<p>服务器一般是需要修改成静态的IP地址的，否则在非DHCP下，有可能会出现IP地址变动，远程不到服务器的情况，具体修改的方法如下</p>
</blockquote>
<ol>
<li>第一步是先看下自己服务器对应的正在使用的网卡地址，左面对应的是网络配置文件中配置的名字，后面会讲到<br><code>[daniel@localhost ~]$ ifconfig </code><img src="/2019/02/18/CentOS7%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/screenshot_1.png" class=""></li>
<li>找到对应的网络配置文件<br><code># vim /etc/sysconfig/network-scripts/ifcfg-+上面那个第一红方框中的文件名</code></li>
<li>主要修改的内容如下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot; #dhcp改为static   </span><br><span class="line">ONBOOT=&quot;yes&quot; #开机启用本配置  </span><br><span class="line">IPADDR=192.168.7.106 #静态IP  </span><br><span class="line">GATEWAY=192.168.7.1 #默认网关  </span><br><span class="line">NETMASK=255.255.255.0 #子网掩码  </span><br><span class="line">DNS1=192.168.7.1 #DNS 配置</span><br></pre></td></tr></table></figure>
修改后的效果如下<img src="/2019/02/18/CentOS7%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/screenshot_2.png" class=""></li>
<li>重启网络服务<br><code>#service network restart</code></li>
<li>查看改动后的效果，Centois 7 不再使用 ifconfig 而是用 ip 命令查看网络信息<img src="/2019/02/18/CentOS7%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/screenshot_3.png" class=""></li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS7</tag>
        <tag>静态IP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7升级OpenSSL</title>
    <url>/2021/02/01/CentOS7%E5%8D%87%E7%BA%A7OpenSSL/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_96.jpg"><br>本文引自<a href="https://www.cnblogs.com/v-fan/p/11026895.html#commentform">centos7升级openssl、openssh常见问题及解决方法</a><br><font color='red'>升级OpenSSL是个大坑，一不注意有可能就会出现远程不上的问题，首先一定要先安装telnet，这里说下Telnet协议，好像安全性不及SSH协议，因此被弃用了，但是这里为了以防万一，出现远程不上，因此先安装Telnet</font></p>
<h2 id="下载及解压"><a href="#下载及解压" class="headerlink" title="下载及解压"></a>下载及解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建下载路径</span></span><br><span class="line">[root@xxx ~]<span class="comment"># mkdir /home/download</span></span><br><span class="line">[root@xxx ~]<span class="comment"># cd /home/download</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载OpenSSL；下载地址的获取方式：浏览器打开https://www.openssl.org/-&gt;点击页面顶部标签Download-&gt;往下拉，会出现一个列表，在列表里面会有对应版本，右键复制地址就是对应版本的下载地址了</span></span><br><span class="line">[root@xxx ~]<span class="comment"># wget https://www.openssl.org/source/openssl-1.1.1i.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载OpenSSH；下载地址的获取方式：打开OpenSSH官网https://www.openssh.com/-&gt;点击左侧的`For other systems`中的`Linux`-&gt;打开的新页面中往下拉看到Download-&gt;点击Download中的`HTTP mirrors`，从镜像中随意找个离你比较近的服务器镜像下载即可，这里选择的是第一个</span></span><br><span class="line">[root@xxx ~]<span class="comment">#</span></span><br><span class="line">wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-8.0p1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压OpenSSL</span></span><br><span class="line">tar -zxvf openssl-1.1.1i.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压OpenSSH</span></span><br><span class="line">tar -zxvf openssh-8.0p1.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="安装telnet（防止升级失败连不上服务器）"><a href="#安装telnet（防止升级失败连不上服务器）" class="headerlink" title="安装telnet（防止升级失败连不上服务器）"></a>安装telnet（防止升级失败连不上服务器）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看是否安装了telnet服务</span></span><br><span class="line">[root@xxx ~]<span class="comment"># rpm -qa|grep telnet</span></span><br><span class="line">[root@xxx ~]<span class="comment"># rpm -qa|grep xinetd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装，yum安装下</span></span><br><span class="line">[root@xxx ~]<span class="comment"># yum install telnet*</span></span><br><span class="line">[root@xxx ~]<span class="comment"># yum install xinetd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将服务开机自启</span></span><br><span class="line">[root@xxx ~]<span class="comment"># systemctl enable xinetd.service</span></span><br><span class="line">[root@xxx ~]<span class="comment"># systemctl enable telnet.socket</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">[root@xxx ~]<span class="comment"># systemctl start telnet.socket</span></span><br><span class="line">[root@xxx ~]<span class="comment"># systemctl start xinetd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@xxx ~]<span class="comment"># vim /etc/securetty</span></span><br><span class="line"><span class="comment"># 在最后面添加下面两行</span></span><br><span class="line">pts/0</span><br><span class="line">pts/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启xinetd</span></span><br><span class="line">[root@xxx ~]<span class="comment"># systemctl restart xinetd</span></span><br><span class="line">[root@xxx ~]<span class="comment"># netstat -ntlp|grep 23</span></span><br></pre></td></tr></table></figure>

<h2 id="升级OpenSSL"><a href="#升级OpenSSL" class="headerlink" title="升级OpenSSL"></a>升级OpenSSL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看原版本</span></span><br><span class="line">[root@xxx ~]<span class="comment"># openssl version -a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查环境</span></span><br><span class="line">[root@xxx ~]<span class="comment"># cd /home/download/openssl-1.1.1i</span></span><br><span class="line">[root@xxx ~]<span class="comment"># ./config --prefix=/usr/local/openssl</span></span><br><span class="line">[root@xxx ~]<span class="comment"># ./config -t</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译&amp;安装</span></span><br><span class="line">[root@xxx ~]<span class="comment"># make</span></span><br><span class="line">[root@xxx ~]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查函数库</span></span><br><span class="line">[root@xxx ~]<span class="comment"># ldd /usr/local/openssl/bin/openssl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所缺函数库</span></span><br><span class="line">[root@xxx ~]<span class="comment"># echo &quot;/usr/local/openssl/lib&quot; &gt;&gt; /etc/ld.so.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新函数库</span></span><br><span class="line">[root@xxx ~]<span class="comment"># ldconfig -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装完成的版本</span></span><br><span class="line">[root@xxx ~]<span class="comment"># /usr/local/openssl/bin/openssl version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看旧版本的openssl命令在哪里，要进行备份和替换</span></span><br><span class="line">[root@xxx ~]<span class="comment"># which openssl</span></span><br><span class="line"><span class="comment"># 将旧版本的openssl备份</span></span><br><span class="line">[root@xxx ~]<span class="comment"># mv /bin/openssl /usr/bin/openssl.bak20210201</span></span><br><span class="line"><span class="comment"># 建立新版本的软链接</span></span><br><span class="line">[root@xxx ~]<span class="comment"># ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span></span><br><span class="line"><span class="comment"># 查看安装完的版本</span></span><br><span class="line">[root@xxx ~]<span class="comment"># openssl version</span></span><br><span class="line">OpenSSL 1.1.1i  8 Dec 2020</span><br></pre></td></tr></table></figure>

<h2 id="升级OpenSSH"><a href="#升级OpenSSH" class="headerlink" title="升级OpenSSH"></a>升级OpenSSH</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份旧版本</span></span><br><span class="line">[root@xxx ~]<span class="comment"># mv /etc/ssh /etc/ssh.bak20210201</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">[root@xxx ~]<span class="comment"># cd /home/download/openssh-8.0p1</span></span><br><span class="line">[root@xxx ~]<span class="comment"># ./configure --prefix=/usr/local/openssh --sysconfdir=/etc/ssh --with-pam --with-ssl-dir=/usr/local/openssl --with-md5-passwords --mandir=/usr/share/man --with-zlib=/usr/local/zlib --without-hardening</span></span><br></pre></td></tr></table></figure>
<p>编译过程中有可能会出现的两个错误，如果没有出现可以直接Pass该部分，如果出现了，按照对应的问题解决即可</p>
<p><strong>问题1：</strong><code>configure:error:***OpenSSL headers missing - please install first or check config.log ***</code><br>修复方案： yum install openssl-devel</p>
<p><strong>问题2：</strong> <code>configure:error:PAM headers not found</code><br>修复方案：yum install pam-devel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译&amp;&amp;安装</span></span><br><span class="line">[root@xxx ~]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改启动脚本</span></span><br><span class="line"><span class="comment"># 拷贝启动脚本</span></span><br><span class="line">[root@xxx ~]<span class="comment"># cp ./contrib/redhat/sshd.init /etc/init.d/sshd</span></span><br></pre></td></tr></table></figure>
<p><strong>修改内容如下：</strong></p>
<ol>
<li><p>修改SSHD<code>vim /etc/init.d/sshd</code>的内容，对比下相关内容，修改成如图对应内容即可</p>
<img src="/2021/02/01/CentOS7%E5%8D%87%E7%BA%A7OpenSSL/screenshot_1.png" class=""></li>
<li><p>修改sshd配置文件<code>/etc/ssh/sshd_config</code>，编辑的时候使用搜查查询到以下关键词，修改为对应的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">X11Forwarding yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>
<p>修改外后的效果见下图</p>
<img src="/2021/02/01/CentOS7%E5%8D%87%E7%BA%A7OpenSSL/screenshot_2.png" class=""></li>
</ol>
<p>继续</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原有的ssh</span></span><br><span class="line">[root@xxx ~]<span class="comment"># for  i   in  $(rpm  -qa  |grep  openssh);do  rpm  -e  $i  --nodeps ;done</span></span><br><span class="line"><span class="comment"># 这个地方执行的时候会弹出几个warning,把waring后面的文件名再改回来</span></span><br><span class="line">[root@xxx ~]<span class="comment"># mv /etc/ssh/sshd_config.rpmsave /etc/ssh/sshd_config</span></span><br><span class="line">[root@xxx ~]<span class="comment"># mv /etc/ssh/ssh_config.rpmsave /etc/ssh/ssh_config</span></span><br><span class="line">[root@xxx ~]<span class="comment"># mv /etc/ssh/moduli.rpmsave /etc/ssh/moduli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换相关命令，重启sshd服务</span></span><br><span class="line">[root@xxx ~]<span class="comment"># cp -arp /usr/local/openssh/bin/* /usr/bin/</span></span><br><span class="line">[root@xxx ~]<span class="comment"># service sshd restart</span></span><br><span class="line"><span class="comment"># 验证升级，让其他人telnet下服务器IP地址的22端口，如果显示SSH-2.0-OpenSSH_8.0表示成功了</span></span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">[root@xxx ~]<span class="comment"># chkconfig --add sshd</span></span><br><span class="line">[root@xxx ~]<span class="comment"># chkconfig --level 2345 sshd on</span></span><br><span class="line">[root@xxx ~]<span class="comment"># chkconfig --list</span></span><br></pre></td></tr></table></figure>

<h2 id="关闭telnet相关服务"><a href="#关闭telnet相关服务" class="headerlink" title="关闭telnet相关服务"></a>关闭telnet相关服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">systemctl stop telnet.socket</span><br><span class="line">systemctl stop xinetd</span><br><span class="line">systemctl <span class="built_in">disable</span> xinetd.service</span><br><span class="line">systemctl <span class="built_in">disable</span> telnet.socket</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7卸载默认openjdk并安装新的JDK</title>
    <url>/2019/02/18/CentOS7%E5%8D%B8%E8%BD%BD%E9%BB%98%E8%AE%A4openjdk%E5%B9%B6%E5%AE%89%E8%A3%85%E6%96%B0%E7%9A%84JDK/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_6.jpg"></p>
<blockquote>
<p>通常CentOS会安装OpenJDK，因为这是JDK开源的分支，也就是后期不会收费的（目前Oracle受够Java之后，应该是准备进行收费的），但是项目中要使用的是官方的JDK，因此需要进行替换，所以需要进行如下的操作</p>
</blockquote>
<ol>
<li><p>首先第一步是查询是否安装了openjdk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">rpm -qa | grep java或者rpm -qa | grep jdk</span><br></pre></td></tr></table></figure>
<img src="/2019/02/18/CentOS7%E5%8D%B8%E8%BD%BD%E9%BB%98%E8%AE%A4openjdk%E5%B9%B6%E5%AE%89%E8%A3%85%E6%96%B0%E7%9A%84JDK/screenshot_1.png" class=""></li>
<li><p>执行卸载命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove java 红色框中的内容</span><br><span class="line">或者</span><br><span class="line">rpm -e --nodeps 红色框中的内容</span><br></pre></td></tr></table></figure></li>
<li><p>安装jdk<br>wget 下载地址<br>从jdk官网下载jdk，对应的版本是<a href="http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz?AuthParam=1484402679_fcd52afad2d006c2f4d31c50b4e7b6b8">http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz?AuthParam=1484402679_fcd52afad2d006c2f4d31c50b4e7b6b8</a></p>
</li>
<li><p>下载完成后进行解压操作，并移动到/usr/local</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf 下载下来的tar.gz 的安装包</span><br><span class="line">mv jdk1.8.0_111/ /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>
<img src="/2019/02/18/CentOS7%E5%8D%B8%E8%BD%BD%E9%BB%98%E8%AE%A4openjdk%E5%B9%B6%E5%AE%89%E8%A3%85%E6%96%B0%E7%9A%84JDK/screenshot_2.png" class=""></li>
<li><p>配置环境变量<br>编辑<code>/etc/profile</code>文件，在最后添加如下内容,然后保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_111</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_111/jre</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib</span><br></pre></td></tr></table></figure>
<img src="/2019/02/18/CentOS7%E5%8D%B8%E8%BD%BD%E9%BB%98%E8%AE%A4openjdk%E5%B9%B6%E5%AE%89%E8%A3%85%E6%96%B0%E7%9A%84JDK/screenshot_3.png" class=""></li>
<li><p>执行编译，使配置文件生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. /etc/profile</span><br><span class="line">或者</span><br><span class="line">切换到etc文件夹下面执行</span><br><span class="line">./profile</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>JDK</tag>
        <tag>安装JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装SVN</title>
    <url>/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_35.jpg"></p>
<h2 id="安装SVN"><a href="#安装SVN" class="headerlink" title="安装SVN"></a>安装SVN</h2><ol>
<li>通过 yum install subversion来安装<img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_1.png" class=""></li>
<li>提示已经安装。查看svn版本使用:  <code>svnserve –-version</code><img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_2.png" class=""></li>
<li>使用命令: <code>svnadmin create svn/repo</code><img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_3.png" class=""></li>
<li>进入版本库中的配置目录<code>conf</code>，此目录有三个文件： <code>svn</code>服务综合配置文件、 用户名口令文件、权限配置文件<img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_4.png" class=""></li>
<li>配置权限配置文件authz<br>说明：两个站点为bbs,blog,所以分为三个组超级管理组admin、bbs管理组bbsadmin、blog管理组blogadmin。超级管理组admin可以读写所有站点内容，而bbsadmin对bbs站点可以读写，而只能读blog站点。以及blogadmin对blog站点可以读写,对bbs站点只读。<img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_5.png" class=""></li>
<li>配置用户口令文件passwd,添加组用户以及密码<img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_6.png" class=""></li>
<li>配置 svn服务综合配置文件<code>svnserve.conf</code>，取消以下项目的注释，其中一定要注意<code>anon-access=none</code>，因为这个是要看历史版本用的<img src="/2019/02/19/CentOS7%E5%AE%89%E8%A3%85SVN/screenshot_7.png" class="">
<h2 id="启用-关闭svn"><a href="#启用-关闭svn" class="headerlink" title="启用/关闭svn"></a>启用/关闭svn</h2></li>
<li>启动SVN<br><code>svnserve -d -r /home/svn/project/</code></li>
<li>关闭svn<br>通过<code>ps -aux|grep svn</code> 查看到的<code>svn</code>进程<code>id</code>来进行关闭</li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>CentOS7</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7防火墙端口号相关</title>
    <url>/2019/02/18/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E5%8F%B7%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_8.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --list-all-zones    #查看所有的zone信息</span></span><br><span class="line"><span class="comment"># firewall-cmd --get-default-zone     #查看默认zone是哪一个</span></span><br><span class="line"><span class="comment"># firewall-cmd --zone=internal --change-zone=p3p1  #临时修改接口p3p1所属的zone为internal</span></span><br><span class="line"><span class="comment"># firewall-cmd --add-service=http    #暂时开放http</span></span><br><span class="line"><span class="comment"># firewall-cmd --permanent --add-service=http  #永久开放http</span></span><br><span class="line"><span class="comment"># firewall-cmd --zone=public --add-port=80/tcp --permanent  #在public中永久开放80端口</span></span><br><span class="line"><span class="comment"># firewall-cmd --permanent --zone=public --remove-service=ssh   #从public zone中移除服务</span></span><br><span class="line"><span class="comment"># firewall-cmd --reload   #重新加载配置</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS7</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7.1安装MySQL</title>
    <url>/2019/02/19/Centos7-1%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_25.jpg"></p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></span><br><span class="line"><span class="comment"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span></span><br><span class="line"><span class="comment"># yum install mysql-community-server</span></span><br><span class="line">安装成功后重启mysql服务。</span><br><span class="line"><span class="comment"># service mysqld restart</span></span><br></pre></td></tr></table></figure>


<h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@yl-web yl]<span class="comment"># mysql -u root</span></span><br></pre></td></tr></table></figure>
<img src="/2019/02/19/Centos7-1%E5%AE%89%E8%A3%85MySQL/screenshot_1.png" class="">

<h2 id="显示已有数据库"><a href="#显示已有数据库" class="headerlink" title="显示已有数据库"></a>显示已有数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br></pre></td></tr></table></figure>
<img src="/2019/02/19/Centos7-1%E5%AE%89%E8%A3%85MySQL/screenshot_2.png" class="">

<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>不需要重启数据库即可生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> =password(<span class="string">&#x27;password&#x27;</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/02/19/Centos7-1%E5%AE%89%E8%A3%85MySQL/screenshot_3.png" class="">

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>配置Mysqlmysql配置文件为/etc/my.cnf</p>
<img src="/2019/02/19/Centos7-1%E5%AE%89%E8%A3%85MySQL/screenshot_4.png" class="">

<h2 id="远程设置"><a href="#远程设置" class="headerlink" title="远程设置"></a>远程设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;create user <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span>;  //创建用户</span><br><span class="line">mysql&gt; grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span>identified by <span class="string">&#x27;password&#x27;</span>;//把在所有数据库的所</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"><span class="comment"># 有表的所有权限赋值给位于所有IP地址的root用户。</span></span><br><span class="line"><span class="comment"># 查看mysql授权用户列表  </span></span><br><span class="line">select distinct contact(<span class="string">&#x27;user:&#x27;</span>,user,<span class="string">&#x27;host:&#x27;</span>,host) from mysql.user;</span><br></pre></td></tr></table></figure>
<h2 id="开放服务器对应的3306端口号"><a href="#开放服务器对应的3306端口号" class="headerlink" title="开放服务器对应的3306端口号"></a>开放服务器对应的3306端口号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=3306/tcp --permanent //添加端口号</span><br><span class="line">firewall-cmd --reload //重新加载端口</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>设置<code>mysql</code>数据库不区分大小写  在<code>/etc/mg.cnf</code>的<code>[msqld]</code>节点下面增加<code>lower_case_table_names=1</code> 然后重启<code>mysql</code>数据库就可以了</li>
</ul>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>MySQL</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie、Session、Token、OAuth2解析</title>
    <url>/2020/02/23/Cookie%E3%80%81Session%E3%80%81Token%E3%80%81OAuth2%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_77.jpg"></p>
<h1 id="认证（Authentication）和授权（Authorization）"><a href="#认证（Authentication）和授权（Authorization）" class="headerlink" title="认证（Authentication）和授权（Authorization）"></a>认证（Authentication）和授权（Authorization）</h1><ul>
<li>认证（Authentication）：登录，也就是你是谁，验证你身份的凭据，例如用户名和密码，通过这个凭据，系统能够知道你是谁，也就是说系统存在你这个用户，所以Authentication被称为身份/用户验证</li>
<li>授权（Authorization）：权限，也就是你能够干什么，其发生在Authentication之后，长官你访问的权限，比如有些特定资源只能具有特定权限的人才能够访问，有些系统资源操作比如删除、添加、更新只有特定的人才能具有</li>
</ul>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie是什么，有什么作用"><a href="#Cookie是什么，有什么作用" class="headerlink" title="Cookie是什么，有什么作用"></a>Cookie是什么，有什么作用</h2><p>Cookie和Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。<br>Cookie：Cookies是某些网站为了辨别客户身份二存储在用户本地终端上的数据（通常是加密过的）。简单来说，Cookie存放在客户端，一般用来保存用户信息。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>首先要知道HTTP是无状态的，意思是HTTP协议对交互场景没有记忆能力，简单来说就是很多人请求html资源文件时，每次请求，每个人的请求，返回的内容都是一样的，返回的都是相同的内容，也就是HTTP协议没法记录你是你这块的信息，没法区分你和别人的信息，就像你购物的时候，应该是你登陆账号显示的是你的订单的数据，别人登录显示别人的订单数据，但是HTTP协议无法是你还是别人</p>
<ol>
<li>在Cookie中保存已经登陆过的用户信息，下次访问网站的时候页面可以自动帮你登陆的一些基本信息给填了。除此之外，Cookie还能保存用户的首选项，主题和其他设置信息</li>
<li>使用Cookie保存session或者token，向后端发送请求的时候带上Cookie，这样后端就能够取到session或者token了。这样就能够记录用户当前的状态了</li>
<li>Cookie还可以用来记录和分析用户的行为。举个简单的例子，你在网站上购物的时候，因为HTTP协议无状态，如果服务器想要获取你在某个网页的停留状态或者看哪些商品，一种常用的方式就是将这些信息存放在Cookie中，当你再打开APP或者继续刷新产品列表的时候可以根据Cookie中存储的信息给你进行产品的推荐或者后台进行相应的数据分析，你停留的时间长了，说不定你对产品的关注度就高，有想买的想法，从而对你的推荐进行优化，推荐你经常停留的产品</li>
</ol>
<h2 id="服务端使用Cookie"><a href="#服务端使用Cookie" class="headerlink" title="服务端使用Cookie"></a>服务端使用Cookie</h2><h3 id="服务端设置Cookie返回客户端"><a href="#服务端设置Cookie返回客户端" class="headerlink" title="服务端设置Cookie返回客户端"></a>服务端设置Cookie返回客户端</h3><ol>
<li>常规设置方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/change-username&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">setCookie</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个 cookie</span></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Jovan&quot;</span>);</span><br><span class="line">    <span class="comment">//设置 cookie过期时间</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>); <span class="comment">// expires in 7 days</span></span><br><span class="line">    <span class="comment">//添加到 response 中</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Username is changed!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="读取客户端传上来的Cookie的值"><a href="#读取客户端传上来的Cookie的值" class="headerlink" title="读取客户端传上来的Cookie的值"></a>读取客户端传上来的Cookie的值</h3><ol>
<li>使用Spring注解<code>@CookieValue</code>获取指定Cookie的值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getSpecifiedCookie&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSpecifiedCookie</span><span class="params">(<span class="meta">@CookieValue(value=&quot;username&quot;,defaultValue=&quot;tempUsername&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hey! Your Cookie save your Name is &quot;</span>+username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>读取所有的Cookie的值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getAllCookies&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAllCookies</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">  Cookie[] cookies = request.getCookies();</span><br><span class="line">  <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(cookies).map(c-&gt;c.getName()+<span class="string">&quot;=&quot;</span>+c.getValue()).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;No Cookie&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h1><p><strong>Session的主要作用就是利用服务端记录用户的状态。</strong>典型的场景就是购物车，当你添加商品到购物车的时候，系统不知道是哪个用户操作的。服务端给特定的用户创建特定的Session之后就可以标识这个用户并且将商品添加到你的购物车中。<br><font color='red'>Cookie数据保存在客户端（浏览器），Session数据保存在服务端。相对来说Session的安全性更高。如果使用Cookie，一些敏感信息就不要写入Cookie中，最好能将Cookie信息加密后使用，到时候再去服务器端解密</font></p>
<h2 id="使用Session进行身份验证"><a href="#使用Session进行身份验证" class="headerlink" title="使用Session进行身份验证"></a>使用Session进行身份验证</h2><p>很多时候我们通过SessionID来识别对应的客户，SessionID一般会存放在Redis中。举个例子：用户成功登陆系统后，然后返回给客户端具有SessionID的Cookie，当用户发起后端请求的时候，会把SessionID带上，这样后端就知道你的身份状态了，下图详解过程：</p>
<img src="/2020/02/23/Cookie%E3%80%81Session%E3%80%81Token%E3%80%81OAuth2%E8%A7%A3%E6%9E%90/Session-Based-Authentication-flow.png" class="">
<p><strong>步骤解析：</strong></p>
<ol>
<li>用户想服务器发送用户名和密码用于登陆系统</li>
<li>服务器验证通过后，服务器为用户创建一个Session，并将Session信息存储起来</li>
<li>服务器向用户返回一个SessionID，写入用户的Cookie</li>
<li>当用户保持登录状态时，Cookie将于每个后续请求一起发送出去</li>
<li>服务器可以将存储在Cookie上的SessionID与存储在内存中或者数据库中的Session信息进行比较，来验证用户的身份，返回用户客户端相应的信息的时候会附带用户当前的登录状态。</li>
</ol>
<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><h2 id="Token定义"><a href="#Token定义" class="headerlink" title="Token定义"></a>Token定义</h2><p>上面我们讨论了使用Session来鉴别用户身份。我们知道Session信息需要保存一份在服务端。这种方式会带来一些麻烦，比如需要我们保存Session信息服务器的可用心、不适用于移动端APP（移动端没有Cookie）等，为了解决这个问题，Token就上场了。JWT（JSON Web Token）就是通过Token实现的用户信息的数据保存，而不保存Session数据了，只要在客户端保存服务端返回给客户的Token就可以了。<br>JWT本质上就是一段签名的JSON格式的数据。由于带有签名，因此接收者就可以验证它的真实性。</p>
<p>JWT的构成：</p>
<ol>
<li>Header：描述JWT的源数据。定义了生成签名的算法及Token的类型</li>
<li>Payload：负载，就是用来存放实际需要传递的数据</li>
<li>Signature：签名，服务器通过Patload、Hreader和一个密钥（secret）使用Header里面指定的签名算法生成，默认算法是HMAC SHA256</li>
</ol>
<p>在基于Token进行身份验证的应用中，服务器通过Payliad、Header和一个密钥secret创建一个令牌，也就是Token并将Token发送给客户端，客户端将Token保存在Cookie或者localStorage里面，以后客户端发出的请求都会携带这个令牌。你就可以把放在Cookie里面自动发，但是这样是没法跨域的，所以更好的做法是放在HTTP Header的Authorzation字段中：<code>Authorization: Bearer &lt;token&gt;</code></p>
<img src="/2020/02/23/Cookie%E3%80%81Session%E3%80%81Token%E3%80%81OAuth2%E8%A7%A3%E6%9E%90/Token-Based-Authentication.png" class="">

<p><strong>步骤解析：</strong></p>
<ol>
<li>用户向服务器发送用户名和密码用于登陆系统</li>
<li>身份验证服务相应返回了签名的JWT，上面包含了用户是谁的内容</li>
<li>用户以后每次想后端发送请求都在Header中带上JWT</li>
<li>服务端检查JWT并从中获取用户相关信息</li>
</ol>
<h2 id="JWT的几个特点"><a href="#JWT的几个特点" class="headerlink" title="JWT的几个特点"></a>JWT的几个特点</h2><ol>
<li>JWT默认是不加密的，但是也可以加密。生成原始Token以后，可以用密钥再加密一次。</li>
<li>JWT不加密的情况下，不能将秘密数据写入JWT</li>
<li>JWT不仅可以用于认证，也可以用于交换信息。有效使用JWT，可以降低服务器查询数据库的次数</li>
<li>JWT 最大的缺点是，由于服务器不保存session状态，因此无法在使用过程中废止某个token，或者更改token的权限。也就是说，一旦JWT签发后，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li>
<li>JWT本身会包含认证信息，一旦泄露，任何人都可以获得该令牌的权限。为了减少盗用，JWT的有效期应该设置的比较短。对于一些比较重要的权限，使用时，应该再次对用户进行认证。</li>
<li>为了减少盗用，JWT不应该使用HTTP协议明码传输，要使用HTTPS协议传输</li>
</ol>
<h1 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h1><h2 id="什么是OAuth2-0"><a href="#什么是OAuth2-0" class="headerlink" title="什么是OAuth2.0"></a>什么是OAuth2.0</h2><p>OAuth是一个行业的标准授权协议，主要是来授权第三方应用获取有限的网页权限。实际上他是一种授权机制，他的最终目的是为第三方办法一个有时效性的令牌token，是的第三方能够通过该令牌获取相应的资源。</p>
<ul>
<li><code>resource owner</code>:资源所有者，能够允许访问受保护资源的实体</li>
<li><code>resource server</code>:资源服务器，托管受保护资源的服务器</li>
<li><code>client</code>：客户端，使用资源所有者的授权代表资源所有者发起对受保护资源的请求的应用程序</li>
<li><code>authorization server</code>: 授权服务器，能够向客户端颁发令牌</li>
<li><code>user-agent</code>:用户代理，帮助资源所有者与客户端沟通的工具，一般为web浏览器，移动APP等<br>简单来说：加入想在某个网站上用QQ的账号登录，那这个网站就相当于QQ的客户端。而我们使用浏览器操作，浏览器就是一个用户代理。当从QQ授权服务器获得token后，这个网站是需要请求qq账号信息的，从哪里请求，从QQ的资源服务器上请求<img src="/2020/02/23/Cookie%E3%80%81Session%E3%80%81Token%E3%80%81OAuth2%E8%A7%A3%E6%9E%90/oauth2-roles.jpg" class=""></li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>OAuth2.0比较常用的场景就是三方登录，当你的网站接入第三方登录一般都是使用的OAuth2.0协议，具体的使用方法，可以使用下面这个网站</p>
<blockquote>
<p><a href="https://deepzz.com/post/what-is-oauth2-protocol.html">10 分钟理解什么是 OAuth 2.0 协议</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Session</tag>
        <tag>Cookie</tag>
        <tag>Token</tag>
        <tag>OAuth2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>DB2数据表Oracle数据库导入</title>
    <url>/2019/03/01/DB2%E6%95%B0%E6%8D%AE%E8%A1%A8Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_41.jpg"></p>
<blockquote>
<p>本操作手册用作从信贷系统导出操作员基本数据、机构信息数据等基础数据，然后在客户管理平台中导入的引导手册</p>
</blockquote>
<h2 id="基础数据准备"><a href="#基础数据准备" class="headerlink" title="基础数据准备"></a>基础数据准备</h2><p>需要先从行方获取对应的数据，获取数据的对应规则和对应字段的顺序一定要给行方人员说明清楚，然后他根据规则从信贷系统中根据你要的规则从<code>DB2</code>中导出数据，导出的文件是<code>.del</code>类型的文件</p>
<h2 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h2><ol>
<li>将行方给的<code>.del</code>文件放到服务器上，记录下路径，本例为<code>/home/20190301/user.del</code></li>
<li>创建临时表</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只需要创建一个表结构相同的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SYS_OPER_TEMP <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYS_OPER <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 下面只会显示表的结构，没有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYS_OPER_TEMP;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改下这块代码中的**<font color='red'>第二行</font><strong>为第一步中的路径，修改</strong><font color='red'>第三行</font><strong>为你要导入的表，这个地方最好是创建一个临时表，防止与服务器的数据冲突造成业务异常，同时还需要保证要导入的表不能有数据，</strong><font color='red'>第六行</font>**的括号里面包裹的内容是上面创建的临时表的字段，而且字段的顺序要和<code>del</code>文件的顺序保持一致，然后保存为一个<code>.ctl</code>的文件，本例为<code>SYS_OPER_TEMP.ctl</code>，然后将这个文件也上传到<code>/home/20190301</code>目录下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data</span><br><span class="line">infile &quot;&#x2F;home&#x2F;20190301&#x2F;org.del&quot;</span><br><span class="line">into table SYS_OPER_TEMP</span><br><span class="line">fields terminated by &quot;,&quot; optionally enclosed by &#39;&quot;&#39;</span><br><span class="line">trailing nullcols</span><br><span class="line">(</span><br><span class="line">	   USERID,</span><br><span class="line">       USERNAME,</span><br><span class="line">       LOGINID,</span><br><span class="line">       DEPTID,</span><br><span class="line">       ORGID,</span><br><span class="line">       PHONENUM,</span><br><span class="line">       IDCARDNO</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>远程登录服务器执行<code>su - oracle</code>切换到<code>oracle</code>用户，然后执行<code>sqlplus /nolog</code>，登录Oracle</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@MCDB ~]<span class="comment"># su - oracle</span></span><br><span class="line">上一次登录：五 3月  1 23:53:37 CST 2019pts/2 上</span><br><span class="line">-bash: $<span class="string">&#x27;\302\240&#x27;</span>: <span class="built_in">command</span> not found</span><br><span class="line">[oracle@MCDB ~]$ sqlplus /nolog</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.4.0 Production on Fri Mar 1 23:58:49 2019</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2013, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行下面的命令，开始导入数据（执行前需要修改成自己的路径和文件）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">host sqlldr userid=jnmcbusi/123456@jnmcdb control=/home/20190301/SYS_OPER_TEMP.ctl <span class="built_in">log</span>=/home/ctl/user.log</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>剩下的就是从临时表更新业务表了</li>
</ol>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>Oracle查询一个表的数据更新另一张表的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> SYS_OPER T1</span><br><span class="line"><span class="keyword">USING</span> (<span class="keyword">SELECT</span> USERID, ORGID, DEPTID, USERNAME, LOGINID, PHONENUM, IDCARDNO</span><br><span class="line">         <span class="keyword">FROM</span> SYS_OPER_TEMP) T2</span><br><span class="line"><span class="keyword">ON</span> (T1.USERID <span class="operator">=</span> T2.USERID)</span><br><span class="line"><span class="keyword">WHEN</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line">  UPDATE <span class="keyword">SET</span> T1.ORGID <span class="operator">=</span> T2.ORGID, T1.DEPTID <span class="operator">=</span> T2.DEPTID</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line">  <span class="keyword">INSERT</span></span><br><span class="line">    (USERID,</span><br><span class="line">     ORGID,</span><br><span class="line">     DEPTID,</span><br><span class="line">     USERNAME,</span><br><span class="line">     LOGINID,</span><br><span class="line">     PASSWORD,</span><br><span class="line">     PHONENUM,</span><br><span class="line">     IDCARDNO)</span><br><span class="line">  <span class="keyword">VALUES</span></span><br><span class="line">    (T2.USERID,T2.ORGID,T2.DEPTID,T2.USERNAME,T2.LOGINID,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,T2.PHONENUM,T2.IDCARDNO);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>DB2</tag>
        <tag>数据导入导出</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse中Tomcat热部署问题</title>
    <url>/2019/02/24/Eclipse%E4%B8%ADTomcat%E7%83%AD%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_38.jpg"></p>
<blockquote>
<p>最近接了一个比较坑的项目，用的是Eclipse，而且插件都是老古董级别的，因此有很多不兼容或者异常的问题，而且之前都是用的MyEclipse或者IDEA，这次用Eclipse突然间各种不适应，特别是Tomcat的问题，一修改文件就自己重启，因此查了下，发现这个方案是可以修复的，具体的步骤如下</p>
</blockquote>
<ol>
<li><p>找到Servers，然后双击你需要修改的Tomcat，具体界面如下</p>
<img src="/2019/02/24/Eclipse%E4%B8%ADTomcat%E7%83%AD%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/screenshot_1.png" class=""></li>
<li><p>打开Tomcat配置界面后，下面会分成两个TAB页卡，点击<code>Modules</code></p>
<img src="/2019/02/24/Eclipse%E4%B8%ADTomcat%E7%83%AD%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/screenshot_2.png" class=""></li>
<li><p>选择项目，点击Edit按钮，然后去掉Auto Reloading…的复选框，点击Ok，关闭配置页面，操作见下图</p>
<img src="/2019/02/24/Eclipse%E4%B8%ADTomcat%E7%83%AD%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/screenshot_3.png" class=""></li>
<li><p>在项目栏中找到Servers，打开它下面的<code>server.xml</code>，将Context中的<code>reloadable修改为false</code>，如果没有，需要说动添加，具体见下图</p>
</li>
</ol>
<img src="/2019/02/24/Eclipse%E4%B8%ADTomcat%E7%83%AD%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/screenshot_4.png" class="">

<blockquote>
<p>本文引自<a href="https://blog.csdn.net/evilcry2012/article/details/54138076/">Eclipse下设置tomcat,修改Java代码不必重启tomcat</a></p>
</blockquote>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>热部署</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex布局-基础篇</title>
    <url>/2020/02/12/Flex%E5%B8%83%E5%B1%80-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_74.jpg"></p>
<blockquote>
<p>本文引自<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a></p>
</blockquote>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>The Flexbox Layout (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).<br>Flex布局是W3C推荐的一种更有效的布局方式，即使他们的大小都是未知的或者动态的，都可以进行合理的布局</p>
</blockquote>
<blockquote>
<p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow.<br>flex布局的主要思想是使容器能够更改其项目的宽度/高度（和顺序），以最好地填充可用空间（主要是适应各种显示设备和屏幕尺寸），Flex容器会扩展项目以填充可用的可用空间，或收缩它们以防止溢出。（这里的项目个人理解是容器中的对象，以DOM为例，那就是子标签了）</p>
</blockquote>
<blockquote>
<p>Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.<br>Flexbox布局最适合应用程序的组件和小规模布局，而Grid布局则用于较大规模的布局</p>
</blockquote>
<h1 id="基础和术语"><a href="#基础和术语" class="headerlink" title="基础和术语"></a>基础和术语</h1><p>这块根据英语翻译过来的，我真是搞不懂，看来英语水平有限啊</p>
<ul>
<li>flex container:parent element，也就是父级标签</li>
<li>flex items:child element，也就是子标签</li>
</ul>
<img src="/2020/02/12/Flex%E5%B8%83%E5%B1%80-%E5%9F%BA%E7%A1%80%E7%AF%87/flex-layout.png" class="">
<ul>
<li>main axis(主轴):flex items会沿着flex container的主轴进行布局，但是不一定是水平的，它依赖于<code>flex-direction</code>属性</li>
<li>main-start|main-end:flex items在flex container 中的起始到截止的位置</li>
<li>main-size:flex item的高度和宽度，是flex item的主大小</li>
<li>cross axis（翻译为横轴，但是不理解为啥叫横轴）:垂直于主轴的叫横轴，他的方向依据与主轴的方向</li>
<li>cross-start|cross-end:Flex线填充有物品，并从Flex容器的交叉起点侧开始向交叉端侧放置。</li>
<li>cross-size:flex items的宽度或高度（以横截面尺寸中的较大者为准）为item的横截面尺寸。交叉尺寸属性是交叉尺寸中的“宽度”或“高度”中的任意一个。</li>
</ul>
<h1 id="属性讲解"><a href="#属性讲解" class="headerlink" title="属性讲解"></a>属性讲解</h1><h2 id="flex-container的属性"><a href="#flex-container的属性" class="headerlink" title="flex container的属性"></a>flex container的属性</h2><ol>
<li>display属性<br>这个是定义一个flex container；行模式还是块模式依据与设定的值。它能够为直接的子标签设置flex 布局<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.container&#123;</span><br><span class="line"><span class="css">	<span class="attribute">display</span>: flex;<span class="comment">/*或者display: inline-flex;*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<ol start="2">
<li><p>flex-direction</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/02/12/Flex%E5%B8%83%E5%B1%80-%E5%9F%BA%E7%A1%80%E7%AF%87/flex-direction.png" class="">
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>row(默认)</td>
<td>从左到右横向布局</td>
</tr>
<tr>
<td>row-reverse</td>
<td>从右向左横向布局</td>
</tr>
<tr>
<td>column</td>
<td>从上到下纵向布局</td>
</tr>
<tr>
<td>column-reverse</td>
<td>从下到上纵向布局</td>
</tr>
</tbody></table>
</li>
<li><p>flex-wrap<br>默认情况下，flex items会自动尝试在一行中布局，当然你可以通过是否允许换行来控制他</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">	flex-wrap: wrap|nowrap|wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>不换行</td>
</tr>
<tr>
<td>wrap</td>
<td>换行</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>如果总共占两行，先排满二行，然后再排第一行</td>
</tr>
</tbody></table>
</li>
</ol>
<img src="/2020/02/12/Flex%E5%B8%83%E5%B1%80-%E5%9F%BA%E7%A1%80%E7%AF%87/flex-wrap.png" class="">

<ol start="4">
<li><p>flex-flow<br><code>flex-flow</code>是<code>flex-direction</code>和<code>flex-wrap</code>的缩写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">	display: flex;</span><br><span class="line">	flex-flow: row wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>justify-content<br>定义的是子标签在父标签中主轴上的对齐方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">	display: flex;</span><br><span class="line">	justify-content: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>主轴上向左对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>主轴上右对齐</td>
</tr>
<tr>
<td>center</td>
<td>主轴上居中</td>
</tr>
<tr>
<td>space-between</td>
<td>两端对齐，项目之间的间隔相等</td>
</tr>
<tr>
<td>space-around</td>
<td>每个子对象都间隔相等，项目之间的间隔比项目与父项目的间隔大一倍</td>
</tr>
</tbody></table>
</li>
<li><p>align-items属性<br>定义子标签在交叉轴上的对齐方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">	display: flex;</span><br><span class="line">	height: 500px;</span><br><span class="line">	align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>交叉轴起点对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>交叉轴的终点对齐</td>
</tr>
<tr>
<td>center</td>
<td>交叉轴的中点对齐</td>
</tr>
<tr>
<td>baseline</td>
<td>项目的第一行文字的基线对齐</td>
</tr>
<tr>
<td>stretch</td>
<td>如果flex item未设置高度或设置为auto，将沾满整个容器的高度</td>
</tr>
</tbody></table>
<img src="/2020/02/12/Flex%E5%B8%83%E5%B1%80-%E5%9F%BA%E7%A1%80%E7%AF%87/align-items.png" class="">
<ol start="7">
<li>align-content属性<br><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">	display: flex;</span><br><span class="line">	height: 500px;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>和交叉轴的起点对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>和交叉轴的终点对齐</td>
</tr>
<tr>
<td>center</td>
<td>和交叉轴的中点对齐</td>
</tr>
<tr>
<td>space-between</td>
<td>和交叉轴两端对齐，轴线之间的间隔平均分布</td>
</tr>
<tr>
<td>space-around</td>
<td>每根轴线两侧的间隔都相等。所以轴线之间的间隔比轴线与边框的间隔大一倍</td>
</tr>
<tr>
<td>stretch</td>
<td>轴线沾满整个交叉轴</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="flex-items的属性"><a href="#flex-items的属性" class="headerlink" title="flex items的属性"></a>flex items的属性</h2><p>以下的6个属性是用在item上面的</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<ol>
<li><p>order<br>order 是定义item的排序顺序的，数值越小，排列越靠前，默认是0</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">	order:<span class="tag">&lt;<span class="name">integer</span>&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>flex-grow<br>flex-grow定义item的放大比例，默认是0，即如果存在剩余空间也不放大</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.item&#123;</span><br><span class="line">	flex-grow:<span class="tag">&lt;<span class="name">number</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</li>
<li><p>flex-shrink<br><code>flex-shrink</code>定义了item的缩小比例，默认为1，即如果空间不足时，该项目将被缩小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: <span class="tag">&lt;<span class="name">number</span>&gt;</span>; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小，因为负值对该属性无效。</p>
</li>
<li><p>flex-basis(这个属性没太弄懂)<br><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。他默认是auto，即项目的本来大小。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.item&#123;</span><br><span class="line">	flex-basis:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
</li>
<li><p>flex<br>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&#x27;flex-grow&#x27;&gt; &lt;&#x27;flex-shrink&#x27;&gt;? || &lt;&#x27;flex-basis&#x27;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</li>
<li><p>align-self<br><code>align-self</code>属性允许单个item与其他item不一样的对其方式，可覆盖<code>align-item</code>属性。默认是auto，表示集成父元素的<code>align-item</code>属性，如果没有父元素，则等同于<code>stretch</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.item&#123;</span><br><span class="line">	align-self:auto|flex-start|flex-end|center|baseline|stretch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;background-color: #000000;padding: 20px;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;face box&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;point item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;point item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;point item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;point item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.face &#123;</span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#c8c7cc</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.point &#123;</span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">border</span>: <span class="number">#8f8f94</span> <span class="number">2px</span> solid;</span></span><br><span class="line"><span class="css">	<span class="attribute">border-radius</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">margin</span>: <span class="number">3px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line"><span class="css">	<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">	<span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="css">	<span class="attribute">align-content</span>: space-between;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.column&#123;</span><br><span class="line"><span class="css">	<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">	<span class="attribute">flex-basis</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Flex</category>
      </categories>
      <tags>
        <tag>Flex</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab私有化部署及配置</title>
    <url>/2021/02/05/Gitlab%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_97.jpg"><br>最近项目的版本管理工具准备切换成Git，服务端的话进行了选型，发现GitLab CE版本（社区版本：免费开源）的，也就是社区版能够满足需求，因此进行了部署，在此进行了记录，安装文档参考自<a href="https://docs.gitlab.com/">Gitlab的官方安装文档</a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h3><p>一台内存超过4G的服务器，硬盘容量自己看着办，毕竟后期是用来做版本管理服务器的，如果太小的话，存储的文件空间肯定也小</p>
<h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><ul>
<li><strong>CentOS7</strong>：我这里使用的Minimal版本的，利于发现部署中的问题，以便在生产环境中碰到类似问题可以尽快处理</li>
<li><strong>DNS</strong>：配置好DNS，以供后面域名地址能够解析</li>
<li><strong>域名</strong>：一个域名，用来解析到对应的服务器上，这个尽量准备，安装过程中会用到</li>
<li><strong>SSL证书</strong>：认证https的时候会用到，后面会写到如何在腾讯云上如何获取证书</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>这块的文档参考自<a href="https://about.gitlab.com/install/?version=ce#centos-7">CentOS7安装GitLab</a></p>
<h3 id="安装和配置必要的依赖"><a href="#安装和配置必要的依赖" class="headerlink" title="安装和配置必要的依赖"></a>安装和配置必要的依赖</h3><ol>
<li><p>安装必要的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server perl</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --add-service=https</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></li>
<li><p>安装Postfix<br>安装Postfix用作发送邮件通知。如果说不需要，可以跳过此步。也可以使用自己的SMTP服务器，配置方案见<a href="https://docs.gitlab.com/omnibus/settings/smtp.html">这里</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>
<p>在安装Postfix的过程中，有可能会弹出配置页面信息。选择“Internet Site”，然后点击回车。</p>
</li>
</ol>
<h3 id="添加Gitlab包仓库并安装"><a href="#添加Gitlab包仓库并安装" class="headerlink" title="添加Gitlab包仓库并安装"></a>添加Gitlab包仓库并安装</h3><ol>
<li>添加GitLab包仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>
上面的这个地址中，官网上引导的是ee版本的，也就是企业版，这里我改成了gitlab-ce版本的，也就是社区版</li>
<li>安装GitLab包，确保上面配置了正确的DNS。<br><font color='red'>说明：</font> 下面的这个地址（<a href="https://gitlab.example.com)需要改成你自己的域名,用作gitlab访问和发送邮件使用/">https://gitlab.example.com）需要改成你自己的域名，用作GitLab访问和发送邮件使用</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo EXTERNAL_URL=<span class="string">&quot;https://gitlab.example.com&quot;</span> yum install -y gitlab-ce</span><br></pre></td></tr></table></figure></li>
<li>等待安装完成后（如果你的服务器配置比较低的话，访问页面会显示502，这个不用担心，等待一会大概十来分钟之后再访问就好了），就可以通过域名进行访问（前提是需要做好映射工作，不管是用frp也好，还是直接用公网IP指向你的服务器也好）了，当然也可以通过内网地址的80端口进行访问了</li>
</ol>
<h2 id="SSL配置"><a href="#SSL配置" class="headerlink" title="SSL配置"></a>SSL配置</h2><p>目前基本的配置都已经完成，但是你会发现在浏览器中访问的时候，浏览器会提示你这个是不安全的访问连接，因此需要配置下自己的证书</p>
<h3 id="证书申请和安装"><a href="#证书申请和安装" class="headerlink" title="证书申请和安装"></a>证书申请和安装</h3><ol>
<li>证书申请<img src="/2021/02/05/Gitlab%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/screenshot_1.png" class=""></li>
<li>申请完成后，进行下载，下载下来的文件夹解压之后如下<img src="/2021/02/05/Gitlab%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/screenshot_2.png" class=""></li>
<li>备份服务器上<code>/etc/gitlab/ssh</code>(这里如果找不到这个目录，需要创建下，并设置权限为755)目录下的<code>crt</code>和<code>key</code>文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv xxx.xxx.cn.crt xxx.xxx.cn.crt.20210205.bak</span><br><span class="line">mv xxx.xxx.cn.key xxx.xxx.cn.key.20210205.bak</span><br></pre></td></tr></table></figure></li>
<li>上传Nginx文件夹下的<code>crt</code>和<code>key</code>文件到服务器的<code>/etc/gitlab/ssh</code>文件夹下</li>
<li>配置gitlab.rb文件，将文件中的<code>external_url &quot;https://gitlab.example.com&quot;</code>属性修改为你自己的域名，设置<code>letsencrypt[&#39;enable&#39;] = false</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure></li>
<li>重新配置GitLab<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li>
<li>如果使用了防火墙，还需要开放防火墙的端口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-service=https</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h3 id="实时日志查看"><a href="#实时日志查看" class="headerlink" title="实时日志查看"></a>实时日志查看</h3><p>如果说你只是想看下实时的日志信息，可以使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有组件的日志</span></span><br><span class="line">sudo gitlab-ctl tail</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drill down to a sub-directory of /var/log/gitlab</span></span><br><span class="line">sudo gitlab-ctl tail gitlab-rails</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drill down to an individual file</span></span><br><span class="line">sudo gitlab-ctl tail nginx/gitlab_error.log</span><br></pre></td></tr></table></figure>

<h3 id="日志配置默认路径"><a href="#日志配置默认路径" class="headerlink" title="日志配置默认路径"></a>日志配置默认路径</h3><p>默认情况下，gitlab的日志会存储在<code>/var/logs/gitlab</code>下，可以直接切到该路径下，查看对应组件的日志（nginx的、数据库的呀）即可，如果想要修改gitlab的默认日志，可以在<code>/etc/gitlab/gitlab.rb</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For example:</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;log_directory&#x27;</span>] = <span class="string">&quot;/var/log/gitlab/gitlab-rails&quot;</span></span><br><span class="line">puma[<span class="string">&#x27;log_directory&#x27;</span>] = <span class="string">&quot;/var/log/gitlab/puma&quot;</span></span><br><span class="line">registry[<span class="string">&#x27;log_directory&#x27;</span>] = <span class="string">&quot;/var/log/gitlab/registry&quot;</span></span><br></pre></td></tr></table></figure>
<p>完事之后，还需要执行以下重新配置的命令，来完成配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>HSSFWorkBook操作导出Excel</title>
    <url>/2019/04/16/HSSFWorkBook%E6%93%8D%E4%BD%9C%E5%AF%BC%E5%87%BAExcel/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_43.jpg"></p>
<blockquote>
<p><a href="http://poi.apache.org/apidocs/dev/org/apache/poi/hssf/usermodel/HSSFWorkbook.html">官方文档</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">excelPrint</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">// 创建一个Excel文件   </span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet();<span class="comment">// 创建一个Excel的Sheet   </span></span><br><span class="line">    sheet.createFreezePane(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">// 冻结   </span></span><br><span class="line">    <span class="comment">// 设置列宽   </span></span><br><span class="line">    sheet.setColumnWidth(<span class="number">0</span>, <span class="number">1000</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">1</span>, <span class="number">3500</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">2</span>, <span class="number">3500</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">3</span>, <span class="number">6500</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">4</span>, <span class="number">6500</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">5</span>, <span class="number">6500</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">6</span>, <span class="number">6500</span>);   </span><br><span class="line">    sheet.setColumnWidth(<span class="number">7</span>, <span class="number">2500</span>);   </span><br><span class="line">    <span class="comment">// Sheet样式   </span></span><br><span class="line">    HSSFCellStyle sheetStyle = workbook.createCellStyle();   </span><br><span class="line">    <span class="comment">// 背景色的设定   </span></span><br><span class="line">    sheetStyle.setFillBackgroundColor(HSSFColor.GREY_25_PERCENT.index);   </span><br><span class="line">    <span class="comment">// 前景色的设定   </span></span><br><span class="line">    sheetStyle.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);   </span><br><span class="line">    <span class="comment">// 填充模式   </span></span><br><span class="line">    sheetStyle.setFillPattern(HSSFCellStyle.FINE_DOTS);   </span><br><span class="line">    <span class="comment">// 设置列的样式   </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; i++) &#123;   </span><br><span class="line">      sheet.setDefaultColumnStyle((<span class="keyword">short</span>) i, sheetStyle);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 设置字体   </span></span><br><span class="line">    HSSFFont headfont = workbook.createFont();   </span><br><span class="line">    headfont.setFontName(<span class="string">&quot;黑体&quot;</span>);   </span><br><span class="line">    headfont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">22</span>);<span class="comment">// 字体大小   </span></span><br><span class="line">    headfont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);<span class="comment">// 加粗   </span></span><br><span class="line">    <span class="comment">// 另一个样式   </span></span><br><span class="line">    HSSFCellStyle headstyle = workbook.createCellStyle();   </span><br><span class="line">    headstyle.setFont(headfont);   </span><br><span class="line">    headstyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);<span class="comment">// 左右居中   </span></span><br><span class="line">    headstyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">// 上下居中   </span></span><br><span class="line">    headstyle.setLocked(<span class="keyword">true</span>);   </span><br><span class="line">    headstyle.setWrapText(<span class="keyword">true</span>);<span class="comment">// 自动换行   </span></span><br><span class="line">    <span class="comment">// 另一个字体样式   </span></span><br><span class="line">    HSSFFont columnHeadFont = workbook.createFont();   </span><br><span class="line">    columnHeadFont.setFontName(<span class="string">&quot;宋体&quot;</span>);   </span><br><span class="line">    columnHeadFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">10</span>);   </span><br><span class="line">    columnHeadFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);   </span><br><span class="line">    <span class="comment">// 列头的样式   </span></span><br><span class="line">    HSSFCellStyle columnHeadStyle = workbook.createCellStyle();   </span><br><span class="line">    columnHeadStyle.setFont(columnHeadFont);   </span><br><span class="line">    columnHeadStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);<span class="comment">// 左右居中   </span></span><br><span class="line">    columnHeadStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">// 上下居中   </span></span><br><span class="line">    columnHeadStyle.setLocked(<span class="keyword">true</span>);   </span><br><span class="line">    columnHeadStyle.setWrapText(<span class="keyword">true</span>);   </span><br><span class="line">    columnHeadStyle.setLeftBorderColor(HSSFColor.BLACK.index);<span class="comment">// 左边框的颜色   </span></span><br><span class="line">    columnHeadStyle.setBorderLeft((<span class="keyword">short</span>) <span class="number">1</span>);<span class="comment">// 边框的大小   </span></span><br><span class="line">    columnHeadStyle.setRightBorderColor(HSSFColor.BLACK.index);<span class="comment">// 右边框的颜色   </span></span><br><span class="line">    columnHeadStyle.setBorderRight((<span class="keyword">short</span>) <span class="number">1</span>);<span class="comment">// 边框的大小   </span></span><br><span class="line">    columnHeadStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN); <span class="comment">// 设置单元格的边框为粗体   </span></span><br><span class="line">    columnHeadStyle.setBottomBorderColor(HSSFColor.BLACK.index); <span class="comment">// 设置单元格的边框颜色   </span></span><br><span class="line">    <span class="comment">// 设置单元格的背景颜色（单元格的样式会覆盖列或行的样式）   </span></span><br><span class="line">    columnHeadStyle.setFillForegroundColor(HSSFColor.WHITE.index);   </span><br><span class="line"></span><br><span class="line">    HSSFFont font = workbook.createFont();   </span><br><span class="line">    font.setFontName(<span class="string">&quot;宋体&quot;</span>);   </span><br><span class="line">    font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">10</span>);   </span><br><span class="line">    <span class="comment">// 普通单元格样式   </span></span><br><span class="line">    HSSFCellStyle style = workbook.createCellStyle();   </span><br><span class="line">    style.setFont(font);   </span><br><span class="line">    style.setAlignment(HSSFCellStyle.ALIGN_LEFT);<span class="comment">// 左右居中   </span></span><br><span class="line">    style.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);<span class="comment">// 上下居中   </span></span><br><span class="line">    style.setWrapText(<span class="keyword">true</span>);   </span><br><span class="line">    style.setLeftBorderColor(HSSFColor.BLACK.index);   </span><br><span class="line">    style.setBorderLeft((<span class="keyword">short</span>) <span class="number">1</span>);   </span><br><span class="line">    style.setRightBorderColor(HSSFColor.BLACK.index);   </span><br><span class="line">    style.setBorderRight((<span class="keyword">short</span>) <span class="number">1</span>);   </span><br><span class="line">    style.setBorderBottom(HSSFCellStyle.BORDER_THIN); <span class="comment">// 设置单元格的边框为粗体   </span></span><br><span class="line">    style.setBottomBorderColor(HSSFColor.BLACK.index); <span class="comment">// 设置单元格的边框颜色．   </span></span><br><span class="line">    style.setFillForegroundColor(HSSFColor.WHITE.index);<span class="comment">// 设置单元格的背景颜色．   </span></span><br><span class="line">    <span class="comment">// 另一个样式   </span></span><br><span class="line">    HSSFCellStyle centerstyle = workbook.createCellStyle();   </span><br><span class="line">    centerstyle.setFont(font);   </span><br><span class="line">    centerstyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);<span class="comment">// 左右居中   </span></span><br><span class="line">    centerstyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">// 上下居中   </span></span><br><span class="line">    centerstyle.setWrapText(<span class="keyword">true</span>);   </span><br><span class="line">    centerstyle.setLeftBorderColor(HSSFColor.BLACK.index);   </span><br><span class="line">    centerstyle.setBorderLeft((<span class="keyword">short</span>) <span class="number">1</span>);   </span><br><span class="line">    centerstyle.setRightBorderColor(HSSFColor.BLACK.index);   </span><br><span class="line">    centerstyle.setBorderRight((<span class="keyword">short</span>) <span class="number">1</span>);   </span><br><span class="line">    centerstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN); <span class="comment">// 设置单元格的边框为粗体   </span></span><br><span class="line">    centerstyle.setBottomBorderColor(HSSFColor.BLACK.index); <span class="comment">// 设置单元格的边框颜色．   </span></span><br><span class="line">    centerstyle.setFillForegroundColor(HSSFColor.WHITE.index);<span class="comment">// 设置单元格的背景颜色．   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;   </span><br><span class="line">      <span class="comment">// 创建第一行   </span></span><br><span class="line">      HSSFRow row0 = sheet.createRow(<span class="number">0</span>);   </span><br><span class="line">      <span class="comment">// 设置行高   </span></span><br><span class="line">      row0.setHeight((<span class="keyword">short</span>) <span class="number">900</span>);   </span><br><span class="line">      <span class="comment">// 创建第一列   </span></span><br><span class="line">      HSSFCell cell0 = row0.createCell(<span class="number">0</span>);   </span><br><span class="line">      cell0.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;中非发展基金投资项目调度会工作落实情况对照表&quot;</span>));   </span><br><span class="line">      cell0.setCellStyle(headstyle);   </span><br><span class="line">      <span class="comment">/**  </span></span><br><span class="line"><span class="comment">       * 合并单元格  </span></span><br><span class="line"><span class="comment">       *    第一个参数：第一个单元格的行数（从0开始）  </span></span><br><span class="line"><span class="comment">       *    第二个参数：第二个单元格的行数（从0开始）  </span></span><br><span class="line"><span class="comment">       *    第三个参数：第一个单元格的列数（从0开始）  </span></span><br><span class="line"><span class="comment">       *    第四个参数：第二个单元格的列数（从0开始）  </span></span><br><span class="line"><span class="comment">       */</span>  </span><br><span class="line">      CellRangeAddress range = <span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>);   </span><br><span class="line">      sheet.addMergedRegion(range);   </span><br><span class="line">      <span class="comment">// 创建第二行   </span></span><br><span class="line">      HSSFRow row1 = sheet.createRow(<span class="number">1</span>);   </span><br><span class="line">      HSSFCell cell1 = row1.createCell(<span class="number">0</span>);   </span><br><span class="line">      cell1.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;本次会议时间：2009年8月31日       前次会议时间：2009年8月24日&quot;</span>));   </span><br><span class="line">      cell1.setCellStyle(centerstyle);   </span><br><span class="line">      <span class="comment">// 合并单元格   </span></span><br><span class="line">      range = <span class="keyword">new</span> CellRangeAddress(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>);   </span><br><span class="line">      sheet.addMergedRegion(range);   </span><br><span class="line">      <span class="comment">// 第三行   </span></span><br><span class="line">      HSSFRow row2 = sheet.createRow(<span class="number">3</span>);   </span><br><span class="line">      row2.setHeight((<span class="keyword">short</span>) <span class="number">750</span>);   </span><br><span class="line">      HSSFCell cell = row2.createCell(<span class="number">0</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;责任者&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">1</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;成熟度排序&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">2</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;事项&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">3</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;前次会议要求/n/新项目的项目概要&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">4</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;上周工作进展&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">5</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;本周工作计划&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">6</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;问题和建议&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      cell = row2.createCell(<span class="number">7</span>);   </span><br><span class="line">      cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;备 注&quot;</span>));   </span><br><span class="line">      cell.setCellStyle(columnHeadStyle);   </span><br><span class="line">      <span class="comment">// 访问数据库，得到数据集   </span></span><br><span class="line">      List&lt;DeitelVO&gt; deitelVOList = getEntityManager().queryDeitelVOList();   </span><br><span class="line">      <span class="keyword">int</span> m = <span class="number">4</span>;   </span><br><span class="line">      <span class="keyword">int</span> k = <span class="number">4</span>;   </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deitelVOList.size(); i++) &#123;   </span><br><span class="line">        DeitelVO vo = deitelVOList.get(i);   </span><br><span class="line">        String dname = vo.getDname();   </span><br><span class="line">        List&lt;Workinfo&gt; workList = vo.getWorkInfoList();   </span><br><span class="line">        HSSFRow row = sheet.createRow(m);   </span><br><span class="line">        cell = row.createCell(<span class="number">0</span>);   </span><br><span class="line">        cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(dname));   </span><br><span class="line">        cell.setCellStyle(centerstyle);   </span><br><span class="line">        <span class="comment">// 合并单元格   </span></span><br><span class="line">        range = <span class="keyword">new</span> CellRangeAddress(m, m + workList.size() - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);   </span><br><span class="line">        sheet.addMergedRegion(range);   </span><br><span class="line">        m = m + workList.size();   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; workList.size(); j++) &#123;   </span><br><span class="line">          Workinfo w = workList.get(j);   </span><br><span class="line">          <span class="comment">// 遍历数据集创建Excel的行   </span></span><br><span class="line">          row = sheet.getRow(k + j);   </span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == row) &#123;   </span><br><span class="line">            row = sheet.createRow(k + j);   </span><br><span class="line">          &#125;   </span><br><span class="line">          cell = row.createCell(<span class="number">1</span>);   </span><br><span class="line">          cell.setCellValue(w.getWnumber());   </span><br><span class="line">          cell.setCellStyle(centerstyle);   </span><br><span class="line">          cell = row.createCell(<span class="number">2</span>);   </span><br><span class="line">          cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(w.getWitem()));   </span><br><span class="line">          cell.setCellStyle(style);   </span><br><span class="line">          cell = row.createCell(<span class="number">3</span>);   </span><br><span class="line">          cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(w.getWmeting()));   </span><br><span class="line">          cell.setCellStyle(style);   </span><br><span class="line">          cell = row.createCell(<span class="number">4</span>);   </span><br><span class="line">          cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(w.getWbweek()));   </span><br><span class="line">          cell.setCellStyle(style);   </span><br><span class="line">          cell = row.createCell(<span class="number">5</span>);   </span><br><span class="line">          cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(w.getWtweek()));   </span><br><span class="line">          cell.setCellStyle(style);   </span><br><span class="line">          cell = row.createCell(<span class="number">6</span>);   </span><br><span class="line">          cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(w.getWproblem()));   </span><br><span class="line">          cell.setCellStyle(style);   </span><br><span class="line">          cell = row.createCell(<span class="number">7</span>);   </span><br><span class="line">          cell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(w.getWremark()));   </span><br><span class="line">          cell.setCellStyle(style);   </span><br><span class="line">        &#125;   </span><br><span class="line">        k = k + workList.size();   </span><br><span class="line">      &#125;   </span><br><span class="line">      <span class="comment">// 列尾   </span></span><br><span class="line">      <span class="keyword">int</span> footRownumber = sheet.getLastRowNum();   </span><br><span class="line">      HSSFRow footRow = sheet.createRow(footRownumber + <span class="number">1</span>);   </span><br><span class="line">      HSSFCell footRowcell = footRow.createCell(<span class="number">0</span>);   </span><br><span class="line">      footRowcell.setCellValue(<span class="keyword">new</span> HSSFRichTextString(<span class="string">&quot;                    审  定：XXX      审  核：XXX     汇  总：XX&quot;</span>));   </span><br><span class="line">      footRowcell.setCellStyle(centerstyle);   </span><br><span class="line">      range = <span class="keyword">new</span> CellRangeAddress(footRownumber + <span class="number">1</span>, footRownumber + <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>);   </span><br><span class="line">      sheet.addMergedRegion(range);   </span><br><span class="line"></span><br><span class="line">      HttpServletResponse response = getResponse();   </span><br><span class="line">      HttpServletRequest request = getRequest();   </span><br><span class="line">      String filename = <span class="string">&quot;未命名.xls&quot;</span>;<span class="comment">//设置下载时客户端Excel的名称   </span></span><br><span class="line">      <span class="comment">// 请见：http://zmx.javaeye.com/blog/622529   </span></span><br><span class="line">      filename = Util.encodeFilename(filename, request);   </span><br><span class="line">      response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);   </span><br><span class="line">      response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename);   </span><br><span class="line">      OutputStream ouputStream = response.getOutputStream();   </span><br><span class="line">      workbook.write(ouputStream);   </span><br><span class="line">      ouputStream.flush();   </span><br><span class="line">      ouputStream.close();   </span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;   </span><br><span class="line">      e.printStackTrace();   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端插件</category>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>Excel导出</tag>
        <tag>HSSFWorkBook</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML中显示MarkDown，并且进行代码高亮</title>
    <url>/2019/01/25/HTML%E4%B8%AD%E6%98%BE%E7%A4%BAMarkDown%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_7.jpg"></p>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote>
<p>临时个人兴趣，做一个类似API的东西，要显示具体对应的代码，因此用到了页面中显示代码插件（showdown）和高亮代码插件（highligt），两个插件的官网分别是：<a href="http://showdownjs.com/">showdown</a>、<a href="https://highlightjs.org/">highlight</a></p>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="showdown"><a href="#showdown" class="headerlink" title="showdown"></a>showdown</h3><blockquote>
<ol>
<li>首先在官网下载showdown  </li>
</ol>
</blockquote>
<p>下载完成后，引入项目，解压找到<code>showdown.min.js</code>文件</p>
<img src="/2019/01/25/HTML%E4%B8%AD%E6%98%BE%E7%A4%BAMarkDown%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/screenshot_1.png" class="">

<blockquote>
<ol start="2">
<li>js代码</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li a&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.get(<span class="built_in">this</span>.href,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> converter = <span class="keyword">new</span> showdown.Converter();<span class="comment">//1.首先定义converter</span></span><br><span class="line">        data = <span class="string">&quot;``` \n&quot;</span>+data+<span class="string">&quot; \n ```&quot;</span>;<span class="comment">//转换成markdown格式的代码</span></span><br><span class="line">        <span class="keyword">var</span> html = converter.makeHtml(data);<span class="comment">//2. 使用convert转换成html代码</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;code&quot;</span>).innerHTML = html;<span class="comment">//3. 将转换好的markdown放入对应的div</span></span><br><span class="line">        $(<span class="string">&#x27;pre code&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, block</span>) </span>&#123;</span><br><span class="line">            hljs.highlightBlock(block);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h3><blockquote>
<ol>
<li>首先官网下载highlight</li>
</ol>
</blockquote>
<p>下载完成后，引入项目</p>
<img src="/2019/01/25/HTML%E4%B8%AD%E6%98%BE%E7%A4%BAMarkDown%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/screenshot_2.png" class="">

<p><strong>需要注意点：</strong></p>
<ul>
<li>highlight提供好几种样式，可以在style文件夹下面自行查找</li>
</ul>
<blockquote>
<ol start="2">
<li>js代码</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;展示和高亮代码</span><br><span class="line">        $(&#39;li a&#39;).click(function()&#123;</span><br><span class="line">            $.get(this.href,function(data)&#123;</span><br><span class="line">                var converter &#x3D; new showdown.Converter();</span><br><span class="line">                data &#x3D; &quot;&#96;&#96;&#96; \n&quot;+data+&quot; \n &#96;&#96;&#96;&quot;;</span><br><span class="line">                var html &#x3D; converter.makeHtml(data);</span><br><span class="line">                document.getElementById(&quot;code&quot;).innerHTML &#x3D; html;</span><br><span class="line">                $(&#39;pre code&#39;).each(function(i, block) &#123;&#x2F;&#x2F;这一行一定要有，否则高亮代码不生效</span><br><span class="line">                    hljs.highlightBlock(block);&#x2F;&#x2F;使代码高亮</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个页面有一个很巧妙的地方，是通过get请求获取到未经js和css渲染的纯html页面代码，方法的代码如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);<span class="comment">//这里面的data就是未经渲染的html代码内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端插件</category>
        <category>showdown&amp;highlight</category>
      </categories>
      <tags>
        <tag>前端插件</tag>
        <tag>showdown</tag>
        <tag>highlight</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP GET POST请求</title>
    <url>/2019/01/25/HTTP-GET-POST%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oemp.common;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;  </span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Post Method</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPostUrl</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向指定URL发送POST请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendPost</span><span class="params">(String url, Map&lt;String, String&gt; paramMap)</span> </span>&#123;  </span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;  </span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;  </span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            URL realUrl = <span class="keyword">new</span> URL(url);  </span><br><span class="line">            <span class="comment">// 打开和URL之间的连接  </span></span><br><span class="line">            URLConnection conn = realUrl.openConnection();  </span><br><span class="line">            <span class="comment">// 设置通用的请求属性  </span></span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);  </span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);  </span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);  </span><br><span class="line">            <span class="comment">// conn.setRequestProperty(&quot;Charset&quot;, &quot;UTF-8&quot;);  </span></span><br><span class="line">            <span class="comment">// 发送POST请求必须设置如下两行  </span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);  </span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);  </span><br><span class="line">            <span class="comment">// 获取URLConnection对象对应的输出流  </span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());  </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置请求属性  </span></span><br><span class="line">            String param = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">            <span class="keyword">if</span> (paramMap != <span class="keyword">null</span> &amp;&amp; paramMap.size() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                Iterator&lt;String&gt; ite = paramMap.keySet().iterator();  </span><br><span class="line">                <span class="keyword">while</span> (ite.hasNext()) &#123;  </span><br><span class="line">                    String key = ite.next();<span class="comment">// key  </span></span><br><span class="line">                    String value = paramMap.get(key);  </span><br><span class="line">                    param += key + <span class="string">&quot;=&quot;</span> + value + <span class="string">&quot;&amp;&quot;</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                param = param.substring(<span class="number">0</span>, param.length() - <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送请求参数  </span></span><br><span class="line">            out.print(param);  </span><br><span class="line">            <span class="comment">// flush输出流的缓冲  </span></span><br><span class="line">            out.flush();  </span><br><span class="line">            <span class="comment">// 定义BufferedReader输入流来读取URL的响应  </span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(  </span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(conn.getInputStream()));  </span><br><span class="line">            String line;  </span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                result += line;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            System.err.println(<span class="string">&quot;发送 POST 请求出现异常！&quot;</span> + e);  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 使用finally块来关闭输出流、输入流  </span></span><br><span class="line">        <span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    out.close();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    in.close();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;  </span><br><span class="line">                ex.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 数据流post请求  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlStr  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xmlInfo  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String urlStr, String strInfo)</span> </span>&#123;  </span><br><span class="line">        String reStr=<span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlStr);  </span><br><span class="line">            URLConnection con = url.openConnection();  </span><br><span class="line">            con.setDoOutput(<span class="keyword">true</span>);  </span><br><span class="line">            con.setRequestProperty(<span class="string">&quot;Pragma:&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">            con.setRequestProperty(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">            con.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/xml&quot;</span>);  </span><br><span class="line">            OutputStreamWriter out = <span class="keyword">new</span> OutputStreamWriter(con.getOutputStream());  </span><br><span class="line">            out.write(<span class="keyword">new</span> String(strInfo.getBytes(<span class="string">&quot;utf-8&quot;</span>)));  </span><br><span class="line">            out.flush();  </span><br><span class="line">            out.close();  </span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(con.getInputStream(), <span class="string">&quot;utf-8&quot;</span>));  </span><br><span class="line">            String line = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">            <span class="keyword">for</span> (line = br.readLine(); line != <span class="keyword">null</span>; line = br.readLine()) &#123;  </span><br><span class="line">                reStr += line;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reStr;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Map&lt;String, String&gt; mapParam = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br><span class="line">        mapParam.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);  </span><br><span class="line">        mapParam.put(<span class="string">&quot;validation&quot;</span>,<span class="string">&quot;test&quot;</span>);  </span><br><span class="line">        String pathUrl = <span class="string">&quot;http://localhost/testPost.action&quot;</span>;  </span><br><span class="line">        String result = sendPost(pathUrl, mapParam);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>公共类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HTTP请求</tag>
        <tag>GET</tag>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码大全</title>
    <url>/2020/02/09/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_73.jpg"></p>
<h1 id="标准扩展码"><a href="#标准扩展码" class="headerlink" title="标准扩展码"></a>标准扩展码</h1><h2 id="1xx-Informational-信息化"><a href="#1xx-Informational-信息化" class="headerlink" title="1xx Informational 信息化"></a>1xx Informational 信息化</h2><p>100 Continue 继续<br>101 Switching Protocols 交换协议<br>102 Processing 处理</p>
<h2 id="2xx-Success-成功"><a href="#2xx-Success-成功" class="headerlink" title="2xx Success 成功"></a>2xx Success 成功</h2><p>200 OK<br>201 Created 创建<br>202 Accepted 已接受<br>203 Non-Authoritative Information 非授权信息<br>204 No Content 无内容<br>205 Reset Content 重置内容<br>206 Partial Content 部分内容<br>207 Multi-Status 多状态<br>208 Already Reported 已报告<br>226 IMIM Used 使用的</p>
<h2 id="3xx-Redirection-重定向"><a href="#3xx-Redirection-重定向" class="headerlink" title="3xx Redirection 重定向"></a>3xx Redirection 重定向</h2><p>300 Multiple Choices 多种选择<br>301 Moved Permanently 永久移动<br>302 Found 发现<br>303 See Other 查看其它<br>304 Not Modified 未修改<br>305 Use Proxy 使用代理<br>306 Switch Proxy 开关代理<br>307 Temporary Redirect 临时重定向<br>308 Permanent Redirect 永久重定向</p>
<h2 id="4xx-Client-Error-客户端错误"><a href="#4xx-Client-Error-客户端错误" class="headerlink" title="4xx Client Error 客户端错误"></a>4xx Client Error 客户端错误</h2><p>400 Bad Request 错误的请求<br>401 Unauthorized 未授权<br>402 Payment Required 需要付费<br>403Forbidden 拒绝访问<br>404 Not Found 未找到<br>405 Method Not Allowed 不允许的方法<br>406 Not Acceptable 不可接受<br>407 Proxy Authentication Required 代理服务器需要身份验证<br>408 Request Timeout 请求超时<br>409 Conflict 冲突<br>410 Gone 完成<br>411 Length Required 需要长度<br>412 Precondition Failed 前提条件失败<br>413 Payload Too Large 负载过大<br>414 URI Too Long 太长<br>415 Unsupported Media Type 不支持的媒体类型<br>416 Range Not Satisfiable 的范围不合适<br>417 Expectation Failed 预期失败<br>418 I’m a teapot 我是一个茶壶<br>421 Misdirected Request 误导请求<br>422 Unprocessable Entity 无法处理的实体<br>423 Locked 锁定<br>424 Failed Dependency 失败的依赖<br>426 Upgrade Required 升级所需<br>428 Precondition Required 所需的先决条件<br>429 Too Many Requests 太多的请求<br>431 Request Header Fields Too Large 请求头字段太大<br>451 Unavailable For Legal Reasons 不可出于法律原因</p>
<h2 id="5xx-Server-Error-服务器错误"><a href="#5xx-Server-Error-服务器错误" class="headerlink" title="5xx Server Error 服务器错误"></a>5xx Server Error 服务器错误</h2><p>500 Internal Server Error 内部服务器错误<br>501 Not Implemented 未执行<br>502 Bad Gateway 错误的网关<br>503 Service Unavailable 服务不可用<br>504 Gateway Timeout 网关超时<br>505 HTTP Version Not Supported 不支持HTTP版本<br>506 Variant Also Negotiates 变体也进行协商<br>507 Insufficient Storage 存储空间不足<br>508 Loop Detected 检测到循环<br>510 Not Extended 不延长<br>511 Network Authentication Required 网络需要身份验证</p>
<h1 id="非官方扩展码"><a href="#非官方扩展码" class="headerlink" title="非官方扩展码"></a>非官方扩展码</h1><p>103 Checkpoint 检查点<br>420 Method Failure (Spring Framework) 故障的方法（Spring框架）<br>420 Enhance Your Calm (Twitter) 增强您的平静（微博）<br>450 Blocked by Windows Parental Controls (Microsoft) 被Windows阻止家长控制（微软）<br>498 Invalid Token (Esri) 无效的令牌（ESRI的）<br>499 Token Required (Esri) 令牌必需（ESRI的）<br>499 Request has been forbidden by antivirus 请求已被禁止反病毒<br>509 Bandwidth Limit Exceeded (Apache Web Server/cPanel) 超出带宽限制（Apache的Web服务器/的cPanel）<br>530 Site is frozen 网站被冻结</p>
<h1 id="互联网信息服务扩展状态码"><a href="#互联网信息服务扩展状态码" class="headerlink" title="互联网信息服务扩展状态码"></a>互联网信息服务扩展状态码</h1><p>440 Login Timeout 登录超时<br>449 Retry With 重新发送带<br>451 Redirect 重定向</p>
<h1 id="NGINX-扩展状态码"><a href="#NGINX-扩展状态码" class="headerlink" title="NGINX 扩展状态码"></a>NGINX 扩展状态码</h1><p>444 No Response 没有响应<br>495 SSL Certificate Error 证书错误<br>496 SSL Certificate Required证书要求<br>497 HTTP Request Sent to HTTPS Port 发送到HTTPS端口请求<br>499 Client Closed Request 客户端请求关闭</p>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 创建多模块Maven项目</title>
    <url>/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_20.jpg"></p>
<h3 id="创建父模块"><a href="#创建父模块" class="headerlink" title="创建父模块"></a>创建父模块</h3><ol>
<li>依次点击打开File-&gt;New-&gt;Project，具体操作见下图<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_1.png" class=""></li>
<li>打开创建项目对话框后，左侧选择Maven，右侧不勾选Create from archetype，然后点击Next，具体操作见下图<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_2.png" class=""></li>
<li>输入项目的信息，GroupId和ArtifactId，然后点击Next，具体操作见下图<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_3.png" class=""></li>
<li>直接点Next，直接到Finish，最后生成完成之后，删除src文件夹（因为这个是父级模块，因此不需要src文件夹），如下图所示：<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_4.png" class=""></li>
</ol>
<h3 id="创建核心子模块"><a href="#创建核心子模块" class="headerlink" title="创建核心子模块"></a>创建核心子模块</h3><ol>
<li>右键父级模块，点击New-&gt;Module，打开新增Module界面，具体操作见下图：<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_5.png" class=""></li>
<li>左侧选择Maven，因为要创建一个普通项目，右侧同样不选择Create from archetype，然后点击Next，如下图所示：<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_6.png" class=""></li>
<li>GroupId和version继承自父模块，不需要修改，只需要修改ArtifactId，点击Next<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_7.png" class=""></li>
<li>输入Module name，模块的名称可以和ArtifactId保持一致即可，具体操作见下图<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_8.png" class=""></li>
<li>创建完成后的结构图如下：<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_9.png" class=""></li>
</ol>
<h3 id="创建子模块"><a href="#创建子模块" class="headerlink" title="创建子模块"></a>创建子模块</h3><ol>
<li>第一步和创建核心子模块一样，只是在打开New Module的时候，选上<code>Create from archetype</code>，并选中<code>maven-archetype-webapp</code><img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_10.png" class=""></li>
<li>一路点击下去，中间会有一个选择<code>Maven</code>的地方，选择你自己的Maven以及配置文件，然后点到最后，创建的项目路径如下图所示：<img src="/2019/01/30/IDEA-%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97Maven%E9%A1%B9%E7%9B%AE/screenshot_11.png" class=""></li>
</ol>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>SSM</category>
        <category>SSM框架搭建</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>搭建</tag>
        <tag>多模块</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 自定义注释模板</title>
    <url>/2020/04/23/IDEA-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_82.jpg"><br>之前每次添加注释模板的时候，都会去网上查一遍，但是每个人写的教程都不一样，出现注释模板百花齐放，因此在这里记录下自己认为比较好的一套模板，适应@JavaDoc编写的，支持多参数分别列出的一套模板，下面首先介绍下自定义模板组和模板的创建过程</p>
<h2 id="创建模板组"><a href="#创建模板组" class="headerlink" title="创建模板组"></a>创建模板组</h2><ol>
<li>首先第一步打开Idea的Setting界面，步骤：打开Idea–&gt;菜单选择File–&gt;选择Setting<img src="/2020/04/23/IDEA-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/screenshot_1.png" class=""></li>
<li>不再描述，自己看图吧<img src="/2020/04/23/IDEA-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/screenshot_2.png" class="">
需要说明的几点：</li>
</ol>
<ul>
<li>上图中的<code>Abbreviation</code>是调起注释的快捷输入内容，再加上Expand with中选择的快捷键（个人使用的是Tab，看个人喜好进行选择，可选择Enter）</li>
<li>上图中最下面有一排小字，显示最末尾有个<code>Change</code>，是选择注释快捷输入的作用域，也就是在什么地方你可以通过快捷字母进行输入，这个地方是可以修改的，默认的时候这个地方显示的是<code>No Applicable context yet.Define</code>，点击打开可以选择作用域，我这里选择的是Java，也可以选择第一个，全部选择，如果不选的话，在变量编辑界面会出现系统提供下拉选择变量没有的情况</li>
<li>模板框中一定得现有内容，例如下面的代码注释模板，否则<code>Edit variables</code>按钮是不可点击状态的<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line">$params$</span><br><span class="line"> * @<span class="built_in">return</span> $returns$</span><br><span class="line"> * @exception $exception$</span><br><span class="line"> * @author $author$</span><br><span class="line"> * @date $date$ $time$</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li>
<li>上面的变量配置截图和内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">params:groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;<span class="variable">$&#123;_1&#125;</span>\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27; * @param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\r\\n&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())</span><br><span class="line"></span><br><span class="line">returns:methodReturnType()</span><br><span class="line"></span><br><span class="line">exception:expressionType(Expression)</span><br><span class="line"></span><br><span class="line">author:user()</span><br><span class="line"></span><br><span class="line">date:date()</span><br><span class="line"></span><br><span class="line">time:time()</span><br></pre></td></tr></table></figure>
变量录入完的效果见下图，这个地方有个比较奇怪的地方，在输入groovy代码的时候会出现切换后变成空的，这里可以输入完之后，直接点击OK，就能够保存下来了<img src="/2020/04/23/IDEA-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/screenshot_3.png" class=""></li>
</ul>
]]></content>
      <categories>
        <category>办公知识</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>自定义注释模板</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中自动生成serialVersionUID</title>
    <url>/2019/08/11/IDEA%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90serialVersionUID/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_59.jpg"><br>最近项目中使用Redis，需要对象进行序列化才能进行保存，看书上提供的entity对象中都会有一个serialVersionUID，查了下这是继承Serializable之后，需要生成一个，否则在反序列化的时候会出现无法反序列化的情况</p>
<h2 id="未配置情况下，在IDEA中的效果是如下的"><a href="#未配置情况下，在IDEA中的效果是如下的" class="headerlink" title="未配置情况下，在IDEA中的效果是如下的"></a>未配置情况下，在IDEA中的效果是如下的</h2><p>未配置的时候，<code>Alt+Enter</code>会不显示自动生成SerialVersionUID的功能</p>
<img src="/2019/08/11/IDEA%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90serialVersionUID/screenshot_1.png" class="">

<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>在IDEA中找到Fiel-&gt;Settings-&gt;搜索框输入inspect-&gt; 点击Inspections-&gt;输入serialV，找到下图中的两个选项勾上</p>
<img src="/2019/08/11/IDEA%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90serialVersionUID/screenshot_2.png" class="">

<h2 id="配置完成后效果"><a href="#配置完成后效果" class="headerlink" title="配置完成后效果"></a>配置完成后效果</h2><p>在实体类上<code>Alt+Enter</code>，可以看到有了自动生成SerialVersionSID的功能，点击即可自动添加上</p>
<img src="/2019/08/11/IDEA%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90serialVersionUID/screenshot_3.png" class="">
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>serialVersionUID</category>
      </categories>
      <tags>
        <tag>POJO</tag>
        <tag>serialVersionUID</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA安装免重启服务生效配置的插件</title>
    <url>/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_29.jpg"></p>
<blockquote>
<p>之前开发过程中总是修改完xml、添加类、方法的时候，重启Tomcat服务，今天有同事提到了一个插件，可以在不用重启Tomcat的时候，就能完成部署操作，这个插件叫JreBel，具体的安装步骤和操作方法如下</p>
</blockquote>
<h2 id="下载插件和破解的相关资料"><a href="#下载插件和破解的相关资料" class="headerlink" title="下载插件和破解的相关资料"></a>下载插件和破解的相关资料</h2><p>链接：<a href="https://pan.baidu.com/s/12sU2m7pfE4qVk1EDg98uLg">https://pan.baidu.com/s/12sU2m7pfE4qVk1EDg98uLg</a><br>提取码：79an<br><strong>百度网盘路径</strong>：我的网盘&gt;安装文件&gt;IDE&gt;IDEA&gt;服务免重启插件</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>点击File找到Settings</p>
</li>
<li><p>打开Settings,找到Plugins</p>
</li>
<li><p>点击Install from disk，打开选择本地插件选择的对话框</p>
</li>
<li><p>选择刚刚从百度云上下载的插件</p>
<img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_1.png" class=""></li>
<li><p>选择本地的文件</p>
<img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_2.png" class=""></li>
<li><p>安装完成后显示如下，需要重启下IDEA才能生效</p>
<img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_3.png" class=""></li>
</ol>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_4.png" class="">

<ol>
<li>按照图示将地址和账号输入进去，选择I Agree，点击激活，激活完成后会弹出如下图效果<img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_5.png" class=""></li>
</ol>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>激活完成之后，还需要设置离线可用操作，具体操作方法见下图所示：</p>
<img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_6.gif" class="">

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><img src="/2019/02/19/IDEA%E5%AE%89%E8%A3%85%E5%85%8D%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%95%88%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/screenshot_7.png" class="">
]]></content>
      <categories>
        <category>软件安装</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>插件安装</tag>
        <tag>服务免重启</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2019/02/19/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_30.jpg"></p>
<h2 id="高频使用"><a href="#高频使用" class="headerlink" title="高频使用"></a>高频使用</h2><blockquote>
<p><code>Ctrl+Shift+Enter</code> : 语句填补（获取建议里面的第一条补全）<br><code>Ctrl+Shift+Space</code>:代码提示输入<br><code>Ctrl+E</code> :打开最近打开的文档、对话框（TODO、Structure等等）<br><code>Shift+Click</code> :（左键点击标签可以关闭当前文件）<br><code>Ctrl+[ or ] </code>:可跳转到大括号的开始和结束<br><code>Ctrl+F12</code> :打开当前文档的文档结构<br><code>Ctrl+N</code>:快速打开类<br><code>Ctrl+Shift+N</code>:快速打开文件<br><code>Ctrl+Shift+Insert</code>,<code>Ctrl+Shift+V</code>:选择剪切板并快速插入<br><code>Alt+Insert</code>:可以生成构造器Getter/Setter等<br><font color='red'><code>Ctrl+Alt+T</code></font>: 代码块使用代码包裹起来，例如：try/catch<br><code>Alt+Enter</code>:导入包，选择修正（需要在异常的对象后面使用该快捷键）<br><code>Ctrl+Alt+L</code>:当前整个文档格式化代码<br><code>Ctrl+Alt+I</code>:选中代码格式化<br><code>Shift+F6</code>:重构-重命名文件（类、jsp、js等等）<br><code>Ctrl+Shift+UP/DOWN</code>,<code>Alt+Shift+UP/DOWN</code>:选中代码向上或向下移动一行<br><code>Ctrl+X</code>:删除光标所在当前行<br><code>Ctrl+Y</code>:删除选中行<br><code>Ctrl+D</code>:复制光标所在行<br><code>Ctrl+/</code>or<code>Ctrl+Shift+/</code>:注释选中代码或者光标所在当前行<br><font color='red'><code>Alt+left/right</code></font>:切换代码视图<br><font color='red'><code>Alt+up/down</code></font>:在方法间快速切换<br><font color='red'><code>F2</code> or <code>Shift+F2</code></font>:代码异常快速定位位置<br><code>Alt+F8</code>:计算变量值<br><font color='red'><code>Ctrl+B/Ctrl+Click</code></font>:快速打开光标处的类或方法（跳转到定义处）<br><code>Ctrl+O</code>:Overrider:重写<br><code>Ctrl+Shift+J</code>:整合两行<br><code>Ctrl+Shift+U</code>:大小写转化<br><code>Ctrl+Alt+S</code>:打开设置对话框<br><font color='red'><code>Alt+Shift+Inert</code></font>:开启/关闭列选择模式<br><font color='red'><code>Ctrl+BackSpace</code></font>:按单词删除  </p>
</blockquote>
<h3 id="查找-替换"><a href="#查找-替换" class="headerlink" title="查找/替换"></a>查找/替换</h3><blockquote>
<p><code>Ctrl+R</code>:替换文本<br><code>Ctrl+F</code>:查找文本<br><code>F3</code>: 查找时，跳转到下一个<br><code>Shift+F3</code>:查找时，跳转到上一个<br><code>Ctrl+Shift+F</code>:指定路径下全文搜索<br><code>Ctrl+Shift+R</code>:指定路径下全文替换<br><code>Alt+F1</code>:查找代码所在位置<br><code>Ctrl+Alt+left/right</code>:代码浏览的位置切换<br><code>Ctrl+Shift+BackSpace</code>:返回到上次编辑的位置<br><code>Ctrl+Alt+Up/Down</code>:快速跳转搜索结果<br><font color='red'><code>Ctrl+G</code></font>:定位行  </p>
</blockquote>
<h3 id="调试-运行"><a href="#调试-运行" class="headerlink" title="调试/运行"></a>调试/运行</h3><blockquote>
<p><code>Ctrl+F2</code>:停止<br><code>Alt+Shift+F9</code>:选择Debug模式启动<br><code>Alt+Shift+F10</code>:选择Run模式启动<br><code>Ctrl+Shift+F9</code>:编译<br><code>Ctrl+Shift+F10</code>:运行<br><code>Ctrl+Shift+F8</code>:查看断点<br><code>F8</code>:步进<br><code>F9</code>:恢复程序，直到下一个断点，如果没有断点，直接运行完成<br><code>Alt+F9</code>:运行至光标处<br><code>Ctrl+Alt+F9</code>:强制运行至光标处  </p>
</blockquote>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><blockquote>
<p><code>Ctrl+K</code>:打开代码提交界面：Commit Changes<br><code>Ctrl+T</code>:更新（Update Project）  </p>
</blockquote>
<h2 id="较少使用"><a href="#较少使用" class="headerlink" title="较少使用"></a>较少使用</h2><blockquote>
<p><code>Ctrl+F7</code> :当前选中元素在当前文件中的引用，按F3可以在找到的多个引用元素间跳转<br><code>Alt+Q</code>:快速查看当前方法的声明<br><code>Ctrl+Alt+O</code>:优化导入的类和包<br><code>Ctrl+Shift+Alt+N</code>:查找类中的方法或变量<br><code>Ctrl+J</code>:自动代码（例如：serr）<br><code>Ctrl+Alt+J</code>:用动态模板环绕<br><code>Ctrl+H</code>:显示类结构图（类的继承层次）<br><code>Ctrl+Q</code>:显示注释文档<br><code>Tab</code>:代码标签输入完成后，按 Tab，生成代码<br><code>Ctrl+Shift+F7</code>:高亮显示所有该文本，按 Esc 高亮消失，类似选中文本然后Ctrl+F<br><code>Alt+F3</code>:逐个往下查找相同文本，并高亮显示<br><code>Ctrl+Up/Down</code>:光标中转到第一行或最后一行下<br><code>Ctrl+Alt+Space</code>:类名自动完成<br><code>Shift+Esc</code>:不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br><code>F12</code>:把焦点从编辑器移到最近使用的工具窗口<br><code>Alt+Home</code>:跳转到导航栏<br><code>Ctrl+”+/-”</code>:(小键盘数字)当前方法展开、折叠<br><code>Ctrl+Shift+”+/-”</code>:(小键盘数字)全部展开、折叠<br><code>Ctrl+Enter</code>:上插一行<br><code>Alt+1</code>:项目<br><code>Alt+2</code>:收藏<br><code>Alt+6</code>:TODO<br><code>Alt+7</code>:结构<br><code>Ctrl+Alt+Shift+C</code>:复制引用，必须选择类名<br><code>Shift+F12</code>:还原默认布局  </p>
</blockquote>
<h2 id="不生效"><a href="#不生效" class="headerlink" title="不生效"></a>不生效</h2><p><code>Ctrl+Shift+S</code>:搜索结构<br><code>Ctrl+Shift+M</code>:替换结构  </p>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件整理</title>
    <url>/2021/01/22/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_95.jpg"><br>首先应该提到的插件应该<code>Jrebel</code>，之前有篇文章已经写过了，可以直接在左侧搜索下《IDEA安装免重启服务生效配置的插件》</p>
<ol>
<li><code>CodeGlance</code>缩放代码<br>该插件可以在代码输入框界面的右侧生成一个缩略图，点击缩略图可以快速定位到对应代码的位置上  </li>
</ol>
<p><strong>个人感受：</strong>使用方便，占用资源少</p>
<img src="/2021/01/22/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/screenshot_1.png" class="">

<ol start="2">
<li><code>Codota</code>代码提示工具<br>这个代码提示工具提示不仅限于提示，还是在代码中带上百万开源Java程序员使用的率，也就是会在每个提示后面加上有多少程序员选择了该提示  </li>
</ol>
<p><strong>个人感受：</strong>这个没怎么使用，有可能存在代码上传的风险，但具体没再研究</p>
<ol start="3">
<li>Alibaba Cloud Toolkit快速部署到服务器<br>这是一个直接将IDEA中的程序进行打包发布到服务器上指定目录的插件，简单的说就是如果你想发布了，直接在插件里面点下upload，她就会自动调用mvn的打包功能，把程序打包然后上传到服务器上你设定的文件夹目录下  </li>
</ol>
<p><strong>个人感受：</strong>使用功能尚可，但存在一个BUG，也就是卸载插件后，不知道为啥每次启动IDEA还是会提示是否要安装该插件，强迫症会很郁闷</p>
<ol start="4">
<li>JUnitGenerator 测试代码生成<br>这个是用来自动生成测试代码的插件  </li>
</ol>
<p><strong>个人感受：</strong>具体没使用，个人能力问题，没写过测试代码，悲剧</p>
<ol start="5">
<li>MyBatis Log Plugin 执行SQL自动替换参数拼接SQL<br>在MyBatis是否碰到过想要抠出来SQL，想要替换参数，一通操作很头疼，这个插件就是解决这个问题的，需要启动项目，然后在IDEA顶部菜单中的Tools中找到这个插件，然后点击，打开窗体  </li>
</ol>
<p><strong>个人感受：</strong>如果SQL出现执行错误的时候，他是打印不出来的，其他都挺好，一开始安装完插件发现找不到从哪里打开，很郁闷，又现百度的</p>
<img src="/2021/01/22/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/screenshot_2.png" class="">

<ol start="6">
<li>MyBatisX 跳转Mapper xml<br>之前有没有碰到到了*Mapper.java跳转Mapper.xml的时候很头疼，需要复制方法，复制Mapper的文件名，然后才能定位，有了这个插件，可以直接从ServiceImpl中点击Mapper的方法直接跳转到Mapper.xml文件的对应的方法上；另外还有在Mapper.java新建方法的时候会自动提示xml中没有，点击快捷键可以自动在xml中生成，这样方法名再也不怕写错了  </li>
</ol>
<p><strong>个人感受：</strong>好用，建议安装，资源占用少，使用方便</p>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>插件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>ImageView图片预览的使用方法及代码</title>
    <url>/2019/01/25/ImageView%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<blockquote>
<p>最近在做一个项目上图片预览的功能，常规情况下都是简单的一个类型下的图片，但目前的需求是左侧展示一个用户下的图片类型，右边显示这个用户下这个类型的图片的列表，点击列表上的图片还能看大图进行预览操作</p>
</blockquote>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;预览影像资料&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../../main/scripts/bootstrap-3.3.7/css/bootstrap.css&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../../main/scripts/imagesview/css/main.css&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../../main/scripts/imagesview/css/mine.css&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../../main/scripts/imagesview/css/viewer.css&quot;</span>&gt;</span><br><span class="line">    &lt;!-- Scripts --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../../main/scripts/imagesview/js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../../main/scripts/imagesview/js/viewer.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .menu &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: <span class="number">0</span>;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">            bottom: <span class="number">0</span>;</span><br><span class="line">            width: 200px;</span><br><span class="line">            padding-top: 100px;</span><br><span class="line">            font-family: Consolas, arial, <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line">            background-color: #ccc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .menu a &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 40px;</span><br><span class="line">            margin: <span class="number">0</span> <span class="number">0</span> 1px 2px;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #333;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .menu a.cur &#123;</span><br><span class="line">            background-color: #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .menu a:hover &#123;</span><br><span class="line">            background-color: #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* .menu .cur &#123; color: #000; background-color: #fff !important;&#125; */</span></span><br><span class="line">        #jq22 &#123;</span><br><span class="line">            width: 700px;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">            font-size: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #jq22 li &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: <span class="number">32</span>%;</span><br><span class="line">            height: 150px;</span><br><span class="line">            margin-left: <span class="number">1</span>%;</span><br><span class="line">            padding-top: <span class="number">1</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #jq22 li img &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 左边内容 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menu&quot;</span>&gt;</span><br><span class="line">        &lt;a id=<span class="string">&quot;all-items&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cur menu-item&quot;</span> href=<span class="string">&quot;javascript:;&quot;</span> onclick=<span class="string">&quot;initImages(&#x27;&#x27;)&quot;</span>&gt;&amp;nbsp&amp;nbsp全部影像&lt;/a&gt;</span><br><span class="line">        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menu-item&quot;</span> href=<span class="string">&quot;#&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 右边内容 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;right&quot;</span> id=<span class="string">&quot;right&quot;</span>&gt;</span><br><span class="line">        &lt;!--<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;hname&quot;</span>&gt;</span>全部影像<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>--&gt;</span><br><span class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;docs-pictures clearfix&quot;</span> id=<span class="string">&quot;jq22&quot;</span>&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> viewer;</span><br><span class="line">    <span class="keyword">var</span> applyId = mini.getParams().applyId;<span class="comment">//申请ID</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//初始化左侧的资料类型</span></span><br><span class="line">        initImageType();</span><br><span class="line">        initImages(<span class="string">&#x27;&#x27;</span>);<span class="comment">//初始化的时候加载所有的图片</span></span><br><span class="line">        <span class="comment">//初始化viewer</span></span><br><span class="line">        viewer = <span class="keyword">new</span> Viewer(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;jq22&#x27;</span>), &#123;</span><br><span class="line">            show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                viewer.update();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载左侧的资料类型</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initImageType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:eg.getRequestUrl()+<span class="string">&#x27;/imgManage/getImageType&#x27;</span>,</span><br><span class="line">            type:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            data:&#123;<span class="attr">applyId</span>:applyId&#125;,</span><br><span class="line">            <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">            dataType:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;<span class="comment">//如果查询成功，加载遍历左侧的数据</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> dataIndex=<span class="number">0</span>;dataIndex &lt; data.datalist.length;dataIndex++)&#123;</span><br><span class="line">                        (<span class="function"><span class="keyword">function</span>(<span class="params">dataIndex</span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> a=<span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                            <span class="keyword">var</span> innerText = data.datalist[dataIndex].DOC_NAME</span><br><span class="line">                            a.innerHTML=innerText;</span><br><span class="line">                            a.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                                e.preventDefault();  <span class="comment">//取消默认事件，指a标签</span></span><br><span class="line">                                initImages(data.datalist[dataIndex].DOC_CODE);</span><br><span class="line">                            &#125;);</span><br><span class="line">                            $(<span class="string">&quot;#all-items&quot;</span>).append(a);</span><br><span class="line"></span><br><span class="line">                        &#125;)(dataIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mini.alert(data.msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载右侧的图片信息</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initImages</span>(<span class="params">docCode</span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:eg.getRequestUrl()+<span class="string">&#x27;/imgManage/getImagesByApplyIdAndDocCode&#x27;</span>,</span><br><span class="line">            type:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            data:&#123;<span class="attr">applyId</span>:applyId,<span class="attr">docCode</span>:docCode&#125;,</span><br><span class="line">            dataType:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;<span class="comment">//遍历显示图片</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> imageList = data.datalist;</span><br><span class="line">                    $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;cur&#x27;</span>).siblings(<span class="string">&#x27;a&#x27;</span>).removeClass(<span class="string">&#x27;cur&#x27;</span>);</span><br><span class="line">                    <span class="comment">//$.trim($(&quot;#hname&quot;).text($(this).text()));</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> li = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = imageList.length; i &lt; l; i++)&#123;</span><br><span class="line">                        li += <span class="string">&quot;&lt;li class=&#x27;catImg&#x27;&gt;&lt;img data-original=&#x27;&quot;</span>+eg.getRequestUrl()+imageList[i].FILE_PATH+imageList[i].FILE_ID+imageList[i].FILE_TYPE+<span class="string">&quot;&#x27; src=&#x27;&quot;</span>+eg.getRequestUrl()+imageList[i].FILE_PATH+imageList[i].FILE_ID+imageList[i].FILE_TYPE+<span class="string">&quot;&#x27;&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#jq22&quot;</span>).html(li);</span><br><span class="line">                    viewer.update();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mini.alert(data.msg,<span class="string">&quot;温馨提示&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端插件</category>
        <category>imageview</category>
      </categories>
      <tags>
        <tag>imageview</tag>
        <tag>图片预览</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA小知识点</title>
    <url>/2019/01/24/JAVA%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_13.jpg"></p>
<h3 id="创建List的技巧方法-简单高效、暴力"><a href="#创建List的技巧方法-简单高效、暴力" class="headerlink" title="创建List的技巧方法,简单高效、暴力"></a>创建List的技巧方法,简单高效、暴力</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;role1&quot;</span>,<span class="string">&quot;role2&quot;</span>,<span class="string">&quot;role3&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="数据类型…的使用（不确定参数数量的方法使用）"><a href="#数据类型…的使用（不确定参数数量的方法使用）" class="headerlink" title="数据类型…的使用（不确定参数数量的方法使用）"></a>数据类型…的使用（不确定参数数量的方法使用）</h3><p>当出现方法的参数不确定个数的时候（参数的类型一样）可以使用<code>数据类型...</code><br>目前测试了<code>String</code>、<code>int</code>是可以使用的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testString()&#123;</span><br><span class="line">    testStrings(&quot;123123&quot;,&quot;123234234&quot;,&quot;asdasd&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void testStrings(String... strargs)&#123;</span><br><span class="line">    for(String tempStr:strargs)&#123;</span><br><span class="line">        System.out.println(tempStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数字数据格式化"><a href="#数字数据格式化" class="headerlink" title="数字数据格式化"></a>数字数据格式化</h3><p>有些需要格式化为001、002的需求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> DecimalFormat(<span class="string">&quot;000&quot;</span>).format(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Java后台获取项目路径-classpath和resourcepath"><a href="#Java后台获取项目路径-classpath和resourcepath" class="headerlink" title="Java后台获取项目路径(classpath和resourcepath)"></a>Java后台获取项目路径(classpath和resourcepath)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClasspath</span><span class="params">()</span></span>&#123;</span><br><span class="line">	String path = (String.valueOf(Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;&quot;</span>))+<span class="string">&quot;../../&quot;</span>).replaceAll(<span class="string">&quot;file:/&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;%20&quot;</span>, <span class="string">&quot; &quot;</span>).trim();</span><br><span class="line">	<span class="keyword">if</span>(path.indexOf(<span class="string">&quot;:&quot;</span>) != <span class="number">1</span>)&#123;</span><br><span class="line">		path = File.separator + path;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClassResources</span><span class="params">()</span></span>&#123;</span><br><span class="line">	String path =  (String.valueOf(Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;&quot;</span>))).replaceAll(<span class="string">&quot;file:/&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;%20&quot;</span>, <span class="string">&quot; &quot;</span>).trim();</span><br><span class="line">	<span class="keyword">if</span>(path.indexOf(<span class="string">&quot;:&quot;</span>) != <span class="number">1</span>)&#123;</span><br><span class="line">		path = File.separator + path;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将含有英文逗号的字符串转成JSONArray"><a href="#将含有英文逗号的字符串转成JSONArray" class="headerlink" title="将含有英文逗号的字符串转成JSONArray"></a>将含有英文逗号的字符串转成JSONArray</h3><p>String tempStr = “1,2,3,4,5”;<br>JSON.parseArray(“[“+tempStr+”]”)</p>
<h3 id="嵌套for循环continue和break父级循环的方法"><a href="#嵌套for循环continue和break父级循环的方法" class="headerlink" title="嵌套for循环continue和break父级循环的方法"></a>嵌套for循环continue和break父级循环的方法</h3><p>常规情况下的for循环中使用break和continue很简单，就是退出当前循环和进入一下次循环而不执行后续for循环中代码的功能，但存在一些业务情况，需要进行for循环的嵌套，从而实现双层循环，但在双层循环下，需要在子循环中break父循环或者continue父循环的时候，就得使用标签了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a:<span class="comment">//a在此处,运行结果为：i:0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//如果是continue，当i=1的时候，i=1是不会打印的</span></span><br><span class="line">            <span class="comment">//contine a;</span></span><br><span class="line">            <span class="comment">//如果是break的时候，当i=1的时候，则整个循环都退出了</span></span><br><span class="line">            <span class="keyword">break</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">           System.out.print(<span class="string">&quot;i:&quot;</span>+i)</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;j：&quot;</span>+j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS setInterval()方法</title>
    <url>/2019/01/25/JS-setInterval-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>setInterval是按照指定周期（毫秒）调用函数或计算表达式，会不停的调用函数，直到调用clearInterval或者窗口关闭。其中setinterval返回的ID可以用作clearInterval方法的参数</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(code,millisec[,<span class="string">&quot;lang&quot;</span>])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">是否必须</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td align="center">是</td>
<td>循环调用的代码或者需要执行的代码穿</td>
</tr>
<tr>
<td>millisec</td>
<td align="center">是</td>
<td>执行的周期，毫秒为单位</td>
</tr>
</tbody></table>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>可以用作clearInterval()从而取消code循环执行的ID</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;clock&quot;</span> <span class="attr">size</span>=<span class="string">&quot;35&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> int=self.setInterval(<span class="string">&quot;clock()&quot;</span>,<span class="number">50</span>)</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">clock</span>(<span class="params"></span>)</span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> t=<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;clock&quot;</span>).value=t</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;int=window.clearInterval(int)&quot;</span>&gt;</span></span><br><span class="line">Stop interval<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>setInterval</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP知识点</title>
    <url>/2019/02/01/JSP%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_24.jpg"></p>
<h2 id="隐藏iframe提交功能"><a href="#隐藏iframe提交功能" class="headerlink" title="隐藏iframe提交功能"></a>隐藏iframe提交功能</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//隐藏Iframe提交功能</span><br><span class="line">document.forms[0].target = &quot;hiddenFrame&quot;;</span><br><span class="line">document.forms[0].action = url;</span><br><span class="line">document.forms[0].submit();</span><br></pre></td></tr></table></figure>
<h2 id="jsp调用servlet进行页面跳转"><a href="#jsp调用servlet进行页面跳转" class="headerlink" title="jsp调用servlet进行页面跳转"></a>jsp调用servlet进行页面跳转</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/Newpage.jsp&quot;</span>).forward(request,response);</span><br><span class="line">主要的部分就是红字部分，由于跳转到的页面就在根目录下面，因此只需要跟到（“/Newpage.jsp”）就可以了！</span><br></pre></td></tr></table></figure>

<h2 id="JSP之间传递中文汉字"><a href="#JSP之间传递中文汉字" class="headerlink" title="JSP之间传递中文汉字"></a>JSP之间传递中文汉字</h2><p><code>A.jsp</code>中keyword是中文的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xyd.buttonClick(<span class="string">&quot;cms-search&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = <span class="string">&quot;keyword=&quot;</span>+$(<span class="string">&quot;[data-out-name=&#x27;cms-keyword&#x27;]&quot;</span>).val();</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&quot;&lt;%=_basePath%&gt;/page/my-cms-search.jsp?&quot;</span>+key;</span><br><span class="line">  <span class="comment">// 这个地方是两遍（encodeURI），一定要记住</span></span><br><span class="line">  location.href = <span class="built_in">encodeURI</span>(<span class="built_in">encodeURI</span>(url));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>B.jsp</code>中接收传递的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//搜索</span></span><br><span class="line">String keyword = request.getParameter(<span class="string">&quot;keyword&quot;</span>)==<span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : (String)request.getParameter(<span class="string">&quot;keyword&quot;</span>);</span><br><span class="line">keyword = URLDecoder.decode(keyword);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>JSP</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>JS字符串转JSON对象</title>
    <url>/2019/01/25/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACJSON%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_11.jpg"></p>
<blockquote>
<p>JS字符串转换成JSON对象目前发现了四种方法</p>
</blockquote>
<h2 id="1-Jquery方法"><a href="#1-Jquery方法" class="headerlink" title="1. Jquery方法"></a>1. Jquery方法</h2><p>示例代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将json字符串转换成json对象</span><br><span class="line">$.parseJSON(jsonStr);</span><br><span class="line">jQuery.parseJSON(jsonStr)</span><br></pre></td></tr></table></figure>

<h2 id="2-浏览器支持转换的方法（Firefox、Chrome、opera、safari、ie）"><a href="#2-浏览器支持转换的方法（Firefox、Chrome、opera、safari、ie）" class="headerlink" title="2. 浏览器支持转换的方法（Firefox、Chrome、opera、safari、ie）"></a>2. 浏览器支持转换的方法（<code>Firefox、Chrome、opera、safari、ie</code>）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.parse(jsonstr)&#x2F;&#x2F;可以将json字符串转换成json对象</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.stringify(jsonOjb)&#x2F;&#x2F;可以将JSONObject转换成json字符串</span><br></pre></td></tr></table></figure>

<h2 id="3-Javascript支持的转换方式（不建议）"><a href="#3-Javascript支持的转换方式（不建议）" class="headerlink" title="3. Javascript支持的转换方式（不建议）"></a>3. Javascript支持的转换方式<font color='red'>（不建议）</font></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval(&#39;(&#39; + jsonstr + &#39;)&#39;);</span><br></pre></td></tr></table></figure>
<h2 id="4-JSON官方的转换方式"><a href="#4-JSON官方的转换方式" class="headerlink" title="4. JSON官方的转换方式"></a>4. JSON官方的转换方式</h2><p><a href="https://github.com/douglascrockford/JSON-js">JSON官网提供的Github上的关于JSON转换的方法</a></p>
<blockquote>
<p>当然还有很多方法，在官网下面有很多各个语言的处理方法，具体的<a href="http://www.json.org/">链接</a>可以查看</p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>JS正则表达式校验手机号、邮箱、网址、日期、身份证</title>
    <url>/2019/01/25/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%A1%E9%AA%8C%E6%89%8B%E6%9C%BA%E5%8F%B7%E3%80%81%E9%82%AE%E7%AE%B1%E3%80%81%E7%BD%91%E5%9D%80%E3%80%81%E6%97%A5%E6%9C%9F%E3%80%81%E8%BA%AB%E4%BB%BD%E8%AF%81/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_13.jpg"></p>
<h2 id="常规正则表达式"><a href="#常规正则表达式" class="headerlink" title="常规正则表达式"></a>常规正则表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">验证手机号：&#x2F;^1\d&#123;10&#125;$&#x2F;</span><br><span class="line"></span><br><span class="line">验证邮箱：&#x2F;^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$&#x2F;</span><br><span class="line"></span><br><span class="line">验证url：&#x2F;(^#)|(^http(s*):\&#x2F;\&#x2F;[^\s]+\.[^\s]+)&#x2F;</span><br><span class="line"></span><br><span class="line">日期：&#x2F;^(\d&#123;4&#125;)[-\&#x2F;](\d&#123;1&#125;|0\d&#123;1&#125;|1[0-2])([-\&#x2F;](\d&#123;1&#125;|0\d&#123;1&#125;|[1-2][0-9]|3[0-1]))*$&#x2F;</span><br><span class="line"></span><br><span class="line">证身份证：&#x2F;(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(x|X|\d)$)&#x2F;</span><br><span class="line"></span><br><span class="line">中文：[\u4e00-\u9fa5]</span><br><span class="line"></span><br><span class="line">电话号码（国内）：[0-9-()（）]&#123;7,18&#125;</span><br><span class="line"></span><br><span class="line">邮政编码：\d&#123;6&#125;</span><br><span class="line"></span><br><span class="line">IP地址：(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)</span><br><span class="line"></span><br><span class="line">正整数：[1-9]\d*</span><br><span class="line"></span><br><span class="line">负整数：-[1-9]\d*</span><br><span class="line"></span><br><span class="line">用户名：[A-Za-z0-9_\-\u4e00-\u9fa5]+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg&#x3D;&#x2F;(^#)|(^http(s*):\&#x2F;\&#x2F;[^\s]+\.[^\s]+)&#x2F;;</span><br><span class="line">if(!reg.test(data.field.link))&#123;</span><br><span class="line">     layer.msg(&#39;外链格式错误，请输入以http:&#x2F;&#x2F;或https:&#x2F;&#x2F;开头的完整url！&#39;,&#123;icon: 5&#125;);</span><br><span class="line">     return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>正则校验</tag>
      </tags>
  </entry>
  <entry>
    <title>Java ExecutorService限制线程数量</title>
    <url>/2019/01/30/Java-ExecutorService%E9%99%90%E5%88%B6%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_21.jpg"><br><a href="https://blog.csdn.net/huuinn/article/details/78398514">本文引自使用JAVA的ExecutorService来限制线程数量</a></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>目前对于线程的了解还是比较少，今天碰到一个使用微信公众号发送微信消息的功能，会出现批量发送的问题，如果排队执行，肯定会需要很长的时间，因此需要起线程执行，但是线程又不可能无限制的一直起，肯定会造成内存溢出类似的问题，因此想到了限制线程数量的方法。查阅了一些文章，提到了ExecutorService能够实现，因此进行了如下记录</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="ExecutorService是什么"><a href="#ExecutorService是什么" class="headerlink" title="ExecutorService是什么"></a>ExecutorService是什么</h3><p><code>ExecutorService</code>是Java并行运行的计算库<code>java.util.concurrent</code>包里面的接口，封装原来的难以使用的Java线程，使其简单优化</p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="线程代码"><a href="#线程代码" class="headerlink" title="线程代码"></a>线程代码</h3><p>根据给定的生命周期，记录生命周期前后的时间点并输出信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> time;</span><br><span class="line"></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    SampleThread(<span class="keyword">int</span> no, <span class="keyword">int</span> time) &#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//开始执行，显示当前的时间，用于计算进程执行的生命周期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;No.&quot;</span> + no + <span class="string">&quot; start ID:&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 生命周期:&quot;</span> + time + <span class="string">&quot; 现在时间:&quot;</span> + sdf.format(Calendar.getInstance().getTime()));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(time * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行完毕之后，打印执行结束时的时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;No.&quot;</span> + no + <span class="string">&quot; end ID:&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 生命周期:&quot;</span> + time + <span class="string">&quot; 现在时间:&quot;</span> + sdf.format(Calendar.getInstance().getTime()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用ExecutorService调用线程的代码"><a href="#使用ExecutorService调用线程的代码" class="headerlink" title="使用ExecutorService调用线程的代码"></a>使用ExecutorService调用线程的代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> MAX_THREADS = <span class="number">3</span>; <span class="comment">//定义线程数最大值</span></span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(MAX_THREADS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> no = i;</span><br><span class="line">            <span class="comment">//随机一个线程能活多少秒</span></span><br><span class="line">            <span class="keyword">int</span> lifeTime = (<span class="keyword">int</span>)(Math.random() * <span class="number">9</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//将线程提交到executorService中，等待执行</span></span><br><span class="line">            executorService.submit(<span class="keyword">new</span> SampleThread(no, lifeTime));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;executor.shutdown();&quot;</span>);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行的结果"><a href="#执行的结果" class="headerlink" title="执行的结果"></a>执行的结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">executor.shutdown();</span><br><span class="line">No.0 start ID:13 生命周期:4 现在时间:21:52:46</span><br><span class="line">No.2 start ID:15 生命周期:4 现在时间:21:52:46</span><br><span class="line">No.1 start ID:14 生命周期:1 现在时间:21:52:46</span><br><span class="line">No.1 end ID:14 生命周期:1 现在时间:21:52:47</span><br><span class="line">No.3 start ID:14 生命周期:2 现在时间:21:52:47</span><br><span class="line">No.3 end ID:14 生命周期:2 现在时间:21:52:49</span><br><span class="line">No.4 start ID:14 生命周期:6 现在时间:21:52:49</span><br><span class="line">No.0 end ID:13 生命周期:4 现在时间:21:52:50</span><br><span class="line">No.5 start ID:13 生命周期:2 现在时间:21:52:50</span><br><span class="line">No.2 end ID:15 生命周期:4 现在时间:21:52:50</span><br><span class="line">No.6 start ID:15 生命周期:6 现在时间:21:52:50</span><br><span class="line">No.5 end ID:13 生命周期:2 现在时间:21:52:52</span><br><span class="line">No.7 start ID:13 生命周期:2 现在时间:21:52:52</span><br><span class="line">No.7 end ID:13 生命周期:2 现在时间:21:52:54</span><br><span class="line">No.8 start ID:13 生命周期:7 现在时间:21:52:54</span><br><span class="line">No.4 end ID:14 生命周期:6 现在时间:21:52:55</span><br><span class="line">No.9 start ID:14 生命周期:5 现在时间:21:52:55</span><br><span class="line">No.6 end ID:15 生命周期:6 现在时间:21:52:56</span><br><span class="line">No.9 end ID:14 生命周期:5 现在时间:21:53:00</span><br><span class="line">No.8 end ID:13 生命周期:7 现在时间:21:53:01</span><br><span class="line">Disconnected from the target VM, address: <span class="string">&#x27;127.0.0.1:14207&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>同一个时间点执行的线程数量不会超过MAX_THREAD所定义的数量</li>
<li>从线程的ID可以看出，只有三个线程在跑</li>
<li>有点没搞明白的是：ExecutorService已经在主线程里面调用了shutdown了，但是在子线程还能在正常调度的问题？？？</li>
</ul>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>Thread</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程数量控制</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Thread 基础使用方法</title>
    <url>/2019/01/24/Java-Thread-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_13.jpg"></p>
<h1 id="线程运行状态的几个方法"><a href="#线程运行状态的几个方法" class="headerlink" title="线程运行状态的几个方法"></a>线程运行状态的几个方法</h1><blockquote>
<p><code>start</code>方法    </p>
</blockquote>
<p>用来启动一个线程，当调用start方法的时候，系统才会开启一个新的线程来执行用户定义的子任务，并为线程分配需要的资源  </p>
<hr>
<blockquote>
<p><code>run</code>方法</p>
</blockquote>
<p>run()方法不需要用户调用，当通过start启动一个线程的时候，当线程或得了CPU执行时间，便会自动进入到run方法去执行具体的任务。<code>*</code>继承Thread类必须要重写run方法，在run中定义具体要执行的任务。</p>
<hr>
<blockquote>
<p><code>sleep</code>方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sleep(<span class="keyword">long</span> millis) <span class="comment">//参数为毫秒</span></span><br><span class="line">sleep(<span class="keyword">long</span> millis,<span class="keyword">int</span> nanoseconds) <span class="comment">// 第一个参数为毫秒，第二个参数为纳秒</span></span><br></pre></td></tr></table></figure>

<p>sleep相当于让线程睡眠，交出CPU，去执行其他任务。</p>
<p>但是sleep方法不会释放锁，某个对象加锁，则即使调用sleep方法，其他线程也无法访问这个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread1 = test.<span class="function">new <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        MyThread thread2 = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">&quot;i:&quot;</span>+i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;进入睡眠状态&quot;</span>);</span><br><span class="line">                    Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;睡眠结束&quot;</span>);</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">&quot;i:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i:11</span><br><span class="line">线程Thread-0进入睡眠状态</span><br><span class="line">线程Thread-0睡眠结束</span><br><span class="line">i:12</span><br><span class="line">i:13</span><br><span class="line">线程Thread-1进入睡眠状态</span><br><span class="line">Disconnected from the target VM, address: &#x27;127.0.0.1:13332&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line">线程Thread-1睡眠结束</span><br><span class="line">i:14</span><br></pre></td></tr></table></figure>

<p><code>*</code>从上面的输出结果可以看出，当Thread0进入睡眠状态之后，Thread1并没有去执行具体的任务，只有当Thread0执行完成后，此时Thread0释放了对象锁，Thread1才开始执行</p>
<hr>
<blockquote>
<p><code>yield</code>方法</p>
</blockquote>
<p>调用<code>yield</code>方法会让当前线程交出CPU权限，让CPU去执行其他线程。它跟sleep方法类似，同样不会释放锁。但是yield不能控制具体交出的CPU时间，另外<code>yield</code>方法只能让拥有相同优先级的线程获取CPU执行时间的机会。</p>
<p><code>*</code> 调用<code>yield</code>方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，它只需要等待重新获取CPU执行时间，这一点和sleep方法不一样的</p>
<hr>
<blockquote>
<p><code>join</code>方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">join()</span><br><span class="line">join(<span class="keyword">long</span> millis) <span class="comment">//参数为毫秒</span></span><br><span class="line">join(<span class="keyword">long</span> millis,<span class="keyword">int</span> nanoseconds) <span class="comment">//第一个参数为毫秒，第二个参数为纳秒</span></span><br></pre></td></tr></table></figure>

<p>假如在main线程中，调用<code>thread.join</code>方法,则main方法会等待thread线程执行完毕或者等待一定的时间。如果调用的是无参join方法，则等待thread方法执行完毕，如果调用的是指定时间join方法，则等待一定的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入线程&quot;</span>+Thread.currentThread().getName());<span class="comment">//执行顺序①</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread1 = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;等待&quot;</span>);<span class="comment">//执行顺序②</span></span><br><span class="line">            thread1.join();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;继续执行&quot;</span>);<span class="comment">//执行顺序⑤</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入线程&quot;</span>+Thread.currentThread().getName());<span class="comment">//执行顺序③</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;执行完毕&quot;</span>);<span class="comment">//执行顺序④</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①进入线程main</span><br><span class="line">②线程main等待</span><br><span class="line">③进入线程Thread-0</span><br><span class="line">④线程Thread-0执行完毕</span><br><span class="line">⑤线程main继续执行</span><br></pre></td></tr></table></figure>

<p>可以看出，当调用thread1.join()方法后，main线程会进入等待，然后等待thread1执行完之后再继续执行。</p>
<hr>
<blockquote>
<p>interrupt方法</p>
</blockquote>
<p>中断方法，单独调用interrupt方法可以使得处于阻塞状态的线程抛出一个异常，也就是说，它可以用来中断一个正处在阻塞状态的线程；另外，通过interrupt方法和isInterrupted()方法来停止正在运行的线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进入睡眠状态&quot;</span>);</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;睡眠完毕&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;得到中断异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;run方法执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入睡眠状态</span><br><span class="line">得到中断异常</span><br><span class="line">run方法执行完毕</span><br></pre></td></tr></table></figure>

<p>从上面的结果输出可以看出：</p>
<p>当线程调用<code>interrupt</code>的时候，中断处于阻塞状态的线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;Integer.MAX_VALUE)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; while循环&quot;</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的程序会一直执行下去，执行到Int的最大值，说明了一点<code>interrupt</code>方法不能中断正在运行中的线程</p>
<p>但是如果配合<code>isInterrupted()</code>能够中断正在运行的线程，因为调用interrupt方法相当于将中断标志置为true，那么可以通过调用isInterrupted()判断中断标志是否被置为中断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xydtech.controller.prdman.prdconfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!isInterrupted()&amp;&amp;i&lt;Integer.MAX_VALUE)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; while循环&quot;</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码中，设置thread为interrupt之后，内部while循环的时候查询到不满足条件了，自然退出了循环，<font color='red'>但是一般不建议通过这种方式来中断线程</font>，一般会在Thread中添加一个属性isStop来指标是否结束while循环，然后再在while循环中判断isStop的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">            thread.setStop(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isStop = <span class="keyword">false</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!isStop &amp;&amp; i&lt;Integer.MAX_VALUE)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; while循环&quot;</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStop</span><span class="params">(<span class="keyword">boolean</span> stop)</span> </span>&#123;</span><br><span class="line">            isStop = stop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><code>stop</code>方法<code>destroy</code>方法<br>这两个方法基本上被废弃了，基本上不会被使用到</p>
</blockquote>
<h1 id="线程相关属性的方法"><a href="#线程相关属性的方法" class="headerlink" title="线程相关属性的方法"></a>线程相关属性的方法</h1><blockquote>
<p><code>getId()</code> 得到线程的ID<br><code>getName()</code>和<code>setName()</code> 用来得到或者设置线程的名称<br><code>getPriority</code>和<code>setPriority</code> 用来获取和设置线程的优先级<br><code>setDaemon</code>和<code>isDaemon</code>用来设置线程为守护线程和判断线程是否为守护线程。</p>
</blockquote>
<p><font color='red'>*</font>重点：守护线程和用户线程的却别是，守护线程依赖于创建它的线程，而用户线程不依赖于创建它的线程，当mian方法运行完毕后，守护线程会随之消亡。但是用户线程不会消失，直至其运行完毕。在JVM中，垃圾收集器线程就是守护线程。<br>Thread类中有一个比较常用的静态类方法<code>currentThread</code>用来获取当前线程。  </p>
<h1 id="方法调用和Thread的生命周期关系"><a href="#方法调用和Thread的生命周期关系" class="headerlink" title="方法调用和Thread的生命周期关系"></a>方法调用和Thread的生命周期关系</h1><img src="/2019/01/24/Java-Thread-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/screenshot_1.jpg" class="">
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>Thread</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 读取和保存properties文件内容</title>
    <url>/2019/01/29/Java-%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98properties%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_16.jpg"></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>最近做微信公众号，需要读取配置文件中的appId等信息，鄙人将这些固定的信息放进了properties文件里面，因此才用到了这块读操作，顺道也把写操作在网上查了下</p>
<h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><h3 id="Properties类和properties配置文件"><a href="#Properties类和properties配置文件" class="headerlink" title="Properties类和properties配置文件"></a>Properties类和properties配置文件</h3><p>Properties类继承自Hashtable，并实现了Map的接口，也就是properties文件在Properties类中是以键值对存在的，而且值都是字符串</p>
<h3 id="Properties类的主要的方法"><a href="#Properties类的主要的方法" class="headerlink" title="Properties类的主要的方法"></a>Properties类的主要的方法</h3><ul>
<li><p>load(InputStream inStream)<br>以文件流的形式加载文件中的信息到Properties类中，具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//文件流读取文件信息</span></span><br><span class="line">FileInputStream inStrem = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>);</span><br><span class="line"><span class="comment">//加载数据到Properties类中</span></span><br><span class="line">pro.load(in);</span><br><span class="line"><span class="comment">//关闭文件流</span></span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li>
<li><p>store(OutputStream out, String comments)<br>将Properties类中的内容输出保存到properties文件当中，具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream outFile = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.properties&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">pro.store(outFile,<span class="string">&quot;Comments&quot;</span>);</span><br><span class="line">outFile.close();</span><br></pre></td></tr></table></figure>
<p>如果comments不为空，保存后文件的第一行回事#comments，表示注释信息；如果为空则没有注释信息</p>
</li>
<li><p>getProperty/setProperty<br>这两个方法分别是用来获取和设置properties文件的属性的</p>
</li>
</ul>
<h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><ul>
<li>a.properties文件的内容如下<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">pass</span>=<span class="string">liu</span></span><br><span class="line"><span class="attr">key</span>=<span class="string">value</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="读取a-properties文件和生成b-properties文件"><a href="#读取a-properties文件和生成b-properties文件" class="headerlink" title="读取a.properties文件和生成b.properties文件"></a>读取a.properties文件和生成b.properties文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();     </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//读取属性文件a.properties</span></span><br><span class="line">            InputStream in = <span class="keyword">new</span> BufferedInputStream (<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">            prop.load(in);     <span class="comment">///加载属性列表</span></span><br><span class="line">            Iterator&lt;String&gt; it=prop.stringPropertyNames().iterator();</span><br><span class="line">            <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">                String key=it.next();</span><br><span class="line">                System.out.println(key+<span class="string">&quot;:&quot;</span>+prop.getProperty(key));</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">///保存属性到b.properties文件</span></span><br><span class="line">            FileOutputStream oFile = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;b.properties&quot;</span>, <span class="keyword">true</span>);<span class="comment">//true表示追加打开</span></span><br><span class="line">            prop.setProperty(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;10086&quot;</span>);</span><br><span class="line">            prop.store(oFile, <span class="string">&quot;The New properties file&quot;</span>);</span><br><span class="line">            oFile.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResourceBundle"><a href="#ResourceBundle" class="headerlink" title="ResourceBundle"></a>ResourceBundle</h2><p>该类是基于类读取属性：将属性文件当做类，意味着属性文件必须放在包中，使用属性文件的权限定性类名而非路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于类读取属性文件：该方法将属性文件当作类来处理，属性文件放在包中，使用属性文件的全限定性而非路径来指代文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;com.javase.properties.test01&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取指定key的值&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;driver=&quot;</span> + bundle.getString(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;url=&quot;</span> + bundle.getString(<span class="string">&quot;jdbc.url&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;username=&quot;</span> + bundle.getString(<span class="string">&quot;jdbc.username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;password=&quot;</span> + bundle.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历属性文件&quot;</span>);</span><br><span class="line">        Enumeration&lt;String&gt; keys = bundle.getKeys();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">            String key = keys.nextElement();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + bundle.getString(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>properties文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Calendar使用及日期增减</title>
    <url>/2019/03/02/Java%E4%B8%ADCalendar%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%97%A5%E6%9C%9F%E5%A2%9E%E5%87%8F/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_43.jpg"><br>Calendar 日期加减、求本周、本月第一天的日期、获取当前是该星期的第几天、获取当前是该星期的第几天</p>
<h2 id="Calendar的使用"><a href="#Calendar的使用" class="headerlink" title="Calendar的使用"></a>Calendar的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance(); <span class="comment">//首先需要实例化一个calendar</span></span><br><span class="line">cal.get(Calendar.DATE);<span class="comment">//-----------------------当天 1-31</span></span><br><span class="line">cal.get(Calendar.DAY_OF_MONTH);<span class="comment">//---------------当天 1-12</span></span><br><span class="line">cal.get(Calendar.DAY_OF_WEEK);<span class="comment">//----------------从星期天开始计算，如果今天星期二，那么返回3</span></span><br><span class="line">cal.get(Calendar.DAY_OF_YEAR);<span class="comment">//----------------</span></span><br><span class="line">cal.get(Calendar.HOUR);<span class="comment">//-----------------------12小时制</span></span><br><span class="line">cal.get(Calendar.HOUR_OF_DAY);<span class="comment">//----------------24小时制，一般使用这个属性赋值</span></span><br><span class="line">cal.get(Calendar.MILLISECOND);<span class="comment">//----------------</span></span><br><span class="line">cal.get(Calendar.MINUTE);<span class="comment">//---------------------</span></span><br><span class="line">cal.get(Calendar.SECOND);<span class="comment">//---------------------</span></span><br><span class="line">cal.get(Calendar.WEEK_OF_MONTH);<span class="comment">//--------------</span></span><br><span class="line">cal.get(Calendar.WEEK_OF_YEAR);<span class="comment">//---------------</span></span><br><span class="line">cal.get(Calendar.MONTH);<span class="comment">//-----------------------月份获取需要 +1，那么，赋值时需要 -1</span></span><br></pre></td></tr></table></figure>

<h2 id="日期加减"><a href="#日期加减" class="headerlink" title="日期加减"></a>日期加减</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期相加减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     *             时间字符串 yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     *             加的数，-num就是减去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     *             减去相应的数量的年的日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">yearAddNum</span><span class="params">(Date time, Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class="line">        <span class="comment">//Date date = format.parse(time);</span></span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(time);</span><br><span class="line">        calendar.add(Calendar.YEAR, num);</span><br><span class="line">        Date newTime = calendar.getTime();</span><br><span class="line">        <span class="keyword">return</span> newTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     *           时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     *           加的数，-num就是减去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *          减去相应的数量的月份的日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException Date</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">monthAddNum</span><span class="params">(Date time, Integer num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class="line">        <span class="comment">//Date date = format.parse(time);</span></span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(time);</span><br><span class="line">        calendar.add(Calendar.MONTH, num);</span><br><span class="line">        Date newTime = calendar.getTime();</span><br><span class="line">        <span class="keyword">return</span> newTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     *           时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     *           加的数，-num就是减去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *          减去相应的数量的天的日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException Date</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">dayAddNum</span><span class="params">(Date time, Integer num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class="line">        <span class="comment">//Date date = format.parse(time);</span></span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(time);</span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, num);</span><br><span class="line">        Date newTime = calendar.getTime();</span><br><span class="line">        <span class="keyword">return</span> newTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取本周第一天</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> getWeekFirstDay</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Daniel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/21 14:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeekFirstDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat formater = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    Calendar cal = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">    cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">    cal.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">    cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());</span><br><span class="line">    Date first = cal.getTime();</span><br><span class="line">    <span class="keyword">return</span> formater.format(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取本月第一天</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> getMonthFirstday</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Daniel</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMonthFirstday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat formater = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    Calendar c = Calendar.getInstance();</span><br><span class="line">    c.add(Calendar.MONTH, <span class="number">0</span>);</span><br><span class="line">    c.set(Calendar.DAY_OF_MONTH, <span class="number">1</span>);<span class="comment">//设置为1号,当前日期既为本月第一天</span></span><br><span class="line">    String first = formater.format(c.getTime());</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前是该星期的第几天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> getWeekDay</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Daniel</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getWeekDay</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    <span class="keyword">int</span> weekDay = calendar.get(Calendar.DAY_OF_WEEK)-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> weekDay == <span class="number">7</span>?<span class="number">0</span>:weekDay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前是该月的第几天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> getMonthDay</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Daniel</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMonthDay</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    <span class="keyword">int</span> monthDay = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    <span class="keyword">return</span> monthDay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用<br><a href="https://www.cnblogs.com/renjianjun/p/9182575.html">java日期加减年月日</a><br><a href="https://www.cnblogs.com/lsy-lancen/p/6122634.html">Java Calendar使用</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>日期操作</tag>
        <tag>Calendar</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Double类型数据计算</title>
    <url>/2020/09/01/Java%E4%B8%ADDouble%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_91.jpg"><br>Java中牵扯到小数点的计算的时候，往往会出现各种加减乘除的出来的数据不是我们想要的数据的情况，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math.round(value * <span class="number">100</span>) / <span class="number">100.0</span>;</span><br></pre></td></tr></table></figure>
<p>上面的方法并不能解决精度的问题，会出现10.0000000009和0.00000000001的问题，其正确的处理方案为转化为BigDecimal然后进行运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: DoubleUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Double类型数字计算</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Daniel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: V1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * double的计算不精确，会有类似0.0000000000000002的误差，正确的方法是使用BigDecimal或者用整型</span></span><br><span class="line"><span class="comment"> * 整型地方法适合于货币精度已知的情况，比如12.11+1.10转成1211+110计算，最后再/100即可</span></span><br><span class="line"><span class="comment"> * 以下是摘抄的BigDecimal方法:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3345205828566485102L</span>;</span><br><span class="line">    <span class="comment">// 默认除法运算精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEF_DIV_SCALE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">add</span><span class="params">(Double value1, Double value2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(value2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double value1, Double value2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(value2));</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">mul</span><span class="params">(Double value1, Double value2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(value2));</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时， 精确到小数点以后10位，以后的数字四舍五入。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dividend 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> divisor  除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">divide</span><span class="params">(Double dividend, Double divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> divide(dividend, divisor, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。 当发生除不尽的情况时，由scale参数指定精度，以后的数字四舍五入。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dividend 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> divisor  除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale    表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">divide</span><span class="params">(Double dividend, Double divisor, Integer scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(dividend));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(divisor));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale,RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供指定数值的（精确）小数位四舍五入处理。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> value,<span class="keyword">int</span> scale)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(scale&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(Double.toString(value));</span><br><span class="line">        BigDecimal one = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> b.divide(one,scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Double</tag>
        <tag>加减乘除计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Java子线程执行完毕之后，主线程继续执行</title>
    <url>/2019/01/24/Java%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E4%B9%8B%E5%90%8E%EF%BC%8C%E4%B8%BB%E7%BA%BF%E7%A8%8B%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_8.jpg"></p>
<blockquote>
<p>业务说明：项目中经常会出现将一个庞大的业务拆分成多个小部分，独自在分内运行，但前后任务之间又需要一定的执行顺序，所以就用到了标题中的“主线程执行过程中等待子线程都异步执行完成后才继续执行的问题”</p>
</blockquote>
<h3 id="第一个简单的例子"><a href="#第一个简单的例子" class="headerlink" title="第一个简单的例子"></a>第一个简单的例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            MyThread myThread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">            myThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程已经执行结束了!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程在执行!&quot;</span>);</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码输出如下结果，很明显，这个是主线程执行完成之后，子线程又执行的，这个先后顺序不确定，因为有可能若干个子线程执行完后，主线程才执行到执行结束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主线程已经执行结束了!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br><span class="line">子线程在执行!</span><br></pre></td></tr></table></figure>

<h3 id="能解决问题的第一个例子"><a href="#能解决问题的第一个例子" class="headerlink" title="能解决问题的第一个例子"></a>能解决问题的第一个例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                MyThread myThread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">                myThread.start();</span><br><span class="line">                myThread.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程已经执行结束了!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程在执行!&quot;</span>);</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码是能够实现子线程执行完毕之后，再执行主线程，但是存在一个问题就是子线程是一个一个顺序执行的，也就没有了意义，所以可以看下下面的异步执行的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        Vector&lt;MyThread&gt; myThreadVector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            MyThread myThread = test.n<span class="function">ew <span class="title">MyThread</span><span class="params">()</span></span>;</span><br><span class="line">            myThread.start();</span><br><span class="line">            myThreadVector.add(myThread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(MyThread tempMyThread : myThreadVector)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tempMyThread.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一共执行了&quot;</span>+(System.currentTimeMillis() - beginTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程已经执行结束了!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程开始执行！&quot;</span>);</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单解析一下上面的代码：<br>首先上面的代码输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">子线程开始执行！</span><br><span class="line">Disconnected from the target VM, address: &#39;127.0.0.1:14413&#39;, transport: &#39;socket&#39;</span><br><span class="line">一共执行了1027ms</span><br><span class="line">主线程已经执行结束了!</span><br></pre></td></tr></table></figure>
<p>首先创建一个Vector，然后通过创建Thread塞入到Vector中，然后再遍历Vector进行join动作，这样就可以不需要考虑子线程中sleep，动态的启动所有的线程</p>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>Thread</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery模糊选择器及遍历</title>
    <url>/2019/02/01/Jquery%E6%A8%A1%E7%B3%8A%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_29.jpg"></p>
<h2 id="JQuery常规选择器"><a href="#JQuery常规选择器" class="headerlink" title="JQuery常规选择器"></a>JQuery常规选择器</h2><h3 id="1-首先是常规使用"><a href="#1-首先是常规使用" class="headerlink" title="1. 首先是常规使用"></a>1. 首先是常规使用</h3><h4 id="选择所有元素"><a href="#选择所有元素" class="headerlink" title="选择所有元素"></a>选择所有元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;body *&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body *&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#B2E0FF&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body *&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="根据id选择元素"><a href="#根据id选择元素" class="headerlink" title="根据id选择元素"></a>根据id选择元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#id&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">&quot;#choose&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#B2E0FF&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="根据样式class选择元素"><a href="#根据样式class选择元素" class="headerlink" title="根据样式class选择元素"></a>根据样式class选择元素</h4><p>该方法常用作选择多个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.class&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.className&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">&quot;.className&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="获取第一个、最后一个元素"><a href="#获取第一个、最后一个元素" class="headerlink" title="获取第一个、最后一个元素"></a>获取第一个、最后一个元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p:first&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;p:last&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有偶数或者所有奇数标签"><a href="#所有偶数或者所有奇数标签" class="headerlink" title="所有偶数或者所有奇数标签"></a>所有偶数或者所有奇数标签</h4><p>这里的偶数和奇数是索引，索引是从0开始的，因此第一个偶数就是0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;tr:even&quot;</span>) <span class="comment">//偶数</span></span><br><span class="line">$(<span class="string">&quot;tr:odd&quot;</span>) <span class="comment">//奇数</span></span><br><span class="line">$(<span class="string">&quot;tr:even&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#B2E0FF&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="选择index-gt-n-或者小于n的所有对象"><a href="#选择index-gt-n-或者小于n的所有对象" class="headerlink" title="选择index&gt;n 或者小于n的所有对象"></a>选择index&gt;n 或者小于n的所有对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul li:gt(3)&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;ul li:lt(3)&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;tr:lt(2)&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="选择所有不为空的input"><a href="#选择所有不为空的input" class="headerlink" title="选择所有不为空的input"></a>选择所有不为空的input</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;selector:not(selector)&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;input:not(:empty)&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;input:not(:empty)&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有标题元素"><a href="#所有标题元素" class="headerlink" title="所有标题元素"></a>所有标题元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:header&quot;</span>) <span class="comment">//所有标题元素 &lt;h1&gt; - &lt;h6&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="所有动画元素"><a href="#所有动画元素" class="headerlink" title="所有动画元素"></a>所有动画元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:animated&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="包含指定字符串的所有元素"><a href="#包含指定字符串的所有元素" class="headerlink" title="包含指定字符串的所有元素"></a>包含指定字符串的所有元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:contains(&#x27;W3School&#x27;)&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;p:contains(is)&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;p:contains(is)&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#B2E0FF&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;div:contains(is)&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有无子节点的所有元素"><a href="#所有无子节点的所有元素" class="headerlink" title="所有无子节点的所有元素"></a>所有无子节点的所有元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:empty&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有隐藏的标签"><a href="#所有隐藏的标签" class="headerlink" title="所有隐藏的标签"></a>所有隐藏的标签</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:hidden&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;p:hidden&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有可见表格"><a href="#所有可见表格" class="headerlink" title="所有可见表格"></a>所有可见表格</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;table:visible&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有带匹配选择的元素"><a href="#所有带匹配选择的元素" class="headerlink" title="所有带匹配选择的元素"></a>所有带匹配选择的元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;th,td,.intro&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="所有带某个属性的元素"><a href="#所有带某个属性的元素" class="headerlink" title="所有带某个属性的元素"></a>所有带某个属性的元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公式$(&quot;[attribute]&quot;)</span></span><br><span class="line">$(<span class="string">&quot;[href]&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;li[name]&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#B2E0FF&quot;</span>);<span class="comment">//li标签中带name属性的</span></span><br></pre></td></tr></table></figure>

<h4 id="所有带某个属性值等于或者不等于XXX的元素"><a href="#所有带某个属性值等于或者不等于XXX的元素" class="headerlink" title="所有带某个属性值等于或者不等于XXX的元素"></a>所有带某个属性值等于或者不等于XXX的元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;[href=&#x27;#&#x27;]&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;input[name=&#x27;123123&#x27;]&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;input[name^=&#x27;123123&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;[name!=&#x27;123123&#x27;]&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;[href!=&#x27;#&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="包含以XXX开头-XXX结尾的元素"><a href="#包含以XXX开头-XXX结尾的元素" class="headerlink" title="包含以XXX开头 XXX结尾的元素"></a>包含以XXX开头 XXX结尾的元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input[name^=&#x27;aaa&#x27;]&quot;</span>)<span class="comment">//以aaa开头的所有input元素</span></span><br><span class="line">$(<span class="string">&quot;input[name$=&#x27;bbb&#x27;]&quot;</span>)<span class="comment">//所有以bbb结尾的input元素</span></span><br></pre></td></tr></table></figure>

<h4 id="input的各种类型元素筛选器"><a href="#input的各种类型元素筛选器" class="headerlink" title="input的各种类型元素筛选器"></a>input的各种类型元素筛选器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:input&quot;</span>) <span class="comment">//	所有 &lt;input&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;:text&quot;</span>) <span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:password&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:radio&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:submit&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:reset&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:button&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:image&quot;</span>)<span class="comment">//</span></span><br><span class="line">$(<span class="string">&quot;:file&quot;</span>)<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h4 id="所有激活或者禁用的元素"><a href="#所有激活或者禁用的元素" class="headerlink" title="所有激活或者禁用的元素"></a>所有激活或者禁用的元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:enabled&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;:disabled&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="下拉框选择中被选中的"><a href="#下拉框选择中被选中的" class="headerlink" title="下拉框选择中被选中的"></a>下拉框选择中被选中的</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:selected&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  $(<span class="string">&quot;.btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;:selected&quot;</span>).hide();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&lt;select multiple=<span class="string">&quot;multiple&quot;</span>&gt;</span><br><span class="line">  &lt;option&gt;Volvo&lt;/option&gt;</span><br><span class="line">  &lt;option selected=<span class="string">&quot;selected&quot;</span>&gt;Saab&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;Mercedes&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;Audi&lt;/option&gt;</span><br></pre></td></tr></table></figure>
<h3 id="单选框、复选框中被选中的"><a href="#单选框、复选框中被选中的" class="headerlink" title="单选框、复选框中被选中的"></a>单选框、复选框中被选中的</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;:checked&quot;</span>).hide();</span><br></pre></td></tr></table></figure>

<h3 id="2-模糊选择器"><a href="#2-模糊选择器" class="headerlink" title="2. 模糊选择器"></a>2. 模糊选择器</h3><h4 id="前后缀为XXX的选择器"><a href="#前后缀为XXX的选择器" class="headerlink" title="前后缀为XXX的选择器"></a>前后缀为XXX的选择器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;[name^=&#x27;aaa&#x27;]&quot;</span>)<span class="comment">//前缀</span></span><br><span class="line">$(<span class="string">&quot;input[name^=&#x27;aaa&#x27;]&quot;</span>)<span class="comment">//前缀</span></span><br><span class="line">$(<span class="string">&quot;[name$=&#x27;aaa&#x27;]&quot;</span>)<span class="comment">//后缀</span></span><br><span class="line">$(<span class="string">&quot;input[name$=&#x27;aaa&#x27;]&quot;</span>)<span class="comment">//后缀</span></span><br></pre></td></tr></table></figure>

<h4 id="name中包含XXX的选择器"><a href="#name中包含XXX的选择器" class="headerlink" title="name中包含XXX的选择器"></a>name中包含XXX的选择器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input[name*=&#x27;aaaa&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input:text[name=&#x27;xx&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="3-遍历"><a href="#3-遍历" class="headerlink" title="3. 遍历"></a>3. 遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input[name^=&#x27;aaa&#x27;]&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>JQuery</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
        <tag>选择器</tag>
        <tag>遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery获取标签的类型及input标签的类型</title>
    <url>/2019/02/01/Jquery%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%8Ainput%E6%A0%87%E7%AD%BE%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_26.jpg"></p>
<blockquote>
<p>常规情况下一班是没有这种需求的，但最近在做页面数据反显，而且数据是反显在<code>p</code>标签里面和<code>span</code>标签里面，因此有了这方面的需求</p>
</blockquote>
<h3 id="首先列举一下标签的种类"><a href="#首先列举一下标签的种类" class="headerlink" title="首先列举一下标签的种类"></a>首先列举一下标签的种类</h3><table>
<thead>
<tr>
<th align="center">标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;a&gt;</code></td>
<td>定义锚</td>
</tr>
<tr>
<td align="center"><code>&lt;article&gt;</code></td>
<td>定义文章</td>
</tr>
<tr>
<td align="center"><code>&lt;b&gt;</code></td>
<td>定义粗字体</td>
</tr>
<tr>
<td align="center"><code>&lt;body&gt;</code></td>
<td>定义文档的主体</td>
</tr>
<tr>
<td align="center"><code>&lt;br&gt;</code></td>
<td>定义简单的折行</td>
</tr>
<tr>
<td align="center"><code>&lt;button&gt;</code></td>
<td>定义按钮 (push button)</td>
</tr>
<tr>
<td align="center"><code>&lt;canvas&gt;</code></td>
<td>定义图形</td>
</tr>
<tr>
<td align="center"><code>&lt;code&gt;</code></td>
<td>定义计算机代码文本</td>
</tr>
<tr>
<td align="center"><code>&lt;del&gt;</code></td>
<td>定义被删除文本</td>
</tr>
<tr>
<td align="center"><code>&lt;em&gt;</code></td>
<td>定义强调文本</td>
</tr>
<tr>
<td align="center"><code>&lt;fotter&gt;</code></td>
<td>定义 section 或 page 的页脚</td>
</tr>
<tr>
<td align="center"><code>&lt;form&gt;</code></td>
<td>定义供用户输入的 HTML 表单</td>
</tr>
<tr>
<td align="center"><code>&lt;frame&gt;</code></td>
<td>定义框架集的窗口或框架</td>
</tr>
<tr>
<td align="center"><code>&lt;h1&gt;to&lt;h6&gt;</code></td>
<td>定义 HTML 标题</td>
</tr>
<tr>
<td align="center"><code>&lt;hr&gt;</code></td>
<td>定义水平线</td>
</tr>
<tr>
<td align="center"><code>&lt;i&gt;</code></td>
<td>定义斜体字</td>
</tr>
<tr>
<td align="center"><code>&lt;img&gt;</code></td>
<td>定义图像</td>
</tr>
<tr>
<td align="center"><code>&lt;input&gt;</code></td>
<td>定义输入控件</td>
</tr>
<tr>
<td align="center"><code>&lt;label&gt;</code></td>
<td>定义 input 元素的标注</td>
</tr>
<tr>
<td align="center"><code>&lt;p&gt;</code></td>
<td>定义段落</td>
</tr>
<tr>
<td align="center"><code>&lt;span&gt;</code></td>
<td>定义文档中的节</td>
</tr>
<tr>
<td align="center"><code>&lt;table&gt;</code></td>
<td>定义表格</td>
</tr>
<tr>
<td align="center"><code>&lt;tbody&gt;</code></td>
<td>定义表格中的主体内容</td>
</tr>
<tr>
<td align="center"><code>&lt;td&gt;</code></td>
<td>定义表格中的单元</td>
</tr>
<tr>
<td align="center"><code>&lt;textarea&gt;</code></td>
<td>定义多行的文本输入控件</td>
</tr>
<tr>
<td align="center"><code>&lt;thead&gt;</code></td>
<td>定义表格中的表头内容</td>
</tr>
<tr>
<td align="center"><code>&lt;tr&gt;</code></td>
<td>定义表格中的行</td>
</tr>
<tr>
<td align="center"><code>&lt;ul&gt;</code></td>
<td>定义无序列表</td>
</tr>
</tbody></table>
<hr>

<h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目前测试了几个p标签是p，span打印span</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>)[<span class="number">0</span>].tagName.toLowerCase()</span><br></pre></td></tr></table></figure>

<hr>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>那么问题来了，就是关于input中包含很多类型，比如说text、button、radio、checkbox等等，怎么获取这些类型进行区分呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目前测试能够返回checkbox、radio等等</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>)[<span class="number">0</span>].type</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>JQuery</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Json树组装TreeBuilder(适用在bootstrap_treeview)</title>
    <url>/2019/01/25/Json%E6%A0%91%E7%BB%84%E8%A3%85TreeBuilder-%E8%AF%95%E7%94%A8%E5%9C%A8bootstrap-treeview/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_14.jpg"></p>
<h3 id="数据的结构如下"><a href="#数据的结构如下" class="headerlink" title="数据的结构如下"></a>数据的结构如下</h3><table>
<thead>
<tr>
<th align="center">节点ID</th>
<th align="center">父节点ID</th>
<th align="center">显示的内容</th>
<th align="center">其他内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">01</td>
<td align="center">“”</td>
<td align="center">01</td>
<td align="center">“”</td>
</tr>
<tr>
<td align="center">02</td>
<td align="center">“”</td>
<td align="center">02</td>
<td align="center">“”</td>
</tr>
<tr>
<td align="center">0101</td>
<td align="center">01</td>
<td align="center">0101</td>
<td align="center">“”</td>
</tr>
<tr>
<td align="center">0102</td>
<td align="center">01</td>
<td align="center">0102</td>
<td align="center">“”</td>
</tr>
<tr>
<td align="center">010101</td>
<td align="center">0101</td>
<td align="center">010101</td>
<td align="center">“”</td>
</tr>
</tbody></table>
<h3 id="查询的SQL（Oracle版本）"><a href="#查询的SQL（Oracle版本）" class="headerlink" title="查询的SQL（Oracle版本）"></a>查询的SQL（Oracle版本）</h3><p>因牵扯到排序的问题，因此这里使用了开窗函数start with</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID, ORG_NO, ORG_NAME, P_LEVEL, PARENT_ID</span><br><span class="line">  <span class="keyword">FROM</span> SYS_ORG</span><br><span class="line"> <span class="keyword">START</span> <span class="keyword">WITH</span> PARENT_ID <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> PRIOR ID <span class="operator">=</span> PARENT_ID</span><br><span class="line"><span class="keyword">ORDER</span> SIBLINGS <span class="keyword">BY</span> LEVEL_SORT</span><br></pre></td></tr></table></figure>

<h3 id="TreeBuilder"><a href="#TreeBuilder" class="headerlink" title="TreeBuilder"></a>TreeBuilder</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.<span class="keyword">module</span>.fw.biki;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBuilder</span> </span>&#123;</span><br><span class="line">	List&lt;TreeBuilder.Node&gt; nodes = <span class="keyword">new</span> ArrayList&lt;TreeBuilder.Node&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TreeBuilder</span><span class="params">(List&lt;Node&gt; nodes)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 构建JSON树形结构</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">buildJSONTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Node&gt; nodeTree = buildTree();</span><br><span class="line">		JSONArray jsonArray = JSONArray.fromObject(nodeTree);</span><br><span class="line">		<span class="keyword">return</span> jsonArray.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 构建树形结构</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Node&gt; <span class="title">buildTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Node&gt; treeNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">		List&lt;Node&gt; rootNodes = getRootNodes();</span><br><span class="line">		<span class="keyword">for</span> (Node rootNode : rootNodes) &#123;</span><br><span class="line">			buildChildNodes(rootNode);</span><br><span class="line">			treeNodes.add(rootNode);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> treeNodes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递归子节点</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildChildNodes</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">		List&lt;Node&gt; children = getChildNodes(node);</span><br><span class="line">		<span class="keyword">if</span> (!children.isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Node child : children) &#123;</span><br><span class="line">				buildChildNodes(child);</span><br><span class="line">			&#125;</span><br><span class="line">			node.setMenus(children);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取父节点下所有的子节点</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nodes</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pnode</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Node&gt; <span class="title">getChildNodes</span><span class="params">(Node pnode)</span> </span>&#123;</span><br><span class="line">		List&lt;Node&gt; childNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Node n : nodes) &#123;</span><br><span class="line">			<span class="keyword">if</span> (pnode.getId().equals(n.getPid())) &#123;</span><br><span class="line">				childNodes.add(n);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> childNodes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断是否为根节点</span></span><br><span class="line"><span class="comment">	 * 遍历所有节点，如果能找到他们的节点ID = 当前节点的父节点ID，说明不是root节点</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nodes</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> inNode</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rootNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> isRootNode = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (Node n : nodes) &#123;</span><br><span class="line">			<span class="keyword">if</span> (node.getPid().equals(n.getId())) &#123;</span><br><span class="line">				isRootNode = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> isRootNode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取集合中所有的根节点</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nodes</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Node&gt; <span class="title">getRootNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Node&gt; rootNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Node n : nodes) &#123;</span><br><span class="line">			<span class="keyword">if</span> (rootNode(n)) &#123;</span><br><span class="line">				rootNodes.add(n);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> rootNodes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> String id;</span><br><span class="line">		<span class="keyword">private</span> String pid;</span><br><span class="line">		<span class="keyword">private</span> String text;</span><br><span class="line">		<span class="keyword">private</span> String url;</span><br><span class="line">		<span class="keyword">private</span> List&lt;Node&gt; menus;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String id, String pid, String text, String url)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>();</span><br><span class="line">			<span class="keyword">this</span>.id = id;</span><br><span class="line">			<span class="keyword">this</span>.pid = pid;</span><br><span class="line">			<span class="keyword">this</span>.text = text;</span><br><span class="line">			<span class="keyword">this</span>.url = url;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> id;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.id = id;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> pid;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.pid = pid;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> text;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.text = text;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> url;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.url = url;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> List&lt;Node&gt; <span class="title">getMenus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> menus;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenus</span><span class="params">(List&lt;Node&gt; menus)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.menus = menus;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Node&gt; nodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">		Node p1 = <span class="keyword">new</span> Node(<span class="string">&quot;01&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;01&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		Node p6 = <span class="keyword">new</span> Node(<span class="string">&quot;02&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;02&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		Node p7 = <span class="keyword">new</span> Node(<span class="string">&quot;0201&quot;</span>, <span class="string">&quot;02&quot;</span>, <span class="string">&quot;0201&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		Node p2 = <span class="keyword">new</span> Node(<span class="string">&quot;0101&quot;</span>, <span class="string">&quot;01&quot;</span>, <span class="string">&quot;0101&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		Node p3 = <span class="keyword">new</span> Node(<span class="string">&quot;0102&quot;</span>, <span class="string">&quot;01&quot;</span>, <span class="string">&quot;0102&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		Node p4 = <span class="keyword">new</span> Node(<span class="string">&quot;010101&quot;</span>, <span class="string">&quot;0101&quot;</span>, <span class="string">&quot;010101&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		Node p5 = <span class="keyword">new</span> Node(<span class="string">&quot;010102&quot;</span>, <span class="string">&quot;0101&quot;</span>, <span class="string">&quot;010102&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		nodes.add(p1);</span><br><span class="line">		nodes.add(p2);</span><br><span class="line">		nodes.add(p3);</span><br><span class="line">		nodes.add(p4);</span><br><span class="line">		nodes.add(p5);</span><br><span class="line">		nodes.add(p6);</span><br><span class="line">		nodes.add(p7);</span><br><span class="line"></span><br><span class="line">		TreeBuilder treeBuilder = <span class="keyword">new</span> TreeBuilder(nodes);</span><br><span class="line">		System.out.println(treeBuilder.buildJSONTree());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;BusiTypeTreeBuilder.Node&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">String finalStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (treeList != <span class="keyword">null</span> &amp;&amp; treeList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (Map&lt;String, Object&gt; treeNodeMap : treeList) &#123;</span><br><span class="line">    nodes.add(<span class="keyword">new</span> BusiTypeTreeBuilder.Node(treeNodeMap.get(<span class="string">&quot;SYSTEMID&quot;</span>).toString(),</span><br><span class="line">        treeNodeMap.get(<span class="string">&quot;UPSYSID&quot;</span>).toString(), treeNodeMap.get(<span class="string">&quot;ITEMID&quot;</span>).toString(),</span><br><span class="line">        treeNodeMap.get(<span class="string">&quot;ITEMVAL&quot;</span>).toString()));</span><br><span class="line">  &#125;</span><br><span class="line">  finalStr = <span class="keyword">new</span> BusiTypeTreeBuilder(nodes).buildJSONTree();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> JSONArray.parseArray(finalStr);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>公共类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>TreeBuilder</tag>
        <tag>bootstrap_treeview</tag>
      </tags>
  </entry>
  <entry>
    <title>Kaa CentOS7安装 启动命令</title>
    <url>/2019/02/20/Kaa-CentOS7%E5%AE%89%E8%A3%85-%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_38.jpg"><br>1.启动Mariadb<br><code>service mysql start</code><br>Mariadb的授权信息<br><code>CREATE USER &#39;sqladmin&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;admin&#39;; GRANT ALL PRIVILEGES ON *.* TO &#39;sqladmin&#39;@&#39;localhost&#39; WITH GRANT OPTION; FLUSH PRIVILEGES;`` </code>Mariadb`的数据库名字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE kaa</span><br><span class="line">    <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8</span><br><span class="line">    <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>
<p>2.启动<code>zookeeper</code><br><code>sudo /usr/share/zookeeper/bin/zkServer.sh start（重启服务器需要重启）</code><br><code>systemctl start supervisord（已经设置自动启动）</code><br>检查启动的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#supervisorctl</span><br><span class="line">netstat -ntlp | grep 2181</span><br></pre></td></tr></table></figure>
<p>3.启动<code>MongoDB</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mongodb（重启服务器需要重启）</span><br><span class="line">service mongod start（已经设置自动启动）</span><br><span class="line">检查mongoDB的启动情况</span><br><span class="line">sudo systemctl status mongodb</span><br><span class="line">cat /var/<span class="built_in">log</span>/mongodb/mongod.log | grep <span class="string">&quot;waiting for connections on port&quot;</span></span><br></pre></td></tr></table></figure>
<p>4.启动<code>kaa</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service kaa-node start</span><br><span class="line">cat /var/<span class="built_in">log</span>/kaa/* | grep ERROR</span><br></pre></td></tr></table></figure>
<p>5、Kaa关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service kaa-node stop</span><br><span class="line">sudo service kaa-node start</span><br></pre></td></tr></table></figure>
<p>5、Kaa的Administrator账号和密码</p>
<p>教程：<a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">http://docs.kaaproject.org/display/KAA/Administration+UI+guide</a><br><a href="http://192.168.1.115:8080/kaaAdmin/">http://192.168.1.115:8080/kaaAdmin/</a><br>administrator</p>
]]></content>
      <categories>
        <category>物联网</category>
        <category>kaa</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>kaa</tag>
        <tag>启动命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali-Linux-Revealed(About Kali Linux)</title>
    <url>/2019/02/21/Kali-Linux-Revealed-About-Kali-Linux/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_38.jpg"></p>
<h2 id="Pursepose-and-Use-Cases"><a href="#Pursepose-and-Use-Cases" class="headerlink" title="Pursepose and Use Cases"></a>Pursepose and Use Cases</h2><p>These tasks and activities include:</p>
<ul>
<li>Information Collection:Collecting data about the target network and its structure,idetifying computers,their operating systems,and the services that they run.Idetifying potentially(可能)sensitive parts of the information system.Extracting all sorts of listings from running directory services.</li>
<li>Vulnerability(漏洞) Analysis:Quickly testing whether a local or remote system is afffected bt a number of known vulnerabilities or insecure(不安全) configurations.Vulnerability scanners use databases containing thousands of signatures(签名) to idetify potential(潜在) vulnerabilities.</li>
<li>Web Application Analysis:idetifying misconfigurations and security weakness in web applications. It is crucial(重要) to idetify and mitigate these issues given that the public availability of these applications  makes them idel targets for attacker.</li>
<li>Database Assessment(评定):From SQL injection(注入) to attacking credentials,database attacks are a very common vector for attackers. Tools that test for the attack vectors ranging from SQL inhection to data extraction and analysis can be found here.</li>
<li>Password Attack：Authentication systems are always a go-to attack vector. Many useful tools can be found here,from online password attack tools to offline attack against the encryption(加密) or hashing systems.</li>
<li>Wireless Attacks:</li>
</ul>
]]></content>
      <categories>
        <category>安全测评</category>
      </categories>
      <tags>
        <tag>Kali Linux</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux学习之路-安装</title>
    <url>/2019/03/03/Kali-Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_44.jpg"></p>
<blockquote>
<p>从今天开始准备学习一下Kali Linux，也算是个人的一点兴趣爱好，喜欢干些自己之前没有涉及过的区域，今天第一天开篇，讲讲Kali Linux操作系统和系统的安装，后续会讲到自己在使用过程中碰到的问题，以及一些使用的技巧，这个坑呢算是从这里开始挖了，到最后能不能填完，还得看有没有充裕的时间了</p>
</blockquote>
<h2 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h2><blockquote>
<p>Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing. Kali contains several hundred tools which are geared towards various information security tasks, such as Penetration Testing, Security research, Computer Forensics and Reverse Engineering. Kali Linux is developed, funded and maintained by Offensive Security, a leading information security training company.</p>
</blockquote>
<p>上面引用的这段是官网上说的，Kali Linux是基于Debian系统的分布式系统，主要用作高级渗透测试和安全审计。它包含了百种工具，适用于各种安全任务，像渗透测试，安全研究，计算机取证或者逆向工程等。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Kali Linux可以在Win系统或者Linux系统下进行安装，官网推荐使用U盘进行安装，当然也可以在Laptop上安装，我们这里就单纯讲在U盘上安装，因为方便，随时找个电脑拿过U盘来，插上就能启动Kali</p>
<h3 id="Windows操作系统安装Kali"><a href="#Windows操作系统安装Kali" class="headerlink" title="Windows操作系统安装Kali"></a>Windows操作系统安装Kali</h3><p>需要准备的材料</p>
<ul>
<li>4G以上空间的U盘一个：推荐8G以上的，因为后面要做数据持久化，也就是修改内容都可以直接存储在U盘里面</li>
<li>Window操作系统的电脑一台，用作给U盘装Kali</li>
<li>Kali的系统安装镜像（下面会讲到该怎么下载及具体的下载地址）</li>
<li>Win32DiskImager软件（下面会讲到下载地址）</li>
</ul>
<h4 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h4><ol>
<li>下载Kali 操作系统镜像<br><a href="https://www.kali.org/downloads/">Kali操作系统的下载地址</a>，打开这个地址，然后选择<code>Kali Linux 64 Bit</code>这个版本的镜像，然后下载，下载的时候尽量使用下载工具，因为我之前使用HTTP下载的时候都有出现过中断的情况，具体的操作步骤如下图所示<img src="/2019/03/03/Kali-Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E5%AE%89%E8%A3%85/screenshot_1.png" class=""></li>
<li>下载Win32DiskImager<br><a href="https://sourceforge.net/projects/win32diskimager/">Win32DiskImager下载地址</a>，这个的下载和安装很简单，就不上图了，自己安装即可</li>
</ol>
<h4 id="安装Kali"><a href="#安装Kali" class="headerlink" title="安装Kali"></a>安装Kali</h4><ol>
<li>Win系统插入U判断，保证U盘是空的或者备份好自己的文件</li>
<li>打开<code>Win32DiskImager</code>软件，并选择Kali 镜像，其中设备区域中的G是我插入U盘的盘符，并选择<code>写入</code>按钮，具体操作见下图<img src="/2019/03/03/Kali-Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E5%AE%89%E8%A3%85/screenshot_2.png" class=""></li>
<li>大概20分钟左右（看U盘写入速度），即可完成刻录，值此系统安装成功</li>
<li>将U盘插到电脑上重启，U盘优先启动，各个电脑不同有的是重启摁<code>F2</code>、<code>F12</code>、<code>Delete</code>键，有的是按其他，选择完U盘启动之后即可进入Kali Linux系统界面</li>
<li><font color='red'>Kali Linux的默认账号和密码是root/toor，如果没有改过密码的情况下，那应该是<code>toor</code></font></li>
</ol>
<h2 id="持久化数据到U盘（即修改信息后U盘可保存）"><a href="#持久化数据到U盘（即修改信息后U盘可保存）" class="headerlink" title="持久化数据到U盘（即修改信息后U盘可保存）"></a>持久化数据到U盘（即修改信息后U盘可保存）</h2><p>常规情况下，系统做完之后，插在电脑上启动，修改的账号密码等等信息是不会保存的，需要一些额外的设置，才能保存到U盘当中，以下是详细的操作流程</p>
<h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ul>
<li>MiniTool Partition Wizard Free Edition for Windows.（<a href="https://www.partitionwizard.com/free-partition-manager.html">下载地址</a>）</li>
</ul>
]]></content>
      <categories>
        <category>安全测评</category>
        <category>Kali Linux</category>
      </categories>
      <tags>
        <tag>系统安装</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell教程</title>
    <url>/2020/07/16/Linux-Shell%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_89.jpg"></p>
<h2 id="Shell教程"><a href="#Shell教程" class="headerlink" title="Shell教程"></a>Shell教程</h2><p>Shell是一个C语言编写的教程，他是用户使用Linux的桥梁。Shell即是一种命令语言，有事一种程序设计语言。<br>Shell是指一种应用程序，这个应用程序提供一个界面，用户通过这个界面访问操作系统内核的服务</p>
<h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><p>Shell脚本（shell script），是一种为shell编写的脚本程序</p>
<h3 id="第一个Shell脚本"><a href="#第一个Shell脚本" class="headerlink" title="第一个Shell脚本"></a>第一个Shell脚本</h3><p>打开文本编辑器（vi/vim创建文件），新建一个test.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>#!</code>是一个约定的标记，他告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell</li>
<li>echo命令是用于向窗口输出文本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x test.sh <span class="comment">#给脚本赋可执行权限</span></span><br><span class="line">./test.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><p>定义变量，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echo_str=<span class="string">&quot;Hello World ehco&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$echo_str</span></span><br></pre></td></tr></table></figure>
<p>注意：<font color='red'>变量名和等号之间不能有空格</font>，同时需要遵循如下规则：</p>
<ul>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>
<li>中间不能有空格，可以使用下划线<code>_</code></li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字</li>
</ul>
<p>除了显式地直接赋值，，还可以用语句给变量赋值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure>
<h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加一个美元符号即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure>
<p>变量外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面的情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用readonly命令可以讲变量定义为只读变量，只读变量的值不能被改变<br>下面的例子是尝试更改只读变量，结果报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">myUrl=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> myUrl</span><br><span class="line">myUrl=<span class="string">&quot;http://xyd.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>运行脚本后会报如下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh: NAME: This variable is <span class="built_in">read</span> only.</span><br></pre></td></tr></table></figure>

<h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>使用unset命令可以删除变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> variable_name</span><br></pre></td></tr></table></figure>
<p>变量被删除后不能再次使用。unset命令不能删除只读变量</p>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：</p>
<ul>
<li>局部变量：局部变量在脚本或命令中定义，尽在当前shell实例中有效，其他shell启动的程序不能访问局部变量</li>
<li>环境变量：所有的程序，包含shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本可以定义环境变量</li>
<li>Shell变量：shell变量是由Shell程序设置的特殊变量。Shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证Shell的正常运行</li>
</ul>
<h2 id="Shell字符串"><a href="#Shell字符串" class="headerlink" title="Shell字符串"></a>Shell字符串</h2><p>字符串是Shell中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号</p>
<h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">danyinhao=<span class="string">&#x27;danyinhao&#x27;</span></span><br><span class="line">danyinhao=<span class="string">&#x27;dan&#x27;</span><span class="string">&#x27;yinhao&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$danyinhao</span></span><br></pre></td></tr></table></figure>
<p>单引号字符串的限制：</p>
<ul>
<li>单引号里的任何字符都会鸳鸯输出，单引号字符串中的变量是无效的</li>
<li>单引号子串中不能出现单独一个单引号，但可以承兑出现，作为字符串拼接</li>
</ul>
<h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">you_name=<span class="string">&quot;test name&quot;</span></span><br><span class="line">str=<span class="string">&quot;Hello,I know you are \&quot;<span class="variable">$&#123;you_name&#125;</span>\&quot;! &quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br></pre></td></tr></table></figure>
<p>输出内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello,I know you are <span class="string">&quot;test name&quot;</span>!</span><br></pre></td></tr></table></figure>
<p>双引号的优点：</p>
<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">your_name=<span class="string">&quot;Daniel&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">&quot;hello,&quot;</span><span class="variable">$your_name</span><span class="string">&quot;!&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello <span class="variable">$&#123;your_name&#125;</span>!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">&#x27;hello,&#x27;</span><span class="variable">$your_name</span><span class="string">&#x27;!&#x27;</span></span><br><span class="line">greeting_3=<span class="string">&#x27;hello,$&#123;your_name&#125;!&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span> <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure>
<p>执行输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello,Daniel! hello Daniel!</span><br><span class="line">hello,Daniel! hello,<span class="variable">$&#123;your_name&#125;</span>!</span><br></pre></td></tr></table></figure>
<p>因此单引号不支持${}输出变量内容</p>
<h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出4</span></span><br></pre></td></tr></table></figure>

<h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h4><p>下面实例从字符串第2个字符开始截取4个字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure>

<h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h4><p>查找字符i或o的位置（那个字母先出现就计算哪个）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> io` <span class="comment">#输出4</span></span><br></pre></td></tr></table></figure>

<h2 id="Shell数组"><a href="#Shell数组" class="headerlink" title="Shell数组"></a>Shell数组</h2><h2 id="Shell相关实例"><a href="#Shell相关实例" class="headerlink" title="Shell相关实例"></a>Shell相关实例</h2><h3 id="查询软件是否安装"><a href="#查询软件是否安装" class="headerlink" title="查询软件是否安装"></a>查询软件是否安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#或者pName=`exec rpm -qa|grep mariadb`</span></span><br><span class="line">pName=$(rpm -qa | grep mariadb)</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;软件包&quot;</span><span class="variable">$&#123;pName&#125;</span><span class="string">&quot;已经安装。&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;软件包&quot;</span><span class="variable">$&#123;package&#125;</span><span class="string">&quot;没有安装&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="for循环遍历打印rpm安装的包"><a href="#for循环遍历打印rpm安装的包" class="headerlink" title="for循环遍历打印rpm安装的包"></a>for循环遍历打印rpm安装的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> package <span class="keyword">in</span> `rpm -qa|grep mysql-community*`; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$package</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 入侵问题排查思路</title>
    <url>/2020/07/01/Linux-%E5%85%A5%E4%BE%B5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_83.jpg"></p>
<h2 id="深入分析，查找入侵原因"><a href="#深入分析，查找入侵原因" class="headerlink" title="深入分析，查找入侵原因"></a>深入分析，查找入侵原因</h2><h3 id="一、检查隐藏帐户及弱口令"><a href="#一、检查隐藏帐户及弱口令" class="headerlink" title="一、检查隐藏帐户及弱口令"></a>一、检查隐藏帐户及弱口令</h3><ol>
<li>检查服务器系统及应用帐户是否存在 <strong>弱口令</strong>：</li>
</ol>
<ul>
<li>检查说明：检查管理员帐户、数据库帐户、MySQL 帐户、tomcat 帐户、网站后台管理员帐户等密码设置是否较为简单，简单的密码很容易被黑客破解。</li>
<li>解决方法：以管理员权限登录系统或应用程序后台，修改为复杂的密码。</li>
<li>风险性：高。</li>
</ul>
<ol start="2">
<li>使用<code>last</code>命令查看下服务器近期登录的帐户记录，确认是否有可疑 IP 登录过机器：<ul>
<li>检查说明：攻击者或者恶意软件往往会往系统中注入隐藏的系统帐户实施提权或其他破坏性的攻击。</li>
<li>解决方法：检查发现有可疑用户时，可使用命令<code>usermod -L 用户名</code>禁用用户或者使用命令<code>userdel -r 用户名</code>删除用户。</li>
<li>风险性：高。</li>
</ul>
</li>
<li>通过<code>less /var/log/secure|grep &#39;Accepted&#39;</code>命令，查看是否有可疑 IP 成功登录机器：<ul>
<li>检查说明：攻击者或者恶意软件往往会往系统中注入隐藏的系统帐户实施提权或其他破坏性的攻击。</li>
<li>解决方法： 使用命令<code>usermod -L 用户名</code>禁用用户或者使用命令<code>userdel -r 用户名</code>删除用户。</li>
<li>风险性：高。</li>
</ul>
</li>
<li>检查系统是否采用 <strong>默认管理端口</strong>：<ul>
<li>检查系统所用的管理端口（SSH、FTP、MySQL、Redis 等）是否为默认端口，这些默认端口往往被容易自动化的工具进行爆破成功。</li>
<li>解决方法：<ol>
<li>在服务器内编辑<code>/etc/ssh/sshd_config</code>文件中的 Port 22，将22修改为非默认端口，修改之后需要重启 ssh 服务。<blockquote>
<p>!当对端口进行修改时，需同时在 <a href="https://console.cloud.tencent.com/cvm/instance/index?rid=1">云服务器控制台</a> 上修改对应主机的安全组配置，在其入站规则中，放行对应端口，详情请参见 <a href="https://cloud.tencent.com/document/product/215/39790">添加安全组规则</a>。</p>
</blockquote>
</li>
<li>运行<code>/etc/init.d/sshd restart（CentOS）或 /etc/init.d/ssh restart（Debian / Ubuntu）</code>命令重启是配置生效。<br> 3. 修改 FTP、MySQL、Redis 等的程序配置文件的默认监听端口21、3306、6379为其他端口。</li>
<li>限制远程登录的 IP，编辑<code>/etc/hosts.deny</code> 、<code>/etc/hosts.allow</code>两个文件来限制 IP。</li>
</ol>
</li>
<li>风险性：高。</li>
</ul>
</li>
<li>检查<code>/etc/passwd</code>文件，看是否有非授权帐户登录：<ul>
<li>检查说明：攻击者或者恶意软件往往会往系统中注入隐藏的系统帐户实施提权或其他破坏性的攻击。</li>
<li>解决方法： 使用命令<code>usermod -L 用户名</code>禁用用户或者使用命令<code>userdel -r 用户名</code>删除用户。</li>
<li>风险性：中。</li>
</ul>
</li>
</ol>
<h3 id="二、检查恶意进程及非法端口"><a href="#二、检查恶意进程及非法端口" class="headerlink" title="二、检查恶意进程及非法端口"></a>二、检查恶意进程及非法端口</h3><ol>
<li>运行<code>netstat –antp</code>查看下服务器是否有未被授权的端口被监听，查看下对应的 pid。</li>
</ol>
<ul>
<li>检查服务器是否存在恶意进程,恶意进程往往会开启监听端口，与外部控制机器进行连接。</li>
<li>解决方法：<ol>
<li>若发现有非授权进程，运行<code>ls -l /proc/$PID/exe</code>或<code>file /proc/$PID/exe </code>（$PID 为对应的 pid 号），查看下 pid 所对应的进程文件路径。</li>
<li>如果为恶意进程，删除下对应的文件即可。</li>
</ol>
<ul>
<li>风险性：高。</li>
</ul>
</li>
</ul>
<ol start="2">
<li>使用<code>ps -ef</code>和<code>top</code>命令查看是否有异常进程<ul>
<li>检查说明：运行以上命令，当发现有名称不断变化的非授权进程占用大量系统 CPU 或内存资源时，则可能为恶意程序。</li>
<li>解决方法：确认该进程为恶意进程后，可以使用<code>kill -9 进程名</code>命令结束进程，或使用防火墙限制进程外联。</li>
<li>风险性：高。</li>
</ul>
</li>
</ol>
<h3 id="三、检查恶意程序和可疑启动项"><a href="#三、检查恶意程序和可疑启动项" class="headerlink" title="三、检查恶意程序和可疑启动项"></a>三、检查恶意程序和可疑启动项</h3><ol>
<li>使用<code>chkconfig --list</code>和<code>cat /etc/rc.local</code>命令查看下开机启动项中是否有异常的启动服务。<ul>
<li>检查说明：恶意程序往往会添加在系统的启动项，在用户关机重启后再次运行。</li>
<li>解决方法：如发现有恶意进程，可使用<code>chkconfig 服务名 off</code>命令关闭，同时检查<code>/etc/rc.local</code>中是否有异常项目，如有请注释掉。</li>
<li>风险性：高。</li>
</ul>
</li>
<li>进入 cron 文件目录，查看是否存在非法定时任务脚本。<ul>
<li>检查说明：查看<code>/etc/crontab</code>，<code>/etc/cron.d</code>，<code>/etc/cron.daily</code>，<code>cron.hourly/</code>，<code>cron.monthly</code>，<code>cron.weekly/</code>是否存在可疑脚本或程序。</li>
<li>解决方法：如发现有不认识的计划任务，可定位脚本确认是否正常业务脚本，如果非正常业务脚本，可直接注释掉任务内容或删除脚本。</li>
<li>风险性：高。</li>
</ul>
</li>
</ol>
<h3 id="四、检查第三方软件漏洞"><a href="#四、检查第三方软件漏洞" class="headerlink" title="四、检查第三方软件漏洞"></a>四、检查第三方软件漏洞</h3><ol>
<li>如果您服务器内有运行 Web、数据库等应用服务，请您限制应用程序帐户对文件系统的写权限，同时尽量使用非 root 帐户运行。<ul>
<li>检查说明：使用非 root 帐户运行可以保障在应用程序被攻陷后攻击者无法立即远程控制服务器，减少攻击损失</li>
<li>解决方法：<ol>
<li>进入 web 服务根目录或数据库配置目录；</li>
<li>运行<code>chown -R apache:apache /var/www/xxxx</code>、<code>chmod -R 750 file1.txt</code>命令配置网站访问权限。</li>
</ol>
</li>
<li>风险性：中。</li>
<li><a href=#ex>参考示例</a></li>
</ul>
</li>
<li>升级修复应用程序漏洞</li>
</ol>
<ul>
<li>检查说明：机器被入侵，部分原因是系统使用的应用程序软件版本较老，存在较多的漏洞而没有修复，导致可以被入侵利用。</li>
<li>解决方法：比较典型的漏洞例如 ImageMagick、openssl、glibc 等，用户可以根据腾讯云已发布安全通告指导通过 apt-get/yum 等方式进行直接升级修复。</li>
<li>风险性：高。</li>
</ul>
<p><a id="ex"></a><br><strong>网站目录文件权限的参考示例如下：</strong><br><strong>场景：</strong><br>我们假设 HTTP 服务器运行的用户和用户组是 www，网站用户为 centos，网站根目录是<code>/home/centos/web</code>。<br><strong>方法/步骤：</strong></p>
<ol>
<li>我们首先设定网站目录和文件的所有者和所有组为 centos，www，如下命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R centos:www &#x2F;home&#x2F;centos&#x2F;web</span><br></pre></td></tr></table></figure></li>
<li>设置网站目录权限为750，750是 centos 用户对目录拥有读写执行的权限，设置后，centos 用户可以在任何目录下创建文件，用户组有有读执行权限，这样才能进入目录，其它用户没有任何权限。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find -type d -exec chmod 750 &#123;&#125; \;</span><br></pre></td></tr></table></figure></li>
<li>设置网站文件权限为640，640指只有 centos 用户对网站文件有更改的权限，HTTP 服务器只有读取文件的权限，无法更改文件，其它用户无任何权限。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find -not -type d -exec chmod 640 &#123;&#125; \;</span><br></pre></td></tr></table></figure></li>
<li>针对个别目录设置可写权限。例如，网站的一些缓存目录就需要给 HTTP 服务有写入权限、discuz x2 的<code>/data/</code>目录就必须要写入权限。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find data -type d -exec chmod 770 &#123;&#125; \;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="被入侵后的安全优化建议"><a href="#被入侵后的安全优化建议" class="headerlink" title="被入侵后的安全优化建议"></a>被入侵后的安全优化建议</h2><ol>
<li>尽量使用 SSH 密钥进行登录，减少暴力破解的风险。</li>
<li>在服务器内编辑<code>/etc/ssh/sshd_config</code>文件中的 Port 22，将 22 修改为其他非默认端口，修改之后重启 SSH 服务。可使用命令重启<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;sshd restart（CentOS）或 &#x2F;etc&#x2F;init.d&#x2F;ssh restart（Debian&#x2F;Ubuntu）</span><br></pre></td></tr></table></figure>
<blockquote>
<p>!当修改端口时，需同时在 <a href="https://console.cloud.tencent.com/cvm/instance/index?rid=1">云服务器控制台</a> 上修改对应主机安全组配置，在其入站规则中放行对应端口，详情请参见 <a href="https://cloud.tencent.com/document/product/215/39790">添加安全组规则</a>。</p>
</blockquote>
</li>
<li>如果必须使用 SSH 密码进行管理，选择一个好密码。</li>
</ol>
<ul>
<li>无论应用程序管理后台（网站、中间件、tomcat 等）、远程 SSH、远程桌面、数据库，都建议设置复杂且不一样的密码。</li>
<li>下面是一些好密码的实例（可以使用空格）：<pre><code>`1qtwo-threeMiles3c45jia`
` caser, lanqiu streets`
</code></pre>
</li>
<li>下面是一些弱口令的示例，可能是您在公开的工作中常用的词或者是您生活中常用的词：<pre><code> 公司名+日期（coca-cola2016xxxx）
 常用口语（Iamagoodboy）
</code></pre>
</li>
</ul>
<ol start="4">
<li>使用以下命令检查主机有哪些端口开放，关闭非业务端口。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure></li>
<li>通过<strong>腾讯云-安全组防火墙</strong>限制仅允许制定 IP 访问管理或通过编辑<code>/etc/hosts.deny</code>、<code>/etc/hosts.allow</code>两个文件来限制 IP。</li>
<li>应用程序尽量不使用 <strong>root</strong> 权限。<br>例如 Apache、Redis、MySQL、Nginx 等程序，尽量不要以 root 权限的方式运行。</li>
<li>修复系统提权漏洞与运行在 root 权限下的<strong>程序漏洞</strong>，以免恶意软件通过漏洞提权获得 root 权限传播后门。<ul>
<li>及时更新系统或所用应用程序的版本，如 Struts2、Nginx，ImageMagick、Java 等。</li>
<li>关闭应用程序的远程管理功能，如 Redis、NTP 等，如果无远程管理需要，可关闭对外监听端口或配置。</li>
</ul>
</li>
<li>定期<strong>备份</strong>云服务器业务数据。<ul>
<li>对重要的业务数据进行异地备份或云备份，避免主机被入侵后无法恢复。</li>
<li>除了您的 home，root 目录外，您还应当备份 /etc 和可用于取证的 /var/log 目录。</li>
</ul>
</li>
<li>安装腾讯云<strong>主机安全 Agent</strong>，在发生攻击后，可以了解自身风险情况。</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>入侵</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装htop及htop的使用</title>
    <url>/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_80.jpg"><br>今天服务器又出问题了，内存32个G竟然被吃光了，就像准备排查下，使用top命令，想应该有更好用的，百度了下，果然找到了一个<code>htop</code></p>
<h2 id="htop下载"><a href="#htop下载" class="headerlink" title="htop下载"></a>htop下载</h2><p>去<a href="http://sourceforge.net/">sourceforge</a>搜索htop，看了下从2012年之后就没再更新，直接可以使用下面的命令进行下载即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://sourceforge.net/projects/htop/files/htop/1.0.2/htop-1.0.2.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="htop解压、编译、安装"><a href="#htop解压、编译、安装" class="headerlink" title="htop解压、编译、安装"></a>htop解压、编译、安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -zxvf htop-1.0.2.tar.gz</span></span><br><span class="line"><span class="comment"># cd htop-1.0.2/</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/htop  //这里如果报错了，看下面的报错异常处理</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">编辑环境变量文件</span><br><span class="line"><span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="comment"># export PATH=&quot;$PATH:/usr/local/htop/bin&quot;</span></span><br><span class="line"><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>

<h2 id="界面解析"><a href="#界面解析" class="headerlink" title="界面解析"></a>界面解析</h2><p>首先执行下htop命令看下是否安装成功</p>
<img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_1.png" class="">
<p>上图主要分为四个区域：</p>
<ul>
<li>左上角：显示CPU、物理内存、交换分区信息</li>
<li>右上角：任务数量、平均负载、运行时间等信息</li>
<li>进程区域：显示当前系统中的所有进程</li>
<li>底部区域：操作提示，分别是F1-F10功能键</li>
</ul>
<h3 id="左上角区域解析"><a href="#左上角区域解析" class="headerlink" title="左上角区域解析"></a>左上角区域解析</h3><p>CPU、内存、交换区的使用情况及占比，没有太多可以说的</p>
<h3 id="右上角区域解析"><a href="#右上角区域解析" class="headerlink" title="右上角区域解析"></a>右上角区域解析</h3><p>Tasks：使用逗号隔开，分别是运行着的进程和进程总数<br>Load average:平均负载 1分钟 5分钟 10分钟<br>Uptime：开机时间</p>
<h3 id="进程区域"><a href="#进程区域" class="headerlink" title="进程区域"></a>进程区域</h3><ul>
<li>PID：进程的标识号</li>
<li>USER：运行此进程的用户</li>
<li>PRI：进程的优先级</li>
<li>NI：进程的优先级别值，默认为0，可进行调整</li>
<li>VIRT：进程占用的虚拟内存值</li>
<li>RES：进程占用的物理内存值</li>
<li>SHR：进程占用的共享内存值</li>
<li>S：进程运行情况R表示运行、S表示休眠等待唤醒、Z表示僵尸</li>
<li>%CPU：该进程占用CPU百分比</li>
<li>%MEM：该进程占用的物理内存和总内存的百分比</li>
<li>TIME+：该进程启动后占用的总CPU时间</li>
<li>COMMAND：启动该进程使用的命令名称</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>底部区域那是有F1-F10功能键的，通过这些功能键是能实现一个功能的，具体的功能描述如下</p>
<h3 id="F1-显示帮助信息"><a href="#F1-显示帮助信息" class="headerlink" title="F1:显示帮助信息"></a>F1:显示帮助信息</h3><img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_2.png" class="">

<h3 id="F2-配置界面中的显示信息"><a href="#F2-配置界面中的显示信息" class="headerlink" title="F2:配置界面中的显示信息"></a>F2:配置界面中的显示信息</h3><img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_3.png" class="">
<img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_4.png" class="">

<h3 id="F3-进程搜索"><a href="#F3-进程搜索" class="headerlink" title="F3:进程搜索"></a>F3:进程搜索</h3><img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_5.png" class="">

<h3 id="F4-过滤进程"><a href="#F4-过滤进程" class="headerlink" title="F4:过滤进程"></a>F4:过滤进程</h3><p>从下图可以清楚的看到，搜索和过滤的区别，搜索是光标定位到对应的进程上，但是过滤是只显示符合的进程</p>
<img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_6.png" class="">

<h3 id="F5-以进程树的形式进行展示"><a href="#F5-以进程树的形式进行展示" class="headerlink" title="F5:以进程树的形式进行展示"></a>F5:以进程树的形式进行展示</h3><p>效果和F3和F4的一样，就是进程按照树的形式进行展示</p>
<h3 id="F6-排序"><a href="#F6-排序" class="headerlink" title="F6:排序"></a>F6:排序</h3><img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_7.png" class="">

<h3 id="F7-F8-修改进程Nice值（进程的优先级）"><a href="#F7-F8-修改进程Nice值（进程的优先级）" class="headerlink" title="F7/F8:修改进程Nice值（进程的优先级）"></a>F7/F8:修改进程Nice值（进程的优先级）</h3><p>F7是降低进程的优先级，F8是提升进程的优先级</p>
<h3 id="F9：杀掉指定的进程"><a href="#F9：杀掉指定的进程" class="headerlink" title="F9：杀掉指定的进程"></a>F9：杀掉指定的进程</h3><img src="/2020/04/17/Linux%E4%B8%8B%E5%AE%89%E8%A3%85htop%E5%8F%8Ahtop%E7%9A%84%E4%BD%BF%E7%94%A8/screenshot_8.png" class="">

<h3 id="F10-退出htop。"><a href="#F10-退出htop。" class="headerlink" title="F10:退出htop。"></a>F10:退出htop。</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>空格键：用于标记选中的进程，用于实现对多个进程的同时操作</li>
<li>U：取消所有选中的额进程</li>
<li>s: 显示光标所在进程执行的系统调用命令</li>
<li>|：显示光标所在进程的文件列表</li>
<li>I:对排序顺序进行反序排列</li>
<li>a:绑定进程到指定的CPU</li>
<li>u:显示指定用户的进程</li>
<li>M:按照内存使用百分比进行排序，对应的列是<code>MEM%</code></li>
<li>P:按照CPU使用百分比排序，对应<code>CPU%</code></li>
<li>T:按照进程运行时间排序，对应<code>TIME+</code></li>
<li>K:隐藏内核线程</li>
<li>H:隐藏用户线程</li>
<li>#：快速定位光标到PID所指定的进程上</li>
</ul>
<h2 id="htop参数"><a href="#htop参数" class="headerlink" title="htop参数"></a>htop参数</h2><h3 id="d：设置刷新时间"><a href="#d：设置刷新时间" class="headerlink" title="d：设置刷新时间"></a>d：设置刷新时间</h3><p>单位不是很确定，设置为5的时候刷新的很快，50又不是5s</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># htop -d 50</span></span><br></pre></td></tr></table></figure>

<h3 id="u-显示指定用户进程"><a href="#u-显示指定用户进程" class="headerlink" title="u:显示指定用户进程"></a>u:显示指定用户进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># htop -u oracle</span><br></pre></td></tr></table></figure>
<h3 id="s-按照指定列进行排序"><a href="#s-按照指定列进行排序" class="headerlink" title="s:按照指定列进行排序"></a>s:按照指定列进行排序</h3><h2 id="报错异常处理"><a href="#报错异常处理" class="headerlink" title="报错异常处理"></a>报错异常处理</h2><p>安装过程中在执行configure的时候，有可能会报下面这个错误，这说明缺少lib包，只需要执行这个命令安装即可<code>yum install ncurses-devel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">configure: error: You may want to use --disable-unicode or install libncursesw.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>htop</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux公钥进行远程登录</title>
    <url>/2019/02/18/Linux%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_9.jpg"></p>
<blockquote>
<p>之前听领导说使用公钥远程服务器的方式进行远程，感觉挺神秘，今天实践了一下，确实挺方便，先讲几点从中的感悟</p>
</blockquote>
<ul>
<li><p>拿到一个服务器的时候，如果想看下是否有被别人使用了公钥登录方式进行登录的方法<br><font color='red'>看下文件/etc/ssh/sshd_config中的<code>PubkeyAuthentication</code>是否为<code>yes</code>状态，如果是，有可能是被别人能够通过公钥登录，然后再看下<code>AuthorizedKeysFile</code>看后面是否有公钥文件，如果有，那就是公钥的文件目录了</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看/etc/ssh/sshd_config</span></span><br><span class="line">[root@itlb ssh]<span class="comment"># cat /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"># 文件比较长，需要详细的看下里面的内容，主要关注的是以下几个点</span></span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile      /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li><p>设置服务器只能通过公钥进行登录，不能通过账号和密码登录的方法<br><font color='red'>设置<code>/etc/ssh/sshd_config</code>中的<code>PasswordAuthentication </code>为<code>no</code></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no  <span class="comment"># 不允许密码验证登录</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="设置通过公钥登录服务器步骤"><a href="#设置通过公钥登录服务器步骤" class="headerlink" title="设置通过公钥登录服务器步骤"></a>设置通过公钥登录服务器步骤</h1><h2 id="1-首先检查下服务器的SSH远程登录的服务状态"><a href="#1-首先检查下服务器的SSH远程登录的服务状态" class="headerlink" title="1. 首先检查下服务器的SSH远程登录的服务状态"></a>1. 首先检查下服务器的SSH远程登录的服务状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="variable">$service</span> sshd status 　　　　<span class="comment"># 查看sshd服务运行状态,如果没有输出`正在运行`，说明存在问题，需要安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装、启动、永久生效</span></span><br><span class="line">[root@node1 ~]$ yum install -y openssh-server 　　<span class="comment"># 安装openssh服务端</span></span><br><span class="line">[root@node1 ~]$ yum install -y openssh-clients  <span class="comment">#安装openssh客户端，可以不安装</span></span><br><span class="line">[root@node1 ~]$ service sshd start 　　　　<span class="comment"># 临时开启sshd服务</span></span><br><span class="line">[root@node1 ~]$ chkconfig sshd on 　　　　 <span class="comment"># 永久开启sshd服务，服务器重启也生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次检查sshd的状态</span></span><br><span class="line">[root@node1 ~]<span class="variable">$service</span> sshd status 　　　　<span class="comment"># 查看sshd服务运行状态，如果输出下面内容，说明运行正常</span></span><br><span class="line">openssh-daemon (pid 1384) 正在运行...  <span class="comment"># 显示正在运行</span></span><br></pre></td></tr></table></figure>

<h2 id="2-生成密钥对"><a href="#2-生成密钥对" class="headerlink" title="2. 生成密钥对"></a>2. 生成密钥对</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]$ ssh-keygen  <span class="comment"># 生成ssh密钥对</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): <span class="comment"># 回车(如果默认要保存到当前路径下，就直接回车，如果需要修改，输入对应的路径)</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):  <span class="comment">#密码（如果远程的使用公钥的时候设置还需要密码的时候，在这里输入密码）</span></span><br><span class="line">Enter same passphrase again: <span class="comment"># 重复上面的密码</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa. <span class="comment"># 提示你的密钥保存在这个路径下了</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">fd:72:10:50:a6:7d:83:c7:93:d2:26:3d:12:0e:38:2f root@node1</span><br><span class="line">The keys randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|  .o.+  |</span><br><span class="line">|  o B * . |</span><br><span class="line">|  o. O % |</span><br><span class="line">|  E .. O + |</span><br><span class="line">|  .S o  |</span><br><span class="line">|   o  |</span><br><span class="line">|   . o |</span><br><span class="line">|   o  |</span><br><span class="line">|     |</span><br><span class="line">+-----------------+</span><br><span class="line">[root@node1 ~]$ <span class="built_in">cd</span> root/.ssh/</span><br><span class="line">[root@node1 .ssh]$ ll <span class="comment"># 查看密钥/公钥对信息，权限都为600</span></span><br><span class="line">总用量 8</span><br><span class="line">-rw-------. 1 root root 1675 5月 21 14:26 id_rsa 　　　　<span class="comment"># 私钥</span></span><br><span class="line">-rw-------. 1 root root 392 5月 21 14:26 id_rsa.pub <span class="comment"># 公钥</span></span><br><span class="line">[root@node1 .ssh]$</span><br></pre></td></tr></table></figure>

<h2 id="3-修改sshd配置文件"><a href="#3-修改sshd配置文件" class="headerlink" title="3. 修改sshd配置文件"></a>3. 修改sshd配置文件</h2><p>这个地方文件内容比较长，一定要耐心找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]$  vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">PasswordAuthentication no  <span class="comment"># 不允许密码验证登录</span></span><br><span class="line">PubkeyAuthentication yes   <span class="comment"># 允许公钥验证登录</span></span><br><span class="line">AuthorizedKeysFile .ssh/id_rsa.pub <span class="comment"># 指定公钥文件路径</span></span><br></pre></td></tr></table></figure>

<h2 id="4-将公私钥导出到本地"><a href="#4-将公私钥导出到本地" class="headerlink" title="4. 将公私钥导出到本地"></a>4. 将公私钥导出到本地</h2><p>这个步骤就不多说了，用各种ftp软件导出到本地即可</p>
<h2 id="5-重启sshd服务（重要）"><a href="#5-重启sshd服务（重要）" class="headerlink" title="5. 重启sshd服务（重要）"></a>5. 重启sshd服务<font color='red'>（重要）</font></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 .ssh]$ service sshd reload</span><br><span class="line">重新载入 sshd：      [确定]</span><br></pre></td></tr></table></figure>

<h2 id="6-使用Xshell远程"><a href="#6-使用Xshell远程" class="headerlink" title="6. 使用Xshell远程"></a>6. 使用Xshell远程</h2><img src="/2019/02/18/Linux%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B/screenshot_1.png" class="">
<img src="/2019/02/18/Linux%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B/screenshot_2.png" class="">
<img src="/2019/02/18/Linux%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B/screenshot_3.png" class="">
<img src="/2019/02/18/Linux%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B/screenshot_4.png" class="">
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>公私钥</tag>
        <tag>远程登录</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux后台执行命令 &amp;和nohup</title>
    <url>/2019/02/11/Linux%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4-%E5%92%8Cnohup/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_2.jpg"></p>
<blockquote>
<p>当我们在终端或控制台工作时，可能不希望由于运行一个作业而占住了屏幕，因为可能还有更重要的事情要做，比如阅读电子邮件。对于密集访问磁盘的进程，我们更希望它能够在每天的非负荷高峰时间段运行(例如凌晨)。为了使这些进程能够在后台运行，也就是说不在终端屏幕上运行，有几种选择方法可供使用。</p>
</blockquote>
<h2 id="使用-amp"><a href="#使用-amp" class="headerlink" title="使用&amp;"></a>使用&amp;</h2><p>当在前台运行某个作业时，终端被该作业占用；可以在命令后面加上&amp;实现后台运行，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh test.sh &amp;</span><br></pre></td></tr></table></figure>
<p>适合在后台运行find、费时的排序及一些shell脚本。在后台运行作业时要当心：需要用户交互的命令不要放在后台执行（<font color='red'>例如需要你去确认是否安装，是否overwrite之类的</font>），否则机器会在哪里傻等。不过，作业在后台运行一样会将结果输出到屏幕上，干扰你的工作。如果放在后台运行的作业产生大量的输出，最好使用下面的方法把他重定向输出到某个文件中,具体的实例见下图，当成功提交进程后，会显示一个进程号，可以使用它来监控进程或者杀死进程（ps -ef|grep 查看进程；kill -9 杀死进程）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command &gt; out.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<img src="/2019/02/11/Linux%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4-%E5%92%8Cnohup/screenshot_1.png" class="">

<h2 id="使用nohup"><a href="#使用nohup" class="headerlink" title="使用nohup"></a>使用nohup</h2><p>使用&amp;命令后，作业被提交到后台运行，当前控制台没有被占用，但是一旦把当前控制台关掉（退出账户时），作业就会停止运行。nohup命令可以在你退出账号之后继续运行相应的进程。nohup就是不挂起的意思（no hang up），该命令的一般形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup command &amp;</span><br></pre></td></tr></table></figure>
<p>如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外制定了输出文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p><font color='red'>使用了nohup之后，很多人就这样不管了，其实这样有可能在当前账户非正常退出或者结束的时候，命令还是自己结束了。所以在使用nohup命令后台执行命令之后，需要使用exit正常退出当前账户，这样才能保证命令一直在后台运行</font></p>
<h2 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h2><ul>
<li><p>Ctrl+z<br>可以将一个正在执行的命令放到后台，并且处于<font color='red'>暂停状态</font></p>
</li>
<li><p>jobs<br>查看当前有多少在后台运行的命令，查看的结果是没有进程ID的，所以上面nohup打印进程ID的时候，一定要记下来，好用来结束</p>
</li>
<li><p>2&gt;&amp;1<br>2&gt;&amp;1 是将标准出错重定向到标准输出，这里的标准输出已经重定向到了out.file文件，即将标准出错也输出到out.file文件中。最后一个&amp;， 是让该命令在后台执行</p>
</li>
</ul>
<p>试想2&gt;1代表什么，2与&gt;结合代表错误重定向，而1则代表错误重定向到一个文件1，而不代表标准输出；换成2&gt;&amp;1，&amp;与1结合就代表标准输出了，就变成错误重定向到标准输出</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>后台执行</tag>
        <tag>nohup</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2019/02/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_3.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">系统版本：登陆root帐户，输入 cat  /etc/redhat-release，。</span><br><span class="line">查看CPU信息：grep <span class="string">&quot;model name&quot;</span> /proc/cpuinfo</span><br><span class="line">系统位数：uname -a</span><br><span class="line">查看已经安装的程序：rpm -qa</span><br><span class="line">查看主机名：hostname  </span><br><span class="line">解压：tar -zxvf web.tar.gz</span><br><span class="line">查看端口号占用情况：netstat -ntlp</span><br><span class="line"></span><br><span class="line">[root@yan-001 ~] <span class="comment"># uname -a # 查看内核/操作系统/CPU信息的linux系统信息命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># head -n 1 /etc/issue # 查看操作系统版本，是数字1不是字母L</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/cpuinfo # 查看CPU信息的linux系统信息命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># hostname # 查看计算机名的linux系统信息命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># lspci -tv # 列出所有PCI设备</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># lsusb -tv # 列出所有USB设备的linux系统信息命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># lsmod # 列出加载的内核模块</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># env # 查看环境变量资源</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># free -m # 查看内存使用量和交换区使用量</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># df -h # 查看各分区使用情况</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># du -sh # 查看指定目录的大小</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># grep MemTotal /proc/meminfo # 查看内存总量</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># grep MemFree /proc/meminfo # 查看空闲内存量</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># uptime # 查看系统运行时间、用户数、负载</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/loadavg # 查看系统负载磁盘和分区</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># mount | column -t # 查看挂接的分区状态</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># fdisk -l # 查看所有分区</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># swapon -s # 查看所有交换分区</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># dmesg | grep IDE # 查看启动时IDE设备检测状况网络</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># ifconfig # 查看所有网络接口的属性</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># iptables -L # 查看防火墙设置</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># route -n # 查看路由表</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># netstat -lntp # 查看所有监听端口</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># netstat -antp # 查看所有已经建立的连接</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># netstat -s # 查看网络统计信息进程</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># ps -ef # 查看所有进程</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># top # 实时显示进程状态用户</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># w # 查看活动用户</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># id # 查看指定用户信息</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># last # 查看用户登录日志</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cut -d: -f1 /etc/passwd # 查看系统所有用户</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cut -d: -f1 /etc/group # 查看系统所有组</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># crontab -l # 查看当前用户的计划任务服务</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># chkconfig –list # 列出所有系统服务</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># chkconfig –list | grep on # 列出所有启动的系统服务程序</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># rpm -qa # 查看所有安装的软件包</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/cpuinfo # 查看CPU相关参数的linux系统命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/partitions # 查看linux硬盘和分区信息的系统信息命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/meminfo # 查看linux系统内存信息的linux系统命令</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/version # 查看版本，类似uname -r</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/ioports # 查看设备io端口</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/interrupts # 查看中断</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/pci # 查看pci设备的信息</span></span><br><span class="line">[root@yan-001 ~] <span class="comment"># cat /proc/swaps # 查看所有swap分区的信息</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="注释掉系统不需要的用户和用户组"><a href="#注释掉系统不需要的用户和用户组" class="headerlink" title="注释掉系统不需要的用户和用户组"></a>注释掉系统不需要的用户和用户组</h3><p><code>注意：</code>不建议直接删除，当你需要某个用户时，自己重新添加会很麻烦。</p>
<ul>
<li><p>注释掉不用的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp  /etc/passwd  /etc/passwdbak   <span class="comment">#修改之前先备份   </span></span><br><span class="line">vi /etc/passwd  <span class="comment">#编辑用户，在前面加上#注释掉 此行</span></span><br><span class="line"><span class="comment">#adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="comment">#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br><span class="line"><span class="comment">#sync:x:5:0:sync:/sbin:/bin/sync</span></span><br><span class="line"><span class="comment">#shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span></span><br><span class="line"><span class="comment">#halt:x:7:0:halt:/sbin:/sbin/halt#uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</span></span><br><span class="line"><span class="comment">#operator:x:11:0:operator:/root:/sbin/nologin</span></span><br><span class="line"><span class="comment">#games:x:12:100:games:/usr/games:/sbin/nologin</span></span><br><span class="line"><span class="comment">#gopher:x:13:30:gopher:/var/gopher:/sbin/nologin</span></span><br><span class="line"><span class="comment">#ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin    #注释掉ftp匿名账号</span></span><br></pre></td></tr></table></figure></li>
<li><p>注释掉不用的用户用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/group   /etc/groupbak  <span class="comment">#修改之前先备份  </span></span><br><span class="line">vi /etc/group  </span><br><span class="line"><span class="comment">#编辑用户组，在前面加上#注释掉此行</span></span><br><span class="line"><span class="comment">#adm:x:4:root,adm,daemon</span></span><br><span class="line"><span class="comment">#lp:x:7:daemon,lp</span></span><br><span class="line"><span class="comment">#uucp:x:14:uucp</span></span><br><span class="line"><span class="comment">#games:x:20:</span></span><br><span class="line"><span class="comment">#dip:x:40:</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="关闭系统不需要的服务"><a href="#关闭系统不需要的服务" class="headerlink" title="关闭系统不需要的服务"></a>关闭系统不需要的服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service acpid stop  chkconfig acpid off   <span class="comment">#停止服务，取消开机启动  #电源进阶设定，常用在 Laptop 上</span></span><br><span class="line">service autofs stop  chkconfig autofs off  <span class="comment">#停用自动挂载档桉系统与周边装置</span></span><br><span class="line">service bluetooth stop  chkconfig  bluetooth  off   <span class="comment">#停用Bluetooth蓝芽</span></span><br><span class="line">service cpuspeed stop  chkconfig  cpuspeed  off   <span class="comment">#停用控制CPU速度主要用来省电</span></span><br><span class="line">service cups stop   chkconfig cups off    <span class="comment">#停用 Common UNIX Printing System 使系统支援印表机</span></span><br><span class="line">service ip6tables stop  chkconfig ip6tables off   <span class="comment">#禁止IPv6</span></span><br><span class="line"><span class="comment">#如果要恢复某一个服务，可以执行下面操作</span></span><br><span class="line"><span class="comment">#service acpid start  chkconfig acpid on  </span></span><br></pre></td></tr></table></figure>
<h3 id="禁止非root用户执行-etc-rc-d-init-d-下的系统命令"><a href="#禁止非root用户执行-etc-rc-d-init-d-下的系统命令" class="headerlink" title="禁止非root用户执行/etc/rc.d/init.d/下的系统命令"></a>禁止非root用户执行/etc/rc.d/init.d/下的系统命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod -R 700 /etc/rc.d/init.d/*</span><br><span class="line">chmod -R 777 /etc/rc.d/init.d/*    <span class="comment">#恢复默认设置  </span></span><br></pre></td></tr></table></figure>
<h3 id="给下面的文件加上不可更改属性，从而防止非授权用户获得权限"><a href="#给下面的文件加上不可更改属性，从而防止非授权用户获得权限" class="headerlink" title="给下面的文件加上不可更改属性，从而防止非授权用户获得权限"></a>给下面的文件加上不可更改属性，从而防止非授权用户获得权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr +i /etc/passwd</span><br><span class="line">chattr +i /etc/shadow</span><br><span class="line">chattr +i /etc/group</span><br><span class="line">chattr +i /etc/gshadow</span><br><span class="line">chattr +i /etc/services    <span class="comment">#给系统服务端口列表文件加锁,防止未经许可的删除或添加服务</span></span><br><span class="line">lsattr  /etc/passwd   /etc/shadow  /etc/group  /etc/gshadow   /etc/services   <span class="comment">#显示文件的属性  </span></span><br><span class="line">注意：执行以上权限修改之后，就无法添加删除用户了。如果再要添加删除用户，需要先取消上面的设置，等用户添加删除完成之后，再执行上面的操作</span><br><span class="line">chattr -i /etc/passwd     <span class="comment">#取消权限锁定设置  </span></span><br><span class="line">chattr -i /etc/shadow  </span><br><span class="line">chattr -i /etc/group  </span><br><span class="line">chattr -i /etc/gshadow  </span><br><span class="line">chattr -i /etc/services   <span class="comment">#取消系统服务端口列表文件加锁</span></span><br><span class="line">现在可以进行添加删除用户了，操作完之后再锁定目录文件</span><br></pre></td></tr></table></figure>
<h3 id="限制不同文件的权限"><a href="#限制不同文件的权限" class="headerlink" title="限制不同文件的权限"></a>限制不同文件的权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr +a .bash_history           <span class="comment">#避免删除.bash_history或者重定向到/dev/null</span></span><br><span class="line">chattr +i .bash_historychmod 700 /usr/bin                </span><br><span class="line">恢复  chmod 555 /usr/binchmod 700 /bin/ping              </span><br><span class="line">恢复  chmod 4755 /bin/pingchmod 700 /usr/bin/vim         </span><br><span class="line">恢复  chmod 755 /usr/bin/vimchmod 700 /bin/netstat          </span><br><span class="line">恢复  chmod 755 /bin/netstatchmod 700 /usr/bin/tail          </span><br><span class="line">恢复  chmod 755 /usr/bin/tailchmod 700 /usr/bin/less         </span><br><span class="line">恢复  chmod 755 /usr/bin/lesschmod 700 /usr/bin/head       </span><br><span class="line">恢复  chmod 755 /usr/bin/headchmod 700 /bin/cat                </span><br><span class="line">恢复  chmod 755 /bin/catchmod 700 /bin/uname          </span><br><span class="line">恢复  chmod 755 /bin/uname</span><br><span class="line">chmod 500 /bin/ps                 </span><br><span class="line">恢复  chmod 755 /bin/ps</span><br></pre></td></tr></table></figure>
<h3 id="禁止使用Ctrl-Alt-Del快捷键重启服务器"><a href="#禁止使用Ctrl-Alt-Del快捷键重启服务器" class="headerlink" title="禁止使用Ctrl+Alt+Del快捷键重启服务器"></a>禁止使用Ctrl+Alt+Del快捷键重启服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/inittab  /etc/inittabbak</span><br><span class="line">vi /etc/inittab    <span class="comment">#注释掉下面这一行</span></span><br><span class="line"><span class="comment">#ca::ctrlaltdel:/sbin/shutdown -t3 -r now</span></span><br></pre></td></tr></table></figure>
<h3 id="不随意升级内核"><a href="#不随意升级内核" class="headerlink" title="不随意升级内核"></a>不随意升级内核</h3><p>使用yum update更新系统时不升级内核，只更新软件包由于系统与硬件的兼容性问题，有可能升级内核后导致服务器不能正常启动，这是非常可怕的，没有特别的需要，建议不要随意升级内核。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/yum.conf    /etc/yum.confbak</span><br><span class="line">1、修改yum的配置文件 vi /etc/yum.conf  在[main]的最后添加 exclude=kernel*</span><br><span class="line">2、直接在yum的命令后面加上如下的参数：yum --exclude=kernel* update</span><br><span class="line">查看系统版本  cat /etc/issue</span><br><span class="line">查看内核版本  uname -a</span><br></pre></td></tr></table></figure>

<h3 id="关闭Centos自动更新"><a href="#关闭Centos自动更新" class="headerlink" title="关闭Centos自动更新"></a>关闭Centos自动更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list yum-updatesd  <span class="comment">#显示当前系统状态yum-updatesd    0:关闭  1:关闭  2:启用  3:启用  4:启用  5:启用  6:关闭</span></span><br><span class="line">service yum-updatesd stop      <span class="comment">#关闭  开启参数为start停止 yum-updatesd：                                        [确定]</span></span><br><span class="line">service yum-updatesd status   <span class="comment">#查看是否关闭yum-updatesd 已停</span></span><br><span class="line">chkconfig --level 35 yum-updatesd off  <span class="comment">#禁止开启启动（系统模式为3、5）</span></span><br><span class="line">chkconfig yum-updatesd off  <span class="comment">#禁止开启启动（所有启动模式全部禁止）</span></span><br><span class="line">chkconfig --list yum-updatesd  <span class="comment">#显示当前系统状态</span></span><br><span class="line">yum-updatesd    0:关闭  1:关闭  2:启用  3:关闭  4:启用  5:关闭  6:关闭</span><br></pre></td></tr></table></figure>

<h3 id="关闭多余的虚拟控制台"><a href="#关闭多余的虚拟控制台" class="headerlink" title="关闭多余的虚拟控制台"></a>关闭多余的虚拟控制台</h3><p>我们知道从控制台切换到 X 窗口，一般采用 Alt-F7 ，为什么呢？因为系统默认定义了 6 个虚拟控制台，所以 X 就成了第7个。实际上，很多人一般不会需要这么多虚拟控制台的，修改/etc/inittab ，注释掉那些你不需要的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp  /etc/inittab  /etc/inittabbak</span><br><span class="line">vi /etc/inittab</span><br><span class="line"><span class="comment"># Run gettys in standard runlevels</span></span><br><span class="line">1:2345:respawn:/sbin/mingetty tty1</span><br><span class="line"><span class="comment">#2:2345:respawn:/sbin/mingetty tty2</span></span><br><span class="line"><span class="comment">#3:2345:respawn:/sbin/mingetty tty3</span></span><br><span class="line"><span class="comment">#4:2345:respawn:/sbin/mingetty tty4</span></span><br><span class="line"><span class="comment">#5:2345:respawn:/sbin/mingetty tty5</span></span><br><span class="line"><span class="comment">#6:2345:respawn:/sbin/mingetty tty6</span></span><br></pre></td></tr></table></figure>

<h3 id="修改history命令记录"><a href="#修改history命令记录" class="headerlink" title="修改history命令记录"></a>修改history命令记录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/profile   /etc/profilebak</span><br><span class="line">vi /etc/profile</span><br><span class="line">找到 HISTSIZE=1000 改为 HISTSIZE=50</span><br></pre></td></tr></table></figure>

<h3 id="隐藏服务器系统信息"><a href="#隐藏服务器系统信息" class="headerlink" title="隐藏服务器系统信息"></a>隐藏服务器系统信息</h3><p>在缺省情况下，当你登陆到linux系统，它会告诉你该linux发行版的名称、版本、内核版本、服务器的名称。为了不让这些默认的信息泄露出来，我们要进行下面的操作，让它只显示一个”login:”提示符。删除/etc/issue和/etc/issue.net这两个文件，或者把这2个文件改名，效果是一样的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv  /etc/issue /etc/issuebak</span><br><span class="line">mv  /etc/issue.net   /etc/issue.netbak</span><br></pre></td></tr></table></figure>

<h3 id="优化Linux内核参数"><a href="#优化Linux内核参数" class="headerlink" title="优化Linux内核参数"></a>优化Linux内核参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/sysctl.conf  /etc/sysctl.confbak</span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="comment">#在文件末尾添加以下内容</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"><span class="comment">#修改为1net.core.somaxconn = 262144net.core.netdev_max_backlog = 262144net.core.wmem_default = 8388608net.core.rmem_default = 8388608net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.ipv4.netfilter.ip_conntrack_max = 131072net.ipv4.netfilter.ip_conntrack_tcp_timeout_established = 180net.ipv4.route.gc_timeout = 20net.ipv4.ip_conntrack_max = 819200net.ipv4.ip_local_port_range = 10024  65535net.ipv4.tcp_retries2 = 5net.ipv4.tcp_fin_timeout = 30net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_synack_retries = 1net.ipv4.tcp_timestamps = 0net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_tw_len = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_keepalive_time = 120net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl = 15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_max_orphans = 3276800net.ipv4.tcp_max_syn_backlog = 262144net.ipv4.tcp_wmem = 8192 131072 16777216net.ipv4.tcp_rmem = 32768 131072 16777216net.ipv4.tcp_mem = 94500000 915000000 927000000</span></span><br><span class="line">/sbin/sysctl -p   </span><br><span class="line"><span class="comment">#使配置立即生效</span></span><br></pre></td></tr></table></figure>

<p>十四、CentOS 系统优化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp  /etc/profile  /etc/profilebak2vi /etc/profile      </span><br><span class="line"><span class="comment">#在文件末尾添加以下内容ulimit -c unlimitedulimit -s unlimitedulimit -SHn 65535ulimit -S -c 0export LC_ALL=C</span></span><br><span class="line"><span class="built_in">source</span>  /etc/profile    <span class="comment">#使配置立即生效</span></span><br><span class="line"><span class="built_in">ulimit</span> -a    <span class="comment">#显示当前的各种用户进程限制</span></span><br></pre></td></tr></table></figure>

<h3 id="服务器禁止ping"><a href="#服务器禁止ping" class="headerlink" title="服务器禁止ping"></a>服务器禁止ping</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp  /etc/rc.d/rc.local  /etc/rc.d/rc.localbakvi  /etc/rc.d/rc.local</span><br><span class="line"><span class="comment">#在文件末尾增加下面这一行echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all参数0表示允许   1表示禁止</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器内存、处理器、磁盘使用情况</title>
    <url>/2019/02/18/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E3%80%81%E5%A4%84%E7%90%86%E5%99%A8%E3%80%81%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_10.jpg"></p>
<blockquote>
<p>本文转自<a href="https://blog.csdn.net/Cloudox_/article/details/78651637">命令查看Linux服务器内存、CPU、显卡使用情况</a> 转不意味着Copy，而是对别人知识的汲取和吸收的同时加上自己的理解</p>
</blockquote>
<h2 id="Linux查看物理CPU个数、核心数、逻辑CPU个数"><a href="#Linux查看物理CPU个数、核心数、逻辑CPU个数" class="headerlink" title="Linux查看物理CPU个数、核心数、逻辑CPU个数"></a>Linux查看物理CPU个数、核心数、逻辑CPU个数</h2><ol>
<li>物理CPU个数：主板上实际插入的CPU个数，可以数不重复的<code>physical id</code>有几个，下面的命令显示是2个CPU<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xydtech ~]<span class="comment"># cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</span></span><br><span class="line">2</span><br><span class="line">[root@xydtech ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li>CPU核心数：单款CPU上面能处理数据的芯片组数量，如双核、四核，下面的命令执行结果为8核<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xydtech ~]<span class="comment"># cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span></span><br><span class="line">cpu cores	: 8</span><br><span class="line">[root@xydtech ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li>逻辑CPU数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xydtech ~]<span class="comment"># cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</span></span><br><span class="line">32</span><br><span class="line">[root@xydtech ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li>查看CPU信息（型号）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xydtech ~]<span class="comment"># cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span></span><br><span class="line">     32  Intel(R) Xeon(R) CPU E5-2640 v2 @ 2.00GHz</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h2><blockquote>
<p><code>free -m</code>命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@itlb ~]# free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:         32078      31202        876          0          5      21952</span><br><span class="line">-&#x2F;+ buffers&#x2F;cache:       9244      22834</span><br><span class="line">Swap:        16111         86      16025</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解析  </p>
</blockquote>
<p>命令中的<code>-m</code>指的是按照<code>MB</code>进行数据统计  </p>
<ul>
<li>Mem行<ul>
<li><code>total</code>:内存总数</li>
<li><code>used</code>:内存已使用数</li>
<li><code>free</code>:内存空闲数</li>
<li><code>shared</code>:目前该参数已经废弃不适用，为0</li>
<li><code>buffers</code>:缓存内存数（Buffer）</li>
<li><code>cached</code>:缓存内舒数（Page）</li>
</ul>
</li>
<li>-/+ buffers/cache:<ul>
<li>（-buffers/cache）: **<font color='red'>真正使用的内存数</font>**，指的是第一部分的 used - buffers - cached</li>
<li>（+buffers/cache）: **<font color='red'>可用的内存数</font>**，指的是第一部分的 free + buffers + cached</li>
</ul>
</li>
<li>Swap:交换区的内存使用情况</li>
</ul>
<p>注：虽然看着<code>free</code>的剩余比较小，但是这里有一定的混淆，真正的<code>free</code>是<code>free+buffers+cached</code></p>
<h2 id="处理器使用情况"><a href="#处理器使用情况" class="headerlink" title="处理器使用情况"></a>处理器使用情况</h2><blockquote>
<p><code>top</code>命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@itlb ~]<span class="comment"># top</span></span><br><span class="line">top - 10:21:44 up 833 days, 18:27,  1 user,  load average: 1.45, 1.36, 1.19</span><br><span class="line">Tasks: 509 total,   2 running, 507 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  0.0%us,  1.2%sy,  3.1%ni, 95.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Mem:  32848860k total, 31990756k used,   858104k free,    26208k buffers</span><br><span class="line">Swap: 16498680k total,    88276k used, 16410404k free, 22492248k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">24827 root      30  10  391m  97m 6940 S  106.1  0.3   0:02.40 sosreport</span><br><span class="line">25310 root      20   0 15300 1588  944 R  0.7  0.0   0:00.06 top</span><br><span class="line">  100 root      20   0     0    0    0 S  0.3  0.0 142:18.26 events/1</span><br><span class="line">  118 root      20   0     0    0    0 S  0.3  0.0  25:50.62 events/19</span><br><span class="line"> 2193 root      20   0     0    0    0 S  0.3  0.0 125:46.21 kondemand/0</span><br><span class="line"> 2199 root      20   0     0    0    0 S  0.3  0.0 213:10.72 kondemand/6</span><br><span class="line"> 9996 root      20   0 13.6g 786m  10m S  0.3  2.5 570:23.13 java</span><br><span class="line">15398 oracle    20   0 6355m  23m  20m S  0.3  0.1 173:01.00 oracle</span><br><span class="line">25444 root      20   0 7630m 930m  31m S  0.3  2.9 128:53.80 java</span><br><span class="line">25775 root      30  10 77124 6324 4512 R  0.3  0.0   0:00.01 rpm</span><br><span class="line">28567 root      20   0 17.2g 1.8g  14m S  0.3  5.8  24:48.19 java</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数解析  </p>
</blockquote>
<ul>
<li>Tasks<ul>
<li><code>total</code>:总共目前运行的任务数量</li>
<li><code>running</code>:目前正在运行的任务数量</li>
<li><code>zombie</code>:僵尸进程数量</li>
</ul>
</li>
<li>Cpu(s)<ul>
<li><code>us</code>:CPU已经使用的良</li>
<li><code>id</code>:CPU空闲使用率</li>
</ul>
</li>
</ul>
<p>注：下半部分数据中出现<code>%CPU</code>列中出现超过100%的情况，说明是多核服务器，而且该进程使用多核</p>
<h2 id="磁盘使用情况"><a href="#磁盘使用情况" class="headerlink" title="磁盘使用情况"></a>磁盘使用情况</h2><blockquote>
<p><code>fdisk -l</code>命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@itlb ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">WARNING: GPT (GUID Partition Table) detected on <span class="string">&#x27;/dev/sda&#x27;</span>! The util fdisk doesn<span class="string">&#x27;t support GPT. Use GNU Parted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/sda: 299.0 GB, 298999349248 bytes</span></span><br><span class="line"><span class="string">255 heads, 63 sectors/track, 36351 cylinders</span></span><br><span class="line"><span class="string">Units = cylinders of 16065 * 512 = 8225280 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">Disk identifier: 0x00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Device Boot      Start         End      Blocks   Id  System</span></span><br><span class="line"><span class="string">/dev/sda1               1       36352   291991551+  ee  GPT</span></span><br><span class="line"><span class="string">Partition 1 does not start on physical sector boundary.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/mapper/vg_itlb-lv_root: 53.7 GB, 53687091200 bytes</span></span><br><span class="line"><span class="string">255 heads, 63 sectors/track, 6527 cylinders</span></span><br><span class="line"><span class="string">Units = cylinders of 16065 * 512 = 8225280 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">Disk identifier: 0x00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/mapper/vg_itlb-lv_swap: 16.9 GB, 16894656512 bytes</span></span><br><span class="line"><span class="string">255 heads, 63 sectors/track, 2053 cylinders</span></span><br><span class="line"><span class="string">Units = cylinders of 16065 * 512 = 8225280 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">Disk identifier: 0x00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/mapper/vg_itlb-lv_home: 227.7 GB, 227679404032 bytes</span></span><br><span class="line"><span class="string">255 heads, 63 sectors/track, 27680 cylinders</span></span><br><span class="line"><span class="string">Units = cylinders of 16065 * 512 = 8225280 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span></span><br><span class="line"><span class="string">Disk identifier: 0x00000000</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数解析</p>
</blockquote>
<ul>
<li>第一部分：<code>Disk /dev/sda: 299.0 GB, 298999349248 bytes</code>说明硬盘的总空间为299Gb</li>
<li>第二部分：<code>Disk /dev/mapper/vg_itlb-lv_root: 53.7 GB, 53687091200 bytes</code>对应分区的大小</li>
<li>···</li>
</ul>
<blockquote>
<p><code>du -sh</code> 命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@itlb ~]<span class="comment"># cd /home/</span></span><br><span class="line">[root@itlb home]<span class="comment"># du -sh</span></span><br><span class="line">121G	.</span><br></pre></td></tr></table></figure>
<p>该命令是指当前文件夹下已经使用了多少空间</p>
<blockquote>
<p><code>df -h</code> 命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@itlb home]<span class="comment"># df -h</span></span><br><span class="line">Filesystem                   Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_itlb-lv_root   50G   24G   24G  51% /</span><br><span class="line">tmpfs                         16G  1.1M   16G   1% /dev/shm</span><br><span class="line">/dev/sda2                    485M   39M  421M   9% /boot</span><br><span class="line">/dev/sda1                    200M  260K  200M   1% /boot/efi</span><br><span class="line">/dev/mapper/vg_itlb-lv_home  209G  121G   78G  61% /home</span><br></pre></td></tr></table></figure>
<p>是指各个挂载点的硬盘空间及使用情况</p>
<blockquote>
<p><code>du -cks * | sort -rn | head -n 10</code>命令</p>
</blockquote>
<p>该命令是查看 *** <font color='red'>当前目录</font> *** 下占用空间最多的文件或者文件夹，取前10个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@itlb home]# du -cks * | sort -rn | head -n 10</span><br><span class="line">126247676	总用量</span><br><span class="line">88805524	oracle</span><br><span class="line">15347828	yzh</span><br><span class="line">4867880	itl</span><br><span class="line">4199764	xyd</span><br><span class="line">3921468	tomcatservers</span><br><span class="line">3389964	admin</span><br><span class="line">2229484	xyddev</span><br><span class="line">1419676	tomcat-mc-platform</span><br><span class="line">881904	mysqlvbs</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>du -h --max-depth=2 /</code>   </p>
</blockquote>
<p><font color='red'>这个经常用查看所有的文件占用大小</font></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>应用情况</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux设置环境变量</title>
    <url>/2020/04/17/Linux%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_81.jpg"></p>
<h2 id="临时设置环境变量"><a href="#临时设置环境变量" class="headerlink" title="临时设置环境变量"></a>临时设置环境变量</h2><p>这种设置办法一般用在临时使用，比如说导出数据库的时候需要设置字符集之类的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;htop&#x2F;bin</span><br></pre></td></tr></table></figure>

<h2 id="永久生效设置"><a href="#永久生效设置" class="headerlink" title="永久生效设置"></a>永久生效设置</h2><p>这种是永久生效的设置环境变量，比如说JAVA的环境变量等等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile</span></span><br></pre></td></tr></table></figure>
<p>在文件最后添加上对应的变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/usr/local/htop/bin&quot;</span></span><br></pre></td></tr></table></figure>
<p>添加完成后，还需要执行下面命令使之生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>下面代码中第10行显示的<code>declare -x OLDPWD=&quot;/usr/local/htop&quot;</code>表示设置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxx bin]<span class="comment"># export</span></span><br><span class="line"><span class="built_in">declare</span> -x HISTCONTROL=<span class="string">&quot;ignoredups&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x HISTSIZE=<span class="string">&quot;3000&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x HISTTIMEFORMAT=<span class="string">&quot;%F %T &quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x HOME=<span class="string">&quot;/root&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x HOSTNAME=<span class="string">&quot;VM_0_12_centos&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x LANG=<span class="string">&quot;en_US.utf8&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x LESSOPEN=<span class="string">&quot;||/usr/bin/lesspipe.sh %s&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x LOGNAME=<span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x MAIL=<span class="string">&quot;/var/spool/mail/root&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x OLDPWD=<span class="string">&quot;/usr/local/htop&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x PATH=<span class="string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/htop/bin&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x PROMPT_COMMAND=<span class="string">&quot;history -a; printf \&quot;\\033]0;%s@%s:%s\\007\&quot; \&quot;\$&#123;USER&#125;\&quot; \&quot;\$&#123;HOSTNAME%%.*&#125;\&quot; \&quot;\$&#123;PWD/#\$HOME/~&#125;\&quot;&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x PWD=<span class="string">&quot;/usr/local/htop/bin&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x SHELL=<span class="string">&quot;/bin/bash&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x SHLVL=<span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x SSH_TTY=<span class="string">&quot;/dev/pts/0&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x TERM=<span class="string">&quot;xterm&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x USER=<span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x XDG_RUNTIME_DIR=<span class="string">&quot;/run/user/0&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x XDG_SESSION_ID=<span class="string">&quot;102676&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Mock工具-Rap2部署</title>
    <url>/2019/12/07/Mock%E5%B7%A5%E5%85%B7-Rap2%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_69.jpg"></p>
<h2 id="Mock测试定义"><a href="#Mock测试定义" class="headerlink" title="Mock测试定义"></a>Mock测试定义</h2><p>Mock是在测试过程中，对于一些不容易构造/获取的对象，创建一个mock对象来模拟对象的行为；用人话或者个人理解来说，就是在前后端分离情况下，或者目标接口暂时没法测试的情况下，可以通过模拟返回数据的形式，进行初步的联调测试</p>
<h2 id="RAP2"><a href="#RAP2" class="headerlink" title="RAP2"></a>RAP2</h2><h3 id="RAP2简介"><a href="#RAP2简介" class="headerlink" title="RAP2简介"></a>RAP2简介</h3><p>RAP2 是在 RAP1 基础上重做的新项目，它能给你提供方便的接口文档管理、Mock、导出等功能，包含两个组件(对应两个 Github Repository)</p>
<h3 id="RAP2部署"><a href="#RAP2部署" class="headerlink" title="RAP2部署"></a>RAP2部署</h3><h4 id="Docker、Docker-Compose安装"><a href="#Docker、Docker-Compose安装" class="headerlink" title="Docker、Docker Compose安装"></a>Docker、Docker Compose安装</h4><p>可以按照下面的命令进行安装，也可以按照<a href="https://get.daocloud.io/">https://get.daocloud.io/</a>进行安装，这个链接有各种关于Docker安装、卸载的相关资料</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先安装Docker，适用于Ubuntu，Debian,Centos等大部分Linux</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker Compose</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h4 id="RAP2配置"><a href="#RAP2配置" class="headerlink" title="RAP2配置"></a>RAP2配置</h4><ol>
<li>在<code>/usr/local</code>目录下创建目录rap</li>
<li>下载这个<a href="https://github.com/thx/rap2-delos">Github项目</a>下的<code>docker-compose.yml</code>文件到rap目录下</li>
<li>Rap 前端服务的端口号默认为 3000，你可以在 docker-compose.yml 中按照注释自定义</li>
<li>在 rap 目录下执行下面的命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像并启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待5分钟，服务器性能如果不行的情况下，拉取完镜像，mysql需要一会才能启动成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动后，第一次运行需要手动初始化mysql数据库</span></span><br><span class="line"><span class="comment"># ⚠️注意: 只有第一次该这样做</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> delos node scripts/init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署成功后 访问</span></span><br><span class="line">http://localhost:3000 <span class="comment"># 前端（可自定义端口号）</span></span><br><span class="line">http://localhost:38080 <span class="comment"># 后端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果访问不了可能是数据库没有链接上，关闭 rap 服务</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 再重新运行</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 如果 Sequelize 报错可能是数据库表发生了变化，运行下面命令同步</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> delos node scripts/updateSchema</span><br></pre></td></tr></table></figure>

<p><font color='red'>注意：第一次运行后 rap 目录下会被自动创建一个 docker 目录，里面存有 rap 的数据库数据，可千万不要删除。</font></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Mock</category>
      </categories>
      <tags>
        <tag>Mock</tag>
        <tag>API管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB安装</title>
    <url>/2019/08/12/MongoDB%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_60.jpg"></p>
<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol>
<li>首先打开社区Server版<a href="https://www.mongodb.com/download-center/community">下载地址</a>，具体如下图<img src="/2019/08/12/MongoDB%E5%AE%89%E8%A3%85/screenshot_1.png" class=""></li>
<li>使用命令下载并解压<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_12_centos download]<span class="comment"># wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.12.tgz # 下载       </span></span><br><span class="line">[root@VM_0_12_centos download]<span class="comment"># tar -zxvf mongodb-linux-x86_64-4.0.12.tgz  #解压</span></span><br><span class="line">[root@VM_0_12_centos download]<span class="comment"># mv mongodb-linux-x86_64-4.0.12 /usr/local/mongodb #迁移到/usr/local下</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>添加环境变量<br>将安装目录添加到环境变量<code>$PATH</code>当中<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mongodb/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="创建数据库目录"><a href="#创建数据库目录" class="headerlink" title="创建数据库目录"></a>创建数据库目录</h2><p>MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程中不会自动创建，所以你需要手动创建data目录，并在目录中创建db目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/mongodb/data/</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>使用命令<code>./mongod --dbpath=/data/mongodb/data</code>启动，其中<code>--dbpath</code>指定数据保存的路径，如果不加默认是在<code>/data/db</code>下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_12_centos bin]<span class="comment"># ./mongod --dbpath=/data/mongodb/data</span></span><br><span class="line">2019-08-15T01:22:00.311+0800 I STORAGE  [main] Max cache overflow file size custom option: 0</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten] MongoDB starting : pid=30521 port=27017 dbpath=/data/mongodb/data 64-bit host=VM_0_12_centos</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten] db version v4.0.12</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten] git version: 5776e3cbf9e7afe86e6b29e22520ffb6766e95d4</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten] allocator: tcmalloc</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten] modules: none</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten] build environment:</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2019-08-15T01:22:00.316+0800 I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2019-08-15T01:22:00.317+0800 I CONTROL  [initandlisten] options: &#123; storage: &#123; dbPath: <span class="string">&quot;/data/mongodb/data&quot;</span> &#125; &#125;</span><br><span class="line">2019-08-15T01:22:00.317+0800 I STORAGE  [initandlisten]</span><br><span class="line">2019-08-15T01:22:00.317+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine</span><br><span class="line">2019-08-15T01:22:00.317+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem</span><br><span class="line">2019-08-15T01:22:00.317+0800 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=407M,cache_overflow=(file_max=0M),session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=<span class="literal">false</span>,statistics=(fast),<span class="built_in">log</span>=(enabled=<span class="literal">true</span>,archive=<span class="literal">true</span>,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),statistics_log=(<span class="built_in">wait</span>=0),verbose=(recovery_progress),</span><br><span class="line">2019-08-15T01:22:02.127+0800 I STORAGE  [initandlisten] WiredTiger message [1565803322:127781][30521:0x7f809d2daa40], txn-recover: Set global recovery timestamp: 0</span><br><span class="line">2019-08-15T01:22:02.396+0800 I RECOVERY [initandlisten] WiredTiger recoveryTimestamp. Ts: Timestamp(0, 0)</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled <span class="keyword">for</span> the database.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] ** WARNING: You are running this process as the root user, <span class="built_in">which</span> is not recommended.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] ** WARNING: This server is bound to localhost.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **          Remote systems will be unable to connect to this server.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **          Start the server with --bind_ip &lt;address&gt; to specify <span class="built_in">which</span> IP</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **          addresses it should serve responses from, or with --bind_ip_all to</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **          <span class="built_in">bind</span> to all interfaces. If this behavior is desired, start the</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **          server with --bind_ip 127.0.0.1 to <span class="built_in">disable</span> this warning.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is <span class="string">&#x27;always&#x27;</span>.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **        We suggest setting it to <span class="string">&#x27;never&#x27;</span></span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is <span class="string">&#x27;always&#x27;</span>.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] **        We suggest setting it to <span class="string">&#x27;never&#x27;</span></span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. rlimits <span class="built_in">set</span> to 7282 processes, 100001 files. Number of processes should be at least 50000.5 : 0.5 <span class="built_in">times</span> number of files.</span><br><span class="line">2019-08-15T01:22:04.382+0800 I CONTROL  [initandlisten]</span><br><span class="line">2019-08-15T01:22:04.383+0800 I STORAGE  [initandlisten] createCollection: admin.system.version with provided UUID: 5c53404c-28ee-4357-b3a2-3443e8b8b674</span><br><span class="line">2019-08-15T01:22:04.497+0800 I COMMAND  [initandlisten] setting featureCompatibilityVersion to 4.0</span><br><span class="line">2019-08-15T01:22:04.500+0800 I STORAGE  [initandlisten] createCollection: local.startup_log with generated UUID: a95b9964-563d-447e-b678-08034f942c6b</span><br><span class="line">2019-08-15T01:22:04.561+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory <span class="string">&#x27;/data/mongodb/data/diagnostic.data&#x27;</span></span><br><span class="line">2019-08-15T01:22:04.562+0800 I STORAGE  [LogicalSessionCacheRefresh] createCollection: config.system.sessions with generated UUID: a161a0bc-dee2-4f7b-bc38-1a6fab780dd4</span><br><span class="line">2019-08-15T01:22:04.563+0800 I NETWORK  [initandlisten] waiting <span class="keyword">for</span> connections on port 27017</span><br><span class="line">2019-08-15T01:22:04.660+0800 I INDEX    [LogicalSessionCacheRefresh] build index on: config.system.sessions properties: &#123; v: 2, key: &#123; lastUse: 1 &#125;, name: <span class="string">&quot;lsidTTLIndex&quot;</span>, ns: <span class="string">&quot;config.system.sessions&quot;</span>, expireAfterSeconds: 1800 &#125;</span><br><span class="line">2019-08-15T01:22:04.660+0800 I INDEX    [LogicalSessionCacheRefresh] 	 building index using bulk method; build may temporarily use up to 500 megabytes of RAM</span><br><span class="line">2019-08-15T01:22:04.668+0800 I INDEX    [LogicalSessionCacheRefresh] build index <span class="keyword">done</span>.  scanned 0 total records. 0 secs</span><br><span class="line">2019-08-15T01:22:04.916+0800 I COMMAND  [LogicalSessionCacheRefresh] <span class="built_in">command</span> config.<span class="variable">$cmd</span> <span class="built_in">command</span>: createIndexes &#123; createIndexes: <span class="string">&quot;system.sessions&quot;</span>, indexes: [ &#123; key: &#123; lastUse: 1 &#125;, name: <span class="string">&quot;lsidTTLIndex&quot;</span>, expireAfterSeconds: 1800 &#125; ], <span class="variable">$db</span>: <span class="string">&quot;config&quot;</span> &#125; numYields:0 reslen:114 locks:&#123; Global: &#123; acquireCount: &#123; r: 2, w: 2 &#125; &#125;, Database: &#123; acquireCount: &#123; w: 2, W: 1 &#125; &#125;, Collection: &#123; acquireCount: &#123; w: 2 &#125; &#125; &#125; storage:&#123;&#125; protocol:op_msg 105ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB资料</title>
    <url>/2019/02/19/MongoDB%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_18.jpg"></p>
<ol>
<li><p>MongoDB数据表基本操作<br><a href="http://www.cnblogs.com/libingql/archive/2011/06/09/2076440.html">http://www.cnblogs.com/libingql/archive/2011/06/09/2076440.html</a></p>
</li>
<li><p>mongodb安全认证<br><a href="http://www.cnblogs.com/silentjesse/p/4676440.html">http://www.cnblogs.com/silentjesse/p/4676440.html</a></p>
</li>
<li><p>mongodb Replica Sets +Sharding高可用集群搭建(含认证)<br><a href="http://www.cnblogs.com/ylh1223/archive/2013/04/23/3037301.html">http://www.cnblogs.com/ylh1223/archive/2013/04/23/3037301.html</a></p>
</li>
<li><p>MongoDB的授权和权限<br><a href="http://blog.csdn.net/lixiaoweihubin/article/details/8620552">http://blog.csdn.net/lixiaoweihubin/article/details/8620552</a></p>
</li>
<li><p>mongodb key文件报 permissions on xxx are too open<br><a href="https://blog.csdn.net/lixiaoweihubin/article/details/8620552">https://blog.csdn.net/lixiaoweihubin/article/details/8620552</a></p>
</li>
<li><p>mongodb 添加用户及权限设置详解<br><a href="http://www.jb51.net/article/52485.htm">http://www.jb51.net/article/52485.htm</a></p>
</li>
<li><p>mongodb-常见问题<br><a href="http://www.cnblogs.com/cyhe/p/5526662.html">http://www.cnblogs.com/cyhe/p/5526662.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2019/02/19/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_20.jpg"></p>
<h2 id="MySQL-插入数据"><a href="#MySQL-插入数据" class="headerlink" title="MySQL 插入数据"></a>MySQL 插入数据</h2><p>MySQL使用INSERT INTO 语句插入数据</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name (filed1, field2, field3) VALUES (value1, value2, value3);</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO tt_area (id, name, pid) VALUES (&#39;1&#39;, &#39;北京&#39;, &#39;0&#39;);</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-查询数据"><a href="#MySQL-查询数据" class="headerlink" title="MySQL 查询数据"></a>MySQL 查询数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM TABLE LIMIT 10; #查询前10条数据</span><br><span class="line">SELECT * FROM TABLE LIMIT 5,10;#查询6-15条数据，第一个参数是从那条数据开始，第二个参数是指查询多少条</span><br><span class="line">SELECT * FROM tt_users A ORDER BY reg_time DESC,reco_name ASC #按照多个字段进行排序，DESC是倒序，ASC是正序，其中</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MySQL-Update更新数据"><a href="#MySQL-Update更新数据" class="headerlink" title="MySQL Update更新数据"></a>MySQL Update更新数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*通过查询一个表里面的数据更新另一个表中的数据*/</span></span><br><span class="line">UPDATE tableA,</span><br><span class="line"> tableB</span><br><span class="line"><span class="keyword">SET</span> tableA.columnA <span class="operator">=</span> tableB.columnB</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	tableA.clumnC <span class="operator">=</span> tableB.columnD</span><br></pre></td></tr></table></figure>

<h2 id="数据库层面的操作"><a href="#数据库层面的操作" class="headerlink" title="数据库层面的操作"></a>数据库层面的操作</h2><ul>
<li><p>常规的update</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p password #登录mysql数据库</span><br><span class="line">use database name #使用哪个数据库实例</span><br><span class="line">drop database #删除某个数据库实例</span><br><span class="line">mysqldump -u root -p database_name&gt; &#x2F;usr&#x2F;data&#x2F;mysqldata_bak_20171110.db #数据泵导出</span><br><span class="line">mysqldump -u root -p database_name&lt; &#x2F;usr&#x2F;data&#x2F;mysqldata_bak_20171011.db #数据泵导入</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>非常规update(通过子查询更新主表，子查询中牵扯GROUP BY 和 查询条件)<br>首先在数据库创建表，并插入数据，具体的sql如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;demo_value&#96;;</span><br><span class="line">CREATE TABLE &#96;demo_value&#96; (</span><br><span class="line">  &#96;id&#96; int(5) NOT NULL,</span><br><span class="line">  &#96;user_id&#96; int(5) DEFAULT NULL,</span><br><span class="line">  &#96;value&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of demo_value</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;1&#39;, &#39;1&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;2&#39;, &#39;1&#39;, &#39;30&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;3&#39;, &#39;1&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;4&#39;, &#39;1&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;5&#39;, &#39;2&#39;, &#39;30&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;6&#39;, &#39;2&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;7&#39;, &#39;2&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;8&#39;, &#39;3&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;9&#39;, &#39;4&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;10&#39;, &#39;4&#39;, &#39;30&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;11&#39;, &#39;5&#39;, &#39;40&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;12&#39;, &#39;6&#39;, &#39;20&#39;);</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;demo_value&#96;;</span><br><span class="line">CREATE TABLE &#96;demo_value&#96; (</span><br><span class="line">  &#96;id&#96; int(5) NOT NULL,</span><br><span class="line">  &#96;user_id&#96; int(5) DEFAULT NULL,</span><br><span class="line">  &#96;value&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of demo_value</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;1&#39;, &#39;1&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;2&#39;, &#39;1&#39;, &#39;30&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;3&#39;, &#39;1&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;4&#39;, &#39;1&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;5&#39;, &#39;2&#39;, &#39;30&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;6&#39;, &#39;2&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;7&#39;, &#39;2&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;8&#39;, &#39;3&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;9&#39;, &#39;4&#39;, &#39;20&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;10&#39;, &#39;4&#39;, &#39;30&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;11&#39;, &#39;5&#39;, &#39;40&#39;);</span><br><span class="line">INSERT INTO &#96;demo_value&#96; VALUES (&#39;12&#39;, &#39;6&#39;, &#39;20&#39;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE demo_name</span><br><span class="line">SET sum_value &#x3D; (</span><br><span class="line">	SELECT</span><br><span class="line">		SUM(&#96;value&#96;)</span><br><span class="line">	FROM</span><br><span class="line">		demo_value</span><br><span class="line">	WHERE</span><br><span class="line">		demo_value.user_id &#x3D; demo_name.id</span><br><span class="line">	GROUP BY</span><br><span class="line">		user_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="MySQL忘记密码"><a href="#MySQL忘记密码" class="headerlink" title="MySQL忘记密码"></a>MySQL忘记密码</h2><ol>
<li>首先关闭服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件</li>
</ol>
<ul>
<li>Windows：<br>找到在<code>C:\ProgramData(隐藏文件夹)\MySQL\MySQL Server 5.7\my.ini</code></li>
<li>Linux:<br>在/etc/my.cnf</li>
</ul>
<p>在配置文件的中<code>[mysqld]</code>下添加如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
<p>然后重启服务<code>service mysqld restart</code><br>3. 连接mysql，重置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -u root -p</span></span><br><span class="line"><span class="comment"># 这里会显示输入密码，直接回车即可</span></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line"><span class="comment"># mysql其他版本</span></span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> password=password(<span class="string">&#x27;密码&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&quot;用户&quot;</span> and host=<span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql5.7.30以上版本</span></span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;密码&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&quot;用户&quot;</span> and host=<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="查询日期相关统计"><a href="#查询日期相关统计" class="headerlink" title="查询日期相关统计"></a>查询日期相关统计</h2><h3 id="查询当天数据"><a href="#查询当天数据" class="headerlink" title="查询当天数据"></a>查询当天数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ht_invoice_information <span class="keyword">where</span> <span class="keyword">year</span>(create_date)<span class="operator">=</span><span class="keyword">year</span>(date_sub(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">year</span>));</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> to_days(时间字段名) <span class="operator">=</span> to_days(now());</span><br></pre></td></tr></table></figure>

<h3 id="昨天的数据"><a href="#昨天的数据" class="headerlink" title="昨天的数据"></a>昨天的数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> to_days( now( ) ) <span class="operator">-</span> to_days( 时间字段名) <span class="operator">&lt;=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="最近7天数据"><a href="#最近7天数据" class="headerlink" title="最近7天数据"></a>最近7天数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> date_sub(curdate(), <span class="type">interval</span> <span class="number">7</span> <span class="keyword">day</span>) <span class="operator">&lt;=</span> <span class="type">date</span>(时间字段名)</span><br></pre></td></tr></table></figure>

<h3 id="近30天"><a href="#近30天" class="headerlink" title="近30天"></a>近30天</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> date_sub(curdate(), <span class="type">interval</span> <span class="number">30</span> <span class="keyword">day</span>) <span class="operator">&lt;=</span> <span class="type">date</span>(时间字段名)</span><br></pre></td></tr></table></figure>

<h3 id="本月"><a href="#本月" class="headerlink" title="本月"></a>本月</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> date_format( 时间字段名, <span class="string">&#x27;%y%m&#x27;</span> ) <span class="operator">=</span> date_format( curdate( ) , <span class="string">&#x27;%y%m&#x27;</span> )</span><br></pre></td></tr></table></figure>

<h3 id="上一个月"><a href="#上一个月" class="headerlink" title="上一个月"></a>上一个月</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> period_diff( date_format( now( ) , <span class="string">&#x27;%y%m&#x27;</span> ) , date_format( 时间字段名, <span class="string">&#x27;%y%m&#x27;</span> ) ) <span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="查询本季度"><a href="#查询本季度" class="headerlink" title="查询本季度"></a>查询本季度</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ht_invoice_information <span class="keyword">where</span> QUARTER(create_date)<span class="operator">=</span>QUARTER(now());</span><br></pre></td></tr></table></figure>

<h3 id="查询上一季度"><a href="#查询上一季度" class="headerlink" title="查询上一季度"></a>查询上一季度</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ht_invoice_information <span class="keyword">where</span> QUARTER(create_date)<span class="operator">=</span>QUARTER(DATE_SUB(now(),<span class="type">interval</span> <span class="number">1</span> QUARTER));</span><br></pre></td></tr></table></figure>

<h3 id="查询本年数据"><a href="#查询本年数据" class="headerlink" title="查询本年数据"></a>查询本年数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ht_invoice_information <span class="keyword">where</span> <span class="keyword">YEAR</span>(create_date)<span class="operator">=</span><span class="keyword">YEAR</span>(NOW());</span><br></pre></td></tr></table></figure>

<h3 id="查询上年数据"><a href="#查询上年数据" class="headerlink" title="查询上年数据"></a>查询上年数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ht_invoice_information <span class="keyword">where</span> <span class="keyword">year</span>(create_date)<span class="operator">=</span><span class="keyword">year</span>(date_sub(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">year</span>));</span><br></pre></td></tr></table></figure>

<h3 id="查询当前这周的数据"><a href="#查询当前这周的数据" class="headerlink" title="查询当前这周的数据"></a>查询当前这周的数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,submittime <span class="keyword">FROM</span> enterprise <span class="keyword">WHERE</span> YEARWEEK(date_format(submittime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(now());</span><br></pre></td></tr></table></figure>

<h3 id="查询上周"><a href="#查询上周" class="headerlink" title="查询上周"></a>查询上周</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,submittime <span class="keyword">FROM</span> enterprise <span class="keyword">WHERE</span> YEARWEEK(date_format(submittime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(now())<span class="number">-1</span>;</span><br></pre></td></tr></table></figure>


<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>在Navicat中，Ctrl+Q是创建一个查询界面</li>
<li>MySQL底层实现是从右往左进行解析执行，因此把</li>
</ul>
<h2 id="数据库导出"><a href="#数据库导出" class="headerlink" title="数据库导出"></a>数据库导出</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.导出指定表的数据</span></span><br><span class="line">mysqldump -t database -u username -ppassword --tables table_name1 table_name2 table_name3 &gt;D:\db_script.sql</span><br><span class="line"><span class="comment"># 导出数据不导出结构</span></span><br><span class="line">mysqldump -t 数据库名 -uroot -p　&gt; xxx.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.导出指定表的结构</span></span><br><span class="line">mysqldump -d database -u username -ppassword --tables table_name1 table_name2 table_name3&gt;D:\db_script.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.导出表的数据及结构</span></span><br><span class="line">mysqldump  database -u username -ppassword --tables table_name1 table_name2 table_name3&gt;D:\db_script.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.若数据中，某些表除外，其余表都需导出</span></span><br><span class="line">mysqldump -h IP -u username -ppassword --default-character-set=utf8 --database database_name --ignore-table=database_name.table_name1</span><br><span class="line">--ignore-table=database_name.table_name2 --ignore-table=database_name.table_name3 &gt;D:\db_script.sql</span><br></pre></td></tr></table></figure>

<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>今天在<code>drop databse</code>的时候出现一个问题，数据库的名字包含特殊字符，在drop的时候出现如下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database ry-vue;</span><br><span class="line">ERROR 1064 (42000): You have an error <span class="keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to use near <span class="string">&#x27;ry-vue&#x27;</span> at line 1</span><br></pre></td></tr></table></figure>
<p>经过查询发现，在进行drop数据库的操作的时候，如果数据库的名字包含特殊字符的时候，需要使用``(也就是两个反斜点)进行包裹，正确的方法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database `ry-vue`</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL对于大小写敏感问题的处理方式</title>
    <url>/2019/02/19/MySQL%E5%AF%B9%E4%BA%8E%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_26.jpg"></p>
<blockquote>
<p>Linux上安装MySQL默认是数据库的表大小写敏感的。修改很简单，只要该一个mysql的配置文件就可以了。</p>
</blockquote>
<h2 id="修改配置文件my-cnf"><a href="#修改配置文件my-cnf" class="headerlink" title="修改配置文件my.cnf"></a>修改配置文件my.cnf</h2><ol>
<li>编辑my.cnf文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></li>
<li>添加<code>lower_case_table_names=1</code>，添加完成后的效果如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">skip-grant-tables</span><br><span class="line">lower_case_table_names&#x3D;1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="重启数据库"><a href="#重启数据库" class="headerlink" title="重启数据库"></a>重启数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@chicago init.d]<span class="comment"># service mysql restart</span></span><br><span class="line">Shutting down MySQL..                                      [  OK  ]</span><br><span class="line">Starting MySQL......................................       [  OK  ]</span><br></pre></td></tr></table></figure>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2>]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>大小写敏感</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库备份脚本</title>
    <url>/2019/02/19/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_23.jpg"></p>
<blockquote>
<p>之前的项目中用到了MySQL数据库的备份功能，因此做了如下记录，以便后期用到</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">backup_date=`date +<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>`</span><br><span class="line">backup_path=<span class="string">&quot;/home/3uadmin/backups&quot;</span></span><br><span class="line">removedate=`date -d <span class="string">&quot;7 day ago&quot;</span> +<span class="string">&quot;%Y-%m-%d&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 冷备charge库</span></span><br><span class="line"></span><br><span class="line">/usr/bin/mysqldump -uhssydbuser --password=<span class="string">&#x27;hs3u@16171246&#x27;</span> --database charge &gt; <span class="string">&quot;<span class="variable">$backup_path</span>/charge/<span class="variable">$backup_date</span>.db&quot;</span></span><br><span class="line">bzip2 <span class="string">&quot;<span class="variable">$backup_path</span>/charge/<span class="variable">$backup_date</span>.db&quot;</span></span><br><span class="line">rm -f <span class="string">&quot;<span class="variable">$backup_path</span>/charge/<span class="variable">$removedate</span>*.db.bz2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 冷备m2m库</span></span><br><span class="line"></span><br><span class="line">/usr/bin/mysqldump -um2m --password=<span class="string">&#x27;m2mdbroot&#x27;</span> --database m2m &gt; <span class="string">&quot;<span class="variable">$backup_path</span>/m2m/<span class="variable">$backup_date</span>.db&quot;</span></span><br><span class="line">bzip2 <span class="string">&quot;<span class="variable">$backup_path</span>/m2m/<span class="variable">$backup_date</span>.db&quot;</span></span><br><span class="line">rm -f <span class="string">&quot;<span class="variable">$backup_path</span>/m2m/<span class="variable">$removedate</span>*.db.bz2&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL行转列问题及内部排序问题</title>
    <url>/2019/02/24/MySQL%E8%A1%8C%E8%BD%AC%E5%88%97%E9%97%AE%E9%A2%98%E5%8F%8A%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_38.jpg"></p>
<blockquote>
<p>常规情况下是用不到行转列的，但是在今天做Echarts图标的时候，发现查出来的数据是纵向的，所以查了下行转列及GROUP_CONCAT</p>
</blockquote>
<h2 id="常规行转列"><a href="#常规行转列" class="headerlink" title="常规行转列"></a>常规行转列</h2><ol>
<li>数据脚本<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表  学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">    `stuid` <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `stunm` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`stuid`)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `courses` (</span><br><span class="line">    `courseno` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `coursenm` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`courseno`)</span><br><span class="line">)</span><br><span class="line">COMMENT<span class="operator">=</span><span class="string">&#x27;课程表&#x27;</span></span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `score` (</span><br><span class="line">    `stuid` <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `courseno` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `scores` <span class="type">FLOAT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`stuid`, `courseno`)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> student (stuid, stunm) <span class="keyword">Values</span>(<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> student (stuid, stunm) <span class="keyword">Values</span>(<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> student (stuid, stunm) <span class="keyword">Values</span>(<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27;赵二&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> student (stuid, stunm) <span class="keyword">Values</span>(<span class="string">&#x27;1004&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> student (stuid, stunm) <span class="keyword">Values</span>(<span class="string">&#x27;1005&#x27;</span>, <span class="string">&#x27;刘青&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> student (stuid, stunm) <span class="keyword">Values</span>(<span class="string">&#x27;1006&#x27;</span>, <span class="string">&#x27;周明&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表数据</span></span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C001&#x27;</span>, <span class="string">&#x27;大学语文&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C002&#x27;</span>, <span class="string">&#x27;新视野英语&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C003&#x27;</span>, <span class="string">&#x27;离散数学&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C004&#x27;</span>, <span class="string">&#x27;概率论与数理统计&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C005&#x27;</span>, <span class="string">&#x27;线性代数&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C006&#x27;</span>, <span class="string">&#x27;高等数学(一)&#x27;</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> courses (courseno, coursenm) <span class="keyword">Values</span>(<span class="string">&#x27;C007&#x27;</span>, <span class="string">&#x27;高等数学(二)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 成绩表数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;C001&#x27;</span>, <span class="number">67</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;C001&#x27;</span>, <span class="number">68</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27;C001&#x27;</span>, <span class="number">69</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1004&#x27;</span>, <span class="string">&#x27;C001&#x27;</span>, <span class="number">70</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1005&#x27;</span>, <span class="string">&#x27;C001&#x27;</span>, <span class="number">71</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1006&#x27;</span>, <span class="string">&#x27;C001&#x27;</span>, <span class="number">72</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;C002&#x27;</span>, <span class="number">87</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;C002&#x27;</span>, <span class="number">88</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27;C002&#x27;</span>, <span class="number">89</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1004&#x27;</span>, <span class="string">&#x27;C002&#x27;</span>, <span class="number">90</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1005&#x27;</span>, <span class="string">&#x27;C002&#x27;</span>, <span class="number">91</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1006&#x27;</span>, <span class="string">&#x27;C002&#x27;</span>, <span class="number">92</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;C003&#x27;</span>, <span class="number">83</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;C003&#x27;</span>, <span class="number">84</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27;C003&#x27;</span>, <span class="number">85</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1004&#x27;</span>, <span class="string">&#x27;C003&#x27;</span>, <span class="number">86</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1005&#x27;</span>, <span class="string">&#x27;C003&#x27;</span>, <span class="number">87</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1006&#x27;</span>, <span class="string">&#x27;C003&#x27;</span>, <span class="number">88</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;C004&#x27;</span>, <span class="number">88</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;C004&#x27;</span>, <span class="number">89</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27;C004&#x27;</span>, <span class="number">90</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1004&#x27;</span>, <span class="string">&#x27;C004&#x27;</span>, <span class="number">91</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1005&#x27;</span>, <span class="string">&#x27;C004&#x27;</span>, <span class="number">92</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1006&#x27;</span>, <span class="string">&#x27;C004&#x27;</span>, <span class="number">93</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;C005&#x27;</span>, <span class="number">77</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;C005&#x27;</span>, <span class="number">78</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> score(stuid, courseno, scores) <span class="keyword">Values</span>(<span class="string">&#x27;1003&#x27;</span>, <span class="string">&#x27;C005&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">select</span> st.stuid,st.stunm  <span class="keyword">from</span> student  st;</span><br><span class="line"><span class="keyword">select</span> sc.stuid , sc.courseno,sc.scores  <span class="keyword">from</span> score sc ;</span><br><span class="line"><span class="keyword">select</span>  cs.courseno,cs.coursenm   <span class="keyword">from</span> courses cs;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>要求查询每个学生的 每门课程与每门成绩<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st.stuid 编号, st.stunm 姓名 ,</span><br><span class="line"><span class="built_in">Max</span>(<span class="keyword">case</span> c.coursenm <span class="keyword">when</span> <span class="string">&#x27;大学语文&#x27;</span> <span class="keyword">then</span> s.scores <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="string">&#x27;大学语文&#x27;</span>,</span><br><span class="line"><span class="built_in">max</span>(<span class="keyword">case</span> c.coursenm <span class="keyword">when</span> <span class="string">&#x27;新视野英语&#x27;</span> <span class="keyword">then</span> IFNULL(s.scores,<span class="number">0</span>)<span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">&#x27;新视野英语&#x27;</span>,</span><br><span class="line"><span class="built_in">Max</span>(<span class="keyword">case</span> c.coursenm <span class="keyword">when</span> <span class="string">&#x27;离散数学&#x27;</span> <span class="keyword">then</span> IFNULL(s.scores,<span class="number">0</span>) <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">&#x27;离散数学&#x27;</span>,</span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">case</span> c.coursenm <span class="keyword">when</span> <span class="string">&#x27;概率论与数理统计&#x27;</span> <span class="keyword">then</span> IFNULL(s.scores,<span class="number">0</span>) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">&#x27;概率论与数理统计&#x27;</span>,</span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">case</span> c.coursenm  <span class="keyword">when</span> <span class="string">&#x27;线性代数&#x27;</span> <span class="keyword">then</span> IFNULL(s.scores,<span class="number">0</span>) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">&#x27;线性代数&#x27;</span>,</span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">case</span> c.coursenm <span class="keyword">when</span> <span class="string">&#x27;高等数学(一)&#x27;</span> <span class="keyword">THEN</span> IFNULL(s.scores,<span class="number">0</span>) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">&#x27;高等数学(一)&#x27;</span>,</span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">case</span> c.coursenm <span class="keyword">when</span> <span class="string">&#x27;高等数学(二)&#x27;</span> <span class="keyword">THEN</span> IFNULL(s.scores,<span class="number">0</span>) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">&#x27;高等数学(二)&#x27;</span></span><br><span class="line"><span class="keyword">from</span>  student st</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score s <span class="keyword">on</span> st.stuid <span class="operator">=</span> s.stuid</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> courses c <span class="keyword">on</span> c.courseno <span class="operator">=</span> s.courseno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.stuid</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="GROUP-CONCAT"><a href="#GROUP-CONCAT" class="headerlink" title="GROUP_CONCAT"></a>GROUP_CONCAT</h2><p>该函数返回带有来自一个组的连接的非NULL值的字符串结果。白话解释：group_concat()会计算哪些行属于同一组，将属于同一组的列显示出来。要返回哪些列，由函数参数(就是字段名)决定。分组必须有个标准，就是根据group by指定的列进行分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	s.stuid 编号,</span><br><span class="line">	GROUP_CONCAT(courseno) 课程号,</span><br><span class="line">	GROUP_CONCAT(s.scores) 成绩</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	score s</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	s.stuid</span><br></pre></td></tr></table></figure>
<p>查询结果图</p>
<img src="/2019/02/24/MySQL%E8%A1%8C%E8%BD%AC%E5%88%97%E9%97%AE%E9%A2%98%E5%8F%8A%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/screenshot_1.png" class="">

<h2 id="GROUP-CONCAT内部排序"><a href="#GROUP-CONCAT内部排序" class="headerlink" title="GROUP_CONCAT内部排序"></a>GROUP_CONCAT内部排序</h2><p>不能直接查询出来就算了，在Echarts里面需要进行日期的排序，因此就有了如下SQL，也就是出来的数据能够自定义进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">GROUP_CONCAT( columnA <span class="keyword">ORDER</span> <span class="keyword">BY</span> columnA)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>本文引自<a href="https://blog.csdn.net/sinat_27406925/article/details/77507478">mysql行转列转换</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>行转列</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自动扣款存储过程Demo</title>
    <url>/2019/02/19/MySQL%E8%87%AA%E5%8A%A8%E6%89%A3%E6%AC%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8BDemo/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_25.jpg"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line"><span class="keyword">PROCEDURE</span> charge.seven_days_auto_pay()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">#订单编号</span><br><span class="line"><span class="keyword">DECLARE</span> orderId <span class="type">VARCHAR</span> (<span class="number">32</span>);</span><br><span class="line">#租户ID</span><br><span class="line"><span class="keyword">DECLARE</span> tenantId <span class="type">VARCHAR</span> (<span class="number">20</span>);</span><br><span class="line">#用户充电金额</span><br><span class="line"><span class="keyword">DECLARE</span> chargePrice <span class="type">DECIMAL</span> (<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">#用户余额</span><br><span class="line"><span class="keyword">DECLARE</span> ownCoin <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">#充电记录ID</span><br><span class="line"><span class="keyword">DECLARE</span> chargesId <span class="type">VARCHAR</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">#遍历数据结束标志</span><br><span class="line"><span class="keyword">DECLARE</span> done <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line">#Routine body goes here...</span><br><span class="line"><span class="keyword">DECLARE</span> cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span></span><br><span class="line">	id,tenant_id,charge_price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	t_order <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_user_person <span class="keyword">ON</span> userid <span class="operator">=</span> tenant_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	t_order.create_time <span class="operator">&lt;</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="operator">-</span> <span class="number">7</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">AND</span> order_state <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">AND</span> del <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">#测试服务器上出现userid在t_user_person没有的情况</span><br><span class="line"><span class="keyword">AND</span> charge_price <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> tenant_id;</span><br><span class="line"></span><br><span class="line">#将结束标志绑定到游标</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> done <span class="operator">=</span> <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">OPEN</span> cur;</span><br><span class="line"></span><br><span class="line">#开始循环</span><br><span class="line">read_loop:LOOP</span><br><span class="line">	#提取游标中的数据</span><br><span class="line">	<span class="keyword">FETCH</span> cur <span class="keyword">INTO</span> orderId,tenantId,chargePrice;</span><br><span class="line"></span><br><span class="line">IF done <span class="keyword">THEN</span></span><br><span class="line">	LEAVE read_loop;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">#使用事务</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line">#获取一个订单的充电记录</span><br><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(id) <span class="keyword">INTO</span> chargesId <span class="keyword">FROM</span> t_charging <span class="keyword">WHERE</span> order_id <span class="operator">=</span> orderId <span class="keyword">AND</span> del <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> valid <span class="operator">=</span> <span class="number">0</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> order_id;</span><br><span class="line">#首先判断用户的余额是否大于订单金额</span><br><span class="line"><span class="keyword">SELECT</span> charging_coins <span class="keyword">INTO</span> ownCoin <span class="keyword">FROM</span> t_user_person <span class="keyword">WHERE</span> userid <span class="operator">=</span> tenantId LIMIT <span class="number">1</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"></span><br><span class="line">IF ownCoin <span class="operator">&gt;=</span> chargePrice <span class="keyword">THEN</span></span><br><span class="line">	#处理订单表中的订单为已付款、充电币支付等</span><br><span class="line">	UPDATE t_order <span class="keyword">SET</span> pay_time <span class="operator">=</span> NOW(),order_state<span class="operator">=</span><span class="number">5</span>,coins_flag<span class="operator">=</span><span class="number">1</span>,consume_coins <span class="operator">=</span> charge_price <span class="keyword">WHERE</span> id <span class="operator">=</span> orderId <span class="keyword">AND</span> order_state <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">SELECT</span> ROW_COUNT() <span class="keyword">INTO</span> <span class="variable">@rc</span>;</span><br><span class="line">	IF <span class="variable">@rc</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">			<span class="keyword">ROLLBACK</span>;</span><br><span class="line">			ITERATE read_loop;</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">  #处理用户表中充电币数据</span><br><span class="line">	UPDATE t_user_person <span class="keyword">SET</span> charging_coins <span class="operator">=</span> (ownCoin<span class="operator">-</span>chargePrice) <span class="keyword">WHERE</span> userid <span class="operator">=</span>  tenantId <span class="keyword">AND</span> deleted <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	#处理t_pay表中的充电记录数据</span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_pay (id,order_id,pay_success,defray_time,charges,total_price,create_time,has_inqueue) <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;10&#x27;</span>,UNIX_TIMESTAMP()<span class="operator">*</span><span class="number">10000</span>,<span class="built_in">FLOOR</span>(<span class="number">1000</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">9000</span>)),orderId,<span class="number">1</span>,NOW(),chargesId,chargePrice,NOW(),<span class="number">0</span>);</span><br><span class="line">	#处理t_chargingcoins_pay_record中数据</span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_chargingcoins_pay_record (id,userid,pay_money,order_no,pay_time,create_time,remain_coins) <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;10&#x27;</span>,UNIX_TIMESTAMP()<span class="operator">*</span><span class="number">10000</span>,<span class="built_in">FLOOR</span>(<span class="number">1000</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">9000</span>)),tenantId,chargePrice,orderId,NOW(),NOW(),(ownCoin<span class="operator">-</span>chargePrice));</span><br><span class="line">  #处理t_charging表中的充电记录数据</span><br><span class="line">  UPDATE t_charging <span class="keyword">SET</span> pay_time <span class="operator">=</span> NOW(), pay_flag<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> order_id <span class="operator">=</span> orderId <span class="keyword">AND</span> del <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> valid <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> cur;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL跨数据库查询</title>
    <url>/2019/02/19/MySQL%E8%B7%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_22.jpg"></p>
<h2 id="数据库是否支持"><a href="#数据库是否支持" class="headerlink" title="数据库是否支持"></a>数据库是否支持</h2><p>第一步是要验证数据库是否支持federated<br>输入<code>show engines</code>，检查显示情况，如果显示<code>support</code>为<code>NO</code>说明已经安装了<code>federated</code>服务，但是没有启动，但是如果没有<code>federated</code>这一行，说明服务都没有启动;</p>
<img src="/2019/02/19/MySQL%E8%B7%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/screenshot_1.png" class="">

<h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><p>只需要在<code>my.cnf</code>（一般是在<code>/etc/my.cnf</code>下面）中的<code>[mysqld]</code>的最后一行，添加<code>federated</code></p>
<img src="/2019/02/19/MySQL%E8%B7%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/screenshot_2.png" class="">

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>查询的SQL如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> federated_table (</span><br><span class="line">    id     <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment,</span><br><span class="line">    name   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    other  <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY  (id),</span><br><span class="line">    KEY name (name),</span><br><span class="line">    KEY other_key (other)</span><br><span class="line">) ENGINE<span class="operator">=</span>FEDERATED CONNECTION<span class="operator">=</span><span class="string">&#x27;mysql://username:password@remote_host:3306/db_name/table_name&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>跨库查询</tag>
      </tags>
  </entry>
  <entry>
    <title>NamedParameterJdbcTemplete使用方法总结</title>
    <url>/2019/02/27/NamedParameterJdbcTemplete%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_41.jpg"></p>
<blockquote>
<p>最近修复SQL注入的问题，单当遇到in操作的时候，直接使用?占位符是行不通的，因此进行查询发现NamedParameterJDBCTemplate能够修复这种问题，因此在这里记录下NamedParameterJDBCTemplate的使用方式，常规NamedParameterJDBCTemplate提供execute方法、query及queryForXXX方法、update和batchUpdate方法</p>
</blockquote>
<h2 id="支持类"><a href="#支持类" class="headerlink" title="支持类"></a>支持类</h2><h3 id="SqlParameterSource简介"><a href="#SqlParameterSource简介" class="headerlink" title="SqlParameterSource简介"></a>SqlParameterSource简介</h3><p>SqlParameterSource命名参数设置</p>
<ol>
<li>MapSqlParameterSource 使用java.util.Map封装使用</li>
<li>BeanPropertySqlParameterSource封装了JavaBean对象，通过对象传递参数</li>
<li>EmptySqlParameterSource空的，一般用作占位</li>
</ol>
<h3 id="RowMapper简介"><a href="#RowMapper简介" class="headerlink" title="RowMapper简介"></a>RowMapper简介</h3><p>实现sql查询结果和对象之间的转换，可自己实现或者系统实现，主要的实现类：</p>
<ol>
<li><code>SingleColumnRowMapper</code>，<code>sql</code>查询结果为单列数据，如<code>List&lt;String&gt;、List&lt;Integer&gt;、String、Integer</code></li>
<li><code>BeanPropertyRowMapper</code>,sql 结果匹配到对象<code>List&lt;JavaBean&gt;,JavaBean</code></li>
</ol>
<h2 id="updateXXX方法使用"><a href="#updateXXX方法使用" class="headerlink" title="updateXXX方法使用"></a>updateXXX方法使用</h2><h3 id="Map作为参数"><a href="#Map作为参数" class="headerlink" title="Map作为参数"></a>Map作为参数</h3><p>API：<code>int update(String sql,Map&lt;String,Object&gt; map)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Obejct&gt; paramMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">paramMap.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">paramMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">template.update(<span class="string">&quot;INSERT INTO TEMP_TABLE VALUES(:id,:name)&quot;</span>,paramMap);</span><br></pre></td></tr></table></figure>

<h3 id="BeanPropertySqlParameterSource作为参数"><a href="#BeanPropertySqlParameterSource作为参数" class="headerlink" title="BeanPropertySqlParameterSource作为参数"></a>BeanPropertySqlParameterSource作为参数</h3><p>API：<code>int update(String sql, BeanPropertySqlParameterSource paramSource)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student st = <span class="keyword">new</span> Student();</span><br><span class="line">st.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">st.setAge(<span class="number">10</span>);</span><br><span class="line">template.update(<span class="string">&quot;INSERT INTO STUDENT VALUES(:name,:age)&quot;</span>,<span class="keyword">new</span> BeanPropertySqlParameterSource(st));</span><br></pre></td></tr></table></figure>

<h3 id="MapSqlParameterSource作为参数"><a href="#MapSqlParameterSource作为参数" class="headerlink" title="MapSqlParameterSource作为参数"></a>MapSqlParameterSource作为参数</h3><p>API:<code>int update(String sql,MapSqlParameterSource paramSource)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MapSqlParameterSource paramSource = <span class="keyword">new</span> MapSqlParameterSource().addValue(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>).addValue(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>);</span><br><span class="line">template.update(<span class="string">&quot;INSERT INTO STUDENT VALUES (:name,:age)&quot;</span>,paramSource);</span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="单行单列数据"><a href="#单行单列数据" class="headerlink" title="单行单列数据"></a>单行单列数据</h3><p>API:public<T> T queryForObject(String sql,Map&lt;String,Object&gt; paramMap,Class<T> requiredType)<br>API:public<T> T queryForObject(String sql,SqlParameterSource paramSource,Class<T> requiredType)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer tempInt =  template.queryForObject(<span class="string">&quot;select count(*) from student &quot;</span>,<span class="keyword">new</span> HashMap&lt;String,Object&gt;(),Integer.class);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = template.queryForObject(<span class="string">&quot;select name from student limit 1&quot;</span>,EmptySqlParameterSource.INSTANCE,String.class);</span><br></pre></td></tr></table></figure>

<h3 id="多行数据查询"><a href="#多行数据查询" class="headerlink" title="多行数据查询"></a>多行数据查询</h3><p>API：<code>public&lt;T&gt; List&lt;T&gt;queryForList(String sql,Map&lt;String,Object&gt; paramMap,Class&lt;T&gt; elementType)</code><br>API: <code>public &lt; T&gt; List&lt; T&gt; queryForList(String sql, SqlParameterSource paramSource, Class&lt; T&gt; elementType)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt; String&gt; namelist = template.queryForList(<span class="string">&quot;select name from student&quot;</span>, <span class="keyword">new</span> HashMap&lt;&gt;(), String.class);</span><br></pre></td></tr></table></figure>

<h3 id="单行数据查询"><a href="#单行数据查询" class="headerlink" title="单行数据查询"></a>单行数据查询</h3><p>API：<code>public &lt; T&gt; T queryForObject(String sql, Map&lt; String, ?&gt; paramMap, RowMapper&lt; T&gt;rowMapper)</code><br>API:<code>public &lt; T&gt; T queryForObject(String sql, SqlParameterSource paramSource, RowMapper&lt; T&gt; rowMapper)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student  stu = template.queryForObject(</span><br><span class="line">                <span class="string">&quot;select * from student limit 1&quot;</span>, <span class="keyword">new</span> HashMap&lt;&gt;(), <span class="keyword">new</span> BeanPropertyRowMapper&lt;Student&gt;(Student.class));</span><br><span class="line"><span class="comment">//BeanPropertyRowMapper会把下划线转化为驼峰属性</span></span><br><span class="line"><span class="comment">//结果对象可比实际返回字段多或者少</span></span><br></pre></td></tr></table></figure>
<p>这两个API也可以使用SingleColumnRowMapper返回单行单列数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = template.queryForObject(</span><br><span class="line">                <span class="string">&quot;select name from student limit 1&quot;</span>, EmptySqlParameterSource.INSTANCE, <span class="keyword">new</span> SingleColumnRowMapper&lt;&gt;(String.class));</span><br></pre></td></tr></table></figure>

<h3 id="单行数据（Map）"><a href="#单行数据（Map）" class="headerlink" title="单行数据（Map）"></a>单行数据（Map）</h3><p>API：<code>public Map&lt; String, Object&gt; queryForMap(String sql, Map&lt; String, ?&gt; paramMap)</code><br>API：<code>public Map&lt; String, Object&gt; queryForMap(String sql, SqlParameterSource paramSource)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt; String, Object&gt; studentMap = template.queryForMap(<span class="string">&quot;select * from student limit 1&quot;</span>, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure>

<h3 id="多行数据"><a href="#多行数据" class="headerlink" title="多行数据"></a>多行数据</h3><p>API：<code>public &lt; T&gt; List&lt; T&gt; query(String sql, Map&lt; String, ?&gt; paramMap, RowMapper&lt; T&gt; rowMapper) </code><br>API：<code>public &lt; T&gt; List&lt; T&gt; query(String sql, SqlParameterSource paramSource, RowMapper&lt; T&gt; rowMapper) </code><br>API：<code>public &lt; T&gt; List&lt; T&gt; query(String sql, RowMapper&lt; T&gt; rowMapper) </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt; Student&gt; studentList = template.query(</span><br><span class="line">                <span class="string">&quot;select * from student&quot;</span>,  </span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Student.class)</span><br><span class="line">);    </span><br></pre></td></tr></table></figure>

<h3 id="多行数据（Map）"><a href="#多行数据（Map）" class="headerlink" title="多行数据（Map）"></a>多行数据（Map）</h3><p>API：<code>public List&lt; Map&lt; String, Object&gt;&gt; queryForList(String sql, Map&lt; String, ?&gt; paramMap)</code><br>API：<code>public List&lt; Map&lt; String, Object&gt;&gt; queryForList(String sql, SqlParameterSource paramSource)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; mapList = template.queryForList(<span class="string">&quot;select * from student&quot;</span>, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="SQL注入中in问题的解决"><a href="#SQL注入中in问题的解决" class="headerlink" title="SQL注入中in问题的解决"></a>SQL注入中in问题的解决</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryListByMapSqlParameterSource</span><span class="params">(List&lt;String&gt; userids)</span></span>&#123;</span><br><span class="line">  String sql = <span class="string">&quot;select * from user_table u where u.user_id in (:userids )&quot;</span>;</span><br><span class="line"></span><br><span class="line">  MapSqlParameterSource parameters = <span class="keyword">new</span> MapSqlParameterSource();</span><br><span class="line">  parameters.addValue(<span class="string">&quot;userids&quot;</span>, userids);</span><br><span class="line"></span><br><span class="line">  List&lt;Map&lt;String,Object&gt;&gt; list = namedJdbcTemplate.queryForList(sql, parameters);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;user_id&quot;</span>));</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;user_name&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本文引自<a href="https://blog.csdn.net/u011179993/article/details/74791304">NamedParameterJdbcTemplate常用方法总结</a><br>本文引自<a href="https://blog.csdn.net/brianyeye/article/details/37650461">springjdbc-NamedParameterJdbcTemplate处理in查询</a></p>
</blockquote>
]]></content>
      <categories>
        <category>安全测评</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>JDBCTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx+Tomcat 负载均衡配置</title>
    <url>/2019/02/19/Nginx-Tomcat-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_16.jpg"></p>
<h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install gcc-c++  </span><br><span class="line">$ yum install pcre pcre-devel  </span><br><span class="line">$ yum install zlib zlib-devel  </span><br><span class="line">$ yum install openssl openssl--devel  </span><br></pre></td></tr></table></figure>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="验证是否安装过ngnix"><a href="#验证是否安装过ngnix" class="headerlink" title="验证是否安装过ngnix"></a>验证是否安装过ngnix</h4><p>如果已经安装过，需要进行卸载 yum remove nginx<br><code>$ find -name nginx</code></p>
<h4 id="下载Ngnix"><a href="#下载Ngnix" class="headerlink" title="下载Ngnix"></a>下载Ngnix</h4><p><code>$ wget http://nginx.org/download/nginx-1.7.4.tar.gz</code></p>
<h4 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h4><p><code>$ tar -zxvf nginx-1.7.4.tar.gz</code></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>进入解压的文件夹，接下来安装，使用<code>--prefix</code>参数指定nginx安装的目录,make、make install安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure <span class="comment">#默认安装在/usr/local/nginx   </span></span><br><span class="line">$ make  </span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<h4 id="查看安装位置"><a href="#查看安装位置" class="headerlink" title="查看安装位置"></a>查看安装位置</h4><p><code>$ whereis nginx</code></p>
<h2 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h2><h3 id="修改nginx的配置文件"><a href="#修改nginx的配置文件" class="headerlink" title="修改nginx的配置文件"></a>修改nginx的配置文件</h3><p>修改/usr/local/nginx/conf文件夹下面的nginx.conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>

<p>定义一个mysite，然后定义这个mysite对应需要负载均衡的服务器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream mysite&#123;</span><br><span class="line">server 192.168.1.148:8080;</span><br><span class="line">server 192.168.1.148:8081;</span><br><span class="line">ip_hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ip_hash 是为了保证访问的时候只对一个服务器，使session能够保持住</p>
<img src="/2019/02/19/Nginx-Tomcat-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/screenshot_1.png" class="">

<h3 id="启动、停止nginx"><a href="#启动、停止nginx" class="headerlink" title="启动、停止nginx"></a>启动、停止nginx</h3><p>进入nginx的安装文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">./nginx //启动</span><br><span class="line">./nginx -s stop //停止</span><br><span class="line">./nginx -s reload  //重新加载</span><br><span class="line">./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">./nginx -s stop:此方式相当于先查出nginx进程id再使用<span class="built_in">kill</span>命令强制杀掉进程</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>负载均衡</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx开启Gzip压缩大幅提高页面加载速度</title>
    <url>/2019/02/18/Nginx%E5%BC%80%E5%90%AFGzip%E5%8E%8B%E7%BC%A9%E5%A4%A7%E5%B9%85%E6%8F%90%E9%AB%98%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_13.jpg"></p>
<p>刚刚给博客加了一个500px相册插件，lightbox引入了很多js文件和css文件，页面一下子看起来非常臃肿，所以还是把Gzip打开了。<br>环境：Debian 6</p>
<ol>
<li><p>Vim打开Nginx配置文件<br><code>vim /usr/local/nginx/conf/nginx.conf</code></p>
</li>
<li><p>找到如下一段，进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line"><span class="comment">#gzip_http_version 1.0;</span></span><br><span class="line">gzip_comp_level 2;</span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">gzip_vary off;</span><br><span class="line">gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>解释一下<br>第1行：开启Gzip<br>第2行：不压缩临界值，大于1K的才压缩，一般不用改<br>第3行：buffer，就是，嗯，算了不解释了，不用改<br>第4行：用了反向代理的话，末端通信是HTTP/1.0，有需求的应该也不用看我这科普文了；有这句的话注释了就行了，默认是HTTP/1.1<br>第5行：压缩级别，1-10，数字越大压缩的越好，时间也越长，看心情随便改吧<br>第6行：进行压缩的文件类型，缺啥补啥就行了，JavaScript有两种写法，最好都写上吧，总有人抱怨js文件没有压缩，其实多写一种格式就行了<br>第7行：跟Squid等缓存服务有关，on的话会在Header里增加”Vary: Accept-Encoding”，我不需要这玩意，自己对照情况看着办吧<br>第8行：IE6对Gzip不怎么友好，不给它Gzip了</p>
</li>
<li><p>:wq保存退出，重新加载Nginx<br><code>/usr/local/nginx/sbin/nginx -s reload</code></p>
</li>
<li><p>用curl测试Gzip是否成功开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -I -H <span class="string">&quot;Accept-Encoding: gzip, deflate&quot;</span> <span class="string">&quot;http://www.slyar.com/blog/&quot;</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.0.15</span><br><span class="line">Date: Sun, 26 Aug 2012 18:13:09 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/5.2.17p1</span><br><span class="line">X-Pingback: http://www.slyar.com/blog/xmlrpc.php</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>
<p>页面成功压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -I -H <span class="string">&quot;Accept-Encoding: gzip, deflate&quot;</span> <span class="string">&quot;http://www.slyar.com/blog/wp-content/plugins/photonic/include/css/photonic.css&quot;</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.0.15</span><br><span class="line">Date: Sun, 26 Aug 2012 18:21:25 GMT</span><br><span class="line">Content-Type: text/css</span><br><span class="line">Last-Modified: Sun, 26 Aug 2012 15:17:07 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Expires: Mon, 27 Aug 2012 06:21:25 GMT</span><br><span class="line">Cache-Control: max-age=43200</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>
<p>css文件成功压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -I -H &quot;Accept-Encoding: gzip, deflate&quot; &quot;http:&#x2F;&#x2F;www.slyar.com&#x2F;blog&#x2F;wp-includes&#x2F;js&#x2F;jquery&#x2F;jquery.js&quot;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.0.15</span><br><span class="line">Date: Sun, 26 Aug 2012 18:21:38 GMT</span><br><span class="line">Content-Type: application&#x2F;x-javascript</span><br><span class="line">Last-Modified: Thu, 12 Jul 2012 17:42:45 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Expires: Mon, 27 Aug 2012 06:21:38 GMT</span><br><span class="line">Cache-Control: max-age&#x3D;43200</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>
<p>js文件成功压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -I -H &quot;Accept-Encoding: gzip, deflate&quot; &quot;http:&#x2F;&#x2F;www.slyar.com&#x2F;blog&#x2F;wp-content&#x2F;uploads&#x2F;2012&#x2F;08&#x2F;2012-08-23_203542.png&quot;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.0.15</span><br><span class="line">Date: Sun, 26 Aug 2012 18:22:45 GMT</span><br><span class="line">Content-Type: image&#x2F;png</span><br><span class="line">Last-Modified: Thu, 23 Aug 2012 13:50:53 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Expires: Tue, 25 Sep 2012 18:22:45 GMT</span><br><span class="line">Cache-Control: max-age&#x3D;2592000</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>
<p>图片成功压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -I -H &quot;Accept-Encoding: gzip, deflate&quot; &quot;http:&#x2F;&#x2F;www.slyar.com&#x2F;blog&#x2F;wp-content&#x2F;plugins&#x2F;wp-multicollinks&#x2F;wp-multicollinks.css&quot;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.0.15</span><br><span class="line">Date: Sun, 26 Aug 2012 18:23:27 GMT</span><br><span class="line">Content-Type: text&#x2F;css</span><br><span class="line">Content-Length: 180</span><br><span class="line">Last-Modified: Sat, 02 May 2009 08:46:15 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Expires: Mon, 27 Aug 2012 06:23:27 GMT</span><br><span class="line">Cache-Control: max-age&#x3D;43200</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>
<p>最后来个不到1K的文件，由于我的阈值是1K，所以没压缩</p>
</li>
</ol>
<p>本文引自<a href="http://www.veryhuo.com/a/view/51706.html">http://www.veryhuo.com/a/view/51706.html</a></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>图片压缩</tag>
        <tag>Gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx排坑记</title>
    <url>/2019/08/15/Nginx%E6%8E%92%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_60.jpg"></p>
<h2 id="Nginx丢失Header信息"><a href="#Nginx丢失Header信息" class="headerlink" title="Nginx丢失Header信息"></a>Nginx丢失Header信息</h2><p>丢失Header信息分几种情况</p>
<ol>
<li><p>Nginx配置文件中缺失header信息相关配置，只需要加上下面这块里面的header相关信息即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ^~  /xxxxx/api/ &#123;</span><br><span class="line">         proxy_pass       http://localhost:6068/;</span><br><span class="line">         proxy_set_header  REMOTE-HOST      <span class="variable">$remote_addr</span>;</span><br><span class="line">         proxy_set_header  Host             <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">         proxy_set_header  X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">         proxy_set_header  x-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">         <span class="comment">#add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span></span><br><span class="line">         <span class="comment">#add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>header信息中的变量使用了带下划线的（Nginx默认是把header中带下划线的变量的下划线抹掉的，需要在nginx配置文件的http层添加如下信息）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># header信息中允许携带带下划线的变量</span></span><br><span class="line">underscores_in_headers on;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Nginx反向代理出现Cookie信息丢失"><a href="#Nginx反向代理出现Cookie信息丢失" class="headerlink" title="Nginx反向代理出现Cookie信息丢失"></a>Nginx反向代理出现Cookie信息丢失</h2><p>熬夜到这个点，还在加班加点，欲哭无泪，被兄弟们坑的不行不行的，慢慢填坑…<br>今天在发布的时候发现使用Nginx反向代理到前后端分离的项目（假的前后端分离还是用Cookie）上之后，出现Cookie信息丢失的情况，查来查去，最终锁定还是在Nginx上，因为Tomcat在本地已经设置了跨越，js中也设置了withCredentials，还是出现Cookie上不去的问题，今天把处理的方案记下来，供分享</p>
<h3 id="Cookie个人理解机制"><a href="#Cookie个人理解机制" class="headerlink" title="Cookie个人理解机制"></a>Cookie个人理解机制</h3><p>Cookie不仅仅是在域（域名）上存在分离，也在目录上做了隔离</p>
<h3 id="常规情况"><a href="#常规情况" class="headerlink" title="常规情况"></a>常规情况</h3><p>像下面这种配置一般是没有问题的，因为两个项目名是一样的，因此不会出现cookie丢失的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;projectname&#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;projectname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>当nginx接收到的地址和要转发的地址在路径上有差异的时候，就会出现cookie的丢失问题，例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;projectnameA&#123;</span><br><span class="line">  proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;projectnameB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>location指向的地址和实际代理的地址的项目名不同，就需要添加<code>proxy_cookie_path /projectnameB /projectnameA</code>，一定要注意项目名前面有斜杠，后面没斜杠（在这个坑里面待了十几分钟才爬上来….），正确的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;projectnameA&#123;</span><br><span class="line">  proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;projectnameB;</span><br><span class="line">  proxy_cookie_path &#x2F;projectnameB &#x2F;projectnameA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>设置好上面这些，还需要设置Nginx的跨域处理，可以在http、location中加入如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line">add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line">add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br></pre></td></tr></table></figure>
<p><font color='red'>其实项目前后端分离之后是很不建议再使用Cookie携带信息到后台的这种操作，应该是使用Token设置过期时间，保证项目的正常运行，因为跨域的项目在安全测评中是过不了的，所以能改则改，千万别到时候被别人给攻击了，可以使用JWT配合Redis的方案进行处理，后期的博客中会加入这些相关的内容，敬请期待</font></p>
]]></content>
      <categories>
        <category>中间件</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>中间件</tag>
        <tag>Nginx</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle/MySQL实现根据一个表更新另一张表</title>
    <url>/2019/03/02/Oracle-MySQL%E5%AE%9E%E7%8E%B0%E6%A0%B9%E6%8D%AE%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_42.jpg"></p>
<blockquote>
<p>最近接到一个从DB2数据导出，Oracle数据库导入的工作，导入到Oracle时肯定不能直接使用业务表，需要创建临时表，然后通过临时表更新业务表，那么问题来了，有更新有插入，该如何处理，之前记得MySQL是支持update A,B…操作的，Oracle之前没有听过，因此百度了下，得到的结论如下文所示</p>
</blockquote>
<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>Oracle中可以使用<code>MERGE INTO</code>语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> T_USER T1      <span class="keyword">USING</span> (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		userid <span class="keyword">AS</span> id,</span><br><span class="line">		NAME <span class="keyword">AS</span> username,</span><br><span class="line">		sex <span class="keyword">AS</span> usersex</span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		DUAL</span><br><span class="line">) T2     <span class="keyword">ON</span> (T1.userid <span class="operator">=</span> T2.id)     </span><br><span class="line"><span class="keyword">WHEN</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line">	    UPDATE</span><br><span class="line"><span class="keyword">SET</span> t1. NAME <span class="operator">=</span> t2.username,</span><br><span class="line"> t1.sex <span class="operator">=</span> t2.usersex     </span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line">	    <span class="keyword">INSERT</span> (userid, NAME, sex)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	(</span><br><span class="line">		t2.id,</span><br><span class="line">		t2.username,</span><br><span class="line">		t2.usersex</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL有则更新，无则插入"><a href="#MySQL有则更新，无则插入" class="headerlink" title="MySQL有则更新，无则插入"></a>MySQL有则更新，无则插入</h3><p>mysql中可以使用<code> ON DUPLICATE KEY</code>进行处理，但是需要注意的是需要有主键，下面的实例中需要userid是主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T_USER (userid, NAME, sex)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	(id, username, usersex) <span class="keyword">ON</span> DUPLICATE KEY UPDATE NAME <span class="operator">=</span> username,</span><br><span class="line">	sex <span class="operator">=</span> usersex;</span><br></pre></td></tr></table></figure>

<h3 id="单纯表更新"><a href="#单纯表更新" class="headerlink" title="单纯表更新"></a>单纯表更新</h3><p>这种方式只是单纯的根据一个表的数据更新另一张的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE table_1 t1,</span><br><span class="line"> table_2 t2</span><br><span class="line"><span class="keyword">SET</span> t1. <span class="keyword">COLUMN</span> <span class="operator">=</span> t2. <span class="keyword">COLUMN</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	t1.id <span class="operator">=</span> t2.pid</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用：<br><a href="https://blog.csdn.net/qq_40285302/article/details/79722146">Oracle实现一张表根据另一张表更新（有则更新无则插入）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle/MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Oracle</tag>
        <tag>跨表更新</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle导入导出命令及字符集</title>
    <url>/2019/05/22/Oracle%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_51.jpg"></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="NLS-LANG参数"><a href="#NLS-LANG参数" class="headerlink" title="NLS_LANG参数"></a>NLS_LANG参数</h3><p>影响Oracle数据库字符集最重要的NLS_LANG参数，他的格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NLS_LANG = language_territory.charset</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>language:指定服务器消息的语言，影响提示信息是中文还是英文</li>
<li>territory:指定服务器的日期和数字格式</li>
<li>charset:指定字符集</li>
</ul>
<h2 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>两台Linux服务器，数据库版本分别是11g和10g，需要从11g上导出数据库，然后在10g上导入</p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li>进入11g导出数据库，命令如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp username&#x2F;password@serverip:port&#x2F;instanceid file&#x3D;home&#x2F;oracle&#x2F;instanceid.dmp log&#x3D;home&#x2F;oracle&#x2F;instanceid.log owner&#x3D;username</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>username:数据库用户名</li>
<li>password:密码</li>
<li>serverip:服务器IP地址</li>
<li>port:数据库端口号常规是1521</li>
<li>instanceid:数据库实例，常规是orcl或者说自己创建的数据库实例</li>
<li>home/oracle/:导出路径即导出到那里</li>
<li>instanceid.dmp:导出的文件名</li>
<li>log:同理导出文件</li>
<li>owner:导出的用户  </li>
</ul>
<p><font color='red'>导出的时候不需要设置字符集，只需要在导入的时候设置和导出的字符集保持一致即可</font><br>2. 确定导出文件的字符集的两种方法</p>
<ul>
<li>如果能够连接导出的数据库<br>在导出的服务器上执行如下命令<code>select userenv(&#39;language&#39;) from dual; </code>，即可查看导出时的字符集，如下所示，可以看出字符集是<code>ZHS16GBK</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt;select userenv(&#39;language&#39;) from dual;</span><br><span class="line"></span><br><span class="line">userenv(&#39;language&#39;)</span><br><span class="line">-------------------------------------</span><br><span class="line">SIMPLIFIED CHINESE_CHINA.ZHS16GBK</span><br></pre></td></tr></table></figure></li>
<li>只有导出的dmp文件的前提下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat exp.dmp |od -x|head -1|awk &#39;&#123;print $2 $3&#125;&#39;|cut -c 3-6</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>修改导出文件的数据库版本<br>因为导入的数据库的版本比导出的要低，因此需要修改导出的dmp文件的版本，下载一个<code>AlxcTools</code>软件，操作很简单，自行体验</li>
<li><font color='red'>临时修改字符集</font><br>Linux修改临时字符集的，只要是退出终端后字符集还会恢复成系统默认的字符集，因此不需要害怕，操作命令如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line"><span class="built_in">export</span> NLS_LANG=CHINESE_CHINA.ZHS16GBK</span><br></pre></td></tr></table></figure></li>
<li>导入数据库文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">imp username/password@serverip:port/instanceid file=home/oracle/instanceid.dmp <span class="built_in">log</span>=home/oracle/instanceid.log full=y</span><br></pre></td></tr></table></figure>
至此导入成功</li>
</ol>
<h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><h3 id="EXP-00091-Exporting-questionable-statistics错误"><a href="#EXP-00091-Exporting-questionable-statistics错误" class="headerlink" title="EXP-00091: Exporting questionable statistics错误"></a><code>EXP-00091: Exporting questionable statistics</code>错误</h3><p>问题原因：<br>引起此问题的原因是数据库字符集和操作系统的NLS_LANG不一致导致<br>处理方法：</p>
<ol>
<li>查询数据库的字符集信息<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> userenv(<span class="string">&#x27;language&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></li>
<li>设置字符集<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.WE8ISO8859P1</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="EXP-00026-conflicting-modes-specified-EXP-00000-Export-terminated-unsuccessfully"><a href="#EXP-00026-conflicting-modes-specified-EXP-00000-Export-terminated-unsuccessfully" class="headerlink" title="EXP-00026: conflicting modes specified EXP-00000: Export terminated unsuccessfully"></a><code>EXP-00026: conflicting modes specified EXP-00000: Export terminated unsuccessfully</code></h3><p>这个问题主要是 exp的时候 里面参数发生了冲突。</p>
<ol>
<li>同时指定了 owner  和 tables</li>
<li>同时指定了 FULL 和tables</li>
<li>同时指定了多个owner和full<br>owner 表示导出整个用户或者多个用户  而tables表示只导出其中的表 。要么只导出其中的表  要么导出整个用户。不然就会冲突了、</li>
</ol>
<h3 id="EXP-00000-Message-0-not-found-No-message-file-for-product-RDBMS-facility-EXP"><a href="#EXP-00000-Message-0-not-found-No-message-file-for-product-RDBMS-facility-EXP" class="headerlink" title="EXP-00000: Message 0 not found; No message file for product=RDBMS, facility=EXP"></a><code>EXP-00000: Message 0 not found; No message file for product=RDBMS, facility=EXP</code></h3><p>出现这种问题的情况一般是设置的ORACLE_HOME失效了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="string">&quot;D:\ProgramFiles\Oracle\product\11.2.0\dbhome_1&quot;</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl   </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>字符集</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle导入导出步骤</title>
    <url>/2019/10/18/Oracle%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_67.jpg"></p>
<h1 id="Oracle导入导出步骤"><a href="#Oracle导入导出步骤" class="headerlink" title="Oracle导入导出步骤"></a>Oracle导入导出步骤</h1><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><h3 id="查看字符集"><a href="#查看字符集" class="headerlink" title="查看字符集"></a>查看字符集</h3><p>查看下字符集，需要在导出和导入的时候使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到oracle用户</span></span><br><span class="line">[oracle@MCDB bin]$ su - oracle</span><br><span class="line"><span class="comment"># 连接到Oracle数据库</span></span><br><span class="line">[oracle@MCDB bin]$ sqlplus /nolog</span><br><span class="line">SQL*Plus: Release 11.2.0.4.0 Production on Fri Oct 18 18:18:06 2019</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2013, Oracle.  All rights reserved.</span><br><span class="line"><span class="comment"># 使用用户登录</span></span><br><span class="line">SQL&gt; conn mgplat/mgplat</span><br><span class="line">Connected.</span><br><span class="line">SQL&gt; select userenv(<span class="string">&#x27;language&#x27;</span>) from dual;</span><br><span class="line"></span><br><span class="line">USERENV(<span class="string">&#x27;LANGUAGE&#x27;</span>)</span><br><span class="line">----------------------------------------------------</span><br><span class="line">AMERICAN_AMERICA.ZHS16GBK</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库实例"><a href="#查看数据库实例" class="headerlink" title="查看数据库实例"></a>查看数据库实例</h3><p>用作下面导出命令中的<code>instanceid</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt;  select name from v<span class="variable">$database</span>;</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">---------</span><br><span class="line">JNMCDB</span><br></pre></td></tr></table></figure>

<h3 id="（重要）设置环境"><a href="#（重要）设置环境" class="headerlink" title="（重要）设置环境"></a><font color='red'>（重要）</font>设置环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=JNMCDB</span><br><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.ZHS16GBK</span><br></pre></td></tr></table></figure>
<h3 id="执行导出命令"><a href="#执行导出命令" class="headerlink" title="执行导出命令"></a>执行导出命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[oracle@MCDB bin]$ exp username/password@serverip:serverport/instanceid file=/home/oracle/temp.dmp owner=username</span><br></pre></td></tr></table></figure>

<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="创建表空间和用户"><a href="#创建表空间和用户" class="headerlink" title="创建表空间和用户"></a>创建表空间和用户</h3><p>需要看导出文件中的表空间，常规会创建一个数空间和一个临时表空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@MCDB ~]<span class="comment">#su - oracle</span></span><br><span class="line">[oracle@MCDB ~]$ sqlplus /nolog</span><br><span class="line">SQL*Plus: Release 11.2.0.4.0 Production on Fri Oct 18 16:18:31 2019</span><br><span class="line">Copyright (c) 1982, 2013, Oracle.  All rights reserved.</span><br><span class="line">SQL&gt; conn /as sysdba;</span><br><span class="line">Connected.</span><br><span class="line"><span class="comment"># 创建临时表空间</span></span><br><span class="line">SQL&gt; create temporary tablespace USR_XYD_DATA_TEMP tempfile <span class="string">&#x27;/home/oracle/app/oradata/jnmcdb/usr_xyd_data_temp.dbf&#x27;</span> size 50m  autoextend on  next 50m maxsize 20480m  extent management <span class="built_in">local</span>;</span><br><span class="line"><span class="comment"># 创建表空间</span></span><br><span class="line">SQL&gt; create tablespace USR_XYD_DATA logging datafile <span class="string">&#x27;/home/oracle/app/oradata/jnmcdb/user_xyd_data.dbf&#x27;</span> size 50m  autoextend on  next 50m maxsize 20480m  extent management <span class="built_in">local</span>;</span><br><span class="line"><span class="comment"># 创建用户（注意换成对应的表空间和临时表空间）</span></span><br><span class="line">SQL&gt; create user XYD identified by xydtech default tablespace USR_XYD_DATA temporary tablespace USR_XYD_DATA_TEMP ;</span><br><span class="line"><span class="comment"># 赋权限(这里根据实际需求来，为了简单我直接给了DBA)</span></span><br><span class="line">SQL&gt; grant dba to XYD;</span><br></pre></td></tr></table></figure>

<h3 id="（重要）设置字符集、ORACLE-HOME、ORACLE-SID"><a href="#（重要）设置字符集、ORACLE-HOME、ORACLE-SID" class="headerlink" title="（重要）设置字符集、ORACLE_HOME、ORACLE_SID"></a><font color='red'>（重要）</font>设置字符集、ORACLE_HOME、ORACLE_SID</h3><p>上面导出的时候会有对应的字符集，如果只有dmp文件没法连接导出的数据时，可通过下面的命令查看字符集这个命令会输出一个数字，拿着这个数字（这里是0345），放在下面的SQL里面执行下，字符集就出来了，这里的字符集是<code>ZHS16GBK</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@MCDB oracle]<span class="comment"># cat XYD.dmp |od -x|head -1|awk &#x27;&#123;print $2 $3&#125;&#x27;|cut -c 3-6</span></span><br><span class="line">0354</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> nls_charset_name(to_number(<span class="string">&#x27;0354&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>)) <span class="keyword">from</span> dual;</span><br><span class="line">　　ZHS16GBK</span><br></pre></td></tr></table></figure>

<p>设置环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_1/</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=JNMCDB</span><br><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.ZHS16GBK</span><br></pre></td></tr></table></figure>

<h3 id="导入命令"><a href="#导入命令" class="headerlink" title="导入命令"></a>导入命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[oracle@MCDB ~]$ imp username/password@serverip:serverport/instanceid file=/home/oracle/XYD.dmp full=y</span><br><span class="line">Import: Release 11.2.0.4.0 - Production on Fri Oct 18 16:23:34 2019</span><br><span class="line">Copyright (c) 1982, 2011, Oracle and/or its affiliates.  All rights reserved.</span><br><span class="line">Connected to: Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit Production</span><br><span class="line">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class="line">Export file created by EXPORT:V11.02.00 via conventional path</span><br><span class="line">import <span class="keyword">done</span> <span class="keyword">in</span> ZHS16GBK character <span class="built_in">set</span> and AL16UTF16 NCHAR character <span class="built_in">set</span></span><br><span class="line">. importing XYD<span class="string">&#x27;s objects into XYD</span></span><br><span class="line"><span class="string">. . importing table                           &quot;AA&quot;        198 rows imported</span></span><br><span class="line"><span class="string">. . importing table             &quot;BANKLOG_BASEINFO&quot;         11 rows imported</span></span><br><span class="line"><span class="string">. . importing table             &quot;BANKLOG_FLOWLIST&quot;        280 rows imported</span></span><br><span class="line"><span class="string">. . importing table                           &quot;BB&quot;          0 rows imported</span></span><br><span class="line"><span class="string">. . importing table               &quot;BUSIFL_DOCLIST&quot;          7 rows imported</span></span><br><span class="line"><span class="string">. . importing table                &quot;BUSIFL_DOCREG&quot;         14 rows imported</span></span><br><span class="line"><span class="string">. . importing table           &quot;BUSIFL_HISTORYTASK&quot;          8 rows imported</span></span><br><span class="line"><span class="string">. . importing table              &quot;BUSIFL_INSTANCE&quot;          6 rows imported</span></span><br><span class="line"><span class="string">.....</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>导入导出</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库异常解决</title>
    <url>/2019/03/07/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_44.jpg"></p>
<blockquote>
<p>本篇文章是对Oralce遇到的各种问题的一个收集整理，用作后续的排查问题使用</p>
</blockquote>
<hr>
<blockquote>
<p>ORA-31655:尚未为作业选择数据或元数据对象  </p>
</blockquote>
<p>【场景】<br>数据泵导入数据，执行下面的数据导入时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">D:\app<span class="operator">&gt;</span>impdp jnmcbusi<span class="operator">/</span><span class="number">123456</span><span class="variable">@orcl</span> directory<span class="operator">=</span>data_pump_dir dumpfile<span class="operator">=</span>MKM_ORGUSER_M</span><br><span class="line">AP.dmp tablespaces<span class="operator">=</span>jnmcdb_data</span><br><span class="line"></span><br><span class="line">Import: <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> <span class="operator">-</span> Production <span class="keyword">on</span> 星期四 <span class="number">3</span>月 <span class="number">7</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">46</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2009</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.  <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line">连接到: Oracle Database <span class="number">11</span>g Enterprise Edition <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> <span class="operator">-</span> <span class="number">64</span>bit Produc</span><br><span class="line">tion</span><br><span class="line"><span class="keyword">With</span> the Partitioning, OLAP, Data Mining <span class="keyword">and</span> <span class="type">Real</span> Application Testing options</span><br><span class="line">ORA<span class="number">-31655</span>: 尚未为作业选择数据或元数据对象</span><br><span class="line">已成功加载<span class="operator">/</span>卸载了主表 &quot;JNMCBUSI&quot;.&quot;SYS_IMPORT_TABLESPACE_01&quot;</span><br><span class="line">启动 &quot;JNMCBUSI&quot;.&quot;SYS_IMPORT_TABLESPACE_01&quot;:  jnmcbusi<span class="operator">/</span>xxx<span class="variable">@orcl</span> directory<span class="operator">=</span>da</span><br><span class="line">ta_pump_dir dumpfile<span class="operator">=</span>MKM_ORGUSER_MAP.dmp tablespaces<span class="operator">=</span>jnmcdb_data</span><br><span class="line">作业 &quot;JNMCBUSI&quot;.&quot;SYS_IMPORT_TABLESPACE_01&quot; 已于 <span class="number">11</span>:<span class="number">20</span>:<span class="number">48</span> 成功完成</span><br></pre></td></tr></table></figure>

<p>【原因】<br>数据泵导入数据的时候，因生产环境和本地环境的表空间不同，需要设置新老不同的表空间</p>
<p>【处理方案】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">D:\app<span class="operator">&gt;</span>impdp jnmcbusi<span class="operator">/</span><span class="number">123456</span><span class="variable">@orcl</span> directory<span class="operator">=</span>data_pump_dir dumpfile<span class="operator">=</span>MKM_CUST_AREA</span><br><span class="line">_FX.dmp remap_tablespace<span class="operator">=</span>data_custtemp:jnmcdb_data</span><br><span class="line"></span><br><span class="line">Import: <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> <span class="operator">-</span> Production <span class="keyword">on</span> 星期四 <span class="number">3</span>月 <span class="number">7</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">36</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2009</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.  <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line">连接到: Oracle Database <span class="number">11</span>g Enterprise Edition <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> <span class="operator">-</span> <span class="number">64</span>bit Produc</span><br><span class="line">tion</span><br><span class="line"><span class="keyword">With</span> the Partitioning, OLAP, Data Mining <span class="keyword">and</span> <span class="type">Real</span> Application Testing options</span><br><span class="line">已成功加载<span class="operator">/</span>卸载了主表 &quot;JNMCBUSI&quot;.&quot;SYS_IMPORT_FULL_01&quot;</span><br><span class="line">启动 &quot;JNMCBUSI&quot;.&quot;SYS_IMPORT_FULL_01&quot;:  jnmcbusi<span class="operator">/</span>xxx<span class="variable">@orcl</span> directory<span class="operator">=</span>data_pum</span><br><span class="line">p_dir dumpfile<span class="operator">=</span>MKM_CUST_AREA_FX.dmp remap_tablespace<span class="operator">=</span>data_custtemp:jnmcdb_data</span><br><span class="line">处理对象类型 TABLE_EXPORT<span class="operator">/</span><span class="keyword">TABLE</span><span class="operator">/</span><span class="keyword">TABLE</span></span><br><span class="line">处理对象类型 TABLE_EXPORT<span class="operator">/</span><span class="keyword">TABLE</span><span class="operator">/</span>TABLE_DATA</span><br><span class="line">. . 导入了 &quot;JNMCBUSI&quot;.&quot;MKM_CUST_AREA_FX&quot;               <span class="number">814.9</span> MB <span class="number">8607689</span> 行</span><br><span class="line">作业 &quot;JNMCBUSI&quot;.&quot;SYS_IMPORT_FULL_01&quot; 已于 <span class="number">11</span>:<span class="number">36</span>:<span class="number">11</span> 成功完成</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>ORA-12546: TNS:permission denied</p>
</blockquote>
<p>【场景】<br>使用root账号启动sqlplus /nolog ，连接数据库<br>【原因】<br>root账号下尽量不要操作Oracle相关操作<br>【处理方案】<br>切换到oracle用户下，然后执行相关操作</p>
<hr>
<blockquote>
<p>ORA-08189: cannot flashback the table because row movement is not enabled</p>
</blockquote>
<p>【场景】<br>执行数据库表闪回的时候，报错<br>【原因】<br>该表不支持闪回，未设置闪回配置<br>【处理方案】<br>可以通过<code>select flashback_on from v$database;</code>查询是否设置了闪回，可以通过百度设置对应数据库的闪回配置</p>
<hr>
<blockquote>
<p>ORA-12162: TNS:net service name is incorrectly specified</p>
</blockquote>
<p>【场景】<br><code>sqlplus / as sysdba</code>连接数据库的时候<br>【原因】<br>未设置ORACLE_HOME和ORACLE_SID的问题<br>【处理方案】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="string">&quot;D:\ProgramFiles\Oracle\product\11.2.0\dbhome_1&quot;</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>ORA-00845: MEMORY_TARGET not supported on this system</p>
</blockquote>
<p>【场景】<br>执行启动数据库指令的时候</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; startup</span><br><span class="line">ORA-00845: MEMORY_TARGET not supported on this system</span><br></pre></td></tr></table></figure>
<p>【原因】<br>这个是因为使用了Oracle 11g的AMM（automatic memory management）内存自动管理，但内存自动管理要求Oracle Parameter中的<code>MEMORY_TARGET</code>要小于共享内存<code>/dev/shm</code>的大小，否则不足以Oracle进行内存的自动管理<br>【处理方案】</p>
<ol>
<li>首先需要看下自己的目前配置的<code>/dev/shm</code>的大小，执行下面的命令，显示是分配了42G，使用了19G，剩余24G，已用45%<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@xxx ~]$ df -h | grep shm</span><br><span class="line">tmpfs                             42G   19G   24G   45% &#x2F;dev&#x2F;shm</span><br></pre></td></tr></table></figure></li>
<li>重新分配共享内存大小，执行如下命令<font color='red'>下面的这个大小需要按照目前配置的大小慢慢的增，比如目前上面是42个G，适当的先到50G试下能不能启动</font>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@xxx ~]# mount -t tmpfs shmfs -o size&#x3D;61440m &#x2F;dev&#x2F;shm</span><br></pre></td></tr></table></figure></li>
<li>尝试启动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[oracle@xxx ~]$ sqlplus /nolog</span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 3 13:18:54 2020</span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line">SQL&gt; conn /as sysdba;</span><br><span class="line">Connected to an idle instance.</span><br><span class="line">SQL&gt; startup</span><br><span class="line"><span class="comment"># 这里显示启动成功了</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">Total System Global Area 3.3672E+10 bytes</span><br><span class="line">Fixed Size		    2214976 bytes</span><br><span class="line">Variable Size		 2.4159E+10 bytes</span><br><span class="line">Database Buffers	 9395240960 bytes</span><br><span class="line">Redo Buffers		  115212288 bytes</span><br></pre></td></tr></table></figure></li>
<li>上面2中的操作在服务器重启的时候会失效，因此需要修改下配置文件（这样每次重启都会设置/dev/shm缓存区域大小为64Gb）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxx ~]$ vim /etc/fstab</span><br><span class="line"><span class="comment"># 然后在最后添加如下配置</span></span><br><span class="line">tmpfs /dev/shm tmpfs  defaults,size=61440m      0 0</span><br></pre></td></tr></table></figure></li>
<li>其他（如果不想调整MEMORY_TARGET/MEMORY_MAX_TARGET可以不用往下看了，如果需要调整那就继续往下看）<br>首先看下之前数据库中配置的<code>MEMORY_TARGET/MEMORY_MAX_TARGET</code>分别是多少，执行下面的命令之后会发现分别设置的是32G<font color='red'>这个地方我也很迷茫，上面总共分配了42G，明显小于下面配置的32G，为啥不行呢？</font>先不管这个了，先调小<code>MEMORY_TARGET/MEMORY_MAX_TARGET</code>再说<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt; show parameter target;</span><br><span class="line">NAME				     TYPE	 VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">archive_lag_target		     <span class="built_in">integer</span>	 0</span><br><span class="line">db_flashback_retention_target	     <span class="built_in">integer</span>	 1440</span><br><span class="line">fast_start_io_target		     <span class="built_in">integer</span>	 0</span><br><span class="line">fast_start_mttr_target		     <span class="built_in">integer</span>	 0</span><br><span class="line">memory_max_target		     big <span class="built_in">integer</span> 32256M</span><br><span class="line">memory_target			     big <span class="built_in">integer</span> 32256M</span><br><span class="line">parallel_servers_target 	     <span class="built_in">integer</span>	 128</span><br><span class="line">pga_aggregate_target		     big <span class="built_in">integer</span> 0</span><br><span class="line">sga_target			     big <span class="built_in">integer</span> 0</span><br></pre></td></tr></table></figure></li>
<li>执行如下命令分别设置<code>MEMORY_TARGET/MEMORY_MAX_TARGET</code>为12G，设置完成后需要重启<font color='red'>数据库服务</font>才能生效<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改memory_max_target</span></span><br><span class="line">SQL&gt; alter system <span class="built_in">set</span> memory_max_target=12288M scope=spfile;</span><br><span class="line">System altered.</span><br><span class="line"><span class="comment"># 修改memory_target</span></span><br><span class="line">SQL&gt; alter system <span class="built_in">set</span> memory_target=12288M scope=spfile;</span><br><span class="line">System altered.</span><br><span class="line"><span class="comment"># 停止Oracle实例服务</span></span><br><span class="line">SQL&gt; shutdown immediate;</span><br><span class="line">Database closed.</span><br><span class="line">Database dismounted.</span><br><span class="line">ORACLE instance shut down.</span><br><span class="line"><span class="comment"># 启动Oracle服务</span></span><br><span class="line">SQL&gt; startup;</span><br><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area 1.2827E+10 bytes</span><br><span class="line">Fixed Size		    2217632 bytes</span><br><span class="line">Variable Size		 6979324256 bytes</span><br><span class="line">Database Buffers	 5771362304 bytes</span><br><span class="line">Redo Buffers		   74465280 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<blockquote>
</blockquote>
<p>【场景】<br>【原因】<br>【处理方案】</p>
<hr>
<blockquote>
</blockquote>
<p>【场景】<br>【原因】<br>【处理方案】</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据泵导出impdp/expdp</title>
    <url>/2019/03/07/Oracle%E6%95%B0%E6%8D%AE%E6%B3%B5%E5%AF%BC%E5%87%BAimpdp-expdp/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_45.jpg"></p>
<blockquote>
<p>最近项目上用测试数据库，需要从生产上导出数据，然后本地数据库导入操作，使用exp/imp一直报错，显示文件头无法识别，因此改换成数据泵导入导出，因此进行记录。从中也发现数据泵导入导出比常规imp/exp导入导出要快很多</p>
</blockquote>
<p>数据泵是服务器提供的功能，因此从客户机不能使用数据泵导入导出操作，不知道这个观点对不对，没有尝试过</p>
<h2 id="逻辑目录"><a href="#逻辑目录" class="headerlink" title="逻辑目录"></a>逻辑目录</h2><ul>
<li>常规查看逻辑路径的方式<br>常规情况下，一般数据库会有默认的，可以打开PLSQL，在左侧<code>Objects</code>栏中可以看到默认的数据泵导入导出路径目录，具体如下图所示<img src="/2019/03/07/Oracle%E6%95%B0%E6%8D%AE%E6%B3%B5%E5%AF%BC%E5%87%BAimpdp-expdp/screenshot_1.png" class=""></li>
<li>命令方式查看逻辑路径方式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[oracle<span class="variable">@MCDB</span> <span class="operator">~</span>]$ sqlplus <span class="operator">/</span>nolog</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">*</span>Plus: <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.4</span><span class="number">.0</span> Production <span class="keyword">on</span> Thu Mar <span class="number">7</span> <span class="number">14</span>:<span class="number">59</span>:<span class="number">54</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2013</span>, Oracle.  <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> conn jnmcbusi<span class="operator">/</span><span class="number">123456</span>;</span><br><span class="line">Connected.</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_directories;</span><br><span class="line"></span><br><span class="line">OWNER		 DIRECTORY_NAME         DIRECTORY_PATH</span><br><span class="line"><span class="comment">------------------------------ ------------------------------</span></span><br><span class="line">SYS		DUMP_DIR               <span class="operator">/</span>home<span class="operator">/</span>mgplat_bak<span class="operator">/</span>dump_dir</span><br><span class="line"></span><br><span class="line">SYS		XMLDIR                 <span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">11.2</span><span class="number">.0</span><span class="operator">/</span>dbhome_1<span class="operator">/</span>rdbms<span class="operator">/</span>xml</span><br><span class="line"></span><br><span class="line">SYS		ORACLE_OCM_CONFIG_DIR  <span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">11.2</span><span class="number">.0</span><span class="operator">/</span>dbhome_1<span class="operator">/</span>ccr<span class="operator">/</span>hosts<span class="operator">/</span>MCDB<span class="operator">/</span>state</span><br><span class="line"></span><br><span class="line">SYS		DATA_PUMP_DIR          <span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>app<span class="operator">/</span>admin<span class="operator">/</span>jnmcdb<span class="operator">/</span>dpdump<span class="operator">/</span></span><br><span class="line"></span><br><span class="line">SYS		ORACLE_OCM_CONFIG_DIR2 <span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">11.2</span><span class="number">.0</span><span class="operator">/</span>dbhome_1<span class="operator">/</span>ccr<span class="operator">/</span>state</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="创建逻辑目录"><a href="#创建逻辑目录" class="headerlink" title="创建逻辑目录"></a>创建逻辑目录</h3><p>如果没有逻辑目录，可以进行创建，创建目前知道的有两种方法，<font color='red'>创建的时候一定要记得，保证服务器上有这个目录，如果没有，先手动创建，因为Oracle不会创建物理路径</font></p>
<ul>
<li><p>在PLSQL中右键<code>Directories</code>目录，然后点击<code>New...</code>，打开创建界面，然后填写<code>Name</code>和<code>Path</code>这里要注意，填写的<code>Path</code>是服务器上的路径地址，如果是Linux，也要填写服务器上的地址</p>
</li>
<li><p>使用命令创建逻辑目录<br>使用命令创建的时候最好是sysdba，如果没有，也可以使用普通用户尝试一下，我的是成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[oracle<span class="variable">@MCDB</span> <span class="operator">~</span>]$ sqlplus <span class="operator">/</span>nolog</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> conn username<span class="operator">/</span>password<span class="variable">@orcl</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">create</span> directory dump_dir <span class="keyword">as</span> <span class="string">&#x27;/home/mgplat_bak/dump_dir&#x27;</span></span><br><span class="line"></span><br><span class="line">## `expdp`导出数据</span><br><span class="line"><span class="operator">-</span> 导出用户及对象</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line">expdp username<span class="operator">/</span>password<span class="variable">@orcl</span> dumpfile<span class="operator">=</span>daba_back.dmp directory<span class="operator">=</span>dump_dir schemas<span class="operator">=</span>jnmcbusi</span><br></pre></td></tr></table></figure></li>
<li><p>导出指定表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expdp username<span class="operator">/</span>password<span class="variable">@orcl</span> dumpfile<span class="operator">=</span>daba_back.dmp directory<span class="operator">=</span>dump_dir tables<span class="operator">=</span>table1,table2</span><br></pre></td></tr></table></figure></li>
<li><p>按条件查询导出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expdp username<span class="operator">/</span>password<span class="variable">@orcl</span> dumpfile<span class="operator">=</span>daba_back.dmp directory<span class="operator">=</span>dump_dir tables<span class="operator">=</span>table1 query<span class="operator">=</span><span class="string">&#x27;where deptno=20&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>按表空间导出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expdp username<span class="operator">/</span>password<span class="variable">@orcl</span> dumpfile<span class="operator">=</span>tablespace.dmp directory<span class="operator">=</span>dump_dir tablespaces<span class="operator">=</span>temp,example</span><br></pre></td></tr></table></figure></li>
<li><p>导出整个数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expdp <span class="keyword">system</span><span class="operator">/</span>manager<span class="variable">@orcl</span> directory<span class="operator">=</span>dump_dir dumpfile<span class="operator">=</span>full.dmp <span class="keyword">full</span><span class="operator">=</span>y</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="impdp导入数据"><a href="#impdp导入数据" class="headerlink" title="impdp导入数据"></a><code>impdp</code>导入数据</h2><p>导入之前确认用户已经创建，如果没有创建，使用下面的命令创建用户</p>
<ul>
<li><p>创建表空间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space tb_name datafile <span class="string">&#x27;D:\tablespace\tb_name.dbf&#x27;</span> size <span class="number">1024</span>m AUTOEXTEND <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>创建用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> user_name identified <span class="keyword">by</span> A123456a <span class="keyword">default</span> tablespace tb_name temporary tablespace TEMP;</span><br></pre></td></tr></table></figure></li>
<li><p>用户授权</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span><span class="keyword">grant</span> read,write <span class="keyword">on</span> directory dump_dir <span class="keyword">to</span> user_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span><span class="keyword">grant</span> dba,resource,unlimited tablespace <span class="keyword">to</span> user_name;</span><br></pre></td></tr></table></figure></li>
<li><p>导入用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">impdp scott<span class="operator">/</span>tiger<span class="variable">@orcl</span> directory<span class="operator">=</span>dump_dir dumpfile<span class="operator">=</span>expdp.dmp schemas<span class="operator">=</span>scott;</span><br></pre></td></tr></table></figure></li>
<li><p>导入表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">impdp <span class="keyword">system</span><span class="operator">/</span>manager<span class="variable">@orcl</span> directory<span class="operator">=</span>dump_dir dumpfile<span class="operator">=</span>expdp.dmptables<span class="operator">=</span>scott.dept,scott.emp remap_schema<span class="operator">=</span>scott:<span class="keyword">system</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>导入表空间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">impdp <span class="keyword">system</span><span class="operator">/</span>manager<span class="variable">@orcl</span> directory<span class="operator">=</span>dump_dir dumpfile<span class="operator">=</span>tablespace.dmp tablespaces<span class="operator">=</span>example;</span><br></pre></td></tr></table></figure></li>
<li><p>导入数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">impdb <span class="keyword">system</span><span class="operator">/</span>manager<span class="variable">@orcl</span> directory<span class="operator">=</span>dump_dir dumpfile<span class="operator">=</span>full.dmp <span class="keyword">full</span><span class="operator">=</span>y;</span><br></pre></td></tr></table></figure></li>
<li><p>追加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">impdp <span class="keyword">system</span><span class="operator">/</span>manager<span class="variable">@orcl</span> directory<span class="operator">=</span>dump_dir dumpfile<span class="operator">=</span>expdp.dmp schemas<span class="operator">=</span>systemtable_exists_action</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>导入导出</tag>
        <tag>数据泵</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle知识点</title>
    <url>/2019/02/19/Oracle%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_27.jpg"></p>
<h2 id="Oracle分组拼接函数"><a href="#Oracle分组拼接函数" class="headerlink" title="Oracle分组拼接函数"></a>Oracle分组拼接函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LISTAGG</span>(ID, ’, ’) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> DEPON)</span><br><span class="line">  <span class="keyword">FROM</span> TEST_1</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> DEPON</span><br></pre></td></tr></table></figure>
<p><font color='red'>注意：分组拼接函数在Oracle11g之前是没有的</font></p>
<h2 id="Sql函数"><a href="#Sql函数" class="headerlink" title="Sql函数"></a>Sql函数</h2><ol>
<li><p><code>Oracle</code>中的日期时间函数：<br>在<code>Oracle</code>中以字符串表示的数据是不能自动转换为日期时间类型的，必须使用<code>TO_DATE()</code>函数来手动将字符串转换为日期时间类型，比如 <code>TO_DATE(‘2010-10-10’,’YYYY-MM-DD HH24:MI:SS’)</code>。</p>
</li>
<li><p><code>Oracle</code>取得系统当前时间：<br><code>Oracle</code>中没有提供取得当前日期时间的函数，不过我们可以到系统表<code>DUAL</code>中查询<code>SYSTIMESTAMP</code>的值来得到当前的时间戳。如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> SYSTIMESTAMP</span><br><span class="line"><span class="keyword">From</span> DUAL</span><br><span class="line">同样我们可以到系统表DUAL中查询SYSDATE的值来得到当前日期时间。如下：</span><br><span class="line"><span class="keyword">Select</span> SYSDATE</span><br><span class="line"><span class="keyword">From</span> DUAL</span><br></pre></td></tr></table></figure>
<p>使用<code>TO_CHAR(时间日期值，’YYYY-MM-DD’)</code>可以得到日期时间值的日期部分，因此下面的<code>SQL</code>语句可以得到当前的日期值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> TO_CHAR(SYSDATE,’YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD’)</span><br><span class="line"><span class="keyword">From</span> DUAL</span><br></pre></td></tr></table></figure></li>
<li><p>日期增减：有时我们需要在一个日期的基础上增加某个时间长度或者减去某个时间长度，比如我们知道每个员工的出生日期，而想计算出他出生后10000 天的日期，再如我们想计算所有合同的到期日的三月后的日期。<code>Oracle</code>中可以直接使用加号“+”来进行日期的加法计算，其计算单位为“天”，比如<code>date+3</code>就表示在日期<code>date</code>的基础上增加三天；同理使用减号“-”则可以用来计算日期前的特定时间段的时间，比如<code>date-3</code>就表示在日期<code>date</code>的三天前的日期。比如下面的<code>sql</code>语句用于计算每个人出生日期3天后以及10天前的日期；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> FBirthDay，</span><br><span class="line">FBirthDay<span class="operator">+</span><span class="number">3</span>，</span><br><span class="line">FBirthDay<span class="number">-10</span></span><br><span class="line"><span class="keyword">From</span> T_Person</span><br></pre></td></tr></table></figure>
<p><code>Oracle</code>中提供了<code>ADD_MONTHS()</code>函数用于以月为单位的日期增减运算，<code>ADD_MONTHS()</code>函数的参数格式如下：<code>ADD_MONTHS(date，number)</code> 其中参数date为待计算的日期，参数<code>number</code>为要增加的月份数，如果<code>number</code>为负数则表示进行日期的减运算。下面的<code>SQL</code>语句用于计算每个人的出生日期两个月后以及10个月前的日期：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> FBirthDay,</span><br><span class="line">ADD_MONTHS(FBirthDay,<span class="number">2</span>),</span><br><span class="line">ADD_MONTHS(FBirthDay,<span class="number">-10</span>)</span><br><span class="line"><span class="keyword">From</span> T_Person</span><br></pre></td></tr></table></figure></li>
<li><p>计算日期差额：<br>在<code>Oracle</code>中，可以在两个日期类型的数据之间使用减号运算符“-”，其计算结果为两个日期之间的天数差。比如执行下面的<code>SQL</code>语句用于计算注册日期<code>FRegDay</code>和出生日期<code>FBirthDay</code>之间的时间间隔：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> FRegDay,FBirthDay,FRegDay – FbirthDay</span><br><span class="line"><span class="keyword">From</span> T_Person</span><br></pre></td></tr></table></figure></li>
<li><p>计算一个日期是星期几：<br><code>Oracle</code>中提供了<code>TO_CHAR（）</code>函数用于将数据转换为字符串类型，当针对时间日期类型数据进行转换的时候，它接受两个参数，其参数格式如下：<code>TO_CHAR(date,format)</code>其中参数<code>date</code>为待转换的日期，参数<code>format</code>为格式化字符串，数据库系统将按照这个字符串对<code>date</code>进行转换。如下是以<code>2008-08-08</code>这样的形式显示出生日期：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> FBirthDay，</span><br><span class="line">TO_CHAR(FbirthDay，’YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD’) <span class="keyword">as</span> 出生日期</span><br><span class="line"><span class="keyword">From</span> TPerson</span><br></pre></td></tr></table></figure></li>
<li><p>取得日期的指定部分：<br>提取日期的特定不是非常有必要的，比如检索本年的每个月的16日的销售量、检索访问用户集中的时间段，这些都需要对日期的特定部分进行提取。使用<code>TO_CHAR()</code>函数就可以提取日期的任意部分，比如下面的<code>SQL</code>用于提取每个人员的出生年份、出生时是当年的第几天、出生时是当年的第几周：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">FBirthDay,</span><br><span class="line">TO_CHAR(FBirthDay,’YYYY’) <span class="keyword">AS</span> y,</span><br><span class="line">TO_CHAR(FBirthDay,’DDD’) <span class="keyword">AS</span> d,</span><br><span class="line">TO_CHAR(FBirthDay,’WW’) <span class="keyword">AS</span> u</span><br><span class="line"><span class="keyword">From</span> T_Person</span><br></pre></td></tr></table></figure></li>
<li><p>类型转换：<br>在使用<code>SQL</code>语句的时候，我们使用的数据的类型不一定符合函数或者运算符的需要，比如函数需要整数类型的数据而我们使用的则是一个字符串，在一些情况下数据库系统会替我们自动将字符串类型转换为整数类型，这种转换称为隐式转换。但是在有的情况下数据库系统不会进行隐式转换，这时就要使用类型转换函数了，这种转换称为显式转换。使用类型转换函数不仅可以保证类型转换的正确性，而且可以提高数据处理的速度，因此应该使用显式转换，尽量避免使用隐式转换。<br><code>Oracle</code>提供了针对<code>TO_CHAR()</code>、<code>TO_DATE()</code>、<code>TO_NUMBER()</code>等函数，这些函数可以将数据显示的转换为字符串类型、日期时间类型或者数值类型。<code>Oracle</code>中还提供了<code>HEXTORAW()</code>、<code>RAWTOHEX()</code>、<code>TO_MULTI_BYTE()</code>、<code>TO_SINGLE_BYTE()</code>等函数用于存储格式的转换。<br>1） <code>TO_CHAR()</code><br><code>TO_CHAR()</code>函数用来将时间日期类型或者数值类型的数据转换为字符串，其参数格式如下：<code>TO_CHAR(expression，format)</code>，参数<code>expression</code>为待转换的表达式，参数<code>format</code>为转换后的字符串格式，参数<code>format</code>可以省略，如果省略参数<code>format</code>将会按照数据库系统内置的转换规则进行转换。<br>2） <code>TO_DATE()</code>函数用来将字符串转换为时间类型，其参数格式如下：<br><code>TO_DATE(expression，format)</code>，参数<code>expression</code>为待转换的表达式，参数<code>format</code>为转换格式，参数<code>format</code>可以省略，如果省略参数<code>format</code>将会按照数据库系统内置的转换规则进行转换。<br>下面的SQL语句用于将字符串形式的数据按照特定的格式解析为日期类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">TO_DATE(<span class="string">&#x27;2008-08-08 08:09:10&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">as</span> dt1,</span><br><span class="line">TO_DATE(<span class="string">&#x27;20080808 080910&#x27;</span>, <span class="string">&#x27;YYYYMMDD HH24MISS&#x27;</span>) <span class="keyword">as</span> dt2</span><br><span class="line"><span class="keyword">From</span> DUAL</span><br></pre></td></tr></table></figure>
<p><code>TO_NUMBER()</code>函数用法类似<br>3） <code>HEXTORAW()</code>、<code>RAWTOHEX()</code>：<br><code>HEXTORAW()</code>用于将十六进制格式的数据转换为原始值，而<code>RAWTOHEX()</code>函数用来将原始值转换为十六进制格式的数据<br>4） <code>TO_MULTI_BYTE()</code>、``TO_SINGLE_BYTE()<code>： </code>TO_MULTI_BYTE()<code>函数用于将字符串中的半角字符转换为全角字符，而</code>TO_SINGLE_BYTE()`函数则用来将字符串中的全角字符转换为半角字符。</p>
</li>
<li><p>空值处理：<br>主流数据库系统都支持<code>COLAESCE()</code>函数，这个函数主要用来进行空值处理，其参数格式如下：<code>COLAESCE(expression，valuel,value2……,valuen)</code><br><code>COLAESEC()</code>函数的第一个参数<code>expression</code>为待检测的表达式，而其后的参数个数不定。<code>COLAESEC()</code>函数将会返回包括<code>expression</code>在内的所有参数中的第一个非空表达式。如果expression不为空值则返回<code>expression</code>；否则不、判断<code>value1</code>是否是空值，如果<code>value1</code>不为空值则返回<code>value1</code>；否则判断<code>value2</code>是否是空值，如果<code>value2</code>不为空值则返回value3；……以此类推，如果所有的表达式都为空值，则返回<code>NULL</code>。<br><code>Oracle</code>中<code>NVL(expression1,expression2)</code>函数将<code>NULL</code>转变为实际值，如果<code>expression1</code>不为<code>NULL</code>则返回<code>expression1</code>，若为<code>NULL</code>则返回<code>expression2</code>，两个表达式可以是任意数据类型，但两个表达式的数据类型必须一致。而<br>函数<code>NVL2(expr1,expr2,expr3)</code>，如果<code>expr1</code>不是<code>NULL</code>，则返回<code>expr2</code>；如果<code>expr1</code>是<code>NULL</code>，则返回<code>expr3</code>。参数<code>expr1</code>可以是任意数据类型，而<code>expr2</code>和<code>expr3</code>可以是除<code>LONG</code>类型之外的任何数据类型，但三者的数据类型必须保持一致。</p>
</li>
<li><p>自动增长字段：<br>在<code>Oracle</code>中可以通过<code>SEQUENCE</code>序列来实现自动增长字段，在<code>Oracle</code>中<code>SEQUENCE</code>被称为序列，每次取的时候它会自动增加，一般用在需要按序列号排序的地方。在使用<code>SEQUENCE</code>前需要首先定义一个<code>SEQUENCE</code>，定义<code>SEQUENCE</code>的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SEQUENCE sequence_name</span><br><span class="line">INCREMENT <span class="keyword">BY</span> step</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> startvalue;</span><br></pre></td></tr></table></figure>
<p>其中<code>sequence_name</code> 为序列的名字，每个序列都必须有唯一的名字；<code>startvalue</code> 参数值为起始数字，<code>step</code> 参数值为步长，即每次自动增长时增加的值。<br>一旦定义了<code>SEQUENCE</code>，你就可以用<code>CURRVAL</code>来取得<code>SEQUENCE</code>的当前值，也可以通过<code>NEXTVAL</code>来增加<code>SEQUENCE</code>，然后返回 新的<code>SEQUENCE</code>值。比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sequence_name.CURRVAL</span><br><span class="line">sequence_name.NEXTVAL</span><br></pre></td></tr></table></figure>
<p>如果<code>SEQUENCE</code>不需要的话就可以将其删除：<code>DROP SEQUENCE sequence_name</code>;</p>
</li>
<li><p><code>ORACLE</code>中的分析函数（即开窗函数）</p>
</li>
</ol>
<ul>
<li>按照<code>FSALARY</code>进行排序，<code>ROWS</code> 按照行数进行范围定位;<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,</span><br><span class="line">       FAGE,</span><br><span class="line">       <span class="built_in">SUM</span>(FSALARY) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> FSALARY <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>)</span><br><span class="line">  <span class="keyword">FROM</span> T_PERSON;</span><br></pre></td></tr></table></figure></li>
<li>按照<code>FSALARY</code>进行排序，<code>RANGE</code> 按照<code>FSALARY</code>值范围进行定位;<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,</span><br><span class="line">       FAGE,</span><br><span class="line">       <span class="built_in">SUM</span>(FSALARY) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> FSALARY <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>)</span><br><span class="line">  <span class="keyword">FROM</span> T_PERSON;</span><br></pre></td></tr></table></figure></li>
<li>按照<code>FSALARY</code>进行排序，计算从当前行的前两行与当前行的后两行的和;<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,</span><br><span class="line">       FAGE,</span><br><span class="line">       <span class="built_in">SUM</span>(FSALARY) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> FSALARY <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="number">2</span> FOLLOWING)</span><br><span class="line">  <span class="keyword">FROM</span> T_PERSON;</span><br></pre></td></tr></table></figure></li>
<li>按照<code>FSALARY</code>进行排序，计算从当前行的后一行到当前行的后三行的和，注意：最后一行没有后续行，其计算结果为空值<code>NULL</code>而非0;<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,</span><br><span class="line">       FAGE,</span><br><span class="line">       <span class="built_in">SUM</span>(FSALARY) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> FSALARY <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> FOLLOWING <span class="keyword">AND</span> <span class="number">3</span> FOLLOWING)</span><br><span class="line">       <span class="keyword">FROM</span> T_PERSON;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="11">
<li><code>Oracle</code>中的聚合函数<br><code>MAX()</code> 该函数用于取得列或表达式的最大值，它适用于任何数据类型；<br><code>MIN()</code> 该函数用于取得列或表达式的最小值，它适用于任何数据类型；<br><code>AVG()</code> 该函数用于取得列或表达式的平均值，它适用于任何数据类型；<br><code>SUM()</code> 该函数用于取得列或表达式的总和，它适用于任何数据类型；<br><code>COUNT()</code> 该函数用于取得总计行数；<br><code>VARIANCE()</code> 该函数用于取得列或表达式的方差，并且该函数只适用于数字类型。当只有一行数据时，其值返回为0；当存在多行数据时，方差是按照如下公式计算取得：<code>(SUM(EXPR)2-SUM(EXPR)2/COUNT(EXPR))/(COUNT(EXPR)-1)</code>;<br><code>STDDEV()</code> 该函数用于取得列或表达式的标准偏差，并且该函数只适用于数字类型。当只有一行数据时，其值返回为0；当存在多行数据时，<code>Oracle</code>按照方差的平方根来计算标准偏差。</li>
</ol>
<h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE USER_IRS_SPACE DATAFILE<span class="string">&#x27;D:\oracle\product\10.1.0\oradata\orcl\USER_IRS_TBS_temp01.dbf&#x27;</span>SIZE <span class="number">500</span>M AUTOEXTEND <span class="keyword">ON</span> NEXT <span class="number">50</span>M</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE USER_IRS_TBS DATAFILE <span class="string">&#x27;D:\oracle\product\10.1.0\oradata\orcl\USER_IRS_TBS_temp01.dbf&#x27;</span>size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M</span><br></pre></td></tr></table></figure>
<h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><p> 如果所有数据都对，但是就是倒不出来的话，可以看下<code>Oracle</code>的基本服务是不是开了，例如<code>Services</code>服务是不是开了<br><code>exp sgirs/sgirsdb@orcl file=&#39;D :\db.dmp&#39;</code>  </p>
<h2 id="数据库导入"><a href="#数据库导入" class="headerlink" title="数据库导入"></a>数据库导入</h2><p><code>imp sgirs/sgirsdb file=&#39;D:\dba.dmp&#39;</code></p>
<h2 id="ORACLE查询表死锁"><a href="#ORACLE查询表死锁" class="headerlink" title="ORACLE查询表死锁"></a>ORACLE查询表死锁</h2><ul>
<li>查看锁表进程SQL语句1：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sess.sid,</span><br><span class="line">    sess.serial#,</span><br><span class="line">    lo.oracle_username,</span><br><span class="line">    lo.os_user_name,</span><br><span class="line">    ao.object_name,</span><br><span class="line">    lo.locked_mode</span><br><span class="line">    <span class="keyword">from</span> v$locked_object lo,</span><br><span class="line">    dba_objects ao,</span><br><span class="line">    v$session sess</span><br><span class="line"><span class="keyword">where</span> ao.object_id <span class="operator">=</span> lo.object_id <span class="keyword">and</span> lo.session_id <span class="operator">=</span> sess.sid;</span><br></pre></td></tr></table></figure></li>
<li>查看锁表进程SQL语句2：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v$session t1, v$locked_object t2 <span class="keyword">where</span> t1.sid <span class="operator">=</span> t2.SESSION_ID;</span><br></pre></td></tr></table></figure></li>
<li>杀掉锁表进程<br>如有記錄則表示有lock，記錄下SID和serial# ，將記錄的ID替換下面的738,1429，即可解除LOCK<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> kill session <span class="string">&#x27;738,1429&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="一次插入多条数据"><a href="#一次插入多条数据" class="headerlink" title="一次插入多条数据"></a>一次插入多条数据</h2><p>需要注意，最后的<code>select * from dual</code>不能少</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">into</span> table1(filed1,filed2)<span class="keyword">values</span>(<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;value2&#x27;</span>)</span><br><span class="line"><span class="keyword">into</span> table2(字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3</span>) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz集成SpringMVC 的方案</title>
    <url>/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_16.jpg"></p>
<blockquote>
<p>废话不说，直接上干货</p>
</blockquote>
<h3 id="引入Jar包"><a href="#引入Jar包" class="headerlink" title="引入Jar包"></a>引入Jar包</h3><p>第一步，首当其冲是引jar包，当然目前我还没把项目弄成maven的，所以也就只能自己copy个jar包到自己的lib包下面</p>
<a href="/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/quartz-2.2.1.jar" title="下载quartz-2.2.1.jar">下载quartz-2.2.1.jar</a>

<h3 id="新建spring-quartz-xml"><a href="#新建spring-quartz-xml" class="headerlink" title="新建spring-quartz.xml"></a>新建spring-quartz.xml</h3><p>第二步,新建一个spring-quartz.xml文件，文件的位置放在和spingMVC的配置文件同级目录即可，spring-quartz.xml可以配置多个任务，列如quartzJobA、quartzJobB，并配置对应的方法和时间表达式（什么时间执行），具体的任务怎么定时，怎么执行都在此文件中</p>
<a href="/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/spring-quartz.xml" title="spring-quartz.xml下载链接">spring-quartz.xml下载链接</a>

<img src="/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/screenshot_1.png" class="">

<h3 id="修改web-xml"><a href="#修改web-xml" class="headerlink" title="修改web.xml"></a>修改web.xml</h3><p>第三步，将spring-quartz.xml添加到配置中，配置文件中只需要启动的时候加载上面提到spring-quartz.xml文件</p>
<img src="/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/screenshot_2.png" class="">

<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><p>第四步，具体在Java中的使用方法</p>
<a href="/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/StatisticsTimer.java" title="下载StatisticsTimer">下载StatisticsTimer</a>
<img src="/2019/01/26/Quartz%E9%9B%86%E6%88%90springMVC-%E7%9A%84%E6%96%B9%E6%A1%88/screenshot_3.png" class="">

<p>注：<br>cronExpression值有几种如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;0 0 12 * * ?&quot;</span> 每天中午<span class="number">12</span>点触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * *&quot;</span> 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span> 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ? *&quot;</span> 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ? 2005&quot;</span> <span class="number">2005</span>年的每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 * 14 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">59</span>期间的每<span class="number">1</span>分钟触发</span><br><span class="line"><span class="string">&quot;0 0/5 14 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">55</span>期间的每<span class="number">5</span>分钟触发</span><br><span class="line"><span class="string">&quot;0 0/5 14,18 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到<span class="number">2</span>:<span class="number">55</span>期间和下午<span class="number">6</span>点到<span class="number">6</span>:<span class="number">55</span>期间的每<span class="number">5</span>分钟触发</span><br><span class="line"><span class="string">&quot;0 0-5 14 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">05</span>期间的每<span class="number">1</span>分钟触发</span><br><span class="line"><span class="string">&quot;0 10,44 14 ? 3 WED&quot;</span> 每年三月的星期三的下午<span class="number">2</span>:<span class="number">10</span>和<span class="number">2</span>:<span class="number">44</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * MON-FRI&quot;</span> 周一至周五的上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 15 * ?&quot;</span> 每月<span class="number">15</span>日上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 L * ?&quot;</span> 每月最后一日的上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6L&quot;</span> 每月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6L 2002-2005&quot;</span> <span class="number">2002</span>年至<span class="number">2005</span>年的每月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>触发</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Quart定时器</category>
      </categories>
      <tags>
        <tag>定时器</tag>
        <tag>Quartz</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装</title>
    <url>/2019/08/10/Redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_58.jpg"></p>
<h1 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载地址为<a href="https://github.com/microsoftarchive/redis/releases">Redis安装下载地址</a></p>
<ol>
<li>打开页面，选择对应的版本(Linux的下载地址和这个下载地址不一样)<img src="/2019/08/10/Redis%E5%AE%89%E8%A3%85/screen_shot_1.png" class=""></li>
<li>下载之后，解压到任意目录下，并记下这个目录</li>
</ol>
<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><img src="/2019/08/10/Redis%E5%AE%89%E8%A3%85/screenshot_2.png" class="">
<img src="/2019/08/10/Redis%E5%AE%89%E8%A3%85/screenshot_3.png" class="">

<h2 id="测试是否正常"><a href="#测试是否正常" class="headerlink" title="测试是否正常"></a>测试是否正常</h2><ol>
<li>打开一个cmd窗口，输入下面的命令启动redis(可以不输入后面的配置文件，会自动选择默认配置文件)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure>
<img src="/2019/08/10/Redis%E5%AE%89%E8%A3%85/screenshot_4.png" class=""></li>
<li><font color='red'>另起一个cmd窗口，原来的不要关闭</font></li>
</ol>
<ul>
<li>连接到数据库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></li>
<li>设置key<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> myKey abc</span><br></pre></td></tr></table></figure></li>
<li>获取键值对<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get myKey</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><blockquote>
<p>官方文档详见<a href="https://redis.io/download">https://redis.io/download</a></p>
</blockquote>
<h2 id="下载解压安装文件"><a href="#下载解压安装文件" class="headerlink" title="下载解压安装文件"></a>下载解压安装文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">$ tar xzf redis-6.2.6.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-6.2.6</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ src&#x2F;redis-server</span><br></pre></td></tr></table></figure>

<h2 id="Client端测试"><a href="#Client端测试" class="headerlink" title="Client端测试"></a>Client端测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>数据库</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate模拟HTTP-POST请求发送文件</title>
    <url>/2020/01/08/RestTemplate%E6%A8%A1%E6%8B%9FHTTP-POST%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_71.jpg"></p>
<blockquote>
<p>今天项目上碰到一个比较不常用的需求，即业务子系统之间通过接口传递文件的功能，起初想到的上传的都是图片，可以直接转Base64字符串，直接通过POST传递过去就可以了，但是本着负责的原则，别后期挖坑，还是又通过其他的方式实现的，方式就是通过RestTemplate的postForEntity方法实现文件的POST请求发送</p>
</blockquote>
<h2 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendRestTempPost</span><span class="params">(String url, Map&lt;String,Object&gt; paramsMap, MultipartFile file)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个RestTemplate对象</span></span><br><span class="line">  RestTemplate restTemplate =<span class="keyword">new</span> RestTemplate();</span><br><span class="line">  <span class="comment">//MultiValueMap里面，用作发送文件</span></span><br><span class="line">  MultiValueMap&lt;String, Object&gt; params = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1. 首先将字符串等类型的参数放入参数对象中</span></span><br><span class="line">  <span class="keyword">if</span> (!paramsMap.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entries : paramsMap.entrySet()) &#123;</span><br><span class="line">      params.add(entries.getKey(), entries.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  File tempFile = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//2.处理文件</span></span><br><span class="line">  <span class="keyword">if</span>(!file.isEmpty())&#123;</span><br><span class="line">    String tempFilePath = System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>) + file.getOriginalFilename();</span><br><span class="line">    tempFile = <span class="keyword">new</span> File(tempFilePath);</span><br><span class="line">    <span class="comment">//生成临时文件</span></span><br><span class="line">    file.transferTo(tempFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件必须封装成FileSystemResource这个类型后端才能收到附件</span></span><br><span class="line">    FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(tempFilePath);</span><br><span class="line">    params.add(<span class="string">&quot;file&quot;</span>,resource);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用接口即可</span></span><br><span class="line">  ResponseEntity&lt;String&gt; responseStr = restTemplate.postForEntity(url, params, String.class);</span><br><span class="line">  <span class="comment">//如果文件存在的话，进行删除操作</span></span><br><span class="line">  <span class="keyword">if</span>(tempFile!= <span class="keyword">null</span> &amp;&amp; tempFile.exists())&#123;</span><br><span class="line">  			tempFile.delete();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据自己需求判断statuscode等相关字段，这里只是简单的实现，所以直接拿了body的内容返回</span></span><br><span class="line">  <span class="keyword">return</span> responseStr.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ol>
<li>这里使用<code>MultiValueMap</code>而不是常规<code>Map</code>的原因应该是显而易见的，常规的Map应该是无法满足存放java.io.File类型的文件的能力吧，这里只是猜测</li>
<li>接下来是传递的参数进行了遍历，遍历从调用的方法传递过来的参数，然后组装到<code>MultiValueMap</code></li>
<li>判断传递过来的文件是不是空的，如果不是空的，进行如下处理</li>
</ol>
<ul>
<li>首先创建一个临时文件，当然如果你在当前服务器已经保存过文件，那就更好不过了，直接读取过来，就可以操作了</li>
<li>然后将文件封装成<code>FileSystemResource</code>对象，这个是必须得封装的，不封装的话是没法传递过去的</li>
<li>将文件放入到<code>MultiValueMap</code>中</li>
</ul>
<ol start="4">
<li>调用接口进行文件及相关参数的发送操作</li>
<li>最后还需要判断文件不为空的时候的删除操作</li>
</ol>
<h3 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h3><p>这个地方发现了一个问题和一个优化的点：</p>
<ol>
<li>问题是传递过去如果不带header的时候会出现传递的参数汉字会乱码的问题</li>
<li>优化的点是如果一次性发送多个文件的时候，该如何去做处理(这个地方尝试了一下，结果一直报错，后续再试试)  </li>
</ol>
<h2 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JSONObject <span class="title">upLoadImg</span><span class="params">(String _userId,String applid,String doc_code,String file_type,String file_path,String file_id,String file_name,MultipartFile file)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>接收端相信我写到这里，下面的应该都会吧，能拿到<code>MultipartFile</code>剩下的都不是问题了，直接从文件读取流，根据路径和文件名输出到硬盘路径就可以了</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>下面补充下MultipartFile文件转成流并保存的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 			//文件对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath		//上传路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName		//文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fileUp</span><span class="params">(MultipartFile file, String filePath, String fileName)</span></span>&#123;</span><br><span class="line">  String extName = <span class="string">&quot;&quot;</span>; <span class="comment">// 扩展名格式：</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (file.getOriginalFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      extName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    copyFile(file.getInputStream(), filePath, fileName+extName).replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fileName+extName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写文件到当前目录的upload目录中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">copyFile</span><span class="params">(InputStream in, String dir, String realName)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  File file = <span class="keyword">new</span> File(dir, realName);</span><br><span class="line">  <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">      file.getParentFile().mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    file.createNewFile();</span><br><span class="line">  &#125;</span><br><span class="line">  FileUtils.copyInputStreamToFile(in, file);</span><br><span class="line">  <span class="keyword">return</span> realName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>RestTemplate</category>
      </categories>
      <tags>
        <tag>POST</tag>
        <tag>RestTemplate</tag>
        <tag>HTTP</tag>
        <tag>文件发送</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer知识点</title>
    <url>/2019/02/19/SQLServer%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_28.jpg"></p>
<h2 id="RTRIM"><a href="#RTRIM" class="headerlink" title="RTRIM"></a>RTRIM</h2><p>是去除第一个参数中的第二个参数的元素 ，第二个参数不填的话，默认为空格<br>例：去掉FIRSTNAME字段中的空格，<code>RTRIM（FIRSTNAME）</code>，<code>RTRIM</code>一般用在计算字段的长度时使用，例如计算<code>FIRSTNAME</code>的长度的<code>SQL</code>是 <code>SELECT FIRSTNAME,LENGTH(RTRIM(FIRSTNAME)) FROM CHARACTERS</code></p>
<h2 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR"></a>TO_CHAR</h2><p>将其他数据类型转换为字符型</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>SQLServer</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>数据库</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架DDL操作数据库表</title>
    <url>/2019/01/28/SSM%E6%A1%86%E6%9E%B6DDL%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_18.jpg"></p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;createTableWithColumn&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;pd&quot;</span>&gt;</span></span><br><span class="line">	CREATE TABLE $&#123;MODULE_CODE&#125; ( $&#123;ITEM_CODE&#125;   $&#123;ITEM_TYPE_AND_SIZE&#125; ) TABLESPACE USR_XYD_TBS STORAGE ( INITIAL 64K  MINEXTENTS 1  MAXEXTENTS UNLIMITED  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="给表添加备注"><a href="#给表添加备注" class="headerlink" title="给表添加备注"></a>给表添加备注</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;addCommentOnTable&quot; parameterType&#x3D;&quot;pd&quot;&gt;</span><br><span class="line">	COMMENT ON TABLE $&#123;MODULE_CODE&#125; IS &#39;$&#123;MODULE_NAME&#125;&#39;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<h3 id="插入字段"><a href="#插入字段" class="headerlink" title="插入字段"></a>插入字段</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;addItemByDdl&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;pd&quot;</span>&gt;</span></span><br><span class="line">	ALTER TABLE $&#123;MODULE_CODE&#125; ADD $&#123;ITEM_CODE&#125; $&#123;ITEM_TYPE_AND_SIZE&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;editColumnByDdl&quot; parameterType&#x3D;&quot;pd&quot;&gt;</span><br><span class="line">	ALTER TABLE $&#123;MODULE_CODE&#125; MODIFY $&#123;ITEM_CODE&#125; $&#123;ITEM_TYPE_AND_SIZE&#125;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><h3 id="给字段添加备注"><a href="#给字段添加备注" class="headerlink" title="给字段添加备注"></a>给字段添加备注</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;addCommentOnColumn&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;pd&quot;</span>&gt;</span></span><br><span class="line">	COMMENT ON COLUMN $&#123;TABLE_COLUMN&#125; IS &#x27;$&#123;ITEM_NAME&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;addUniquesOnTable&quot; parameterType&#x3D;&quot;pd&quot;&gt;</span><br><span class="line">	ALTER TABLE $&#123;MODULE_CODE&#125; ADD CONSTRAINT $&#123;KEY_NAME&#125; PRIMARY KEY ($&#123;ALL_UNIQUES&#125;)</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<h3 id="删除表上已有的主键"><a href="#删除表上已有的主键" class="headerlink" title="删除表上已有的主键"></a>删除表上已有的主键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;dropUniquesOnTable&quot; parameterType&#x3D;&quot;pd&quot;&gt;</span><br><span class="line">	ALTER TABLE $&#123;MODULE_CODE&#125; DROP CONSTRAINT $&#123;EXIST_UNIQUES&#125; CASCADE</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>DDL</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN服务端安装设置（Windows版本）</title>
    <url>/2019/02/20/SVN%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%EF%BC%88Windows%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_36.jpg"></p>
<ol>
<li>首先下载并安装SVN服务端</li>
<li>新建一个文件夹用于SVN同步文件到这个文件夹中 如：<code>G:\svnData</code></li>
<li>cmd命令中执行如下命令：<br>（这一步的含义是创建一个资源库）<br><code>svnadmin  create  G:\svnData\webDemo</code></li>
<li>进入 <code>G:\svnData\webDemo</code>目录下的<code>conf</code>中，打开<code>svnserve.conf</code>文件，将<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">anon-access&#x3D;read</span><br><span class="line">anauth-access&#x3D; write</span><br></pre></td></tr></table></figure>
两行的注释去掉（第一行的意思是匿名用户也能读取资源库，如果想禁止的话只需要改成<code>anon-access=none</code>,第二行的意思是允许授权用户对资源进行读取和写入操作）</li>
<li>取消<code>svnserve.conf</code>文件中的<code>password-db=passwd</code>的注释，此句的意思是将<code>svn</code>资源库使用的<code>passwd</code>文件来保存用户名和密码</li>
<li>启动SVN<br><code>svnserve -d -r D:\SVNData  exit</code></li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>SVN</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN问题集合</title>
    <url>/2019/02/19/SVN%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_34.jpg"></p>
<h2 id="SVN安装完成后没有svn-exe的问题"><a href="#SVN安装完成后没有svn-exe的问题" class="headerlink" title="SVN安装完成后没有svn.exe的问题"></a>SVN安装完成后没有svn.exe的问题</h2><ul>
<li>在安装的SVN的时候，有时候会出现安装完之后，没有svn.exe的问题，解决该问题的办法是在安装的时候选择安装<code>command line client tools</code><img src="/2019/02/19/SVN%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/screenshot_1.png" class=""></li>
<li>打开小三角然后选择里面的<code>Will be installed on local hard drive</code><img src="/2019/02/19/SVN%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/screenshot_2.png" class=""></li>
</ul>
<h2 id="IDEA中SVN报错E230001Server-SSL-certificate-verification-failedcertificate-issue"><a href="#IDEA中SVN报错E230001Server-SSL-certificate-verification-failedcertificate-issue" class="headerlink" title="IDEA中SVN报错E230001Server SSL certificate verification failedcertificate issue"></a>IDEA中SVN报错E230001Server SSL certificate verification failedcertificate issue</h2><ul>
<li><p>首先执行cmd命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn ls http:&#x2F;&#x2F;xxxx</span><br></pre></td></tr></table></figure></li>
<li><p>其中<a href="http://xxx指的是svn服务器的地址/">http://xxx指的是svn服务器的地址</a></p>
</li>
<li><p>然后会显示<code>(R)eject, accept (t)emporarily or accept (p)ermanently?</code>,这个时候输入<code>p</code></p>
</li>
<li><p>执行完成后会出现让输入<code>Administrator</code>的密码，直接输入电脑的Administrator的密码，如果没有密码，直接回车即可</p>
</li>
<li><p>然后根据提示输入svn的账号和密码</p>
</li>
<li><p>最后就可以直接在IDEA中进行<code>checkout</code>操作了</p>
</li>
</ul>
<img src="/2019/02/19/SVN%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/screenshot_3.png" class="">
]]></content>
      <categories>
        <category>办公知识</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
        <tag>问题集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat启动失败问题解决</title>
    <url>/2019/02/19/Tomcat%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_14.jpg"></p>
<h2 id="未安装JDK或JDK配置错误"><a href="#未安装JDK或JDK配置错误" class="headerlink" title="未安装JDK或JDK配置错误"></a>未安装JDK或JDK配置错误</h2><ol>
<li>新建JAVA_HOME 他的值为JDK的安装绝对路径  例如：C:\Program Files\Java\jdk1.5.0_18\</li>
<li>新建Classpath（如果已经有的话，直接点击编辑，用分号隔开），他的值为   .;%JAVA_HOME%\lib</li>
<li>新建Path，如果已经有了，可以直接加分号隔开他的值为：%JAVA_HOME%\bin</li>
</ol>
<h2 id="已安装，启动bat闪退"><a href="#已安装，启动bat闪退" class="headerlink" title="已安装，启动bat闪退"></a>已安装，启动bat闪退</h2><ol>
<li>在startup.bat文件末尾添加<code>pause</code>，启动tomcat，查看输出日志</li>
<li>如果是JDK的问题，可在start.bat顶部添加如下代码</li>
</ol>
<p><strong>Windows:</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_HOME=D:\Program Files\Java\jdk7\jdk1.<span class="number">7</span>.<span class="number">0</span>_51</span><br><span class="line"><span class="built_in">set</span> JRE_HOME=D:\Program Files\Java\jdk7\jre7</span><br></pre></td></tr></table></figure>

<p>  <strong>Linux</strong><br>  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/jdk/Java\jdk7\jdk1.7.0_51</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/home/jdk/Java\jdk7\jre7</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>中间件</tag>
        <tag>启动失败</tag>
        <tag>闪退</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat开机启动（添加系统服务）</title>
    <url>/2019/02/18/Tomcat%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_5.jpg"></p>
<ol>
<li><p>tomcat 需要增加一个pid文件<br>在tomca/bin 目录下面，增加 setenv.sh 配置，catalina.sh启动的时候会调用，同时配置java内存参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#add tomcat pid</span><br><span class="line">CATALINA_PID=&quot;$CATALINA_BASE/tomcat.pid&quot;</span><br><span class="line">#add java opts</span><br><span class="line">JAVA_OPTS=&quot;-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSize=256m&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>增加tomcat.service</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">tomcat</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">syslog.target network.target remote-fs.target nss-lookup.target</span></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">forking</span></span><br><span class="line"><span class="attr">PIDFile</span>=<span class="string">/usr/local/tomcat/apache-tomcat-8.5.8/tomcat.pid</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/local/tomcat/apache-tomcat-8.5.8/bin/startup.sh</span></span><br><span class="line"><span class="attr">ExecStop</span>=<span class="string">/bin/kill -s QUIT $MAINPID</span></span><br><span class="line"><span class="attr">ExecReload</span>=<span class="string">/bin/kill -s HUP $MAINPID</span></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.targe</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用tomcat.service</p>
</li>
</ol>
<ul>
<li>配置开机启动<br><code>systemctl enable tomcat </code></li>
<li>启动tomcat<br><code>systemctl start tomcat</code></li>
<li>停止tomcat<br><code>systemctl stop tomcat </code></li>
<li>重启tomcat<br><code>systemctl restart tomcat</code><br><font color='red'>注:因为配置pid，在启动的时候会再tomcat根目录生成tomcat.pid文件，停止之后删除，同时tomcat在启动时候，执行start不会启动两个tomcat，保证始终只有一个tomcat服务在运行。多个tomcat可以配置在多个目录下，互不影响</font></li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>开机启动</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat性能优化</title>
    <url>/2019/02/19/Tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_18.jpg"></p>
<blockquote>
<p>本文转自<a href="https://www.cnblogs.com/zhuawang/p/5213192.html">闲谈Tomcat性能优化</a>,<a href="https://blog.csdn.net/zhuyu19911016520/article/details/79022147">tomcat服务器优化</a> 转不意味着Copy，而是对别人知识的汲取和吸收的同时加上自己的理解</p>
</blockquote>
<p>Tomcat默认配置作为生产环境，尤其是内存和线程的配置，默认都是很低，容易成为性能的瓶颈，下面对Tomcat的内存、线程、IO三个方面的优化进行详解：</p>
<h2 id="Tomcat内存优化（内存调优的最直接方式）"><a href="#Tomcat内存优化（内存调优的最直接方式）" class="headerlink" title="Tomcat内存优化（内存调优的最直接方式）"></a>Tomcat内存优化（内存调优的最直接方式）</h2><p>启动Tomcat的时候告诉JVM（java虚拟机）分配一块大内存  </p>
<ol>
<li>打开Linux服务器下bin文件夹下的catalina.sh文件，修改虚拟机配置</li>
<li>修改的主要内容包含如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -Xms&lt;size&gt; JVM初始化堆的大小</span></span><br><span class="line"><span class="comment"># -Xmx&lt;size&gt; JVM堆的最大值 实际参数大小根据服务器配置或者项目具体设置.</span></span><br><span class="line">JAVA_OPTS=<span class="string">&#x27;-server -Xms512m -Xmx512m&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>参数解析</p>
</blockquote>
<ul>
<li>-server:一定要作为第一个参数，在多个CPU时性能佳</li>
<li>-Xms:初始Heap大小，使用的最小内存,一般建议堆的最大值配置为可用内存的最大值的80%</li>
<li>-Xmx:java heap最大值，使用的最大内存,一般建议堆的最大值配置为可用内存的最大值的80%</li>
<li>-XX:PermSize:内存永久保留区域</li>
<li> -XX:MaxPermSize:内存最大永久保留区域</li>
<li>-Xmn:jvm最小内存<br><font color='red'>* 服务器一般设置<code>-Xms</code>、<code>-Xmx</code>相等以避免在每次GC 后调整堆的大小</font></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 32G 内存配置示例：</span></span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-server -Xms10g -Xmx10g -XX:PermSize=1g -XX:MaxPermSize=2g -Xshare:off -Xmn1024m&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Tomcat线程优化"><a href="#Tomcat线程优化" class="headerlink" title="Tomcat线程优化"></a>Tomcat线程优化</h2><p>server.xml文件中修改以下内容，从而优化线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;80&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span> maxThreads=<span class="string">&quot;600&quot;</span> minSpareThreads=<span class="string">&quot;100&quot;</span> maxSpareThreads=<span class="string">&quot;500&quot;</span> acceptCount=<span class="string">&quot;700&quot;</span></span><br><span class="line">connectionTimeout=<span class="string">&quot;20000&quot;</span>  /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>maxThread:最大并发数，默认设置 200，一般建议在 500 ~ 800，根据硬件设施和业务来判断</li>
<li>minSpareThread:Tomcat 初始化时创建的线程数，默认设置 25</li>
<li>maxSpareThread:最多可以有多少个线程，一个超过这个数，则会关闭不再需要的线程</li>
<li>acceptCount:当同时连接的人数达maxThread时，还可以排队，排队大小为这个数，超过这个数就不进行处理</li>
<li>maxQueueSize，最大的等待队列数，超过则拒绝请求</li>
</ul>
<h2 id="Tomcat-IO优化"><a href="#Tomcat-IO优化" class="headerlink" title="Tomcat IO优化"></a>Tomcat IO优化</h2><ol>
<li>同步阻塞IO（java BIO），服务器实现模式为一个连接一个线程，线程是宝贵资源，所以可以通过线程池机制改善。</li>
<li>Java NIO:分为同步非阻塞IO，异步IO与BIO最大的区别是可以通过一个线程处理多个connection（多路复用）</li>
<li>异步非阻塞IO（Java NIO2又叫AIO）<ul>
<li>BIO:适用于连接数目比较小且固定架构，这种方式对服务器资源要求比较高，而且局限于应用中，JDK1.4以前的唯一选择，但程序只管简单易理解</li>
<li>NIO:适用于连接数目比较多且连接比较短（轻操作）架构，比如聊天服务器，并且局限于应用中，编程比较复杂</li>
<li>AIO:连接数目比较多且连接比较长（重操作），比如相册服务器，充分调用OS参与并发操作，编程比较复杂，从JDK1.7开始支持    </li>
</ul>
</li>
</ol>
<p><strong>配置方法：</strong>  </p>
<ul>
<li>在<code>server.xml</code>中：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Connector executor=<span class="string">&quot;tomcatThreadPool&quot;</span> port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span></span><br><span class="line">connectionTimeout=<span class="string">&quot;20000&quot;</span> maxConnections=<span class="string">&quot;10000&quot;</span></span><br><span class="line">redirectPort=<span class="string">&quot;8443&quot;</span> enableLookups=<span class="string">&quot;false&quot;</span> acceptCount=<span class="string">&quot;100&quot;</span> maxPostSize=<span class="string">&quot;10485760&quot;</span> compression=<span class="string">&quot;on&quot;</span> </span><br><span class="line">disableUploadTimeout=<span class="string">&quot;true&quot;</span></span><br><span class="line">compressionMinSize=<span class="string">&quot;2048&quot;</span> acceptorThreadCount=<span class="string">&quot;2&quot;</span></span><br><span class="line">compressableMimeType=<span class="string">&quot;text/html,text/xml,text/plain,text/css,text/javascript,application/javascript&quot;</span> URIEncoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解析  </p>
</blockquote>
<ul>
<li>protocol：Tomcat 8 设置 nio2 更好：org.apache.coyote.http11.Http11Nio2Protocol（如果这个用不了，就用下面那个）</li>
<li>protocol：Tomcat 6、7 设置 nio 更好：org.apache.coyote.http11.Http11NioProtocol</li>
<li>acceptCount，指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理，默认设置 100</li>
<li>maxPostSize，以 FORM URL 参数方式的 POST 提交方式，限制提交最大的大小，默认是 2097152(2兆)，它使用的单位是字节。10485760 为 10M。如果要禁用限制，则可以设置为 -1。</li>
<li>acceptorThreadCount，用于接收连接的线程的数量，默认值是1。一般这个指需要改动的时候是因为该服务器是一个多核CPU，如果是多核 CPU 一般配置为 2.</li>
</ul>
<h2 id="APR"><a href="#APR" class="headerlink" title="APR"></a>APR</h2><p>APR是从操作系统级别来解决异步IO问题，大幅度提高性能，具体可见<a href="http://apr.apache.org/">链接地址</a><br>APR(Apache Portable Runtime)是一个高可移植库,它是Apache HTTP Server 2.x的核心.能更好地和其它本地web技术集成，总体上让Java更有效率作为一个高性能web服务器平台而不是简单作为后台容器.<br>在局域网环境测，就算是400个并发，也是一瞬间就处理/传输完毕，但是在真实的Internet环境下，页面处理时间只占0.1%都不到，绝大部分时间都用来页面传输.如果不用APR，一个线程同一时间只能处理一个用户，势必会造成阻塞。所以生产环境下用apr是非常必要的.</p>
<p>安装Apache Tomcat Native Library，直接启动就支持apr(<a href="http://tomcat.apache.org/native-doc/)%E5%AE%83%E6%9C%AC%E8%BA%AB%E6%98%AF%E5%9F%BA%E4%BA%8EAPR%E7%9A%84">http://tomcat.apache.org/native-doc/)它本身是基于APR的</a>. 具体安装方法可以参考其他博客和文章. 排除代码问题Tomcat优化到这个层次,可以应对大部分性能需求</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>中间件</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat指定JDK启动</title>
    <url>/2019/02/19/Tomcat%E6%8C%87%E5%AE%9AJDK%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_15.jpg"></p>
<blockquote>
<p>项目上出现一个服务器上多个版本JDK的问题，而且目前要用的JDK和默认JDK版本不一致的时候，就需要在Tomcat启动的时候，设置对应的JDK版本，特别是在Linux服务器上</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Windows服务器"><a href="#Windows服务器" class="headerlink" title="Windows服务器"></a>Windows服务器</h3><p>找到Tomcat的目录下的bin文件夹，打开bin文件夹下面的<code>setclasspath.bat</code>文件，在文件顶部添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_HOME=D:\Program Files\Java\jdk7\jdk1.7.0_51</span><br><span class="line"><span class="built_in">set</span> JRE_HOME=D:\Program Files\Java\jdk7\jre7</span><br></pre></td></tr></table></figure>

<h3 id="Linux服务器"><a href="#Linux服务器" class="headerlink" title="Linux服务器"></a>Linux服务器</h3><p>找到Tomcat目录下的bin文件夹，打开bin文件夹下面的<code>setclasspath.sh</code>文件，在文件顶部添加如下代码：<br><font color='red'>一定要注意Linux是Export而Windows是set</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#  Set JAVA_HOME or JRE_HOME if not already set, ensure any provided settings</span></span><br><span class="line"><span class="comment">#  are valid and consistent with the selected start-up options and set up the</span></span><br><span class="line"><span class="comment">#  endorsed directory.</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure prerequisite environment variables are set</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_191/jre</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>在tomcat启动的时候，会报Tomcat JRE信息，可以看下JRE信息是否和配置的位置一致，如果位置一致，说明没有问题</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Tomcat启动的时候会执行start.sh(Linux)或者start.bat(Win)，启动的时候会分别调用catalina.sh(Linux)，然后调用setclasspath.sh(Linux)文件，因此在setclasspath文件中设置JAVA_HOME和JRE之后，就可以指向特定的JDK</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>基于上面的原理，也可以用下面的方法设置Tomcat指定的JDK</p>
<ul>
<li>修改tomcat/bin/catalina.sh，增加 export JAVA_HOME=…</li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>中间件</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat错误信息界面版本信息泄露</title>
    <url>/2019/01/24/Tomcat%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%95%8C%E9%9D%A2%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Tomcat报错页面出现Tomcat版本信息的泄露，具体的效果图见下图  </p>
<img src="/2019/01/24/Tomcat%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%95%8C%E9%9D%A2%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/screenshot_1.png" class="">

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>进入tomcat/lib下，使用电脑自带的软件解压开文件夹下面的<code>catalina.jar</code>文件，然后找到路径<code>\org\apache\catalina\util</code>路径下的<code>ServerInfo.properties</code></li>
<li>编辑<code>ServerInfo.properties</code>文件，修改最后三行代码，去掉对应的版本信息，修改后的效果如下图所示<img src="/2019/01/24/Tomcat%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%95%8C%E9%9D%A2%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/screenshot_2.png" class=""></li>
<li>改完后保存，替换到lib包下面的jar包，重启Tomcat，查看报错页面显示的错误信息<img src="/2019/01/24/Tomcat%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%95%8C%E9%9D%A2%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/screenshot_3.png" class=""></li>
</ol>
]]></content>
      <categories>
        <category>安全测评</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>安全测评</tag>
        <tag>修复方案</tag>
      </tags>
  </entry>
  <entry>
    <title>Url中传递JSONObject、JSONArray对象</title>
    <url>/2019/01/25/Url%E4%B8%AD%E4%BC%A0%E9%80%92JSONObject%E3%80%81JSONArray%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_13.jpg"></p>
<h2 id="Url中传递JSONObject"><a href="#Url中传递JSONObject" class="headerlink" title="Url中传递JSONObject"></a>Url中传递JSONObject</h2><blockquote>
<p>首先说明下项目背景，要求用<code>layer.open</code>打开一个页面，但是传递的主键字段是不确定的，因此需要组装一个JSONObject，里面放入动态的主键，从而让后台通过JSON遍历得到主键，然后进行数据的查询</p>
</blockquote>
<ul>
<li><h3 id="首先想到的是通过JSON-stringify-方法-不可行"><a href="#首先想到的是通过JSON-stringify-方法-不可行" class="headerlink" title="首先想到的是通过JSON.stringify()方法(不可行)"></a>首先想到的是通过JSON.stringify()方法<font color='red'>(不可行)</font></h3><p>但是发现上面的思路是不可行的，以为会出现json中的双引号，造成只能传递一个<code>&#123;</code>到后台，不能传递整个JSON</p>
</li>
<li><h3 id="第二种方法是使用encodeURI-方法-可行"><a href="#第二种方法是使用encodeURI-方法-可行" class="headerlink" title="第二种方法是使用encodeURI()方法(可行)"></a>第二种方法是使用<code>encodeURI()</code>方法<font color='red'>(可行)</font></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layer.open(&#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;编辑数据&#x27;</span>,          <span class="comment">// 弹出框标题</span></span><br><span class="line">        <span class="string">&#x27;shade&#x27;</span>: [<span class="number">0.8</span>, <span class="string">&#x27;#393D49&#x27;</span>],   <span class="comment">// 遮盖罩</span></span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="number">2</span>,                   <span class="comment">// 打开类型</span></span><br><span class="line">        <span class="string">&#x27;area&#x27;</span>: [<span class="string">&#x27;80%&#x27;</span>, <span class="string">&#x27;80%&#x27;</span>],      <span class="comment">// 弹出框大小</span></span><br><span class="line">        <span class="string">&#x27;maxmin&#x27;</span>: <span class="literal">true</span>,              <span class="comment">// 最大化</span></span><br><span class="line">        content: basePath + <span class="string">&#x27;customManage/openListChildPage.do?TYPE_ID=&#x27;</span>+ <span class="built_in">encodeURI</span>(jsonObj)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><h3 id="多扯两句，关于ajax传递json对象到后台的问题"><a href="#多扯两句，关于ajax传递json对象到后台的问题" class="headerlink" title="多扯两句，关于ajax传递json对象到后台的问题"></a>多扯两句，关于ajax传递json对象到后台的问题</h3><p>这个问题相对简单，是可以直接使用<code>ajax</code>的<code>data</code>内置参数，直接传递<code>json</code>对象到后台的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>JSONObject</tag>
        <tag>JSONArray</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSphere(was8.5.5)安装应用程序部署</title>
    <url>/2020/07/10/WebSphere-was8-5-5-%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_87.jpg"></p>
<ol>
<li>在浏览器<a href="https://xxx.xxx.xxx.xxx:9043/ibm/console">https://xxx.xxx.xxx.xxx:9043/ibm/console</a>，输入账号密码登录，点击左侧菜单“应用程序-新建应用程序-新建企业应用程序”<img src="/2020/07/10/WebSphere-was8-5-5-%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2/screenshot_1.png" class="">
<img src="/2020/07/10/WebSphere-was8-5-5-%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2/screenshot_2.png" class=""></li>
<li>选择“快速路径”选项，点击“下一步”<img src="/2020/07/10/WebSphere-was8-5-5-%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2/screenshot_3.png" class=""></li>
<li>给刚刚部署的应用起一个名字，在was中显示，便于后期运维，并点击下一步继续<img src="/2020/07/10/WebSphere-was8-5-5-%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2/screenshot_4.png" class=""></li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
        <category>WebSphere</category>
      </categories>
      <tags>
        <tag>中间件</tag>
        <tag>WebSphere</tag>
        <tag>部署应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10安装Maven</title>
    <url>/2019/02/19/Win10%E5%AE%89%E8%A3%85Maven/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_32.jpg"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>电脑安装JDK1.7以上</li>
<li>Win10操作系统</li>
<li>Maven安装包 <a href="http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.zip">下载地址</a></li>
</ol>
<h2 id="解压Maven安装包"><a href="#解压Maven安装包" class="headerlink" title="解压Maven安装包"></a>解压Maven安装包</h2><ol>
<li>下载完之后，把Maven安装包解压到你想要解压的目录下，本人解压到<code>D:\Program Files\apache-maven-3.5.3</code>下,解压完成后，目录下会有<code>bin、boot、conf、lib</code>文件夹及<code>ReadMe</code>文件等</li>
</ol>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol>
<li>我的电脑-右键-属性-高级系统设置-环境变量-<strong>系统变量</strong>-新建</li>
<li>变量名称：<code>M2_HOME</code></li>
<li>变量值：<code>D:\Program Files\apache-maven-3.5.3</code></li>
<li> 找到Path在环境变量值尾部加入：<code>;%M2_HOME%\bin;</code>  //前面注意分号</li>
</ol>
<h2 id="检查JDK和Maven配置是否成功"><a href="#检查JDK和Maven配置是否成功" class="headerlink" title="检查JDK和Maven配置是否成功"></a>检查JDK和Maven配置是否成功</h2><ol>
<li><code>Win键+R</code>，输入<code>cmd</code>，打开<code>dos</code>界面</li>
<li>输入<code>mvn -v</code> ,出现以下说明安装成功</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;mvn -v</span><br><span class="line">Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)</span><br><span class="line">Maven home: D:\Program Files\apache-maven-3.5.3\bin\..</span><br><span class="line">Java version: 1.7.0_80, vendor: Oracle Corporation</span><br><span class="line">Java home: D:\Program Files\Java\jdk1.7.0_80\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">&quot;windows 8.1&quot;</span>, version: <span class="string">&quot;6.3&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure>
<img src="/2019/02/19/Win10%E5%AE%89%E8%A3%85Maven/screenshot_1.png" class="">

<h2 id="修改本地仓库位置"><a href="#修改本地仓库位置" class="headerlink" title="修改本地仓库位置"></a>修改本地仓库位置</h2><p>Maven会将下载的类库（jar包）放置到本地的一个目录下（一般默认情况下maven在本机的仓库位于C:\我的文档中.m2.\repository），如果想重新定义这个目录的位置就需要修改Maven本地仓库的配置</p>
<ol>
<li>在自己喜欢的位置创建文件夹，此处本人创建的位置是（F:\Maven\repo）</li>
<li>在安装Maven的目录下找到conf文件夹，在文件夹中找到settings.xml文件，<strong>复制settings.xml文件放于F:\Maven</strong>，如下图所示：</li>
</ol>
<img src="/2019/02/19/Win10%E5%AE%89%E8%A3%85Maven/screenshot_5.png" class="">
<p>3.修改settings.xml文件，如下图所示：</p>
<img src="/2019/02/19/Win10%E5%AE%89%E8%A3%85Maven/screenshot_2.png" class="">

<ol start="4">
<li>在安装Maven的目录下找到conf文件夹，在文件夹中找到settings.xml文件，更改默认的仓库位置如下图所示：（注意两个地方的settings.xml都要修改）</li>
</ol>
<img src="/2019/02/19/Win10%E5%AE%89%E8%A3%85Maven/screenshot_3.png" class="">

<ol start="5">
<li>校验修改的配置是否成功，控制台输入：mvn help:system，如果成功，maven会从远程中央仓库下载jar包到本地的repo文件夹中</li>
</ol>
<img src="/2019/02/19/Win10%E5%AE%89%E8%A3%85Maven/screenshot_4.png" class="">
]]></content>
      <categories>
        <category>软件安装</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10激活方法</title>
    <url>/2019/02/11/Win10%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_15.jpg"></p>
<ul>
<li>方法1：<br>创建一个bat文件，里面输入以下命令，然后管理员权限执行以下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr /ipk DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</span><br><span class="line">slmgr /skms kms.firadio.net</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure></li>
<li>方法二：<br>管理员方式运行下面的bat<a href="/2019/02/11/Win10%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/Win10_KMS_Activation.bat" title="下载Win10_KMS_Activation.bat">下载Win10_KMS_Activation.bat</a></li>
</ul>
<ul>
<li>方法三<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打开“注册表编辑器”；（Windows + R然后输入 Regedit）修改SkipRearm 的值为1：</span><br><span class="line">（在HKEY_LOCAL_MACHINE–》SOFTWARE–》Microsoft–》Windows NT–》CurrentVersion–》SoftwareProtectionPlatform里面，将SkipRearm的值修改为1）重启电脑</span><br><span class="line">2.以管理员身份启动cmd，输入SLMGR -REARM，根据提示，再次重启电脑！</span><br><span class="line">3.slmgr &#x2F;ipk DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</span><br><span class="line">弹出窗口提示：“成功的安装了产品密钥”。</span><br><span class="line">4.slmgr &#x2F;skms xykz.f3322.org</span><br><span class="line">密钥管理服务计算机名称成功设置为xykz.f3322.org</span><br><span class="line">5.slmgr &#x2F;ato</span><br><span class="line">按回车键后将弹出窗口提示：“成功的激活了产品”。</span><br><span class="line">至此，Win10正式企业版系统激活成功。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>办公知识</category>
      </categories>
      <tags>
        <tag>Win10</tag>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows-CentOS双系统引导修复</title>
    <url>/2020/07/09/Windows-CentOS%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_85.jpg"><br>今天在同一台主机上安装了Windows，然后安装了CentOS，结果发现CentOS的引导把Window的引导给覆盖了，造成Windows进不去了，百度一番发现了如下方案，目前测试发现可行，谨在此记录方便后期使用，系统安装的顺序先Win7/Win10后CentOS7</p>
<h2 id="修复方案一"><a href="#修复方案一" class="headerlink" title="修复方案一"></a>修复方案一</h2><ol>
<li>编辑grub.cfg<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></li>
<li>打开后，定位到如下内容的位置，需要注意<code>grub.d/</code>后面有可能是<code>40_custom</code>或者其他<code>xx_custom</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### BEGIN /etc/grub.d/40_custom ###</span></span><br><span class="line"><span class="comment"># This file provides an easy way to add custom menu entries.  Simply type the</span></span><br><span class="line"><span class="comment"># menu entries you want to add after this comment.  Be careful not to change</span></span><br><span class="line"><span class="comment"># the &#x27;exec tail&#x27; line above.</span></span><br><span class="line"><span class="comment">### END /etc/grub.d/40_custom ###</span></span><br></pre></td></tr></table></figure></li>
<li>在<code>### END /etc/grub.d/40_custom ###</code>前面添加如下代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menuentry <span class="string">&#x27;Windows 10&#x27;</span>&#123;</span><br><span class="line"><span class="built_in">set</span> root=(hd0,1)</span><br><span class="line">chainloader +1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
解析：</li>
</ol>
<ul>
<li>hd0表示硬盘，1表示c盘，我的windows安装在硬盘的第一个分区，所以此处是 set root=(hd0,1)，根据实际情况修改</li>
</ul>
<ol start="4">
<li>重启CentOS7<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="修复方案二-推荐"><a href="#修复方案二-推荐" class="headerlink" title="修复方案二(推荐)"></a>修复方案二(推荐)</h2><ol>
<li>root用户登录，修改40_custom文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/grub.d/40_custom</span><br></pre></td></tr></table></figure></li>
<li>在文件的最后添加如下代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menuentry <span class="string">&#x27;Windows 10&#x27;</span>&#123;</span><br><span class="line"><span class="built_in">set</span> root=(hd0,1)</span><br><span class="line">chainloader +1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
解析：</li>
</ol>
<ul>
<li>hd0表示硬盘，1表示c盘，我的windows安装在硬盘的第一个分区，所以此处是 set root=(hd0,1)，根据实际情况修改</li>
</ul>
<ol start="3">
<li>生成gurb.cfg文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></li>
<li>重启就能看到Win系统的引导了<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS 引导</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Windows</tag>
        <tag>修复引导</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 MySQL5.7免安装版安装教程</title>
    <url>/2019/02/19/Windows10-MySQL5-7%E5%85%8D%E5%AE%89%E8%A3%85%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_19.jpg"></p>
<h2 id="首先是下载"><a href="#首先是下载" class="headerlink" title="首先是下载"></a>首先是下载</h2><p><strong><font color='red'>最近发现官网上下载版本直接跳到8.0了，下载的时候一定要注意找之前的版本 </font></strong></p>
<ul>
<li>打开mysql的官网<br><a href="https://www.mysql.com/">mysql下载地址</a>  </li>
<li>找到顶部的DOWNLOADS ，如果地址没换的话，应该是下面这个地址<br><a href="https://www.mysql.com/downloads/">下载地址</a>  </li>
<li>选择社区版本（Community），然后选择左侧的菜单中的MySQL Community Server</li>
<li>滑动滚轮，向下，一直到选择系统和下载版本</li>
<li>选择完之后选择列表中展示的（ZIP Archive）版本的进行下载，我下载的版本是5.7.20，下载完成成解压</li>
</ul>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><ul>
<li>首先是添加MYSQL_HOME，设置的VALUE值是MYSQL的解压目录，我是解压在了D:\Program Files\mysql，所以对应的MYSQL_HOME就是这个值  </li>
<li>设置PATH<br>在PATH的最后添加%MYSQL_HOME%\bin;</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>在mysql文件夹下，新建一个my.ini的文件<strong>此处需要注意：保存文件的编码集一定是ANSI，这个地方不要用记事本编辑，记事本默认是UTF-8，因为他是个坑，用专业的Notepad++ 或者UE进行编辑</strong>，具体my.ini的内容如下,内容解释下面的文件中都已经有了，就不再废话了，另外这个地方先开启skip-grant-tables是为了给root修改密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;D:\Program Files\mysql</span><br><span class="line">datadir&#x3D;D:\Program Files\mysql\data\</span><br><span class="line">port&#x3D;3306</span><br><span class="line">skip-grant-tables</span><br><span class="line">#basedir表示mysql安装路径</span><br><span class="line">#datadir表示mysql数据文件存储路径</span><br><span class="line">#port表示mysql端口</span><br><span class="line">#skip-grant-tables表示忽略密码</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>然后以管理员的权限进入cmd窗口界面，管理员权限进入方式：搜索cmd，右键在对应程序上，以管理员的权限启动</li>
<li>切换到mysql/bin文件夹下，也就是你解压的出来的文件夹的bin目录下，怎么切换我就不讲了 各种cd，然后执行命令，命令如下，执行完成后会显示“Service successfully installed”<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure></li>
<li>生成data数据。不要着急于启动，先生成mysql的data数据，上面的my.cnf中设置了datadir=D:\Program Files\mysql\data\，因此我们需要先手动在mysql文件夹下面新建一个data文件夹，否则接下来的步骤会报错<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure --user&#x3D;mysql;</span><br></pre></td></tr></table></figure></li>
<li>然后看下data目录下会生成一堆文件夹和文件</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul>
<li>在刚刚的cmd窗口中直接输入 net start mysql，然后会提示启动成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul>
<li>输入命令mysql -u root -p，这个时候是没有密码的，所以输入完之后直接回车，就可以进入mysql中了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="更新密码"><a href="#更新密码" class="headerlink" title="更新密码"></a>更新密码</h2><ul>
<li>输入以下命令修改密码，当然密码需要修改成你自己想要修改的内容,再就是刷新下quanxian<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;123456789&#39;) where user&#x3D;&#39;root&#39; and Host &#x3D; &#39;localhost&#39;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="恢复my-ini配置文件"><a href="#恢复my-ini配置文件" class="headerlink" title="恢复my.ini配置文件"></a>恢复my.ini配置文件</h2><ul>
<li>现在修改完密码了，需要删除或注释my.ini文件中的skip-grant-tables选项，<strong>一定注意不要用记事本，那是个坑</strong></li>
</ul>
<h2 id="停止和启动mysql服务"><a href="#停止和启动mysql服务" class="headerlink" title="停止和启动mysql服务"></a>停止和启动mysql服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<h2 id="常规错误提示及可能遇到的问题"><a href="#常规错误提示及可能遇到的问题" class="headerlink" title="常规错误提示及可能遇到的问题"></a>常规错误提示及可能遇到的问题</h2><ul>
<li><p>出现这个问题的原因一般是my.ini文件的编码格式出现问题了，保存的时候一定要记得是ANSI</p>
<blockquote>
<p>mysqld: [ERROR] Found option without preceding group in config file D:\Program Files\mysql\my.ini at line 1!<br>mysqld: [ERROR] Fatal error in defaults handling. Program aborted!  </p>
</blockquote>
</li>
<li><p>如果你电脑的性能没啥问题的话，一般4-5S就能启动，像这种一直冒点的情况，可以在“计算机管理”界面查看Windows应用程序日志，翻一翻，MySQL相关错误</p>
<blockquote>
<p>D:\Program Files\mysql\bin&gt;net start mysql<br>MySQL 服务正在启动 …………….</p>
</blockquote>
</li>
<li><p>sc delete mysql 服务的时候回提示服务正在启动，不能删除，或者已经标记为删除的情况，但是服务就是删不掉的情况，这种情况下，第一确认你的服务是否已经停止（有时候 net stop mysql 不好使，可以直接在任务管理器里面，把mysql的进程结束掉） 第二、关闭你的services.msc界面  然后再执行sc 命令进行服务删除操作</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>免安装版</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Oracle11g安装</title>
    <url>/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_44.jpg"></p>
<blockquote>
<p>5年多没有碰Oracle了，从原来的9i已经到现在的12c了，今天项目上要用到Oracle11g的测试环境，因此在Window上部署了一版Oracle，期间碰到的坑还是蛮多的，比如说要安装的电脑上本来安装着10g，需要现卸载，但是咨询说是简版的oracle，卸载程序不生效，又各种捣鼓卸载，删注册表等等，介于此，特此在这记录一下</p>
</blockquote>
<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Oracle的两个安装包，下载地址分别是：</p>
<ul>
<li>win64_11gR2_database_1of2<br>链接：<a href="https://pan.baidu.com/s/1AewnMe-mwm54_aRTFAHbSg">https://pan.baidu.com/s/1AewnMe-mwm54_aRTFAHbSg</a><br>提取码：vbxg</li>
<li>win64_11gR2_database_2of2<br>链接：<a href="https://pan.baidu.com/s/1rj9WBsut79NYTgLpEHq3uQ">https://pan.baidu.com/s/1rj9WBsut79NYTgLpEHq3uQ</a><br>提取码：un5g</li>
</ul>
<p><font color='red'>如果下载慢，可以去官网上下载，但是下载下来的是12c，哈哈，没有找到之前版本的下载地址<a href="https://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/oracle12c-windows-3633015-zhs.html">下载地址</a></font></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ol>
<li>将下载下来的两个压缩包进行解压，然后合并到一块，可以直接右键解压到当前目录（尽量一个一个解压，防止出现问题），如图所示<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_1.png" class=""></li>
<li>解压完成之后，会出现一个合并的<code>database</code>文件夹，文件夹总体大小大概在2.12G左右，具体见下图所示<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_2.png" class=""></li>
</ol>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li>打开<code>database</code>文件夹，双击<code>setup.exe</code>文件启动安装程序，如果是win10，会显示下面的图片，可以直接点击“是”继续安装，或者修改配置文件，配置文件在下面的步骤中讲到<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_3.png" class=""></li>
<li>修改配置文件，修复上面的提示框<br>打开<code>%解压目录%\stage\cvu\cvu_prereq.xml</code>文件，然后修改配置文件内容，修改方法为找到<code>Windows 7</code>所在的<code>OPERATING_SYSTEM</code>，然后整个复制<code>OPERATING_SYSTEM</code>及内部的内容，然后粘贴在<code>OPERATING_SYSTEM</code>的兄弟节点的最后，然后修改<code>RELEASE</code>为6.2，<code>Windows 7</code>改为<code>Windows 10</code>，修改后的内容和粘贴后的配置文件截图如下所示，修改完成后再启动安装程序：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">OPERATING_SYSTEM</span> <span class="attr">RELEASE</span>=<span class="string">&quot;6.2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VERSION</span> <span class="attr">VALUE</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ARCHITECTURE</span> <span class="attr">VALUE</span>=<span class="string">&quot;64-bit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NAME</span> <span class="attr">VALUE</span>=<span class="string">&quot;Windows 10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ENV_VAR</span> <span class="attr">NAME</span>=<span class="string">&quot;PATH&quot;</span> <span class="attr">MAX_LENGTH</span>=<span class="string">&quot;1023&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OPERATING_SYSTEM</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_4.png" class=""></li>
<li>在此打开安装程序，界面显示如下，其中的<code>电子邮件</code>和<code>我希望...</code>可选填，不填后面会提醒“是否确认不希望收到相关配置中的…”，直接点击是就可以了<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_5.png" class=""></li>
<li>网格安装选项、安装类型，具体操作见下图<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_6.png" class="">
<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_7.png" class=""></li>
<li>典型安装<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_9.png" class="">
后面我就盗图了，因为已经安装过了，所以提示其他内容了</li>
<li>先决条件检查，检查电脑硬件是否满足条件<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_10.png" class=""></li>
<li>概要信息，即安装信息的概要显示<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_11.png" class=""></li>
<li>安装过程不用管，界面显示如下图<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_12.png" class=""></li>
<li>数据库软件安装完成后，会弹出安装数据库默认实例<code>ORCL</code>名称数据库的向导界面，如下图所示<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_13.png" class=""></li>
<li>数据库实例创建完后，系统默认是把所有的账户锁定（除sys和system外），建议点开“口令管理”，将<code>scott</code>账号解锁，并设置密码，操作如下图所示<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_14.png" class="">
<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_15.png" class=""></li>
<li>安装完成后的界面如下<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_16.png" class=""></li>
</ol>
<h2 id="创建自己业务上需要的数据库即新建数据库实例"><a href="#创建自己业务上需要的数据库即新建数据库实例" class="headerlink" title="创建自己业务上需要的数据库即新建数据库实例"></a>创建自己业务上需要的数据库即新建数据库实例</h2><ol>
<li>点击<code>Win</code>键，找到Oracle文件夹下面的<code>Database Configuration Assitant</code>菜单，并点击打开，具体见下图<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_18.png" class=""></li>
<li>打开之后，点击<code>下一步</code>，勾选<code>创建数据库</code>后点击下一步<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_19.png" class="">
<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_20.png" class=""></li>
<li>选择<code>一般用途或事务处理</code>，点击下一步，填写数据库实例，然后点击下一步<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_21.png" class="">
<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_22.png" class=""></li>
<li>剩下的一路Next，字符集看自己需求，如果有需要，可以对应的设置，直到下面的界面，然后点击完成会出一个汇总信息界面，点击确定，就会打开创建的Progress界面<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_23.png" class="">
<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_24.png" class=""></li>
</ol>
<h2 id="在对应的数据库实例下面创建表空间，表数据空间等"><a href="#在对应的数据库实例下面创建表空间，表数据空间等" class="headerlink" title="在对应的数据库实例下面创建表空间，表数据空间等"></a>在对应的数据库实例下面创建表空间，表数据空间等</h2><ol>
<li>在客户端机子上修改<code>tnsnames.ora</code>文件，添加新创建数据库的信息，修改里面的HOST为Oracle服务器的IP地址，SERVICE_NAME为你创建数据库实例的名称<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">khgl_116 &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 68.0.0.116)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SERVICE_NAME &#x3D; ORCL)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></li>
<li>使用创建数据库时的sys用户连接数据库，并执行下面的命令创建表空间和表数据控件<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表空间</span></span><br><span class="line"><span class="keyword">create</span> temporary tablespace jnmcdb_table tempfile <span class="string">&#x27;D:\app\Administrator\oradata\orcl\jnmcdb_table.dbf&#x27;</span></span><br><span class="line">　　size <span class="number">50</span>m</span><br><span class="line">　　autoextend <span class="keyword">on</span></span><br><span class="line">　　next <span class="number">50</span>m maxsize <span class="number">20480</span>m</span><br><span class="line">　　extent management <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表数据空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space jnmcdb_data logging datafile <span class="string">&#x27;D:\app\Administrator\oradata\orcl\jnmcdb_data.dbf&#x27;</span></span><br><span class="line">　　size <span class="number">50</span>m</span><br><span class="line">　　autoextend <span class="keyword">on</span></span><br><span class="line">　　next <span class="number">50</span>m maxsize <span class="number">20480</span>m</span><br><span class="line">　　extent management <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户关联到表空间和表数据空间</span></span><br><span class="line">　<span class="keyword">create</span> <span class="keyword">user</span> jnmcbusi identified <span class="keyword">by</span> <span class="number">123456</span></span><br><span class="line">　　<span class="keyword">default</span> tablespace jnmcdb_data  </span><br><span class="line">　　temporary tablespace jnmcdb_table ;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">imp username<span class="operator">/</span>password<span class="variable">@ORALCEID</span>（数据库名，以下图，在登录后左上方）  file<span class="operator">=</span>D:\<span class="number">20140227.</span>dmp <span class="keyword">full</span><span class="operator">=</span>y ignore<span class="operator">=</span>y</span><br></pre></td></tr></table></figure>

<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol>
<li>本机可以正常访问，局域网内其他主机访问显示<code>ORA-12541:TNS:无监听程序</code>，修复方法见下图<img src="/2019/03/06/Windows%E4%B8%8BOracle11g%E5%AE%89%E8%A3%85/screenshot_17.png" class=""></li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Oracle安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell远程内网的服务器慢，指令输入和操作时快时慢的问题</title>
    <url>/2019/02/18/Xshell%E8%BF%9C%E7%A8%8B%E5%86%85%E7%BD%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%85%A2%EF%BC%8C%E6%8C%87%E4%BB%A4%E8%BE%93%E5%85%A5%E5%92%8C%E6%93%8D%E4%BD%9C%E6%97%B6%E5%BF%AB%E6%97%B6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_5.jpg"></p>
<ol>
<li>登录Linux系统，打开终端，输入以下命令<br><code>vi /etc/ssh/sshd_config</code></li>
<li>打开的文件中，拖动鼠标到最后一行，可能会出现下面两种情况</li>
</ol>
<ul>
<li>UsePAM yes UseDNS yes</li>
<li>UsePAM yes<br>在这里将<code>UseDNS yes</code>修改为<code>UseDNS no</code>，没有的则加上这一行，便可</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Xshell</tag>
        <tag>远程</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-Treeview实现级联勾选</title>
    <url>/2019/02/11/bootstrap-Treeview%E5%AE%9E%E7%8E%B0%E7%BA%A7%E8%81%94%E5%8B%BE%E9%80%89/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_28.jpg"></p>
<h3 id="实例化Tree"><a href="#实例化Tree" class="headerlink" title="实例化Tree"></a>实例化Tree</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(&#123;  </span><br><span class="line">        showCheckbox:<span class="literal">true</span>,  </span><br><span class="line">        data:treeData,  </span><br><span class="line">        onNodeChecked:nodeChecked ,  </span><br><span class="line">        onNodeUnchecked:nodeUnchecked  </span><br><span class="line">    &#125;);  </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeCheckedSilent = <span class="literal">false</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodeChecked</span> (<span class="params">event, node</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(nodeCheckedSilent)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    nodeCheckedSilent = <span class="literal">true</span>;  </span><br><span class="line">    checkAllParent(node);  </span><br><span class="line">    checkAllSon(node);  </span><br><span class="line">    nodeCheckedSilent = <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nodeUncheckedSilent = <span class="literal">false</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodeUnchecked</span>  (<span class="params">event, node</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(nodeUncheckedSilent)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    nodeUncheckedSilent = <span class="literal">true</span>;  </span><br><span class="line">    uncheckAllParent(node);  </span><br><span class="line">    uncheckAllSon(node);  </span><br><span class="line">    nodeUncheckedSilent = <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//选中全部父节点  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAllParent</span>(<span class="params">node</span>)</span>&#123;  </span><br><span class="line">    $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;checkNode&#x27;</span>,node.nodeId,&#123;<span class="attr">silent</span>:<span class="literal">true</span>&#125;);  </span><br><span class="line">    <span class="keyword">var</span> parentNode = $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;getParent&#x27;</span>,node.nodeId);  </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="string">&quot;nodeId&quot;</span> <span class="keyword">in</span> parentNode))&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        checkAllParent(parentNode);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//取消全部父节点  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncheckAllParent</span>(<span class="params">node</span>)</span>&#123;  </span><br><span class="line">    $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;uncheckNode&#x27;</span>,node.nodeId,&#123;<span class="attr">silent</span>:<span class="literal">true</span>&#125;);  </span><br><span class="line">    <span class="keyword">var</span> siblings = $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;getSiblings&#x27;</span>, node.nodeId);  </span><br><span class="line">    <span class="keyword">var</span> parentNode = $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;getParent&#x27;</span>,node.nodeId);  </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="string">&quot;nodeId&quot;</span> <span class="keyword">in</span> parentNode)) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">var</span> isAllUnchecked = <span class="literal">true</span>;  <span class="comment">//是否全部没选中  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> siblings)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(siblings[i].state.checked)&#123;  </span><br><span class="line">            isAllUnchecked=<span class="literal">false</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(isAllUnchecked)&#123;  </span><br><span class="line">        uncheckAllParent(parentNode);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//级联选中所有子节点  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAllSon</span>(<span class="params">node</span>)</span>&#123;  </span><br><span class="line">    $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;checkNode&#x27;</span>,node.nodeId,&#123;<span class="attr">silent</span>:<span class="literal">true</span>&#125;);  </span><br><span class="line">    <span class="keyword">if</span>(node.nodes!=<span class="literal">null</span>&amp;&amp;node.nodes.length&gt;<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> node.nodes)&#123;  </span><br><span class="line">            checkAllSon(node.nodes[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//级联取消所有子节点  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncheckAllSon</span>(<span class="params">node</span>)</span>&#123;  </span><br><span class="line">    $(<span class="string">&#x27;#searchTree&#x27;</span>).treeview(<span class="string">&#x27;uncheckNode&#x27;</span>,node.nodeId,&#123;<span class="attr">silent</span>:<span class="literal">true</span>&#125;);  </span><br><span class="line">    <span class="keyword">if</span>(node.nodes!=<span class="literal">null</span>&amp;&amp;node.nodes.length&gt;<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> node.nodes)&#123;  </span><br><span class="line">            uncheckAllSon(node.nodes[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>treeview</tag>
        <tag>bootstrap</tag>
        <tag>前端开发框架</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab备份数据库发现一直提示exp命令不存在问题处理</title>
    <url>/2021/04/08/crontab%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%91%E7%8E%B0%E4%B8%80%E7%9B%B4%E6%8F%90%E7%A4%BAexp%E5%91%BD%E4%BB%A4%E4%B8%8D%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_100.jpg"><br>首先说下前提，使用oracle用户编辑crontab，执行了一个备份oracle数据库的脚本，如果手动的执行的话是没有问题，但是放在crontab定时器里面就会发现，备份出来的文件很小，解压出来没有东西，最后经过查询发现是因为无法读取环境变量的原因</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>所有的命令需要写成绝对路径形式：<code>/usr/local/bin/docker</code></li>
<li>在shell脚本开头使用如下代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">. /etc/profile</span><br><span class="line">. ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li>在<code>/etc/crontab</code>中添加环境变量，在可执行命令之前添加命令<code>. /etc/profile;/bin/sh</code>，使得环境变量生效，例如：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">20 03 * * * . /etc/profile;/bin/sh /var/www/runoob/test.sh</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab执行脚本不生效问题（exp导出不执行）</title>
    <url>/2021/04/24/crontab%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98%EF%BC%88exp%E5%AF%BC%E5%87%BA%E4%B8%8D%E6%89%A7%E8%A1%8C%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_102.jpg"></p>
<p>最近项目上在弄数据库备份，但是当我写完脚本之后，发到测试环境上进行测试的时候，发现脚本到了定时的时间，不会执行，起初不太清楚是因为什么，经过一番查找之后，才发现是脚本在定时器中启动的时候，需要执行的对应的环境才行，也就是在执行之前需要设置对应的环境变量。目前这种问题的处理方式有两种，一种是编辑定时器任务中的启动脚本的执行环境变量。目前是有两种方案，一种是在crontab定时任务中添加相应的参数设置，另一种是在脚本中添加配置</p>
<h2 id="在定时任务中处理"><a href="#在定时任务中处理" class="headerlink" title="在定时任务中处理"></a>在定时任务中处理</h2><p>使用<code>crontab -e</code>打开定时任务编辑，然后在cron表达式和脚本之间添加<code>. ~/.bash_profile;</code>即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">30 1 * * * . ~/.bash_profile;  /bin/sh /home/oracle/autoBackupOracle.sh</span><br></pre></td></tr></table></figure>

<h2 id="在执行的脚本中处理"><a href="#在执行的脚本中处理" class="headerlink" title="在执行的脚本中处理"></a>在执行的脚本中处理</h2><p>在执行的脚本中<font color='red'>开头</font>的地方添加如下代码表示配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">exp mcsdb/mcsdb@orcl.....</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo入门知识</title>
    <url>/2019/10/17/dubbo%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_66.jpg"></p>
<h1 id="Dubbo入门知识"><a href="#Dubbo入门知识" class="headerlink" title="Dubbo入门知识"></a>Dubbo入门知识</h1><h2 id="Dubbo简介"><a href="#Dubbo简介" class="headerlink" title="Dubbo简介"></a>Dubbo简介</h2><blockquote>
<p>Apache Dubbo |ˈdʌbəʊ| is a high-performance, light weight, java based RPC framework. Dubbo offers three key functionalities, which include interface based remote call, fault tolerance &amp; load balancing, and automatic service registration &amp; discovery.</p>
</blockquote>
<p>从上面的描述可以看出Dubbo是一个高性能、轻量化的Java为基础的RPC框架，其能提供基于接口的远程调用，容错、负载均衡以及自动服务注册和发现。从功能上来看是和<code>SpringCloud</code>一样，包含服务注册、订阅、治理等方面的功能。</p>
<h2 id="工作原理解析图"><a href="#工作原理解析图" class="headerlink" title="工作原理解析图"></a>工作原理解析图</h2><img src="/2019/10/17/dubbo%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/screenshot_1.png" class="">
<h3 id="节点说明"><a href="#节点说明" class="headerlink" title="节点说明"></a>节点说明</h3><ul>
<li>Registry：服务注册于发现的注册中心</li>
<li>Consumer：调用远程服务的消费方</li>
<li>Provider：暴露服务的服务提供方</li>
<li>Monitor：统计服务调用次数和调用时间监控中心</li>
<li>Container：服务器运行容器</li>
</ul>
<h3 id="过程说明"><a href="#过程说明" class="headerlink" title="过程说明"></a>过程说明</h3><ul>
<li>0：服务容器负责启动，加载，运行服务提供者</li>
<li>1：服务提供者在启动时，向注册中心注册自己提供的服务</li>
<li>2：服务消费者在启动时，向注册中心订阅自己所需要的服务</li>
<li>3：注册中心返回服务提供者地址列表给消费者，如有变更，注册中心将基于长链接推送边封数据给消费者</li>
<li>4：服务消费者，从提供者地址列表中，基于软负载均衡酸防，西安一台提供者进行调用，如果调用失败，再选择另一台调用</li>
<li>5：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li>
</ul>
<h2 id="简单实践"><a href="#简单实践" class="headerlink" title="简单实践"></a>简单实践</h2><p>该简单实践是Dubbo官网的Quick start</p>
]]></content>
      <categories>
        <category>后端框架</category>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson中SerializerFeature的用法及中文注解</title>
    <url>/2020/02/22/fastjson%E4%B8%ADSerializerFeature%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E4%B8%AD%E6%96%87%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_76.jpg"></p>
<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>今天在给前端写接口的时候，发现了个问题，当从数据库中查数据时，如果数据字段是NULL，就会出现通过JSON.toJSONString转化后的字符串中，字段值为NULL的字段都消失了，这个对于前端来说可算是噩梦，因为他们给页面赋值的时候，会出现字段值为<code>undefined</code>的情况，当然，这个他们也是可以解决的，直接使用<code>this.data.objval = res.data.objval||&#39;&#39;;</code>就能够解决，但是本着方便他人就是方便自己的原则，还是查了下，到底问题出在了哪里</p>
<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>解决问题的方案，查了下，载使用JSON.toJSONString的时候，它不仅接收需要转化的对象，还会接收一个对象，也就是标题SerializerFeature的一个变量，可以讲待转化对象中的值为null的对象，转化为空字符串，下面是对应的解释内容及使用方法</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">QuoteFieldNames</td>
<td align="left">输出key时是否使用双引号,默认为true</td>
</tr>
<tr>
<td align="left">UseSingleQuotes</td>
<td align="left">使用单引号而不是双引号,默认为false</td>
</tr>
<tr>
<td align="left">WriteMapNullValue</td>
<td align="left">是否输出值为null的字段,默认为false</td>
</tr>
<tr>
<td align="left">WriteEnumUsingToString</td>
<td align="left">Enum输出name()或者original,默认为false</td>
</tr>
<tr>
<td align="left">UseISO8601DateFormat</td>
<td align="left">Date使用ISO8601格式输出，默认为false</td>
</tr>
<tr>
<td align="left">WriteNullListAsEmpty</td>
<td align="left">List字段如果为null,输出为[],而非null</td>
</tr>
<tr>
<td align="left">WriteNullStringAsEmpty</td>
<td align="left">字符类型字段如果为null,输出为””,而非null</td>
</tr>
<tr>
<td align="left">WriteNullNumberAsZero</td>
<td align="left">数值字段如果为null,输出为0,而非null</td>
</tr>
<tr>
<td align="left">WriteNullBooleanAsFalse</td>
<td align="left">Boolean字段如果为null,输出为false,而非null</td>
</tr>
<tr>
<td align="left">SkipTransientField</td>
<td align="left">如果是true，类中的Get方法对应的Field是transient，序列化时将会被忽略。默认为true</td>
</tr>
<tr>
<td align="left">SortField</td>
<td align="left">按字段名称排序后输出。默认为false</td>
</tr>
<tr>
<td align="left">WriteTabAsSpecial</td>
<td align="left">把\t做转义输出，默认为false</td>
</tr>
<tr>
<td align="left">PrettyFormat</td>
<td align="left">结果是否格式化,默认为false</td>
</tr>
<tr>
<td align="left">WriteClassName</td>
<td align="left">序列化时写入类型信息，默认为false。反序列化是需用到</td>
</tr>
<tr>
<td align="left">DisableCircularReferenceDetect</td>
<td align="left">消除对同一对象循环引用的问题，默认为false</td>
</tr>
<tr>
<td align="left">WriteSlashAsSpecial</td>
<td align="left">对斜杠’/’进行转义</td>
</tr>
<tr>
<td align="left">BrowserCompatible</td>
<td align="left">将中文都会序列化为\uXXXX格式，字节数会多一些，但是能兼容IE 6，默认为false</td>
</tr>
<tr>
<td align="left">WriteDateUseDateFormat</td>
<td align="left">全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;<br>JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</td>
</tr>
<tr>
<td align="left">DisableCheckSpecialChar</td>
<td align="left">一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。<br>如果不需要转义，可以使用这个属性。默认为false</td>
</tr>
<tr>
<td align="left">NotWriteRootClassName</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">BeanToArray</td>
<td align="left">将对象转为array输出</td>
</tr>
<tr>
<td align="left">WriteNonStringKeyAsString</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">NotWriteDefaultValue</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">BrowserSecure</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">IgnoreNonFieldGetter</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">WriteEnumUsingName</td>
<td align="left">含义</td>
</tr>
</tbody></table>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializerFeatureTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Word word;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        word = <span class="keyword">new</span> Word();</span><br><span class="line">        word.setA(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        word.setB(<span class="number">2</span>);</span><br><span class="line">        word.setC(<span class="keyword">true</span>);</span><br><span class="line">        word.setD(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        word.setE(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        word.setF(<span class="keyword">null</span>);</span><br><span class="line">        word.setDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setId(<span class="number">1</span>);</span><br><span class="line">        user1.setOld(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;用户1&quot;</span>);</span><br><span class="line">        user1.setAdd(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setId(<span class="number">2</span>);</span><br><span class="line">        user2.setOld(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;用户2&quot;</span>);</span><br><span class="line">        user2.setAdd(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User();</span><br><span class="line">        user3.setId(<span class="number">3</span>);</span><br><span class="line">        user3.setOld(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;用户3&quot;</span>);</span><br><span class="line">        user3.setAdd(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(<span class="keyword">null</span>);</span><br><span class="line">        list.add(user1);</span><br><span class="line"></span><br><span class="line">        word.setList(list);</span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; map = <span class="keyword">new</span> HashedMap();</span><br><span class="line">        map.put(<span class="string">&quot;mapa&quot;</span>, <span class="string">&quot;mapa&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapo&quot;</span>, <span class="string">&quot;mapo&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mapz&quot;</span>, <span class="string">&quot;mapz&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;user1&quot;</span>, user1);</span><br><span class="line">        map.put(<span class="string">&quot;user3&quot;</span>, user3);</span><br><span class="line">        map.put(<span class="string">&quot;user4&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">        word.setMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        init();</span><br><span class="line"><span class="comment">//        useSingleQuotes();</span></span><br><span class="line"><span class="comment">//        writeMapNullValue();</span></span><br><span class="line"><span class="comment">//        useISO8601DateFormat();</span></span><br><span class="line"><span class="comment">//        writeNullListAsEmpty();</span></span><br><span class="line"><span class="comment">//        writeNullStringAsEmpty();</span></span><br><span class="line"><span class="comment">//        sortField();</span></span><br><span class="line"><span class="comment">//        prettyFormat();</span></span><br><span class="line"><span class="comment">//        writeDateUseDateFormat();</span></span><br><span class="line"><span class="comment">//        beanToArray();</span></span><br><span class="line">        showJsonBySelf();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 9:自定义</span></span><br><span class="line"><span class="comment">     * 格式化输出</span></span><br><span class="line"><span class="comment">     * 显示值为null的字段</span></span><br><span class="line"><span class="comment">     * 将为null的字段值显示为&quot;&quot;</span></span><br><span class="line"><span class="comment">     * DisableCircularReferenceDetect:消除循环引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showJsonBySelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(JSON.toJSONString(word));</span><br><span class="line">        System.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat,</span><br><span class="line">                SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,</span><br><span class="line">                SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">                SerializerFeature.WriteNullListAsEmpty));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 8:</span></span><br><span class="line"><span class="comment">     * 将对象转为array输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beanToArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        word.setMap(<span class="keyword">null</span>);</span><br><span class="line">        word.setList(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(word));</span><br><span class="line">        System.out.println(JSON.toJSONString(word, SerializerFeature.BeanToArray));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7:</span></span><br><span class="line"><span class="comment">     * WriteDateUseDateFormat:全局修改日期格式,默认为false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeDateUseDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        word.setMap(<span class="keyword">null</span>);</span><br><span class="line">        word.setList(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(word));</span><br><span class="line">        JSON.DEFFAULT_DATE_FORMAT = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">        System.out.println(JSON.toJSONString(word, SerializerFeature.WriteDateUseDateFormat));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6:</span></span><br><span class="line"><span class="comment">     * PrettyFormat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prettyFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        word.setMap(<span class="keyword">null</span>);</span><br><span class="line">        word.setList(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(word));</span><br><span class="line">        System.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SortField:按字段名称排序后输出。默认为false</span></span><br><span class="line"><span class="comment">     * 这里使用的是fastjson：为了更好使用sort field martch优化算法提升parser的性能，fastjson序列化的时候，</span></span><br><span class="line"><span class="comment">     * 缺省把SerializerFeature.SortField特性打开了。</span></span><br><span class="line"><span class="comment">     * 反序列化的时候也缺省把SortFeidFastMatch的选项打开了。</span></span><br><span class="line"><span class="comment">     * 这样，如果你用fastjson序列化的文本，输出的结果是按照fieldName排序输出的，parser时也能利用这个顺序进行优化读取。</span></span><br><span class="line"><span class="comment">     * 这种情况下，parser能够获得非常好的性能。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(JSON.toJSONString(word));</span><br><span class="line">        System.out.println(JSON.toJSONString(word, SerializerFeature.SortField));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  5:</span></span><br><span class="line"><span class="comment">     *  WriteNullStringAsEmpty:字符类型字段如果为null,输出为&quot;&quot;,而非null</span></span><br><span class="line"><span class="comment">     *  需要配合WriteMapNullValue使用，现将null输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeNullStringAsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        word.setE(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word));</span><br><span class="line">        System.out.println(<span class="string">&quot;设置WriteMapNullValue后：&quot;</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue));</span><br><span class="line">        System.out.println(<span class="string">&quot;设置WriteMapNullValue、WriteNullStringAsEmpty后：&quot;</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4:</span></span><br><span class="line"><span class="comment">     * WriteNullListAsEmpty:List字段如果为null,输出为[],而非null</span></span><br><span class="line"><span class="comment">     * 需要配合WriteMapNullValue使用，现将null输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeNullListAsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        word.setList(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word));</span><br><span class="line">        System.out.println(<span class="string">&quot;设置WriteNullListAsEmpty后：&quot;</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3:</span></span><br><span class="line"><span class="comment">     * UseISO8601DateFormat:Date使用ISO8601格式输出，默认为false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useISO8601DateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word));</span><br><span class="line">        System.out.println(<span class="string">&quot;设置UseISO8601DateFormat后：&quot;</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word, SerializerFeature.UseISO8601DateFormat));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2:</span></span><br><span class="line"><span class="comment">     * WriteMapNullValue:是否输出值为null的字段,默认为false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeMapNullValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word));</span><br><span class="line">        System.out.println(<span class="string">&quot;设置WriteMapNullValue后：&quot;</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1:</span></span><br><span class="line"><span class="comment">     * UseSingleQuotes:使用单引号而不是双引号,默认为false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useSingleQuotes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word));</span><br><span class="line">        System.out.println(<span class="string">&quot;设置useSingleQuotes后：&quot;</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(word, SerializerFeature.UseSingleQuotes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然上面说到JSON.toJSONString会出现这种问题，那么@Responsebody估计也会出现这种问题吧，没做深究，如果有的话，后期再来补这篇文章吧</p>
<blockquote>
<p>本文引自：<a href="https://blog.csdn.net/u010246789/article/details/52539576">fastjson SerializerFeature详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>fastjson</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>frp-内网映射 服务端部署</title>
    <url>/2019/02/19/frp-%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_31.jpg"></p>
<h2 id="frp作用"><a href="#frp作用" class="headerlink" title="frp作用"></a>frp作用</h2><ul>
<li>利用处于内网或者防火墙后的服务器，对外网环境提供HTTP或HTTPS服务</li>
<li>对于http、https服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口</li>
<li>对往往提供tcp和udp服务，可以在夹中ssh访问处于公司内网的主机</li>
</ul>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><ol>
<li>配置前准备<br>公网服务器1台及独立固定IP地址</li>
</ol>
<h2 id="服务器安装"><a href="#服务器安装" class="headerlink" title="服务器安装"></a>服务器安装</h2><ol>
<li>首先下载frp，下载页面点击<a href="https://github.com/fatedier/frp/releases">frp下载地址</a>，下载的时候根据自己服务器和映射主机的需求进行判断下载    </li>
</ol>
<img src="/2019/02/19/frp-%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/screenshot_1.png" class="">

<ol start="2">
<li>服务器(Linux)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local</span><br><span class="line">mkdir frp</span><br><span class="line"></span><br><span class="line">#上传frp解压出来的内容到该目录下</span><br><span class="line">#删除和客户端相关的内容  frpc*(删掉frpc、frpc.ini两个文件)</span><br><span class="line">rm -rf frpc*</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编辑frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000           #与客户端绑定的进行通信的端口</span><br><span class="line">vhost_http_port &#x3D; 80     #访问的域名后面跟的端口号，如果是80，直接域名到项目就能访问，如果其他，需要在域名后跟这个端口号然后再跟项目名访问</span><br></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">.&#x2F;frps -c .&#x2F;frps.ini # 前台启动</span><br><span class="line">#创建日志文件夹</span><br><span class="line">mkdir logs</span><br><span class="line">nohup .&#x2F;frps -c frps.ini &gt; .&#x2F;logs&#x2F;print.out 2&gt;&amp;1 &amp;  #后台启动命令，并输出日志到print.out 这个地方要提前创建好文件路径</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>客户端<br>首先删掉frps、frps.ini两个文件,然后再进行配置,然后编辑frpc.ini<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; xxx.xxx.xxx.xxx   #公网服务器ip</span><br><span class="line">server_port &#x3D; 7000            #与服务端bind_port一致</span><br><span class="line"></span><br><span class="line">## 公网访问内部web服务器以http方式</span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http         #访问协议</span><br><span class="line">local_ip &#x3D; 192.168.2.62</span><br><span class="line">local_port &#x3D; 8080   #本地启动服务的端口号</span><br><span class="line">custom_domains &#x3D; frp.xxx.cn   #所绑定的公网服务器域名，一级、二级域名都可以</span><br></pre></td></tr></table></figure></li>
<li>启动frpc<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></li>
<li>设置A记录将二级域名（frp.xxx.cn）指向frp服务器</li>
<li>现在你就可以通过url：frp.xxx.cn/Projectname访问你的项目了</li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>frp</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>frp</tag>
        <tag>内网映射</tag>
        <tag>服务端</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery控制组合按钮及div下拉效果及鼠标悬浮显示div效果</title>
    <url>/2019/02/01/jQuery%E6%8E%A7%E5%88%B6%E7%BB%84%E5%90%88%E6%8C%89%E9%92%AE%E5%8F%8Adiv%E4%B8%8B%E6%8B%89%E6%95%88%E6%9E%9C%E5%8F%8A%E9%BC%A0%E6%A0%87%E6%82%AC%E6%B5%AE%E6%98%BE%E7%A4%BAdiv%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_28.jpg"></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="/2019/02/01/jQuery%E6%8E%A7%E5%88%B6%E7%BB%84%E5%90%88%E6%8C%89%E9%92%AE%E5%8F%8Adiv%E4%B8%8B%E6%8B%89%E6%95%88%E6%9E%9C%E5%8F%8A%E9%BC%A0%E6%A0%87%E6%82%AC%E6%B5%AE%E6%98%BE%E7%A4%BAdiv%E6%95%88%E6%9E%9C/screenshot_1.gif" class="">

<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;searchTypeBtn&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 2px;margin-left:2px;background-color: #000 !important&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-sort&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:3px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;searchType&quot;</span> <span class="attr">style</span>=<span class="string">&quot;z-index:99;position: absolute;width: 97px;left: -70px;top: 25px;display: none;color:#000;background-color: #fff;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin:0px&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;not empty moduleTypeList&#125;&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;moduleTypeList&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;moduleType&quot;</span> <span class="attr">varStatus</span>=<span class="string">&quot;vs&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span> <span class="attr">onclick</span>=<span class="string">&quot;updateModuleList(&#x27;$&#123;moduleType.CODE_VALUE&#125;&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>$&#123;moduleType.CODE_NAME&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#searchTypeBtn&quot;</span>).hover(</span><br><span class="line">		<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			$(<span class="string">&quot;.searchType&quot;</span>).slideDown(<span class="number">400</span>);</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			$(<span class="string">&quot;.searchType&quot;</span>).slideUp(<span class="number">400</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>JQuery</category>
        <category>应用</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
        <tag>应用</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery获取input标签的值(text,radio,checkbox)</title>
    <url>/2019/02/01/jQuery%E8%8E%B7%E5%8F%96input%E6%A0%87%E7%AD%BE%E7%9A%84%E5%80%BC-text-radio-checkbox/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_27.jpg"></p>
<blockquote>
<p>本文章转自<a href="https://blog.csdn.net/qq_34120430/article/details/81608722">《jQuery获取input标签的值(text,radio,checkbox)》</a></p>
</blockquote>
<p><strong><font color='red'>这篇文章有个比较好的地方，就是遍历设置复选框的选中状态和获取复选框选中的值并拼装成对应的数据</font></strong></p>
<h3 id="获取页面上的值"><a href="#获取页面上的值" class="headerlink" title="获取页面上的值"></a>获取页面上的值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;zh&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>  /&gt;</span>男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>女</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;swim&quot;</span> /&gt;</span>swim</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> /&gt;</span>game</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;video&quot;</span> /&gt;</span>video</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">      <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;look&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查看注册用户信息&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#submit&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> zh = $(<span class="string">&quot;#zh&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> sex = $(<span class="string">&quot;[name=&#x27;sex&#x27;]:checked&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> hobbies = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="comment">//将hobby复选框的值 总和成 ,, 的形式</span></span></span><br><span class="line"><span class="javascript">	$(<span class="string">&quot;[name=&#x27;hobby&#x27;]:checked&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		hobbies += $(<span class="built_in">this</span>).val()+<span class="string">&quot;,&quot;</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	hobbies = hobbies.slice(0,-1);</span><br><span class="line"><span class="javascript">	<span class="comment">//用json传值</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> user = <span class="keyword">new</span> User(zh,sex,hobbies);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(jsonUser);</span></span><br><span class="line"><span class="javascript">	<span class="built_in">localStorage</span>.setItem(<span class="string">&quot;user&quot;</span>,jsonUser);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#look&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">window</span>.location=<span class="string">&quot;用户信息.html&quot;</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">      	<span class="attribute">margin</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      	<span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="css">      	<span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;user.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;zh&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>  /&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;swim&quot;</span> /&gt;</span>swim</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> /&gt;</span>game</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;video&quot;</span> /&gt;</span>video</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> jsonUser = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;user&quot;</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(jsonUser);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> userClass = <span class="keyword">new</span> User();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="comment">//当json中的key 与 定义类 User中的key (属性名)相同时 赋值</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> userKey <span class="keyword">in</span> user)&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">for</span>(<span class="keyword">var</span> userClasskey <span class="keyword">in</span> userClass)&#123;</span></span><br><span class="line">			if(userKey == userClasskey)&#123;</span><br><span class="line">				userClass[userClasskey]=user[userKey];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	$(<span class="string">&quot;#zh&quot;</span>).val(userClass.getName());</span></span><br><span class="line"><span class="javascript">	$(<span class="string">&quot;[name=&#x27;sex&#x27;][value=&quot;</span>+userClass.getSex()+<span class="string">&quot;]&quot;</span>).attr(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> hobbies = userClass.getHobby().split(<span class="string">&quot;,&quot;</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hobbies.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;[name=&#x27;hobby&#x27;][value=&quot;</span>+hobbies[i]+<span class="string">&quot;]&quot;</span>).attr(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>);</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>JQuery</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>java遍历Map的方法</title>
    <url>/2019/01/30/java%E9%81%8D%E5%8E%86Map%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_19.jpg"></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>遍历Map在Java中有好几种方式，但各自方式都有优缺点，不同的方式应用在不同的应用场景中</p>
<h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><h3 id="keySet-values"><a href="#keySet-values" class="headerlink" title="keySet values"></a>keySet values</h3><p>在使用的过程中只是用到了Map的key或者value，这种是最简单的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KeySet 获取key</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// values 获取value</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keySet-get-key-不推荐使用"><a href="#keySet-get-key-不推荐使用" class="headerlink" title="keySet get(key)(不推荐使用)"></a>keySet get(key)(不推荐使用)</h3><p>如果同时需要key和value，可以先获取key，然后通过key获取到value，但这种方法不推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKeySetAndGetKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;:&quot;</span> + map.get(key));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet"></a>entrySet</h3><p>通过map的entrySet进行遍历，是可以同时拿到key和value的，性能上更好一点，一般是用这种方式获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator的优势是可以在遍历过程中删除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Iterator entrySet 获取key and value</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">   <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">     Map.Entry&lt;Integer, Integer&gt; entry = it.next();</span><br><span class="line">     System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">     <span class="comment">// it.remove(); 删除元素</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p> Lambda是从java1.8开始支持的，语法更简洁，可以拿到key和value，但性能稍微低点<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>单纯获取key或者value，使用keySet</li>
<li>需要同时获取key和value，使用entrySet</li>
<li>遍历过程中如果需要删除操作，使用Iterator</li>
<li>遍历过程中需要添加元素，可以新建一个临时map，遍历完成后，把临时map塞到最终map当中</li>
</ul>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>遍历</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>js 基础知识</title>
    <url>/2019/01/23/js-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_2.jpg"></p>
<h3 id="js字符串转int-parseInt"><a href="#js字符串转int-parseInt" class="headerlink" title="js字符串转int(parseInt)"></a>js字符串转int(parseInt)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(parseInt(childNode)+1);</span><br></pre></td></tr></table></figure>

<h3 id="js删除Object对象中的属性"><a href="#js删除Object对象中的属性" class="headerlink" title="js删除Object对象中的属性"></a>js删除Object对象中的属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete obj.attr</span><br></pre></td></tr></table></figure>

<h3 id="js获取时间的用法"><a href="#js获取时间的用法" class="headerlink" title="js获取时间的用法"></a>js获取时间的用法</h3><ul>
<li>获取时间<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获取系统的时间</span></span><br></pre></td></tr></table></figure></li>
<li>获取特定格式的日期<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myDate.getYear(); <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString(); <span class="comment">//获取当前时间</span></span><br><span class="line">myDate.toLocaleString( ); <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js 操作页面打印操作（不使用插件）</title>
    <url>/2019/01/23/js-%E6%93%8D%E4%BD%9C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h1 id="页面打印"><a href="#页面打印" class="headerlink" title="页面打印"></a>页面打印</h1><p>​    打印之前没怎么接触过，最近项目有需求在系统中实现打印合同的功能，系统中的合同是用Bootstrap实现的html页面，因此就查阅资料，发现window.print方法可以在不使用外部打印插件的前提下，可以进行页面的打印操作，这种既简单又好操作，但是存在一个缺点是：<font color='red'>页面内容的替换</font></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>实现原理很简单：是通过页面替换到window.document.body中的内容，然后就可以用window.print就可以打印window.document.body中的内容</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;print-content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;width: 210mm;height: 297mm&quot;</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> bdhtml = <span class="built_in">window</span>.document.body.innerHTML;<span class="comment">//获取当前页的html代码</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//获取需要打印的html代码</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.document.body.innerHTML = $(<span class="string">&quot;#print-content&quot;</span>)[<span class="number">0</span>].innerHTML;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.print();</span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.document.body.innerHTML = bdhtml;<span class="comment">//还原页面内容</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><img src="/2019/01/23/js-%E6%93%8D%E4%BD%9C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%89/screenshort_1.png" class="">

<h3 id="Firfox和IE"><a href="#Firfox和IE" class="headerlink" title="Firfox和IE"></a>Firfox和IE</h3><p>这两个浏览器是没有打印预览的，是直接弹出打印页面的</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="打印的时候出现页眉页脚问题处理"><a href="#打印的时候出现页眉页脚问题处理" class="headerlink" title="打印的时候出现页眉页脚问题处理"></a>打印的时候出现页眉页脚问题处理</h3><p>Chrome打印的时候会出现页眉和页脚中有地址的问题，可以直接点击上图中左侧的页眉页脚中取消勾选</p>
<h3 id="打印时出现Bootstrap布局失效的问题"><a href="#打印时出现Bootstrap布局失效的问题" class="headerlink" title="打印时出现Bootstrap布局失效的问题"></a>打印时出现Bootstrap布局失效的问题</h3><p><code>col-xs-4</code>为Bootstrap中的自适应样式，如果不修改的时候，会出现本来在一行中的内容会出现都成一列的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">col-lg-4</span><br><span class="line">修改为</span><br><span class="line">col-xs-4</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<img src="/2019/01/23/js-%E6%93%8D%E4%BD%9C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%89/screenshot_2.png" class="">
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>Javascript实例</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>打印</tag>
      </tags>
  </entry>
  <entry>
    <title>js 遍历JSON</title>
    <url>/2019/01/23/js-%E9%81%8D%E5%8E%86JSON/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_4.jpg"></p>
<blockquote><p>背景说明：<br>常规下一般是用不到Json对象的遍历的，但是如果要做一些公共方法的时候，有可能会用到，比如说后端扔给你一个json串，需要你把数据反显到页面上，这种就需要进行处理了，遍历扔给你json串，然后获取和页面上匹配的内容，进行赋值操作，当然这个过程中还得需要判断控件的类型，毕竟存在一些特殊类型的控件，比如说文件上传和回显、复选框、单选框等等特殊控件</p>
</blockquote>

<h2 id="遍历有规律的JSON对象"><a href="#遍历有规律的JSON对象" class="headerlink" title="遍历有规律的JSON对象"></a>遍历有规律的JSON对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">packJson = [</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;nikita&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;1111&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;tony&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;2222&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> packJson)&#123;<span class="comment">//遍历json数组时，这么写p为索引，0,1</span></span><br><span class="line"></span><br><span class="line">  alert(packJson[p].name + <span class="string">&quot; &quot;</span> + packJson[p].password);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遍历无规律的JSON对象"><a href="#遍历无规律的JSON对象" class="headerlink" title="遍历无规律的JSON对象"></a>遍历无规律的JSON对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> json = [</span><br><span class="line">　　&#123;<span class="attr">dd</span>:<span class="string">&#x27;SB&#x27;</span>,<span class="attr">AA</span>:<span class="string">&#x27;东东&#x27;</span>,<span class="attr">re1</span>:<span class="number">123</span>&#125;,</span><br><span class="line">　　&#123;<span class="attr">cccc</span>:<span class="string">&#x27;dd&#x27;</span>,<span class="attr">lk</span>:<span class="string">&#x27;1qw&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=json.length;i&lt;l;i++)&#123;</span><br><span class="line">　　<span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> json[i])&#123;</span><br><span class="line">　　　　alert(key+<span class="string">&#x27;:&#x27;</span>+json[i][key]);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>Javascript实例</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Json</tag>
      </tags>
  </entry>
  <entry>
    <title>js动态创建a标签并添加事件</title>
    <url>/2019/01/25/js%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAa%E6%A0%87%E7%AD%BE%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_1.jpg"></p>
<blockquote>
<p>项目中有一个新需求，前后台分离，然后前台需要拿到数据后动态的创建a标签，并且给a标签上添加上事件，而且事件的参数是不一样的</p>
</blockquote>
<p>下面是一种方法，可以尝试下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; datalist.length;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> innerText = datalist[i].DOC_NAME</span><br><span class="line">        a.innerHTML=innerText;</span><br><span class="line">        a.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();  <span class="comment">//取消默认事件，指a标签</span></span><br><span class="line">            alert(<span class="number">121</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;#all-items&quot;</span>).append(a);</span><br><span class="line"></span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
        <category>Javascript实例</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>动态添加事件</tag>
      </tags>
  </entry>
  <entry>
    <title>js获取时间</title>
    <url>/2019/03/02/js%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_42.jpg"></p>
<h2 id="获取基础时间数据"><a href="#获取基础时间数据" class="headerlink" title="获取基础时间数据"></a>获取基础时间数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获取系统的当前时间</span></span><br></pre></td></tr></table></figure>

<h2 id="格式化基础时间"><a href="#格式化基础时间" class="headerlink" title="格式化基础时间"></a>格式化基础时间</h2><p>根据需求，格式化获取到的基础数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myDate.getYear();<span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString(); <span class="comment">//获取当前时间</span></span><br><span class="line">myDate.toLocaleString( ); <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发语言</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>获取时间</tag>
      </tags>
  </entry>
  <entry>
    <title>layui下拉及复选动态设置disabled、checked及onchange监听</title>
    <url>/2019/02/11/layui%E4%B8%8B%E6%8B%89%E5%8F%8A%E5%A4%8D%E9%80%89%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AEdisabled%E3%80%81checked%E5%8F%8Aonchange%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_24.jpg"></p>
<blockquote>
<p>layui是非模块化引入的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;plugins/layuiv-2.3.0/css/layui.css&quot;</span>&gt;</span></span><br><span class="line">**********************</span><br><span class="line">页面代码</span><br><span class="line">*********************</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;plugins/layuiv-2.3.0/layui.all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>审批意见<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;APPVTYPE&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;appvtype&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span> <span class="attr">lay-search</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;not empty appvTypeList&#125;&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;appvTypeList&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;appvType&quot;</span> <span class="attr">varStatus</span>=<span class="string">&quot;vs&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;appvType.APPR_CODE&#125;&quot;</span>&gt;</span>$&#123;appvType.APPR_NAME&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>拒件理由<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;REFUSALREG&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span> <span class="attr">lay-search</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;not empty refusalRegList&#125;&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;refusalRegList&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;refusalReg&quot;</span> <span class="attr">varStatus</span>=<span class="string">&quot;vs&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;refusalReg.CODE_VALUE&#125;&quot;</span>&gt;</span>$&#123;refusalReg.CODE_NAME&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like1[write]&quot;</span> <span class="attr">lay-skin</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">title</span>=<span class="string">&quot;加入黑名单&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BLACKLIST&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="js代码（一定要注意下面的重新渲染）"><a href="#js代码（一定要注意下面的重新渲染）" class="headerlink" title="js代码（一定要注意下面的重新渲染）"></a>js代码（一定要注意下面的重新渲染）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = layui.form;<span class="comment">//初始化form</span></span><br><span class="line">form.on(<span class="string">&#x27;select(appvtype)&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">//监听下拉框onchange</span></span><br><span class="line">	<span class="keyword">if</span>(data.value==<span class="string">&quot;02&quot;</span>)&#123;</span><br><span class="line">		$(<span class="string">&quot;select[name^=&#x27;REFUSALREG&#x27;]&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);<span class="comment">//设置下拉框为非只读</span></span><br><span class="line">		$(<span class="string">&quot;#BLACKLIST&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);<span class="comment">//设置复选框为非只读</span></span><br><span class="line">		form.render();<span class="comment">//重新渲染所有元素（必须得进行重新渲染，要不没法正常显示）</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;select[name^=&#x27;REFUSALREG&#x27;]&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>,<span class="string">&quot;disabled&quot;</span>);<span class="comment">//设置下拉框为只读</span></span><br><span class="line">		$(<span class="string">&quot;#BLACKLIST&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>,<span class="string">&quot;disabled&quot;</span>);<span class="comment">//设置复选框为只读</span></span><br><span class="line">		$(<span class="string">&quot;select[name^=&#x27;REFUSALREG&#x27;]&quot;</span>).val(<span class="string">&quot;&quot;</span>);<span class="comment">//清空下拉框选中的值</span></span><br><span class="line">		$(<span class="string">&quot;#BLACKLIST&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span>);<span class="comment">//清空复选框选中的值</span></span><br><span class="line">		form.render();<span class="comment">//重新渲染所有元素（必须得重新渲染，要不没法正常显示）</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>layui</category>
      </categories>
      <tags>
        <tag>前端开发框架</tag>
        <tag>layui</tag>
        <tag>下拉框、复选框</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 知识点</title>
    <url>/2019/01/28/mybatis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_17.jpg"></p>
<h2 id="mybatis-返回Map类型key改为小写"><a href="#mybatis-返回Map类型key改为小写" class="headerlink" title="mybatis 返回Map类型key改为小写"></a>mybatis 返回Map类型key改为小写</h2><blockquote>
<p><font color='red'>当使用mybatis查询数据库的时候，会出现查询出来的Map中字段都是大写的，需要进行处理，处理的方法如下</font>  </p>
</blockquote>
<ol>
<li>添加别名</li>
<li>别名上添加双引号，查询出来的就是小写了</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">select t.name as &quot;sName&quot;,t.sex as &quot;sSex&quot;</span><br><span class="line">        from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis-saveOrUpdate写法"><a href="#MyBatis-saveOrUpdate写法" class="headerlink" title="MyBatis saveOrUpdate写法"></a>MyBatis saveOrUpdate写法</h2><p>如果按照常规的套路，肯定是现根据ID查询下是否存在，然后如果存在，则走更新方法，如果不存在，走新增方法，但是这种写法真的感觉比较麻烦</p>
<h3 id="selectKey实现saveOrUpdate"><a href="#selectKey实现saveOrUpdate" class="headerlink" title="selectKey实现saveOrUpdate"></a>selectKey实现saveOrUpdate</h3><ol>
<li>首先使用<code>selectKey</code>标签查询是否存在满足条件的数据，如果有那么<code>count</code>会大于0，没有，count为0</li>
<li>如果大于0，那么走UPDATE语句，等于0，走INSERT语句<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;saveOrUpdate&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ApiAiActivitCifList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;count&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">            SELECT</span><br><span class="line">                COUNT(*) count</span><br><span class="line">            FROM</span><br><span class="line">          ....</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;count &gt; 0&quot;</span>&gt;</span></span><br><span class="line">              UPDATE ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                INSERT ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="ON-DUPLICATE-KEY-UPDATE实现saveOrUpdate"><a href="#ON-DUPLICATE-KEY-UPDATE实现saveOrUpdate" class="headerlink" title="ON DUPLICATE KEY UPDATE实现saveOrUpdate"></a><code>ON DUPLICATE KEY UPDATE</code>实现saveOrUpdate</h3><p>说明：<code>ON DUPLICATE KEY UPDATE</code> 个人理解是当主键或唯一索引发生重复的时候，走更新SQL，如果没有重复，则走新增SQL，另外还需要说明以下几点：  </p>
<ul>
<li> 第一行中的<code>keyProperty</code>是用来指定自动生成的id的字段对应Bean中属性名，这个是用作后续代码使用新增时的ID的时候使用的（像主从表，从表插入时需要主表的主键ID作为从表的外键），在执行完插入之后能直接在传入的<code>parameterType</code>对象中找到新生成的ID  </li>
<li>在<code>insert</code> SQL中需要把主键也放进去，也就是这里的<code>gift_id</code>（及时Bean对象中giftId为null，也得放），因为如果不放的话，那会出现一直插入的现象</li>
<li>在这里<code>insert</code>不需要使用<code>autoGenerateKey</code>属性，如果使用了，会出现走<code>update</code>SQL也会更新主键的情况，这样的话就很头疼，你在进入Mapper之前得先记下之前的ID，所以是画蛇添足，直接不加即可</li>
<li><code>ON DUPLICATE KEY UPDATE</code>后面直接是<code>数据库字段=Bean属性</code>不需要<code>where</code>条件，因为都已经<code>DUPLICATE</code>了，那肯定知道ID是啥了，自己就关联了，表名也是不需要的  </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveSemConfigGiftList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xydtech.sem.config.domain.SemConfigGiftList&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;giftId&quot;</span>&gt;</span></span><br><span class="line">  insert into sem_config_gift_list</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">      gift_id,</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;giftName != null  and giftName != &#x27;&#x27;&quot;</span>&gt;</span>gift_name,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gidtSum != null  and gidtSum != &#x27;&#x27;&quot;</span>&gt;</span>gidt_sum,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">      #&#123;giftId&#125;,</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;giftName != null  and giftName != &#x27;&#x27;&quot;</span>&gt;</span>#&#123;giftName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gidtSum != null  and gidtSum != &#x27;&#x27;&quot;</span>&gt;</span>#&#123;gidtSum&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">  ON DUPLICATE KEY UPDATE</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;giftName != null  and giftName != &#x27;&#x27;&quot;</span>&gt;</span>gift_name = #&#123;giftName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gidtSum != null  and gidtSum != &#x27;&#x27;&quot;</span>&gt;</span>gidt_sum = #&#123;gidtSum&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用association和collection实现MyBatis查询出来的数据中包含List和对象"><a href="#使用association和collection实现MyBatis查询出来的数据中包含List和对象" class="headerlink" title="使用association和collection实现MyBatis查询出来的数据中包含List和对象"></a>使用<code>association</code>和<code>collection</code>实现MyBatis查询出来的数据中包含List和对象</h2><p>目前假设存在四张表（用户表、机构表、角色、用户角色表），用户表中有外键deptId是机构表的主键，也就是说用户对应着一个机构；用户角色表中是多对多（用户ID和角色ID），也就是说一个用户拥有多个角色，现在需要查询出多个用户的信息，信息中包含用户的部门信息和用户的角色List，该如何实现？</p>
<img src="/2019/01/28/mybatis%E7%9F%A5%E8%AF%86%E7%82%B9/screen_shot_1.png" class="">

<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap type<span class="operator">=</span>&quot;ApiSysUser&quot; id<span class="operator">=</span>&quot;SysUserResult&quot;<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>id     property<span class="operator">=</span>&quot;userId&quot;       <span class="keyword">column</span><span class="operator">=</span>&quot;user_id&quot;      <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;userName&quot;     <span class="keyword">column</span><span class="operator">=</span>&quot;user_name&quot;    <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;dept&quot;    <span class="keyword">column</span><span class="operator">=</span>&quot;dept_id&quot; javaType<span class="operator">=</span>&quot;ApiSysDept&quot; resultMap<span class="operator">=</span>&quot;deptResult&quot; <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>collection  property<span class="operator">=</span>&quot;roles&quot;   javaType<span class="operator">=</span>&quot;java.util.List&quot;        resultMap<span class="operator">=</span>&quot;RoleResult&quot; <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;deptResult&quot; type<span class="operator">=</span>&quot;ApiSysDept&quot;<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>id     property<span class="operator">=</span>&quot;deptId&quot;   <span class="keyword">column</span><span class="operator">=</span>&quot;dept_id&quot;     <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;deptName&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;dept_name&quot;   <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;RoleResult&quot; type<span class="operator">=</span>&quot;ApiSysRole&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>id     property<span class="operator">=</span>&quot;roleId&quot;       <span class="keyword">column</span><span class="operator">=</span>&quot;role_id&quot;        <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;roleName&quot;     <span class="keyword">column</span><span class="operator">=</span>&quot;role_name&quot;      <span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;getUserByOpenId&quot; parameterType<span class="operator">=</span>&quot;String&quot; resultMap<span class="operator">=</span>&quot;SysUserResult&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">  	u.user_id,</span><br><span class="line">  	u.user_name,</span><br><span class="line">  	d.dept_id,</span><br><span class="line">  	d.dept_name,</span><br><span class="line">  	r.role_id,</span><br><span class="line">  	r.role_name</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">  	sys_user u</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys_dept d <span class="keyword">ON</span> u.dept_id <span class="operator">=</span> d.dept_id</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys_user_role ur <span class="keyword">ON</span> u.user_id <span class="operator">=</span> ur.user_id</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys_role r <span class="keyword">ON</span> r.role_id <span class="operator">=</span> ur.role_id</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xydtech.api.user.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xydtech.common.core.domain.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.ToStringBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.ToStringStyle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户对象 sys_user</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JHON</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiSysUser</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户ID */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户名称 */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 部门对象 */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;部门对象&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ApiSysDept dept;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;角色ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ApiSysRole&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="INSERT插入数据自动回填主键"><a href="#INSERT插入数据自动回填主键" class="headerlink" title="INSERT插入数据自动回填主键"></a><code>INSERT</code>插入数据自动回填主键</h2><p>常规情况插入完成就算完了，但是会存在主从表业务时，字表需要使用主表的ID作为从表的外键进行关联，然后在插入的时候一般情况下是没有主键的（自己生成随机数，雪花算法之类的、UUID的除外），所以需要在主表数据保存的同时，将主键返回给Java代码，然后Java代码通过获取到的ID进行后续业务的操作，常规的方法有两种，一种是数据库字段为自增长的时候，另一种是自定义主键  </p>
<h3 id="数组库字段为自增长的时候"><a href="#数组库字段为自增长的时候" class="headerlink" title="数组库字段为自增长的时候"></a>数组库字段为自增长的时候</h3><p>下面的<code>columnId</code>就是接受数据库自动生成的ID，代码里面可以直接从<code>GenTableColumn</code>中获取<code>columnId</code>了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertGenTableColumn&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;GenTableColumn&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;columnId&quot;</span>&gt;</span></span><br><span class="line">    insert into gen_table_column (</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tableId != null and tableId != &#x27;&#x27;&quot;</span>&gt;</span>table_id,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;columnName != null and columnName != &#x27;&#x27;&quot;</span>&gt;</span>column_name,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     )values(</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tableId != null and tableId != &#x27;&#x27;&quot;</span>&gt;</span>#&#123;tableId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;columnName != null and columnName != &#x27;&#x27;&quot;</span>&gt;</span>#&#123;columnName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义规则生成主键"><a href="#自定义规则生成主键" class="headerlink" title="自定义规则生成主键"></a>自定义规则生成主键</h3><p>这种情况下自己可以在Java代码中先生成，分别设置到主从表对象中，然后进行保存，另一种就可以使用下面的这种方法:<code>selectkey</code>是生成一个<code>key</code>，其中<code>selectkey</code>标签中的<code>keProperty</code>属性要和<code>user</code>对象中一个属性对应上，要不无法保存，直接玩之后，生成的值就可以直接在user对象中获取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">selectkey</span> <span class="attr">keProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">		select if(max(id) is null, 1, max(id) + 2) as newId from t_user</span></span></span><br><span class="line"><span class="tag"><span class="string">	&lt;/selectkey&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">	insert into t_user(user_name,age) values (#$&#123;userName&#125;,#&#123;age&#125;)</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/insert&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="sql把逗号分割的字符串转换成可以放入in条件的语句"><a href="#sql把逗号分割的字符串转换成可以放入in条件的语句" class="headerlink" title="sql把逗号分割的字符串转换成可以放入in条件的语句"></a>sql把逗号分割的字符串转换成可以放入in条件的语句</h2><h3 id="Oracle的实现方式"><a href="#Oracle的实现方式" class="headerlink" title="Oracle的实现方式"></a>Oracle的实现方式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	table1 t1</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	t1.id <span class="keyword">IN</span> (</span><br><span class="line">		<span class="keyword">SELECT</span></span><br><span class="line">			REGEXP_SUBSTR (<span class="string">&#x27;$&#123;ids&#125;&#x27;</span>, <span class="string">&#x27;[^,]+&#x27;</span>, <span class="number">1</span>, LEVEL)</span><br><span class="line">		<span class="keyword">FROM</span></span><br><span class="line">			DUAL <span class="keyword">CONNECT</span> <span class="keyword">BY</span> REGEXP_SUBSTR (<span class="string">&#x27;$&#123;ids&#125;&#x27;</span>, <span class="string">&#x27;[^,]+&#x27;</span>, <span class="number">1</span>, LEVEL) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<h3 id="MySQL的实现方式"><a href="#MySQL的实现方式" class="headerlink" title="MySQL的实现方式"></a>MySQL的实现方式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> FIND_IN_SET(id, <span class="string">&#x27;1,2,3&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>SSM</category>
        <category>MyBatis</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>大小写</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql中授权及撤销</title>
    <url>/2019/02/19/mysql%E4%B8%AD%E6%8E%88%E6%9D%83%E5%8F%8A%E6%92%A4%E9%94%80/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_24.jpg"></p>
<ol>
<li><p>grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权力</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> common_user@<span class="string">&#x27;client_ip&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> common_user@<span class="string">&#x27;client_ip&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> update <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> common_user@<span class="string">&#x27;client_ip&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">delete</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> common_user@<span class="string">&#x27;client_ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, update, <span class="keyword">delete</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> common_user@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>grant 数据库开发人员，创建表、索引、视图、存储过程、函数等权限,</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 创建、修改、删除 MySQL 数据表结构权限。</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;  </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">alter</span>  <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;  </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">drop</span>   <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 操作 MySQL 外键权限：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">references</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 操作 MySQL 临时表权限：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> temporary tables <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 操作 MySQL 索引权限：</span><br><span class="line"><span class="keyword">grant</span> index <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 操作 MySQL 视图、查看视图源代码权限：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;  </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">show</span>   <span class="keyword">view</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 操作 MySQL 存储过程、函数权限：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> routine <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">alter</span>  routine <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> developer@<span class="string">&#x27;192.168.0.%&#x27;</span>;  </span><br></pre></td></tr></table></figure></li>
<li><p>grant 普通 DBA 管理某个 MySQL 数据库的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> testdb <span class="keyword">to</span> dba@<span class="string">&#x27;localhost&#x27;</span>  </span><br></pre></td></tr></table></figure></li>
<li><p>grant 高级 DBA 管理 MySQL 中所有数据库的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> dba@<span class="string">&#x27;localhost&#x27;</span>  </span><br></pre></td></tr></table></figure></li>
<li><p>MySQL grant 权限，分别可以作用在多个层次上</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 作用在单个数据库上：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> testdb.<span class="operator">*</span> <span class="keyword">to</span> dba<span class="variable">@localhost</span>; <span class="comment">-- dba 可以查询 testdb 中的表。  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 作用在单个数据表上：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, update, <span class="keyword">delete</span> <span class="keyword">on</span> testdb.orders <span class="keyword">to</span> dba<span class="variable">@localhost</span>;  </span><br></pre></td></tr></table></figure>
<p>这里在给一个用户授权多张表时，可以多次执行以上语句。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>(user_id,username) <span class="keyword">on</span> smp.users <span class="keyword">to</span> mo_user@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123345&#x27;</span>;  </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> smp.mo_sms <span class="keyword">to</span> mo_user@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123345&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 作用在表中的列上：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>(id, se, rank) <span class="keyword">on</span> testdb.apache_log <span class="keyword">to</span> dba<span class="variable">@localhost</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 作用在存储过程、函数上：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> <span class="keyword">procedure</span> testdb.pr_add <span class="keyword">to</span> <span class="string">&#x27;dba&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>  </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> <span class="keyword">function</span> testdb.fn_add <span class="keyword">to</span> <span class="string">&#x27;dba&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>  </span><br></pre></td></tr></table></figure></li>
<li><p>查看 MySQL 用户权限<br>查看当前用户（自己）权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants;</span><br></pre></td></tr></table></figure>
<p>查看其他 MySQL 用户权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> dba<span class="variable">@localhost</span>;  </span><br></pre></td></tr></table></figure></li>
<li><p>撤销已经赋予给 MySQL 用户权限的权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">from</span> dba<span class="variable">@localhost</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>授权及撤销</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx开机启动（添加系统服务）</title>
    <url>/2019/02/18/nginx%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_7.jpg"></p>
<blockquote>
<p>Windows添加开机启动，很简单，但是Linux呢，这两天学习了一下，通过添加/etc/rc.local文件启动，但是据说这个方法很快就要被废掉了，因此又研究了一下添加系统服务，做成开机启动，这种启动方式是可以在开机之后不登录，就能启动服务的，好用！！</p>
</blockquote>
<ol>
<li>编辑service文件（文件存储在/lib/systemd/system/xxxx.service）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure></li>
<li>将一下内容拷贝进nginx.service文件中<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
</ol>
<p>  <strong>说明：</strong><br>  [Unit]:服务的说明<br>  Description:描述服务<br>  After:描述服务类别<br>  [Service]服务运行参数的设置<br>  Type=forking是后台运行的形式<br>  ExecStart为服务的具体运行命令<br>  ExecReload为重启命令<br>  ExecStop为停止命令<br>  PrivateTmp=True表示给服务分配独立的临时空间<br>  注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>  [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3保存退出。</p>
<ol start="3">
<li>设置开机启动<br><code>systemctl enable nginx.service</code></li>
<li>其他启动指令<br>启动nginx服务：<code>systemctl start nginx.service</code><br>设置开机自启动：<code>systemctl enable nginx.service</code><br>停止开机自启动：<code>systemctl disable nginx.service</code><br>查看服务当前状态：<code>systemctl status nginx.service</code><br>重新启动服务：<code>systemctl restart nginx.service</code><br>查看所有已启动的服务：<code>systemctl list-units --type=service</code></li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>开机启动</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx版本信息泄露漏洞解决</title>
    <url>/2019/01/24/nginx%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_11.jpg"></p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>nginx版本信息的泄露有可能会造成攻击者获取更多的信息</p>
</blockquote>
<p>nginx在curl的时候是能看到nginx版本信息的，具体的界面显示如下图所示,可以看到其中有个<code>Server:nginx/1.15.8</code>：</p>
<img src="/2019/01/24/nginx%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E8%A7%A3%E5%86%B3/screenshot_1.jpg" class="">

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>修改nginx主配置文件：nginx.conf,取消注释或添加配置语句<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ...省略一些配置</span></span><br><span class="line">    server_tokens off; 　　<span class="comment">#默认是注释掉的</span></span><br><span class="line">　　<span class="comment"># ...省略一些配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编辑php-fpm配置文件，如fastcgi.conf或fcgi.conf（这个配置文件名也可以自定义的，根据具体文件名修改）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到</span></span><br><span class="line">fastcgi_param SERVER_SOFTWARE nginx/<span class="variable">$nginx_version</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line">fastcgi_param SERVER_SOFTWARE nginx;</span><br></pre></td></tr></table></figure></li>
<li>重新加载nginx配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/init.d/nginx reload 或</span></span><br><span class="line"><span class="comment"># service nginx reload</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -v -X 192.168.31.7</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Tue, 13 Jul 2010 14:26:56 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安全测评</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>安全测评</tag>
        <tag>修复方案</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrok内网映射使用</title>
    <url>/2019/02/19/ngrok%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_32.jpg"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="将本地Web服务器公开到Internet"><a href="#将本地Web服务器公开到Internet" class="headerlink" title="将本地Web服务器公开到Internet"></a>将本地Web服务器公开到Internet</h3><p>ngrok允许您将在本地计算机上运行的Web服务器公开到Internet。只需告诉ngrok您的Web服务器正在侦听的端口。</p>
<p>如果您不知道您的Web服务器正在侦听的端口，则可能是端口80，HTTP的默认端口。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http 80</span><br></pre></td></tr></table></figure>
<p>当您启动ngrok时，它将在您的终端中显示您的隧道的公共URL以及有关通过隧道进行的连接的其他状态和指标信息。  </p>
<blockquote>
<p>其中 <a href="http://127.0.0.1:4040/">http://127.0.0.1:4040</a> 可以查看具体的映射请求情况</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok by @inconshreveable</span><br><span class="line"></span><br><span class="line">Tunnel Status                 online</span><br><span class="line">Version                       2.0&#x2F;2.0</span><br><span class="line">Web Interface                 http:&#x2F;&#x2F;127.0.0.1:4040</span><br><span class="line">Forwarding                    http:&#x2F;&#x2F;92832de0.ngrok.io -&gt; localhost:80</span><br><span class="line">Forwarding                    https:&#x2F;&#x2F;92832de0.ngrok.io -&gt; localhost:80</span><br><span class="line"></span><br><span class="line">Connnections                  ttl     opn     rt1     rt5     p50     p90</span><br><span class="line">                              0       0       0.00    0.00    0.00    0.00</span><br></pre></td></tr></table></figure>

<h3 id="检查您的流量"><a href="#检查您的流量" class="headerlink" title="检查您的流量"></a>检查您的流量</h3><p>ngrok提供了一个实时网络用户界面，您可以在这里查看隧道上运行的所有HTTP流量。启动ngrok后，只需在Web浏览器中打开http：// localhost：4040以检查请求详细信息。<br>尝试向您的公开网址发送请求。有了之后，请回顾一下检查用户界面。您将看到请求和响应的所有详细信息，包括时间，持续时间，标题，查询参数和请求负载以及线路上的原始字节。</p>
<h3 id="安装authtoken"><a href="#安装authtoken" class="headerlink" title="安装authtoken"></a>安装authtoken</h3><p>注册一个账号，可以获取到一个authtoken，然后通过下面的命令添加到自己的ngrok</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok authtoken &lt;YOUR_AUTHTOKEN&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-隧道"><a href="#HTTP-隧道" class="headerlink" title="HTTP 隧道"></a>HTTP 隧道</h2><h3 id="自定义子域名"><a href="#自定义子域名" class="headerlink" title="自定义子域名"></a>自定义子域名</h3><p>常规情况下，ngrok会提供一个16进制随机的域名，然后开通一个http隧道，如果需要自定义的subdomain，可以使用以下方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http -subdomain&#x3D;inconshreveable 80</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok by @inconshreveable</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Forwarding                    http:&#x2F;&#x2F;inconshreveable.ngrok.io -&gt; 127.0.0.1:80</span><br><span class="line">Forwarding                    https:&#x2F;&#x2F;inconshreveable.ngrok.io -&gt; 127.0.0.1:80</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用密码保护隧道"><a href="#使用密码保护隧道" class="headerlink" title="使用密码保护隧道"></a>使用密码保护隧道</h3><p>可以使用 <font style='background:#efefef'> -auth </font> 保证交换数据的安全性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http -auth&#x3D;&quot;username:password&quot; 8080</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="自定义域名（收费就不记录了）"><a href="#自定义域名（收费就不记录了）" class="headerlink" title="自定义域名（收费就不记录了）"></a>自定义域名（收费就不记录了）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http -region&#x3D;us -hostname&#x3D;dev.example.com 8000</span><br></pre></td></tr></table></figure>

<p>暂时比较忙，先写到这里，具体可以见这个<a href="https://ngrok.com/docs">地址</a></p>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>ngrok</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>内网映射</tag>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>scp命令使用密钥免密码传输文件</title>
    <url>/2021/04/08/scp%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%AF%86%E9%92%A5%E5%85%8D%E5%AF%86%E7%A0%81%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_101.jpg"><br>常规情况下使用<code>scp</code>命令，在输入了相关的命令之后，一般是需要输入密码进行传输的，但是大家都懂的，在定时任务的脚本里面的时候是不会有人帮你去定时输入密码的，因此只能寻找一种方案实现，寻来寻去，找到的是使用密钥的形式进行访问传送文件数据。  </p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>接收文件的服务器：192.168.1.1（假设，毕竟1.1一般都是网关）</li>
<li>发送文件的服务器：192.168.1.2<br>也就是说<code>192.168.1.2</code>通过<code>scp</code>命令把文件传递到<code>192.168.1.1</code>服务器上  </li>
</ul>
<h2 id="192-168-1-2电脑上操作"><a href="#192-168-1-2电脑上操作" class="headerlink" title="192.168.1.2电脑上操作"></a>192.168.1.2电脑上操作</h2><ol>
<li><p>生成公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令，生成客户端公钥</span></span><br><span class="line">[root@xxxxxxxcentos ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):<span class="comment"># 直接回车</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):<span class="comment"># 直接回车</span></span><br><span class="line">Enter same passphrase again:<span class="comment"># 直接回车</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:<span class="comment"># 直接回车</span></span><br><span class="line">SHA256:xxxxxxxxx/xxxxxxxx root@Vxxxxxxxxx-xxxxx</span><br><span class="line">The keys randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">| . o             |</span><br><span class="line">|. xxxxxx         |</span><br><span class="line">|.= B .           |</span><br><span class="line">|BoX * . S        |</span><br><span class="line">|oOssssss         |</span><br><span class="line">|xxxxx=..  .      |</span><br><span class="line">|B=+xxxxx .+.     |</span><br><span class="line">|oxxxxxx  .E      |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure></li>
<li><p>默认情况下会在<code>/root/.ssh/</code>下会生成几个文件，分别是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 root root  413 Apr  8 23:09 authorized_keys</span><br><span class="line">-rw------- 1 root root 1679 Apr  8 22:58 id_rsa</span><br><span class="line">-rw-r--r-- 1 root root  401 Apr  8 22:58 id_rsa.pub</span><br><span class="line">-rw-r--r-- 1 root root  177 Jul 23  2020 known_hosts</span><br></pre></td></tr></table></figure></li>
<li><p>复制一份<code>id_rsa.pub</code>，并改名为<code>authorized_keys</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxxxcentos ~]<span class="comment"># cp id_rsa.pub authorized_keys</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="192-168-1-1电脑上操作"><a href="#192-168-1-1电脑上操作" class="headerlink" title="192.168.1.1电脑上操作"></a>192.168.1.1电脑上操作</h2><ol>
<li>将电脑<code>192.168.1.2</code>上刚刚处理的<code>authorized_keys</code>文件上传到<code>192.168.1.1</code>服务器的<code>/root/.ssh/</code>文件夹下</li>
<li>这个时候从<code>192.168.1.2</code>上scp命令复制文件到<code>192.168.1.1</code>上的时候就不需要密码了<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxxxcentos ~]<span class="comment"># scp xxxx.dmp root@192.168.1.1:/root/</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>如果不是root用户的时候，生成的id_rsa.pub文件会在<code>/home/用户名/.ssh/</code>文件夹下</li>
<li>如果发送文件到远程服务器使用的用户不是root的时候，需要把authorized_keys放在对应的用户下的.ssh文件夹下</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>Sftp命令上传下载文件</title>
    <url>/2020/02/06/sftp%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_72.jpg"></p>
<blockquote>
<p>前提是这样的，最近公司的一台内网机上面只有Xshell没有Sftp，所以在上传和下载文件的时候点击了Xshell上的Sftp，发现直接跳转了一个新的bash界面，而且显示的是Sftp+当前的路径，那也就意味着是可以使用命令进行执行的，然后就查了下，果然是有的</p>
</blockquote>
<p><font color='red'>发现ssh远程和ftp好像是使用的一个端口，都是22，不知道是自己无知还是真的就是这样的</font></p>
<h1 id="远程到SFTP"><a href="#远程到SFTP" class="headerlink" title="远程到SFTP"></a>远程到SFTP</h1><ol>
<li>方法1：<br>首先在执行命令之前，得先远程到SFTP服务器上才行，常规下载XShell上，点击绿色文件夹按钮就会弹出提示没有安装XFTP，点击确认后就会自己创建一个新的页卡，页卡就会直接远程到SFTP下面</li>
<li>方法2：<br>点击顶部TAB页卡中的<code>+</code>号按钮，打开一个新的TAB页，然后执行下面的命令（当然命令中的信息需要换成你自己服务器的信息）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[E:\~]$ sftp user@ip port</span><br><span class="line"><span class="comment"># 回车后会弹出输入密码，输入密码后会显示如下信息</span></span><br><span class="line">Host <span class="string">&#x27;xxx.xxxx.xxx&#x27;</span> resolved to xxx.xxx.xxx.xxx.</span><br><span class="line">Connecting to xxx.xxx.xxx.xxx:xxx...</span><br><span class="line">Connection established.</span><br><span class="line">To escape to <span class="built_in">local</span> shell, press <span class="string">&#x27;Ctrl+Alt+]&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Your current <span class="built_in">local</span> directory is</span><br><span class="line">E:\杂七杂八\Xshell\Xshell\Sessions</span><br><span class="line"></span><br><span class="line">Type <span class="built_in">help</span> to browse available commnands.</span><br><span class="line">sftp:/root&gt;</span><br><span class="line"><span class="comment"># 接下来就能执行SFTP命令了</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="SFTP命令"><a href="#SFTP命令" class="headerlink" title="SFTP命令"></a>SFTP命令</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>ls:展示远程服务器上的文件列表</li>
<li>lls:展示本机上的文件列表</li>
</ul>
<hr>
<ul>
<li>cd:切换远程服务器上所在的路径</li>
<li>lcd:切换本机上的所在的路径</li>
</ul>
<hr>
<ul>
<li>pwd:展示远程服务器上当前所在的路径</li>
<li>lpwd:展示本机当前所在的路径</li>
</ul>
<hr>
<ul>
<li>put:将本机的文件发送到服务器上</li>
<li>get:将服务器上的文件下载到本机上</li>
</ul>
<hr>
<p>quit:退出sftp</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>展示远程服务器上的文件列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/root&gt; ls</span><br><span class="line">drwxr-xr-x    2 root     root         4096 Nov  3  2014 .kettle</span><br><span class="line">-rw-------    1 root     root           44 Jul 17  2014 .lesshst</span><br><span class="line">drwxr-xr-x    2 root     root         4096 Nov 23  2015 视频</span><br><span class="line">-rw-r--r--    1 root     root          176 Sep 23  2004 .bashrc</span><br><span class="line">-rw-------    1 root     root            0 Oct 16 17:25 .mysql_history.TMP</span><br><span class="line">-rw-------    1 root     root         4352 Oct 16 09:42 .mysql_history</span><br><span class="line">drwx------    2 root     root         4096 Mar 18  2019 .gconfd</span><br><span class="line">-rw-r--r--    1 root     root           18 May 20  2009 .bash_logout</span><br><span class="line">-rw-------    1 root     root           69 Dec 15  2016 .rediscli_history</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="lls"><a href="#lls" class="headerlink" title="lls"></a>lls</h3><p>展示本机上的文件列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/root&gt; lls</span><br><span class="line">02/06/2020 07:01上    &lt;DIR&gt;              .</span><br><span class="line">02/06/2020 07:01上    &lt;DIR&gt;              ..</span><br><span class="line">02/02/2020 06:12上                 7762  default</span><br><span class="line">02/06/2020 06:59上                   21  folder.ini</span><br><span class="line">02/06/2020 07:00上    &lt;DIR&gt;              ITL</span><br><span class="line">02/06/2020 07:01上    &lt;DIR&gt;              个人</span><br><span class="line">02/02/2020 06:12上                 7852  新建会话.xsh</span><br></pre></td></tr></table></figure>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>切换远程服务器上所在的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/root&gt; <span class="built_in">cd</span> /home/oracle</span><br><span class="line">sftp:/home/oracle&gt;</span><br></pre></td></tr></table></figure>

<h3 id="lcd"><a href="#lcd" class="headerlink" title="lcd"></a>lcd</h3><p>切换本机上的所在的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/home/oracle&gt; lcd E:\</span><br><span class="line">Local directory is now E:\</span><br></pre></td></tr></table></figure>

<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>展示远程服务器上当前所在的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/home/oracle&gt; <span class="built_in">pwd</span></span><br><span class="line">Remote directory is /home/oracle</span><br></pre></td></tr></table></figure>

<h3 id="lpwd"><a href="#lpwd" class="headerlink" title="lpwd"></a>lpwd</h3><p>展示本机当前所在的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/home/oracle&gt; lpwd</span><br><span class="line">Local directory is E:\</span><br></pre></td></tr></table></figure>

<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>将本机的文件发送到服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/home/oracle&gt; put E:\20200206.tar.gz</span><br><span class="line"><span class="comment"># 这会将E盘的20200206.tar.gz文件上传到服务器的/home/oracle下</span></span><br></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>将服务器上的文件下载到本机上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/home/oracle&gt; get 20200206.tar.gz</span><br><span class="line">Fetching /home/oracle/20200206.tar.gz to 20200206.tar.gz</span><br><span class="line">160 KB, 204 KB/sec</span><br><span class="line"><span class="comment"># 从服务器上将/home/oracle/下的20200206.tar.gz下载到当前window路径下，可以使用lpwd查看当前win的路径</span></span><br></pre></td></tr></table></figure>

<h3 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h3><p>退出sftp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp:/root&gt; quit</span><br><span class="line">Connection closing...Socket close.</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">Disconnected from remote host(xxx.xxx.xxxx:xxxx) at 17:16:42.</span><br><span class="line">Type `<span class="built_in">help</span><span class="string">&#x27; to learn how to use Xshell prompt.</span></span><br><span class="line"><span class="string">[E:\~]$</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>Sftp</category>
      </categories>
      <tags>
        <tag>SFTP</tag>
        <tag>文件上传下载</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat中docBase的配置及在Tomcat和Idea中的配置方法</title>
    <url>/2019/02/18/tomcat%E4%B8%ADdocBase%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%9D%9E%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%9B%BE%E7%89%87%E7%9A%84%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8Tomcat%E5%92%8CIdea%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_3.jpg"></p>
<h2 id="tomcat中docBase配置的三种项目部署方式"><a href="#tomcat中docBase配置的三种项目部署方式" class="headerlink" title="tomcat中docBase配置的三种项目部署方式"></a>tomcat中docBase配置的三种项目部署方式</h2><p>docBase是web应用的本地路径，path是访问tomcat服务的路径</p>
<ol>
<li>直接将项目放在webapps下面，这是最简单而且很初级的部署方式</li>
<li>在tomcat安装目录下conf文件夹下的server.xml文件中，在<code>&lt;host&gt;....&lt;/host&gt;</code>之间，插入如下语句<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;F:\eclipse3.2\workspace\hello\WebRoot&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">privileged</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在tomcat安装目录中的conf\Catalina\localhost目录下新建一个xml文件，名字随意，只要不重复，代码如下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;F:\eclipse3.2\workspace\hello\WebRoot&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">privileged</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="IDEA中配置的方法"><a href="#IDEA中配置的方法" class="headerlink" title="IDEA中配置的方法"></a>IDEA中配置的方法</h2><ol>
<li>点击下图中的<code>Edit Configurations</code>，弹出<code>Run/Debug Configurations</code>对话框<img src="/2019/02/18/tomcat%E4%B8%ADdocBase%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%9D%9E%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%9B%BE%E7%89%87%E7%9A%84%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8Tomcat%E5%92%8CIdea%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/screenshot_1.png" class=""></li>
<li>选择你的Tomcat中间件，点击中间件上的<code>Deployment</code>，并点击绿色的加号<img src="/2019/02/18/tomcat%E4%B8%ADdocBase%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%9D%9E%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%9B%BE%E7%89%87%E7%9A%84%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8Tomcat%E5%92%8CIdea%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/screenshot_2.png" class=""></li>
<li>选择<code>External Source</code>，打开选择路径界面，选择一个路径进行部署<img src="/2019/02/18/tomcat%E4%B8%ADdocBase%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%9D%9E%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%9B%BE%E7%89%87%E7%9A%84%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8Tomcat%E5%92%8CIdea%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/screenshot_3.png" class=""></li>
<li>点击<code>Apply</code>按钮，然后点击Ok就可以了</li>
</ol>
<p>本文引自<a href="https://blog.csdn.net/kitor000/article/details/80407180">Tomcat中的docbase和path</a></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat日志定时备份和Oracle数据库定时备份</title>
    <url>/2019/07/31/tomcat%E6%97%A5%E5%BF%97%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E5%92%8COracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_57.jpg"></p>
<h2 id="Oracle数据库备份"><a href="#Oracle数据库备份" class="headerlink" title="Oracle数据库备份"></a>Oracle数据库备份</h2><h3 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line"><span class="comment">#以上代码为Oracle数据库运行账号oracle的系统环境变量设置，必须添加，否则crontab任务计划不能执行。</span></span><br><span class="line">dateTime=`date +%Y%m%d` <span class="comment">#当前系统时间</span></span><br><span class="line">days=7 <span class="comment">#删除7天前的备份数据s</span></span><br><span class="line">orsid=sid <span class="comment">#oralce连接信息</span></span><br><span class="line">orowner=user <span class="comment"># 备份此用户下面的数据</span></span><br><span class="line">bakuser=user <span class="comment">#用此用户来执行备份，必须要有备份操作的权限</span></span><br><span class="line">bakpass=<span class="string">&quot;password&quot;</span> <span class="comment">#执行备注的用户密码</span></span><br><span class="line">bakdir=/home/oracle/databack <span class="comment">#备份文件路径，需要提前创建好</span></span><br><span class="line">bakdata=<span class="variable">$orowner</span><span class="string">&quot;_&quot;</span><span class="variable">$dateTime</span>.dmp <span class="comment">#备份数据库名称</span></span><br><span class="line">baklog=<span class="variable">$orowner</span><span class="string">&quot;_&quot;</span><span class="variable">$dateTime</span>.<span class="built_in">log</span> <span class="comment">#备份执行时候生成的日志文件名称</span></span><br><span class="line">ordatabak=<span class="variable">$orowner</span><span class="string">&quot;_&quot;</span><span class="variable">$dateTime</span>.tar.gz <span class="comment">#最后保存的Oracle数据库备份文件</span></span><br><span class="line">remotePath=/home/databack/ <span class="comment">#上传到远程服务器的路径</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$bakdir</span> <span class="comment">#进入备份目录</span></span><br><span class="line">mkdir -p <span class="variable">$orowner</span> <span class="comment">#按需要备份的Oracle用户创建目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$orowner</span> <span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">exp <span class="string">&#x27;user/&quot;password&quot;@orsid&#x27;</span> owner=<span class="variable">$orowner</span> file=<span class="variable">$bakdir</span>/<span class="variable">$orowner</span>/<span class="variable">$bakdata</span> <span class="built_in">log</span>=<span class="variable">$bakdir</span>/<span class="variable">$orowner</span>/<span class="variable">$baklog</span> direct=y <span class="comment">#执行备份</span></span><br></pre></td></tr></table></figure>

<h3 id="使用crontab添加定时任务"><a href="#使用crontab添加定时任务" class="headerlink" title="使用crontab添加定时任务"></a>使用crontab添加定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 1 * * * . ~/.bash_profile; /home/oracle/databack/ordatabak.sh</span><br></pre></td></tr></table></figure>

<h2 id="日志备份"><a href="#日志备份" class="headerlink" title="日志备份"></a>日志备份</h2><h3 id="日志备份脚本"><a href="#日志备份脚本" class="headerlink" title="日志备份脚本"></a>日志备份脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">logdir=<span class="string">&quot;/home/MGPLAT/logs&quot;</span></span><br><span class="line">DATE=`date <span class="string">&quot;+%Y%m%d%H%M&quot;</span>`</span><br><span class="line"><span class="built_in">export</span> DATE</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;logdir&#125;</span></span><br><span class="line"><span class="built_in">cd</span> /home/mgplat-logbak</span><br><span class="line"><span class="built_in">test</span> -d <span class="variable">$&#123;DATE&#125;</span> || mkdir <span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">cp /home/MGPLAT/logs/catalina.out /home/mgplat-logbak/<span class="variable">$&#123;DATE&#125;</span>/catalina.out</span><br><span class="line"><span class="built_in">cd</span> /home/mgplat-logbak/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">tar -zcvf <span class="variable">$&#123;DATE&#125;</span>.tar catalina.out</span><br><span class="line">rm -rf catalina.out</span><br><span class="line">sleep 2</span><br><span class="line"><span class="built_in">cd</span> /home/MGPLAT/logs</span><br><span class="line"><span class="built_in">echo</span> &gt; catalina.out</span><br></pre></td></tr></table></figure>

<h3 id="使用crontab添加定时任务-1"><a href="#使用crontab添加定时任务-1" class="headerlink" title="使用crontab添加定时任务"></a>使用crontab添加定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 0 * * * /home/mgplat-logbak/mgplatlogbackup.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
        <category>数据库备份</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>数据库备份</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app开发技巧备忘录</title>
    <url>/2020/02/18/uni-app%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_75.jpg"></p>
<h1 id="下拉框（picker）开发"><a href="#下拉框（picker）开发" class="headerlink" title="下拉框（picker）开发"></a>下拉框（picker）开发</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>常规下下拉框开发的，后台返回的数据都是下面这种类型的，但是<code>uni-app</code>的数据是类似于这种的<code>array: [&#39;中国&#39;, &#39;美国&#39;, &#39;巴西&#39;, &#39;日本&#39;]</code>，所以使用起来不是很方便，谁TM要保存汉字到数据库，所以下面记录下项目中使用的公共方法</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;女&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;未知&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="下拉框技巧"><a href="#下拉框技巧" class="headerlink" title="下拉框技巧"></a>下拉框技巧</h2><p>下面的这段代码是一个公共下拉框的封装方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;uni-list&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;uni-list-cell&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">picker</span> @<span class="attr">change</span>=<span class="string">&quot;pickSelect($event,&#x27;sex&#x27;,data.sexData,&#x27;sex&#x27;)&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;indexs.sex&quot;</span> <span class="attr">:range</span>=<span class="string">&quot;data.sexData&quot;</span> <span class="attr">range-key</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;uni-input&quot;</span>&gt;</span>&#123;&#123;data.sexData[indexs.sex]?data.sexData[indexs.sex].name:&#x27;请选择&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">tap</span>=<span class="string">&quot;consoleData()&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line">				indexs: &#123;</span><br><span class="line"><span class="javascript">					sex: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				data:&#123;</span><br><span class="line">					sexData: [&#123;</span><br><span class="line"><span class="javascript">							<span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;name&quot;</span>: <span class="string">&quot;男&quot;</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="javascript">							<span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;name&quot;</span>: <span class="string">&quot;女&quot;</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="javascript">							<span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;name&quot;</span>: <span class="string">&quot;未知&quot;</span></span></span><br><span class="line">						&#125;</span><br><span class="line">					],</span><br><span class="line"><span class="javascript">					sex:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"><span class="javascript">		<span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">pickSelect</span>(<span class="params">e, indexKey, optionArr, baseInfoKey</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">debugger</span>;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">this</span>.indexs[indexKey] = e.target.value</span></span><br><span class="line"><span class="javascript">				<span class="built_in">this</span>.data[baseInfoKey] = optionArr[e.target.value].id</span></span><br><span class="line">			&#125;,</span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">consoleData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="built_in">this</span>.data);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	.content &#123;</span><br><span class="line"><span class="css">		<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">		<span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">		<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">		<span class="attribute">justify-content</span>: center;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.uni-list-cell-left&#123;</span><br><span class="line"><span class="css">		<span class="attribute">width</span>:<span class="number">150</span>rpx;</span></span><br><span class="line"><span class="css">		<span class="attribute">text-align</span>: left;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码解析：</p>
<ol>
<li><code>indexs</code>是用做一个页面中如果有多个picker的时候，可以在indexs中添加一个变量，当做下拉框索引变量使用，也就是选择的是第几个</li>
<li><code>pickSelect</code>方法中的四个变量说明：第一个变量是事件，这个就不说了；第二个是1中说的索引的变量名称；第三个是下拉框的数组数据；第四个是data变量中的变量名称</li>
<li><code>pickSelect</code>方法说明：当下拉框选择发生变化的时候，触发该方法，首先会通过事件获取它选择的是第几个，然后通过设置indexs中的索引值来实现picker中汉字的切换，最后设置data变量中的值，这个地方有个使用json对象的技巧，直接对象名称[变量]就能获取到json中的变量对应变量名的对象</li>
<li><code>:value</code>属性说明：是1中所说indexs中变量</li>
<li><code>:range</code>属性说明：是下拉框的数组数据</li>
<li><code>:range-key</code>属性说明：是下拉框数组数据中对应需要显示在下拉框中的汉字对应的变量名</li>
<li>添加一个button按钮，用于打印表单数据</li>
</ol>
<h1 id="后端返回数据处理"><a href="#后端返回数据处理" class="headerlink" title="后端返回数据处理"></a>后端返回数据处理</h1><h2 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h2><p>后端目前给前端扔数据的时候会出现如果字段在数据库中存储的空的时候，直接用JSON转完后，JSON串中就没有这个字段了，因此有两种解决方案:</p>
<ol>
<li>如果是要查出来的数据转化了一遍字符串之后又扔到前台的（像我们这种内外网分离，外网查数据库得去内网执行以下的这种），可以<code>JSON.toJSONString(custList,SerializerFeature.WRITE_MAP_NULL_FEATURES);</code>，把null的字段转成””，数字转0等等，具体没试过，可以自己尝试下</li>
<li>第二种就是前端进行处理，处理的方法也很简单var objVal = this.data.objVal||’’;也就是当接收到为undefined或者null的时候，直接转成’’了</li>
</ol>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>前端开发框架</tag>
        <tag>uni-app</tag>
        <tag>开发技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>不安全的HTTP方法</title>
    <url>/2019/02/16/%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84HTTP%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_2.jpg"></p>
<blockquote>
<p>今天尝试了下Tomcat之前的关于不安全HTTP方法漏洞的实践方法，确实可以通过PUT、DELETE完成文件的上传和删除操作（但是这个必须得保证tomcat中readonly属性必须设置为false，才能执行），因此在这进行了记录，并补充了补救的措施，具体的实践步骤和解决方案如下</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li>HTTP请求方法<br>HTTP1.0定义了三种请求方法： GET、POST、HEAD<br>HTTP1.1新增了五种请求方法：OPTIONS、PUT、DELETE、TRACE 、CONNECT</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>GET</td>
<td>请求指定页面信息，返回实体主体</td>
</tr>
<tr>
<td>2</td>
<td>HEAD</td>
<td>类似于GET，只是返回的信息中没有具体的内容，用户获取头部报文</td>
</tr>
<tr>
<td>3</td>
<td>POST</td>
<td>向指定资源提交数据处理请求（表单提交或者上传文件）。数据包含在请求体中。POST请求会导致新的资源的建立或者原有资源的修改</td>
</tr>
<tr>
<td>4</td>
<td>PUT</td>
<td>从客户端向服务端传送的数据取代指定的文档内容</td>
</tr>
<tr>
<td>5</td>
<td>DELETE</td>
<td>请求服务器删除指定的资源</td>
</tr>
<tr>
<td>6</td>
<td>CONNECT</td>
<td>预留给能够将连接改为管道方式的代理服务器</td>
</tr>
<tr>
<td>7</td>
<td>OPTIONS</td>
<td>允许客户端查看服务器的性能</td>
</tr>
<tr>
<td>8</td>
<td>TRACE</td>
<td>回显服务器收到的请求，主要用于测试和诊断</td>
</tr>
</tbody></table>
<h2 id="确认自己的漏洞入口是否开启"><a href="#确认自己的漏洞入口是否开启" class="headerlink" title="确认自己的漏洞入口是否开启"></a>确认自己的漏洞入口是否开启</h2><p>使用curl执行命令<code>curl -v -X OPTIONS your-website-url -I</code>，如果输出结果中显示Allow中包含PUT、DELETE等，说明就存在漏洞</p>
<img src="/2019/02/16/%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84HTTP%E6%96%B9%E6%B3%95/screenshot_2.png" class="">

<h2 id="漏洞的应用"><a href="#漏洞的应用" class="headerlink" title="漏洞的应用"></a>漏洞的应用</h2><ul>
<li>DELETE：能够删除服务器上面的文件信息，造成恶意攻击</li>
<li>PUT：通过PUT方法可以上传文件替换对应的服务器文件或者挂马文件，实现服务的攻击</li>
<li>OPTIONS：将会暴露服务器中间件的相关信息</li>
</ul>
<h2 id="漏洞测试实践"><a href="#漏洞测试实践" class="headerlink" title="漏洞测试实践"></a>漏洞测试实践</h2><ul>
<li>准备材料：</li>
</ul>
<ol>
<li>下载Tomcat7.0.xx，安装curl7.64.0</li>
</ol>
<ul>
<li>修改Tomcat配置文件信息</li>
</ul>
<ol>
<li>打开<code>TOMCAT_HOME/conf/web.xml</code>文件，在<code>org.apache.catalina.servlets.DefaultServlet</code>下添加readonly属性，添加完的效果如下所示<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>漏洞实践</li>
</ul>
<ol>
<li>通过PUT和DELETE上传和删除文件<img src="/2019/02/16/%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84HTTP%E6%96%B9%E6%B3%95/screenshot_1.png" class=""></li>
</ol>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><ol>
<li>关闭除GET和POST之外的其他请求协议<br>在项目为web.xml中，或者<code>TOMCAT_HOME\conf\web.xml</code>中添加如下代码，这里需要解释下：项目的XML文件，只能修复本项目的漏洞，tomcat的配置文件web.xml能够修复该Tomcat所有项目对应的漏洞<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>fortune<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">http-method</span>&gt;</span>PUT<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">http-method</span>&gt;</span>DELETE<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">http-method</span>&gt;</span>HEAD<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">http-method</span>&gt;</span>OPTIONS<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">http-method</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span><span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><code>web.xml</code>中修改或添加readonly属性的值为true<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>安全测评</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>安全测评</tag>
        <tag>修复方案</tag>
      </tags>
  </entry>
  <entry>
    <title>yum 下载全量依赖rpm包及离线安装</title>
    <url>/2020/07/17/yum-%E4%B8%8B%E8%BD%BD%E5%85%A8%E9%87%8F%E4%BE%9D%E8%B5%96rpm%E5%8C%85%E5%8F%8A%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_90.jpg"></p>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>通常生产环境由于安全原因都无法访问互联网。此时就需要进行离线安装，主要有两种方式：源码编译、rpm包安装。源码编译耗费时间长且缺乏编译环境，所以一般都选择使用离线rpm包安装</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>CentOS 7.2</p>
<h2 id="查看依赖包"><a href="#查看依赖包" class="headerlink" title="查看依赖包"></a>查看依赖包</h2><p>可以使用<code>yum deplist</code>命令来查找rpm包的依赖列表。例如，要查找<code>perl</code>的依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[xxxx@xxxx perl]$ yum deplist perl</span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * epel: mirrors.yun-idc.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.ustc.edu.cn</span><br><span class="line">软件包：perl.x86_64 4:5.16.3-295.el7</span><br><span class="line">   依赖：libc.so.6(GLIBC_2.14)(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libcrypt.so.1()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libdl.so.2()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libgdbm.so.4()(64bit)</span><br><span class="line">   provider: gdbm.x86_64 1.10-8.el7</span><br><span class="line">   依赖：libgdbm_compat.so.4()(64bit)</span><br><span class="line">   provider: gdbm.x86_64 1.10-8.el7</span><br><span class="line">   依赖：libm.so.6()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libm.so.6(GLIBC_2.2.5)(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libnsl.so.1()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libperl.so()(64bit)</span><br><span class="line">   provider: perl-libs.x86_64 4:5.16.3-295.el7</span><br><span class="line">   依赖：libpthread.so.0()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libresolv.so.2()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：libutil.so.1()(64bit)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   依赖：perl(Carp)</span><br><span class="line">   provider: perl-Carp.noarch 1.26-244.el7</span><br><span class="line">   依赖：perl(Cwd)</span><br><span class="line">   provider: perl-PathTools.x86_64 3.40-5.el7</span><br><span class="line">   依赖：perl(Exporter)</span><br><span class="line">   provider: perl-Exporter.noarch 5.68-3.el7</span><br><span class="line">   依赖：perl(File::Path)</span><br><span class="line">   provider: perl-File-Path.noarch 2.09-2.el7</span><br><span class="line">   依赖：perl(File::Spec)</span><br><span class="line">   provider: perl-PathTools.x86_64 3.40-5.el7</span><br><span class="line">   依赖：perl(File::Spec::Functions)</span><br><span class="line">   provider: perl-PathTools.x86_64 3.40-5.el7</span><br><span class="line">   依赖：perl(File::Spec::Unix)</span><br><span class="line">   provider: perl-PathTools.x86_64 3.40-5.el7</span><br><span class="line">   依赖：perl(File::Temp)</span><br><span class="line">   provider: perl-File-Temp.noarch 0.23.01-3.el7</span><br><span class="line">   依赖：perl(Filter::Util::Call)</span><br><span class="line">   provider: perl-Filter.x86_64 1.49-3.el7</span><br><span class="line">   依赖：perl(Getopt::Long)</span><br><span class="line">   provider: perl-Getopt-Long.noarch 2.40-3.el7</span><br><span class="line">   依赖：perl(Pod::Simple::Search)</span><br><span class="line">   provider: perl-Pod-Simple.noarch 1:3.28-4.el7</span><br><span class="line">   依赖：perl(Pod::Simple::XHTML)</span><br><span class="line">   provider: perl-Pod-Simple.noarch 1:3.28-4.el7</span><br><span class="line">   依赖：perl(Scalar::Util)</span><br><span class="line">   provider: perl-Scalar-List-Utils.x86_64 1.27-248.el7</span><br><span class="line">   依赖：perl(Scalar::Util) &gt;= 1.10</span><br><span class="line">   provider: perl-Scalar-List-Utils.x86_64 1.27-248.el7</span><br><span class="line">   依赖：perl(Socket)</span><br><span class="line">   provider: perl-Socket.x86_64 2.010-5.el7</span><br><span class="line">   依赖：perl(Socket) &gt;= 1.3</span><br><span class="line">   provider: perl-Socket.x86_64 2.010-5.el7</span><br><span class="line">   依赖：perl(Storable)</span><br><span class="line">   provider: perl-Storable.x86_64 2.45-3.el7</span><br><span class="line">   依赖：perl(Time::HiRes)</span><br><span class="line">   provider: perl-Time-HiRes.x86_64 4:1.9725-3.el7</span><br><span class="line">   依赖：perl(Time::Local)</span><br><span class="line">   provider: perl-Time-Local.noarch 1.2300-2.el7</span><br><span class="line">   依赖：perl(constant)</span><br><span class="line">   provider: perl-constant.noarch 1.27-2.el7</span><br><span class="line">   依赖：perl(threads)</span><br><span class="line">   provider: perl-threads.x86_64 1.87-4.el7</span><br><span class="line">   依赖：perl(threads::shared)</span><br><span class="line">   provider: perl-threads-shared.x86_64 1.43-6.el7</span><br><span class="line">   依赖：perl-libs</span><br><span class="line">   provider: perl-libs.x86_64 4:5.16.3-295.el7</span><br><span class="line">   provider: perl-libs.i686 4:5.16.3-295.el7</span><br><span class="line">   依赖：perl-libs = 4:5.16.3-295.el7</span><br><span class="line">   provider: perl-libs.x86_64 4:5.16.3-295.el7</span><br><span class="line">   provider: perl-libs.i686 4:5.16.3-295.el7</span><br><span class="line">   依赖：perl-macros</span><br><span class="line">   provider: perl-macros.x86_64 4:5.16.3-295.el7</span><br><span class="line">   依赖：rtld(GNU_HASH)</span><br><span class="line">   provider: glibc.x86_64 2.17-307.el7.1</span><br><span class="line">   provider: glibc.i686 2.17-307.el7.1</span><br></pre></td></tr></table></figure>

<h2 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h2><h3 id="方案一（推荐）：repotrack"><a href="#方案一（推荐）：repotrack" class="headerlink" title="方案一（推荐）：repotrack"></a>方案一（推荐）：repotrack</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line">[root@xxxx ~]<span class="comment"># yum -y install yum-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载perl全量依赖包</span></span><br><span class="line">[root@xxxx ~]<span class="comment"># repotrack perl</span></span><br></pre></td></tr></table></figure>

<h3 id="方案二：yumdownloader"><a href="#方案二：yumdownloader" class="headerlink" title="方案二：yumdownloader"></a>方案二：yumdownloader</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line">[root@xxxx ~]<span class="comment"># yum -y install yum-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 perl 依赖包</span></span><br><span class="line">$ yumdownloader --resolve --destdir=/tmp perl</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>destdir:指定rpm包下载目录（不指定，默认为当前目录）</li>
<li>resolve:下载依赖的rpm包</li>
</ul>
<p><font color='red'>仅会将主软件包和基于你现在的操作系统所缺少的依赖关系包一并下载。</font></p>
<h2 id="离线安装rpm"><a href="#离线安装rpm" class="headerlink" title="离线安装rpm"></a>离线安装rpm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh --force --nodeps *.rpm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>不重复随机数的产生</title>
    <url>/2019/01/25/%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E4%BA%A7%E7%94%9F/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_1.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  a[<span class="number">100</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i=<span class="number">99</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[m=rand()<span class="number">0</span>])</span><br><span class="line">a[m]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用DateFormat的parse方法前校验字符串是否为日期处理</title>
    <url>/2021/04/08/%E4%BD%BF%E7%94%A8DateFormat%E7%9A%84parse%E6%96%B9%E6%B3%95%E5%89%8D%E6%A0%A1%E9%AA%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_99.jpg"><br>最近在做OCR图片识别的时候，出现日期转换的过程，但是在转换的过程中你懂得，OCR识别出来的数据是五花八门的，什么样的都有，在转换之前一般都需要进行一个处理，或者进行判断，常规的字符串还好，但是碰到日期类的，如果直接使用SimpleDateFormat的时候，会仍异常，那数据就都废了，所以需要一个方法先校验下日期是否合法，下面的方法是在网上找到的，借鉴并记录下（虽然感觉不是很正规，但是满足需求）</p>
<ol>
<li>起初的时候是使用的如下方法进行校验<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkDate</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sdf.parse(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
但是上面的会出现问题就是“2021-4-8asdasd”这种情况返回的也是true，查看相关的API，表示如下：<br><font color='red'>在默认情况下，进行的分析是不严格的：如果输入的形式不是此对象的格式化方法使用的形式，但仍可作为日期进行分析，则分析将获得成功。客户机可能通过调用setLenient(false)来强调严格遵守该格式</font><br>因此有了如下的代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkDate</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-M-d&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sdf.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        content = content.replaceAll(<span class="string">&quot;-0&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">        Date d = sdf.parse(content);</span><br><span class="line">        String s = sdf.format(d);</span><br><span class="line">        <span class="keyword">return</span> content.equals(s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>DateFormat</tag>
      </tags>
  </entry>
  <entry>
    <title>双数据源配置SpringMVC+Spring+Mybatis</title>
    <url>/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_21.jpg"></p>
<blockquote>
<p>最近下载了一个SSM的框架，然后项目上要用到双数据源的情况，因此在这方面查资料查了很久，最终完成了，具体过程如下，有误之处麻烦各位大神指出，及时更新</p>
</blockquote>
<ol>
<li>首当其冲第一步就是修改数据库配置文件，我这里叫dbconfig.properties，修改的时候，只需要把原来的数据库的配置文件复制一套，然后在前面加上对应数据库的标识就行了<img src="/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/screenshot_1.png" class=""></li>
<li>修改Sping的配置文件<code>ApplicationContext.xml</code>，复制一套<code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code>对应的<code>bean</code>，修改对应的<code>name</code>值为<code>transactionManager2</code>，然后复制一套数据库连接的配置，改为数据源2的数据信息<img src="/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/screenshot_2.png" class="">
<img src="/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/screenshot_3.png" class=""></li>
<li>再就是DAO层面的修改了，只需要修改两个地方，一个地方是<code>sqlSessionTemplate2</code>对应到上面<code>Spring</code>配置文件中的<code>sqlSessionTemplate2</code>，在一个就是<code>DaoSupport</code>的声明了吧<img src="/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/screenshot_4.png" class=""></li>
<li>下面就可以直接使用了<img src="/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/screenshot_5.png" class=""></li>
</ol>
<p><font color='red'> <strong>附件源码：</strong></font></p>
<a href="/2019/02/19/%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AESpingMVC-Sping-Mybatis/double_datareources_code.rar" title="双数据源配置代码下载">双数据源配置代码下载</a>
]]></content>
      <categories>
        <category>后端开发框架</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>双数据源</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>图片添加水印</title>
    <url>/2021/01/03/%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_94.jpg"></p>
<h2 id="背景（废话）"><a href="#背景（废话）" class="headerlink" title="背景（废话）"></a>背景（废话）</h2><p>最近项目中出现客户要求使用手机端拍照实现水印的功能，起初以为业务比较简单，但具体实现起来发现了很多问题，水印打印的时候根据图片的横向宽度确定水印的打印位置和水印文字的大小</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="水印打印的工具类"><a href="#水印打印的工具类" class="headerlink" title="水印打印的工具类"></a>水印打印的工具类</h3><p>添加水印的工具类代码如下，里面都有注释就，就不再赘述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: ImageUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>: com.jxl.workbench.common</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 图片处理工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Daniel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020-12-02 11:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: V1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加水印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Daniel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/11/11 14:47</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">addWaterMark</span><span class="params">(Image docFileImg, String location)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> docFileImgHeight = docFileImg.getHeight(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> docFileImgWidth = docFileImg.getWidth(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加水印</span></span><br><span class="line">        BufferedImage bufImg = <span class="keyword">new</span> BufferedImage(docFileImgWidth,docFileImgHeight,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 Graphics2D 对象</span></span><br><span class="line">        Graphics2D g = bufImg.createGraphics();</span><br><span class="line">        <span class="comment">//设置绘图区域</span></span><br><span class="line">        g.drawImage(docFileImg, <span class="number">0</span>, <span class="number">0</span>, docFileImgWidth, docFileImgHeight, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//设置字体</span></span><br><span class="line">        <span class="keyword">int</span> timeFontSize = (docFileImgHeight&gt;docFileImgWidth?docFileImgWidth:docFileImgHeight)/<span class="number">8</span>;</span><br><span class="line">        Font timeFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, timeFontSize);</span><br><span class="line">        <span class="comment">// 根据图片的背景设置水印颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.setFont(timeFont);</span><br><span class="line">        <span class="comment">//设置抗锯齿</span></span><br><span class="line">        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line"></span><br><span class="line">        String currentTime = DateUtils.dateTimeNow(DateUtils.HH_MM);</span><br><span class="line">        <span class="comment">//设置下部的时间</span></span><br><span class="line">        <span class="comment">//获取时间文字长度</span></span><br><span class="line">        <span class="keyword">int</span> timLen = g.getFontMetrics(g.getFont()).charsWidth(currentTime.toCharArray(),<span class="number">0</span>,currentTime.length());</span><br><span class="line">        <span class="keyword">int</span> timeX = (docFileImgWidth - timLen)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> timeY = docFileImgHeight*<span class="number">5</span>/<span class="number">6</span>;</span><br><span class="line">        g.drawString(currentTime, timeX, timeY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置时间下面的日期、星期和地址</span></span><br><span class="line">        String dateAddrStr = DateUtils.dateTimeNow(DateUtil.DATE_FORMAT_YYYY_MM_DD)+<span class="string">&quot;  &quot;</span> +DateUtils.dateToWeek(<span class="keyword">new</span> Date())+<span class="string">&quot;  &quot;</span>+location;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dateAddrFontSize = (docFileImgHeight&gt;docFileImgWidth?docFileImgWidth:docFileImgHeight)/<span class="number">25</span>;</span><br><span class="line">        Font dateAddrFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, dateAddrFontSize);</span><br><span class="line">        g.setFont(dateAddrFont);</span><br><span class="line">        <span class="keyword">int</span> dateAddrLen = g.getFontMetrics(g.getFont()).charsWidth(dateAddrStr.toCharArray(),<span class="number">0</span>,dateAddrStr.length());</span><br><span class="line">        <span class="keyword">int</span> dateAddrX = (docFileImgWidth - dateAddrLen)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> dateAddrY = docFileImgHeight*<span class="number">9</span>/<span class="number">10</span>;</span><br><span class="line">        g.drawString(dateAddrStr, dateAddrX, dateAddrY);</span><br><span class="line"></span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="keyword">return</span> bufImg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>该调用方法里面包含了如何将MultipartFile转化为ImageIO数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Image docFileImg = ImageIO.read(file.getInputStream());</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加水印</span></span><br><span class="line">BufferedImage bufImg = ImageUtils.addWaterMark(docFileImg,location);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的filePath是文件的存储目录，fileId是文件的文件名或自己生成的随机数，extName是文件的格式，当然如果为了安全可以不加文件类型，自己解析的时候注意即可</span></span><br><span class="line">String fileSrc =  filePath + fileId +extName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件输出流</span></span><br><span class="line">FileOutputStream outImgStream = <span class="keyword">new</span> FileOutputStream(fileSrc);</span><br><span class="line"><span class="comment">//输出文件到本地</span></span><br><span class="line">ImageIO.write(bufImg, <span class="string">&quot;png&quot;</span>, outImgStream);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>水印</tag>
      </tags>
  </entry>
  <entry>
    <title>图片验证码，解决了Session不同步的问题</title>
    <url>/2019/01/24/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%BA%86Session%E4%B8%8D%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_1.jpg"></p>
<ol>
<li>Java代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gov.csrc.servlet;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Font;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;  </span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Random;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.image.codec.jpeg.JPEGCodec;  </span><br><span class="line"><span class="keyword">import</span> com.sun.image.codec.jpeg.JPEGImageEncoder;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生验证码图片</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);  </span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">        response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;No-cache&quot;</span>);  </span><br><span class="line">        response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0L</span>);  </span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">80</span>;  </span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">30</span>;  </span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, <span class="number">1</span>);  </span><br><span class="line">        Graphics g = image.getGraphics();  </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();  </span><br><span class="line">        g.setColor(getRandColor(<span class="number">200</span>, <span class="number">250</span>));  </span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);  </span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;Arial&quot;</span>, <span class="number">0</span>, <span class="number">25</span>));  </span><br><span class="line">        g.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">155</span>; i++) &#123;  </span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(width + <span class="number">100</span>);  </span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(height + <span class="number">100</span>);  </span><br><span class="line">            <span class="keyword">int</span> xl = random.nextInt(<span class="number">10</span>);  </span><br><span class="line">            <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);  </span><br><span class="line">            g.drawOval(x, y, x + xl, y + yl);  </span><br><span class="line">        &#125;  </span><br><span class="line">        String code = request.getParameter(<span class="string">&quot;code&quot;</span>);  </span><br><span class="line">        String sRand = code;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sRand.length(); i++) &#123;  </span><br><span class="line">            String rand = sRand.substring(i, i + <span class="number">1</span>);  </span><br><span class="line">            g.setColor(<span class="keyword">new</span> Color(<span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random  </span><br><span class="line">                    .nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>)));  </span><br><span class="line">            g.drawString(rand, <span class="number">14</span> * i + <span class="number">5</span>, <span class="number">25</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        g.dispose();  </span><br><span class="line">        javax.servlet.ServletOutputStream imageOut = response.getOutputStream();  </span><br><span class="line">        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(imageOut);  </span><br><span class="line">        encoder.encode(image);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;  </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();  </span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)  </span><br><span class="line">            fc = <span class="number">255</span>;  </span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)  </span><br><span class="line">            bc = <span class="number">255</span>;  </span><br><span class="line">        <span class="keyword">int</span> r = fc + random.nextInt(bc - fc);  </span><br><span class="line">        <span class="keyword">int</span> g = fc + random.nextInt(bc - fc);  </span><br><span class="line">        <span class="keyword">int</span> b = fc + random.nextInt(bc - fc);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li><p>Web.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CodeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.gov.csrc.servlet.CodeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CodeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/CodeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li>
<li><p>index.jsp：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;  </span><br><span class="line">&lt;%  </span><br><span class="line">    String path = request.getContextPath();  </span><br><span class="line">    String basePath = request.getScheme() + &quot;://&quot;  </span><br><span class="line">            + request.getServerName() + &quot;:&quot; + request.getServerPort()  </span><br><span class="line">            + path + &quot;/&quot;;  </span><br><span class="line">%&gt;  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>验证码测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;This is my page&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>  </span><br><span class="line"><span class="javascript"><span class="keyword">var</span> code ; <span class="comment">//在全局 定义验证码   </span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">createCode</span>(<span class="params"></span>)</span>&#123;    </span></span><br><span class="line"><span class="javascript">    code = <span class="string">&quot;&quot;</span>;    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> codeLength = <span class="number">5</span>;<span class="comment">//验证码的长度    </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//所有候选组成验证码的字符，可以用中文    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> selectChar = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>);    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;codeLength;i++)&#123;    </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> charIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">60</span>);    </span></span><br><span class="line">        code +=selectChar[charIndex];    </span><br><span class="line">    &#125;    </span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> code;    </span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">validate</span> (<span class="params"></span>)</span>&#123;    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inputCode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;vcode&quot;</span>).value.toLowerCase();    </span></span><br><span class="line">    if(inputCode.length &lt;=0)&#123;    </span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;请输入验证码！&quot;</span>);    </span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;    </span></span><br><span class="line">    &#125;    </span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">if</span>(inputCode != code.toLowerCase())&#123;    </span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;验证码输入错误！&quot;</span>);    </span></span><br><span class="line"><span class="javascript">        show();<span class="comment">//刷新验证码    </span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;    </span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;    </span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;^-^ OK&quot;</span>);    </span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;    </span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;    </span></span><br><span class="line"><span class="javascript">        <span class="comment">//显示验证码    </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;code&quot;</span>).src=<span class="string">&quot;CodeServlet?code=&quot;</span>+createCode();    </span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">        <span class="comment">//document.onload=show();    </span></span></span><br><span class="line"><span class="javascript">        show();<span class="comment">//页面加载时加载验证码    </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//这时无论在ie还是在firefox中，js没有加载完，页面的东西是不会被执行的；    </span></span></span><br><span class="line">    &#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return validate();&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>jsp+js+servlet实现验证码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span> 用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 请输入验证码： <span class="tag">&lt;<span class="name">input</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;vcode&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 60;&quot;</span> <span class="attr">maxLength</span>=<span class="string">&quot;5&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">mce_href</span>=<span class="string">&quot;#&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">onclick</span>=<span class="string">&quot;javascript:show();return false;&quot;</span>&gt;</span>看不清,换一张!<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>功能相关</category>
        <category>登录</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>处理Linux-x86_64 Error: 12: Cannot allocate memory</title>
    <url>/2021/06/17/%E5%A4%84%E7%90%86Linux-x86-64-Error-12-Cannot-allocate-memory/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_102.jpg"></p>
<p>今天在连接数据库的时候，发现报错了，经检查发现好像是Swap区太小造成宕机，这里写下swap去扩充的教程记录一下</p>
<h2 id="报错现象"><a href="#报错现象" class="headerlink" title="报错现象"></a>报错现象</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ORA-27102: out of memory</span><br><span class="line">Linux-x86_64 Error: 12: Cannot allocate memory</span><br><span class="line">Additional information: 1</span><br><span class="line">Additional information: 32768</span><br><span class="line">Additional information: 8</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="查看目前swap区的使用情况"><a href="#查看目前swap区的使用情况" class="headerlink" title="查看目前swap区的使用情况"></a>查看目前swap区的使用情况</h3><p>查询发现几乎用满了，但是着急弄数据库，就先加一块swap区域</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xydtech dev]<span class="comment"># swapon -s</span></span><br><span class="line">文件名				类型		大小	已用	权限</span><br><span class="line">/dev/dm-1                              	partition	16777212	14815480	-2</span><br></pre></td></tr></table></figure>

<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 新建一个swap文件，并添加权限，这个命令说明下，里面的count好像是块的个数，bs好像是每个块的大小，最终扩充的swap的大小就等于count*bs，一定要注意修改成自己需要扩充的大小</span><br><span class="line">[root@xxxx dev]<span class="comment"># dd if=/dev/zero of=/swapfile count=16384 bs=1MiB</span></span><br><span class="line"></span><br><span class="line">2. 添加新建的swap文件的权限</span><br><span class="line">[root@xxxx dev]<span class="comment"># chmod 600 /swapfile</span></span><br><span class="line"></span><br><span class="line">3. 使新建的swap文件生效</span><br><span class="line">[root@xxxx dev]<span class="comment"># mkswap /swapfile</span></span><br><span class="line">[root@xxxx dev]<span class="comment"># swapon /swapfile</span></span><br><span class="line"></span><br><span class="line">4. 再次查看确认新建的swap区是否生效</span><br><span class="line">[root@xxxx dev]<span class="comment"># swapon --show</span></span><br><span class="line">NAME      TYPE      SIZE  USED PRIO</span><br><span class="line">/dev/dm-1 partition  16G  14.2G   -2</span><br><span class="line">/swapfile file       16G    0B   -3</span><br><span class="line">[root@xxxx dev]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            62G         48G        481M         12G         13G        1.6G</span><br><span class="line">Swap:           31G         14G         17G</span><br><span class="line"></span><br><span class="line">5. 设置开机启动，在文件的做底部添加如下内容`/swapfile swap swap default 0 0`</span><br><span class="line">[root@xxxx dev]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">下面的内容是举例</span><br><span class="line">/dev/mapper/xxxxx-home /home                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/xxxxx-swap swap                    swap    defaults        0 0</span><br><span class="line">/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li><p>删除正在使用的swap分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx dev]<span class="comment"># swapoff /swapfile</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除swap分区文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx dev]<span class="comment"># rm -rf /swapfile</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除或注释掉<code>/etc/fstab</code>文件中关于开机自动挂载的内容</p>
</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>SWAP</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确的把数组转换成ArrayList</title>
    <url>/2020/02/25/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%8A%8A%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90ArrayList/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_79.jpg"></p>
<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p><code>Arrays.asList()</code>在平时开发中还是比较常见的，我们可以使用它将一个数组转换为一个List集合，<font color='red'>但其实底层是没有转换成List的还是一个数组</font>，假的转换完成后是没法使用List的相关方法的，比如说<code>add/remove/clear</code>，会抛出异常<code>UnsupportedOperationException</code>异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] strArr = &#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; strList = Arrays.asList(strArr);</span><br><span class="line"><span class="comment">//上面两句等价于下面这一句</span></span><br><span class="line">List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>Arrays.asList()</code>的源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *返回由指定数组支持的固定大小的列表。此方法作为基于数组和基于集合的API之间的桥梁，与Collection.toArray()结合使用。返回的List是可序列化并实现RandomAccess接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>如何正确的将数组转化为集合List呢，下面有几种方式</p>
<ol>
<li>（只是教育目的，不推荐使用）自己动手通过泛型实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">arrayToList</span><span class="params">(<span class="keyword">final</span> T[] array)</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> List&lt;T&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;(array.length);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">final</span> T t:array)&#123;</span><br><span class="line">    l.add(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>（推荐）最简便的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List l = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))</span><br></pre></td></tr></table></figure></li>
<li>(推荐)使用Java8的Stream<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] myArray1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">List myList1 = Arrays.stream(myArray1).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span></span><br><span class="line"><span class="keyword">int</span> [] myArray2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList2 = Arrays.stream(myArray2).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li>
<li>使用Guava<br>对于不可变集合，你可以使用ImmutableList类及其of()与copyOf()工厂方法：（参数不能为空）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; il = ImmutableList.of(<span class="string">&quot;string&quot;</span>, <span class="string">&quot;elements&quot;</span>);  <span class="comment">// from varargs</span></span><br><span class="line">List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      <span class="comment">// from array</span></span><br></pre></td></tr></table></figure>
对于可变集合，你可以使用Lists类及其newArrayList()工厂方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; l1 = Lists.newArrayList(anotherListOrCollection);    <span class="comment">// from collection</span></span><br><span class="line">List&lt;String&gt; l2 = Lists.newArrayList(aStringArray);               <span class="comment">// from array</span></span><br><span class="line">List&lt;String&gt; l3 = Lists.newArrayList(<span class="string">&quot;or&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;elements&quot;</span>); <span class="comment">// from varargs</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>ArrayList</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号 模板消息发送</title>
    <url>/2019/01/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_22.jpg"></p>
<blockquote>
<p>前言<br>微信公众号开发，其实很简单，这里是在微信公众号测试账号（公众号沙箱）上的开发流程，具体到生产环境的公众号开发，另行配置，比如说公众号主体信息认证、消息模板配置（审核很严，需要提前进行申请，防止影响业务）</p>
</blockquote>
<h2 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h2><ul>
<li>appID：第三方用户唯一凭证</li>
<li>appsecret：第三方用户唯一凭证密钥，即appsecret</li>
<li>access_token：公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token，通过接口传递appId和appsecret，而且目前的有效时间是7200s，所以需要定期进行数据再求，更改access_token</li>
<li>opendId：用户与公众号对应关系的唯一ID，一个用户对多个公众号有多个不同的openId，一个公众号对不同的用户有不同的openId</li>
<li>templete_id：模板ID，发送消息的时候是通过调用接口，传递模板ID和对应模板中的参数进行数据发送的</li>
</ul>
<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul>
<li><a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">打开微信公众号测试账号地址</a>，登录之后，会显示对应的<code>appID</code>和<code>appsecret</code>，这个获取<code>access_token</code>的时候会用到，需要记录下来</li>
<li>扫描测试账号界面的二维码，关注自己的测试公众号，然后能获取一个opendId，具体界面如下<img src="/2019/01/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/screenshot_1.png" class=""></li>
<li>创建发送消息的模板，获取到一个<code>templete_id</code>（测试公众号的模板是可以随便创建，不需要申请流程，但是每个测试账号下面只能有最多10个测试模板），创建模板的时候，一定要注意规则要传递的变量是以<code>&#123;&#123;param.DATA&#125;&#125;</code>，其中param是你的要传递的参数<br>个人创建的模板为：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;&#123;first.DATA&#125;&#125; 采购单编号：&#123;&#123;keyword1.DATA&#125;&#125; 采购类型：&#123;&#123;keyword2.DATA&#125;&#125; 订货日期：&#123;&#123;keyword3.DATA&#125;&#125; 要求送货日期：&#123;&#123;keyword4.DATA&#125;&#125; &#123;&#123;remark.DATA&#125;&#125;</span><br></pre></td></tr></table></figure>
<img src="/2019/01/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/screenshot_2.png" class=""></li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="工具类HttpUtils-java和ReadProperties-java"><a href="#工具类HttpUtils-java和ReadProperties-java" class="headerlink" title="工具类HttpUtils.java和ReadProperties.java"></a>工具类<code>HttpUtils.java</code>和<code>ReadProperties.java</code></h3><ul>
<li>HttpUtils类是用作发送网络请求</li>
<li>ReadProperties类是用作读取Properties中的appid和appsecret（因为这两个值一般不会发生变化，所以存在properties文件中）  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ConnectException;</span><br><span class="line"><span class="keyword">import</span> java.net.CookieHandler;</span><br><span class="line"><span class="keyword">import</span> java.net.CookieManager;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.ProtocolException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Do POST request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> JsonObject</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">doPostForJson</span><span class="params">(String url, JSONObject jsonObj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;POST parameter : &quot;</span> + jsonObj.toString());</span><br><span class="line">   URL localURL = <span class="keyword">new</span> URL(url);</span><br><span class="line">   URLConnection connection = localURL.openConnection();</span><br><span class="line">   HttpURLConnection httpURLConnection = (HttpURLConnection)connection;</span><br><span class="line">   httpURLConnection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">   httpURLConnection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">   httpURLConnection.setRequestProperty(<span class="string">&quot;Accept-Charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">   httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(jsonObj.toString().length()));</span><br><span class="line">   OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">   OutputStreamWriter outputStreamWriter = <span class="keyword">null</span>;</span><br><span class="line">   InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">   InputStreamReader inputStreamReader = <span class="keyword">null</span>;</span><br><span class="line">   BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">   StringBuffer resultBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">   String tempLine = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     outputStream = httpURLConnection.getOutputStream();</span><br><span class="line">     outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(outputStream,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">     outputStreamWriter.write(jsonObj.toString());</span><br><span class="line">     outputStreamWriter.flush();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (httpURLConnection.getResponseCode() &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;HTTP Request is not success, Response code is &quot;</span> + httpURLConnection.getResponseCode());</span><br><span class="line">     &#125;</span><br><span class="line">     inputStream = httpURLConnection.getInputStream();</span><br><span class="line">     inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">     reader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> ((tempLine = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">       resultBuffer.append(tempLine);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (outputStreamWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">       outputStreamWriter.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">       outputStream.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">       reader.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (inputStreamReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">       inputStreamReader.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">       inputStream.close();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resultBuffer.toString();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发送GET请求</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">doGet</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     URL localURL = <span class="keyword">new</span> URL(url);</span><br><span class="line">     URLConnection connection = localURL.openConnection();</span><br><span class="line">     HttpURLConnection httpURLConnection = (HttpURLConnection)connection;</span><br><span class="line">     httpURLConnection.setRequestProperty(<span class="string">&quot;Accept-Charset&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">     httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">     InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">     InputStreamReader inputStreamReader = <span class="keyword">null</span>;</span><br><span class="line">     BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">     StringBuffer resultBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     String tempLine = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (httpURLConnection.getResponseCode() &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;HTTP Request is not success, Response code is &quot;</span> + httpURLConnection.getResponseCode());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         inputStream = httpURLConnection.getInputStream();</span><br><span class="line">         inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">         reader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> ((tempLine = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             resultBuffer.append(tempLine);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">             reader.close();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (inputStreamReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">             inputStreamReader.close();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">             inputStream.close();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> resultBuffer.toString();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.MissingResourceException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle bundle;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="comment">// 读取propertiest资源文件</span></span><br><span class="line">		bundle = ResourceBundle.getBundle(<span class="string">&quot;systemconfig&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据name获得propertiest资源文件里字符串的名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		String value = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			value = bundle.getString(name);</span><br><span class="line">			value = <span class="keyword">new</span> String(value.getBytes(<span class="string">&quot;ISO8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (MissingResourceException e) &#123;</span><br><span class="line">			System.err.println(e);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">			System.err.println(ee);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="微信返回消息实体类WeixinAccessTokenEntity-java"><a href="#微信返回消息实体类WeixinAccessTokenEntity-java" class="headerlink" title="微信返回消息实体类WeixinAccessTokenEntity.java"></a>微信返回消息实体类<code>WeixinAccessTokenEntity.java</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求微信Token返回的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinAccessTokenEntity</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String accessToken;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> expirationTime;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeixinAccessTokenEntity</span><span class="params">(String accessToken, <span class="keyword">long</span> expirationTime)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.accessToken = accessToken;</span><br><span class="line">		<span class="keyword">this</span>.expirationTime = expirationTime;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAccessToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> accessToken;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessToken</span><span class="params">(String accessToken)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.accessToken = accessToken;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpirationTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> expirationTime;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpirationTime</span><span class="params">(<span class="keyword">long</span> expirationTime)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.expirationTime = expirationTime;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="发送消息的公共方法类WeChatCommon-java"><a href="#发送消息的公共方法类WeChatCommon-java" class="headerlink" title="发送消息的公共方法类WeChatCommon.java"></a>发送消息的公共方法类<code>WeChatCommon.java</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.third.util;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.ContextLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.third.bean.common.WeixinAccessTokenEntity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信公众号相关公共类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatCommon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">sendTempleteMsg</span><span class="params">(String openId,String templateId,Map&lt;String,Object&gt; msgContentMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回的JSONObject</span></span><br><span class="line">		JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">		jsonObject.put(<span class="string">&quot;code&quot;</span>,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取access_token</span></span><br><span class="line">		String accessToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//首先通过项目全局上下文判断access_token是否失效</span></span><br><span class="line">			WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();  </span><br><span class="line">		    ServletContext application = webApplicationContext.getServletContext();</span><br><span class="line">		    Object wechatAccessTokenObj = application.getAttribute(<span class="string">&quot;tokenMap&quot;</span>);</span><br><span class="line">		    WeixinAccessTokenEntity wechatAccessTokenEntity = wechatAccessTokenObj == <span class="keyword">null</span> ? <span class="keyword">null</span>: (WeixinAccessTokenEntity)wechatAccessTokenObj;</span><br><span class="line"></span><br><span class="line">		    <span class="comment">//如果超期，或者access_token没有的时候，重新生成，并设置到全局上下文中</span></span><br><span class="line">		    <span class="keyword">if</span>(wechatAccessTokenEntity == <span class="keyword">null</span> || wechatAccessTokenEntity.getExpirationTime()&lt;System.currentTimeMillis()) &#123;</span><br><span class="line">		    	accessToken = getAccseeToken();</span><br><span class="line">		    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		    	accessToken = wechatAccessTokenEntity.getAccessToken();</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line">		    <span class="comment">//如果还是获取失败，则走Exception</span></span><br><span class="line">			<span class="keyword">if</span>(accessToken == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(accessToken)) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;获取accessToken失败!&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//组装发送的JSON串信息</span></span><br><span class="line">			JSONObject sendInfoJsonObject = packSendTemplate(openId,templateId,msgContentMap);</span><br><span class="line">			<span class="comment">//发送网络请求</span></span><br><span class="line">			String urlStr = <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&quot;</span>+accessToken;<span class="comment">//发送消息Url</span></span><br><span class="line">			HttpUtils httpUtils = <span class="keyword">new</span> HttpUtils();</span><br><span class="line">			String returnMsgInfoStr = httpUtils.doPostForJson(urlStr, sendInfoJsonObject);</span><br><span class="line"></span><br><span class="line">			System.out.println(returnMsgInfoStr);</span><br><span class="line">			JSONObject returnMsgInfoJSONObject = JSON.parseObject(returnMsgInfoStr);</span><br><span class="line">			<span class="keyword">if</span>(returnMsgInfoJSONObject!=<span class="keyword">null</span> &amp;&amp; returnMsgInfoJSONObject.getInteger(<span class="string">&quot;errcode&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">				jsonObject.put(<span class="string">&quot;code&quot;</span>,<span class="number">0</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				jsonObject.put(<span class="string">&quot;msg&quot;</span>,returnMsgInfoJSONObject.get(<span class="string">&quot;errmsg&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			jsonObject.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> jsonObject;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取access_token</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAccseeToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//首先获取appId和appSecret（这个是读取配置文件*.properties文件），当然你也可以写死成上面获取到的appId和appsecret</span></span><br><span class="line">		String appId=ReadProperties.getString(<span class="string">&quot;appId&quot;</span>);</span><br><span class="line">		String appSecret=ReadProperties.getString(<span class="string">&quot;appsecret&quot;</span>);		</span><br><span class="line"></span><br><span class="line">	    WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();  </span><br><span class="line">	    ServletContext application = webApplicationContext.getServletContext();  </span><br><span class="line"></span><br><span class="line">	    String url=<span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span>+appId+<span class="string">&quot;&amp;secret=&quot;</span>+appSecret;</span><br><span class="line">	    HttpUtils httpRequestor = <span class="keyword">new</span> HttpUtils();</span><br><span class="line">	    String returnData=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			returnData = httpRequestor.doGet(url);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;  </span><br><span class="line">	    JSONObject json=JSON.parseObject(returnData);  </span><br><span class="line">	    <span class="keyword">if</span>(json.containsKey(<span class="string">&quot;access_token&quot;</span>))&#123;  </span><br><span class="line">	        <span class="keyword">if</span>(json.get(<span class="string">&quot;access_token&quot;</span>)!=<span class="keyword">null</span>&amp;&amp;!json.get(<span class="string">&quot;access_token&quot;</span>).equals(<span class="string">&quot;&quot;</span>))&#123;  </span><br><span class="line">            <span class="comment">//如果获取成功了，设置到程序的全局变量中，当然如果是集群或者其他的话，可以直接放入Redis，并设置失效时间</span></span><br><span class="line">	            application.setAttribute(<span class="string">&quot;tokenMap&quot;</span>, <span class="keyword">new</span> WeixinAccessTokenEntity(json.get(<span class="string">&quot;access_token&quot;</span>).toString(),  </span><br><span class="line">	                    System.currentTimeMillis()+Long.parseLong(json.get(<span class="string">&quot;expires_in&quot;</span>).toString())*<span class="number">1000</span>));  </span><br><span class="line">	            <span class="keyword">return</span> json.get(<span class="string">&quot;access_token&quot;</span>).toString();</span><br><span class="line">	        &#125;  </span><br><span class="line">	    &#125;  </span><br><span class="line">	    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 组装微信消息模板JsonObject</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JSONObject <span class="title">packSendTemplate</span><span class="params">(String openId,String templateId,Map&lt;String,Object&gt; msgContentMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">		jsonObject.put(<span class="string">&quot;touser&quot;</span>,openId);</span><br><span class="line">		jsonObject.put(<span class="string">&quot;template_id&quot;</span>,templateId);</span><br><span class="line"></span><br><span class="line">		JSONObject dataJSONObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">		<span class="keyword">for</span> (Map.Entry&lt;String,Object&gt; entry : msgContentMap.entrySet()) &#123;</span><br><span class="line">			JSONObject tempContentJSONObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">			tempContentJSONObject.put(<span class="string">&quot;value&quot;</span>, entry.getValue());</span><br><span class="line">			tempContentJSONObject.put(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;#173177&quot;</span>);</span><br><span class="line"></span><br><span class="line">			dataJSONObject.put(entry.getKey(),tempContentJSONObject);</span><br><span class="line">		&#125;</span><br><span class="line">		jsonObject.put(<span class="string">&quot;data&quot;</span>,dataJSONObject);</span><br><span class="line">		<span class="keyword">return</span> jsonObject;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没写测试代码，直接写了个main方法进行的测试</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Map&lt;String,Object&gt; msgContentMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">		msgContentMap.put(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;欢迎欢迎!&quot;</span>);</span><br><span class="line">		msgContentMap.put(<span class="string">&quot;keyword1&quot;</span>, <span class="string">&quot;你好啊123123123&quot;</span>);</span><br><span class="line">		msgContentMap.put(<span class="string">&quot;keyword2&quot;</span>, <span class="string">&quot;欢迎欢迎!&quot;</span>);</span><br><span class="line">		msgContentMap.put(<span class="string">&quot;keyword3&quot;</span>, <span class="string">&quot;欢迎欢迎!&quot;</span>);</span><br><span class="line">		msgContentMap.put(<span class="string">&quot;keyword4&quot;</span>, <span class="string">&quot;欢迎欢迎!&quot;</span>);</span><br><span class="line">		msgContentMap.put(<span class="string">&quot;remark&quot;</span>, <span class="string">&quot;欢迎欢迎!&quot;</span>);</span><br><span class="line">		sendTempleteMsg(<span class="string">&quot;openId&quot;</span>,<span class="string">&quot;templateId&quot;</span>,msgContentMap);<span class="comment">//这个地方需要修改成用户对应的openId和你自己创建的模板ID</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>WeChatCommon 一定要记住修改openId和templateId为自己的</li>
<li>accsee_token的有效时间目前为两小时</li>
<li>模板中的参数一定要和模板中的参数名字保持一致</li>
<li>生产环境模板一定要尽快申请，防止到时申请（审核时间比较长）不下来影响业务</li>
<li>目前是用项目全局上下文存储的access_token，如果有redis，可以存储在redis中，并设置时间有效</li>
</ul>
]]></content>
      <categories>
        <category>后端插件</category>
        <category>微信公众号</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>微信公众号</tag>
        <tag>模板消息发送</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器端图片压缩之Nginx+lua_nginx module+GraphicsMagick</title>
    <url>/2019/02/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%B9%8BNginx-lua-nginx-module-GraphicsMagick/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<blockquote>
<p>在开发电子商务网站时，同一个图片需要不同尺寸的缩略图片，一般有两种策略生成缩略图，一种在上传图片时，生成需要的缩略图，另一种是请求指定尺寸的图片时生存缩略图片，第一种方式有一定限制，就是需要提前知道所有尺寸的图片，如果前端ui设计改变了图片大小，需要重新生成。而第二种方式更加灵活，这里采用第二种方    ，只是淘宝使用ImageMagick）。</p>
</blockquote>
<p>这里主要借助lua_nginx module调用GraphicsMagick命令生存生存缩略图片，缩略图片的尺寸包含在请求图片名称中，例如：xxxxx.jpg.80x80.jpg返回的就是xxx.jpg的80x80尺寸的图片大小。nginx配置如下：</p>
<p>上传图片名称使用32位随机字符替换掉，图片存放目录为图片名称前六个字母，每两个一组，构造三层目录结构存放，这样可以均匀存放图片在不同目录。避免目录存放文件数量限制。<br>为了避免随意生成不同尺寸的缩略图，这里做了限制，在image_sizes中定义了需要的缩略图尺寸。</p>
<ul>
<li><p>初次版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">location /testImg/ &#123;  </span><br><span class="line">    rewrite_by_lua &#x27;  </span><br><span class="line">        local image_root = &quot;/home/tomcat/eisp-files&quot;;  </span><br><span class="line">        function file_notexists(name)  </span><br><span class="line">           local f=io.open(name,&quot;r&quot;)  </span><br><span class="line">           if f~=nil then io.close(f) return false else return true end  </span><br><span class="line">        end  </span><br><span class="line"></span><br><span class="line">local uri = ngx.re.sub(ngx.var.uri, &quot;/testImg/([0-9a-zA-Z]+)/([0-9a-zA-Z]&#123;2&#125;)([0-9a-zA-Z]&#123;2&#125;)([0-9a-zA-Z]&#123;2&#125;)([0-9a-zA-Z]+).([0-9a-zA-Z]+)&quot;, &quot;/images/$1/$2/$3/$4/$2$3$4$5.$6&quot;, &quot;o&quot;);  </span><br><span class="line">        local index = string.find(uri, &quot;([0-9]+)x([0-9]+)&quot;);  </span><br><span class="line">        local originalUri = string.sub(uri, 0, index-2);  </span><br><span class="line">        local area = string.sub(uri, index);  </span><br><span class="line">        index = string.find(area, &quot;([.])&quot;);  </span><br><span class="line">        area = string.sub(area, 0, index-1);  </span><br><span class="line"></span><br><span class="line">        if file_notexists(image_root .. uri) then  </span><br><span class="line">           local image_sizes = &#123;&quot;80x80&quot;, &quot;800x600&quot;, &quot;40x40&quot;&#125;;  </span><br><span class="line">           function table.contains(table, element)  </span><br><span class="line">              for _, value in pairs(table) do  </span><br><span class="line">                 if value == element then  </span><br><span class="line">                    return true  </span><br><span class="line">                 end  </span><br><span class="line">              end  </span><br><span class="line">              return false  </span><br><span class="line">           end  </span><br><span class="line"></span><br><span class="line">           if table.contains(image_sizes, area) then  </span><br><span class="line">               local command = &quot;gm convert &quot; .. image_root ..  originalUri  .. &quot; -thumbnail &quot; .. area .. &quot; -background gray -gravity center -extent &quot; .. area .. &quot; &quot; .. image_root .. uri;  </span><br><span class="line">               os.execute(command);  </span><br><span class="line">               ngx.req.set_uri(uri, true);  </span><br><span class="line">           else  </span><br><span class="line">               ngx.exit(404);  </span><br><span class="line">           end;  </span><br><span class="line">        else  </span><br><span class="line">           ngx.req.set_uri(uri, true);  </span><br><span class="line">        end;  </span><br><span class="line">    &#x27;;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">location /images/ &#123;  </span><br><span class="line">    alias /home/tomcat/eisp-files/images/;  </span><br><span class="line">    expires 7d;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>最后一次修改版本</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location /images/ &#123;  </span><br><span class="line">    set $image_root /home/nds/nds-files;  </span><br><span class="line"></span><br><span class="line">    if ($uri ~* &quot;/images/([0-9a-zA-Z]+)/([0-9a-zA-Z]&#123;2&#125;)([0-9a-zA-Z]&#123;2&#125;)([0-9a-zA-Z]&#123;2&#125;)([0-9a-zA-Z]+).(.*)&quot;) &#123;  </span><br><span class="line">       set $filePath &quot;$image_root/$1/$2/$3/$4/$2$3$4$5.$6&quot;;  </span><br><span class="line">       set $reqPath  &quot;/$1/$2/$3/$4/$2$3$4$5.$6&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    set $file &quot;$image_root$reqPath&quot;;  </span><br><span class="line"></span><br><span class="line">    if (-f $file) &#123;  </span><br><span class="line">       rewrite &quot;/images/(.+)&quot; /innerImages$reqPath last;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    if (!-f $file) &#123;  </span><br><span class="line">       rewrite_by_lua &#x27;  </span><br><span class="line">          local index = string.find(ngx.var.filePath, &quot;([0-9]+)x([0-9]+)&quot;);  </span><br><span class="line">          local originalUri = string.sub(ngx.var.filePath, 0, index-2);  </span><br><span class="line">          local area = string.sub(ngx.var.filePath, index);  </span><br><span class="line">          index = string.find(area, &quot;([.])&quot;);  </span><br><span class="line">          area = string.sub(area, 0, index-1);  </span><br><span class="line"></span><br><span class="line">          local image_sizes = &#123;&quot;155x155&quot;, &quot;400x400&quot;,&quot;104x104&quot;, &quot;50x50&quot;, &quot;40x40&quot;, &quot;56x56&quot;, &quot;172x172&quot;,&quot;800x600&quot;&#125;;  </span><br><span class="line">          function table.contains(table, element)  </span><br><span class="line">             for _, value in pairs(table) do  </span><br><span class="line">                if value == element then  </span><br><span class="line">                   return true  </span><br><span class="line">                end  </span><br><span class="line">             end  </span><br><span class="line">             return false  </span><br><span class="line">          end  </span><br><span class="line"></span><br><span class="line">          if table.contains(image_sizes, area) then  </span><br><span class="line">             local command = &quot;gm convert &quot; ..  originalUri  .. &quot; -thumbnail &quot; .. area .. &quot; -background white -gravity center -extent &quot; .. area .. &quot; &quot; .. ngx.var.file;  </span><br><span class="line">             os.execute(command);  </span><br><span class="line">             ngx.req.set_uri(&quot;/innerImages&quot; .. ngx.var.reqPath, true);  </span><br><span class="line">          else  </span><br><span class="line">             ngx.exit(404);  </span><br><span class="line">          end;  </span><br><span class="line">       &#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">location /innerImages/ &#123;  </span><br><span class="line">    alias /home/nds/nds-files/;  </span><br><span class="line">    expires max;   </span><br><span class="line">    tcp_nodelay off;   </span><br><span class="line">    tcp_nopush on;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
<p>本文引自<a href="http://www.iteye.com/topic/1125126">http://www.iteye.com/topic/1125126</a></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Nginx</tag>
        <tag>图片压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派3GPIO引脚图</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE3GPIO%E5%BC%95%E8%84%9A%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_45.jpg"></p>
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE3GPIO%E5%BC%95%E8%84%9A%E5%9B%BE/screenshot_1.png" class="">
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>引脚图</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装LiRC配合红外接收（HX1838B）记录遥控发射内容</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85LiRC%E9%85%8D%E5%90%88%E7%BA%A2%E5%A4%96%E6%8E%A5%E6%94%B6%EF%BC%88HX1838B%EF%BC%89%E8%AE%B0%E5%BD%95%E9%81%A5%E6%8E%A7%E5%8F%91%E5%B0%84%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_44.jpg"></p>
<h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><blockquote>
<p>最近想制作一个家庭智能遥控系统，控制空调等设备，因此就像用家里积灰的树莓派做个空调智能控制器，初步的思路很简单，就是先判定时间，如果是到了下午六点，温度还在30度以上，发起指令，控制空调启动设置温度为27℃，也可以通过APP远程进行启动和关闭</p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-HX-1838B-红外接收模块-连线示意图如下："><a href="#1-HX-1838B-红外接收模块-连线示意图如下：" class="headerlink" title="1.HX 1838B(红外接收模块)连线示意图如下："></a>1.HX 1838B(红外接收模块)连线示意图如下：</h3><img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85LiRC%E9%85%8D%E5%90%88%E7%BA%A2%E5%A4%96%E6%8E%A5%E6%94%B6%EF%BC%88HX1838B%EF%BC%89%E8%AE%B0%E5%BD%95%E9%81%A5%E6%8E%A7%E5%8F%91%E5%B0%84%E5%86%85%E5%AE%B9/screenshot_1.png" class="" title="树莓派与HX 1838B连接线示意图">

<h3 id="HW-483-发送红外模块-连线示意图如下："><a href="#HW-483-发送红外模块-连线示意图如下：" class="headerlink" title="HW-483(发送红外模块)连线示意图如下："></a>HW-483(发送红外模块)连线示意图如下：</h3><img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85LiRC%E9%85%8D%E5%90%88%E7%BA%A2%E5%A4%96%E6%8E%A5%E6%94%B6%EF%BC%88HX1838B%EF%BC%89%E8%AE%B0%E5%BD%95%E9%81%A5%E6%8E%A7%E5%8F%91%E5%B0%84%E5%86%85%E5%AE%B9/screenshot_2.png" class="" title="树莓派与HW-483连接线示意图">
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85LiRC%E9%85%8D%E5%90%88%E7%BA%A2%E5%A4%96%E6%8E%A5%E6%94%B6%EF%BC%88HX1838B%EF%BC%89%E8%AE%B0%E5%BD%95%E9%81%A5%E6%8E%A7%E5%8F%91%E5%B0%84%E5%86%85%E5%AE%B9/screenshot_3.png" class="" title="HW-483实体图">
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85LiRC%E9%85%8D%E5%90%88%E7%BA%A2%E5%A4%96%E6%8E%A5%E6%94%B6%EF%BC%88HX1838B%EF%BC%89%E8%AE%B0%E5%BD%95%E9%81%A5%E6%8E%A7%E5%8F%91%E5%B0%84%E5%86%85%E5%AE%B9/screenshot_4.png" class="" title="HW-483实体图">

<h3 id="2-安装LiRC"><a href="#2-安装LiRC" class="headerlink" title="2.安装LiRC"></a>2.安装LiRC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install lirc</span><br></pre></td></tr></table></figure>

<h4 id="添加下面这几行到-etc-modules中"><a href="#添加下面这几行到-etc-modules中" class="headerlink" title="添加下面这几行到/etc/modules中"></a>添加下面这几行到/etc/modules中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lirc_dev</span><br><span class="line">lirc_rpi gpio_in_pin&#x3D;18 gpio_out_pin&#x3D;17</span><br></pre></td></tr></table></figure>

<h4 id="添加下面这几行到文件-etc-lirc-hardware-conf中，如果这个文件不存在，可以直接创建"><a href="#添加下面这几行到文件-etc-lirc-hardware-conf中，如果这个文件不存在，可以直接创建" class="headerlink" title="添加下面这几行到文件/etc/lirc/hardware.conf中，如果这个文件不存在，可以直接创建"></a>添加下面这几行到文件/etc/lirc/hardware.conf中，如果这个文件不存在，可以直接创建</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIRCD_ARGS&#x3D;&quot;--uinput --listen&quot;</span><br><span class="line">LOAD_MODULES&#x3D;true</span><br><span class="line">DRIVER&#x3D;&quot;default&quot;</span><br><span class="line">DEVICE&#x3D;&quot;&#x2F;dev&#x2F;lirc0&quot;</span><br><span class="line">MODULES&#x3D;&quot;lirc_rpi&quot;</span><br></pre></td></tr></table></figure>


<h4 id="添加下面的代码到-boot-config-txt文件中"><a href="#添加下面的代码到-boot-config-txt文件中" class="headerlink" title="添加下面的代码到/boot/config.txt文件中"></a>添加下面的代码到/boot/config.txt文件中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dtoverlay&#x3D;lirc-rpi,gpio_in_pin&#x3D;18,gpio_out_pin&#x3D;17</span><br></pre></td></tr></table></figure>

<h4 id="修改这个文件-etc-lirc-lirc-options-conf中的driver和device对应的值"><a href="#修改这个文件-etc-lirc-lirc-options-conf中的driver和device对应的值" class="headerlink" title="修改这个文件/etc/lirc/lirc_options.conf中的driver和device对应的值"></a>修改这个文件/etc/lirc/lirc_options.conf中的driver和device对应的值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver    &#x3D; default</span><br><span class="line">device    &#x3D; &#x2F;dev&#x2F;lirc0</span><br></pre></td></tr></table></figure>

<h4 id="关闭服务然后进行启动，使上面的配置文件生效"><a href="#关闭服务然后进行启动，使上面的配置文件生效" class="headerlink" title="关闭服务然后进行启动，使上面的配置文件生效"></a>关闭服务然后进行启动，使上面的配置文件生效</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;lircd stop</span><br><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;lircd start</span><br></pre></td></tr></table></figure>


<h4 id="检查lirc的启动状态"><a href="#检查lirc的启动状态" class="headerlink" title="检查lirc的启动状态"></a>检查lirc的启动状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;lircd status</span><br></pre></td></tr></table></figure>


<h4 id="在测试之前重启系统"><a href="#在测试之前重启系统" class="headerlink" title="在测试之前重启系统"></a>在测试之前重启系统</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>

<h4 id="检测lirc状态是否正常"><a href="#检测lirc状态是否正常" class="headerlink" title="检测lirc状态是否正常"></a>检测lirc状态是否正常</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;lircd stop</span><br><span class="line">$ mode2 -d &#x2F;dev&#x2F;lirc0</span><br><span class="line">&lt;摁遥控上的遥控键，看是否打印一些带有pulse和space的字符&gt;</span><br><span class="line">pulse 560</span><br><span class="line">space 1706</span><br><span class="line">pulse 535</span><br></pre></td></tr></table></figure>

<h3 id="3-录制普通的遥控器"><a href="#3-录制普通的遥控器" class="headerlink" title="3. 录制普通的遥控器"></a>3. 录制普通的遥控器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;lircd stop</span><br><span class="line">$ sudo irrecord -d &#x2F;dev&#x2F;lirc0 ~&#x2F;lircd.conf</span><br></pre></td></tr></table></figure>
<p>根据提示进行操作，其中需要输入到遥控器的名称，其中得注意，如果摁键的时间最好在1S多点，保证出现两个点以上，不超过10个，然后把所有的键都摁一边</p>
<h4 id="备份系统自带的-lircd-conf，然后把生成的配置文件拷贝到-etc-lirc-l下"><a href="#备份系统自带的-lircd-conf，然后把生成的配置文件拷贝到-etc-lirc-l下" class="headerlink" title="备份系统自带的 lircd.conf，然后把生成的配置文件拷贝到/etc/lirc/l下"></a>备份系统自带的 lircd.conf，然后把生成的配置文件拷贝到/etc/lirc/l下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mv &#x2F;etc&#x2F;lirc&#x2F;lircd.conf &#x2F;etc&#x2F;lirc&#x2F;lircd_original.conf</span><br><span class="line">$ sudo cp ~&#x2F;lircd.conf &#x2F;etc&#x2F;lirc&#x2F;lircd.conf</span><br><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;lircd start</span><br></pre></td></tr></table></figure>

<h4 id="使用下面的命令测试按键是否生效"><a href="#使用下面的命令测试按键是否生效" class="headerlink" title="使用下面的命令测试按键是否生效"></a>使用下面的命令测试按键是否生效</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ irsend SEND_ONCE &lt;遥控器的名字&gt; KEY_POWER</span><br><span class="line">$ irsend SEND_ONCE &lt;device-name&gt; KEY_VOLUMEUP</span><br></pre></td></tr></table></figure>

<h3 id="4-录制空调遥控器"><a href="#4-录制空调遥控器" class="headerlink" title="4.录制空调遥控器"></a>4.录制空调遥控器</h3><p>空调遥控器这种带逻辑控制的比较麻烦.每次发射的都是含有温度、模式、制冷制热等一连串的指令，按照之前irrecord指令生成conf文件，行不通，只能使用raw的原始码，记录也是通过mode2 命令实现<br>①首先制作模板，得到的模板见下面,如果不行可以直接拷贝下面的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;lircd restart</span><br><span class="line">irrecord  -f -d &#x2F;dev&#x2F;lirc0 ~&#x2F;lircd.conf #制作模板，具体的模板制作过程和上面一样</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin remote</span><br><span class="line"></span><br><span class="line">  name  &#x2F;home&#x2F;pi&#x2F;lircd.conf</span><br><span class="line">  flags RAW_CODES</span><br><span class="line">  eps            30</span><br><span class="line">  aeps          100</span><br><span class="line"></span><br><span class="line">  gap          19886</span><br><span class="line"></span><br><span class="line">      begin raw_codes</span><br><span class="line"></span><br><span class="line">          name KEY_OPEN</span><br><span class="line">               90     102     331</span><br><span class="line"></span><br><span class="line">      end raw_codes</span><br><span class="line"></span><br><span class="line">end remote</span><br></pre></td></tr></table></figure>
<p>②接下来就是录制,然后把第一行最大的数去掉，把剩下的填到对应的按钮下面，然后重复上面的操作，记录多个按钮，然后填在对应的按钮下面，配置完的配置文件如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -m --mode 使用行列显示模式，不显示pulse、space</span><br><span class="line">mode2 -m -d &#x2F;dev&#x2F;lirc0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin remote</span><br><span class="line"></span><br><span class="line">  name  air</span><br><span class="line">  flags RAW_CODES</span><br><span class="line">  eps            30</span><br><span class="line">  aeps          100</span><br><span class="line"></span><br><span class="line">  gap          19987</span><br><span class="line"></span><br><span class="line">      begin raw_codes</span><br><span class="line"></span><br><span class="line">	name KEY_CLOSE</span><br><span class="line">	  8990    4486      677     1630      680      527</span><br><span class="line">          651      555      679      527      680      527</span><br><span class="line">          676      530      679      527      682      523</span><br><span class="line">          682     1629      684      523      681      523</span><br><span class="line">          682     1629      679      525      688      519</span><br><span class="line">          655      551      680      533      673      526</span><br><span class="line">          682      526      682      522      654      554</span><br><span class="line">          653      561      672     1627      681      528</span><br><span class="line">          678      528      683      525      678      528</span><br><span class="line">          678      525      691      527      670     1628</span><br><span class="line">          681      525      682     1626      682      526</span><br><span class="line">          682      523      692     1615      683      522</span><br><span class="line">          682    19958</span><br><span class="line"></span><br><span class="line">          687      522      683      549      660      519</span><br><span class="line">          684      520      687      522      680      524</span><br><span class="line">          686      549      652      527      687      522</span><br><span class="line">          690      514      683      522      686      520</span><br><span class="line">          684      525      679      527      685      521</span><br><span class="line">          681      525      681      528      682      522</span><br><span class="line">          684      527      681      521      711      495</span><br><span class="line">          688      518      670      540      682      522</span><br><span class="line">          683      523      683      549      659      524</span><br><span class="line">          682      522      681      552      658      523</span><br><span class="line">          685     1621      683      525      682    39966</span><br><span class="line"></span><br><span class="line">         9028     4451      689     1620      686      547</span><br><span class="line">          658      553      657      544      657      549</span><br><span class="line">          665      542      662      545      658      548</span><br><span class="line">          658     1624      685      547      663      544</span><br><span class="line">          657     1625      683      548      657      550</span><br><span class="line">          662      543      657      550      661      545</span><br><span class="line">          670      537      659      547      660      546</span><br><span class="line">          658      549      634     1651      682      548</span><br><span class="line">          657      549      632      575      657      549</span><br><span class="line">          629      577      661      545      643     1638</span><br><span class="line">          657     1652      662     1647      654      577</span><br><span class="line">          630      579      628     1650      665      578</span><br><span class="line">          632    19975</span><br><span class="line"></span><br><span class="line">          651      581      631      576      626      581</span><br><span class="line">          627      578      659      547      631      577</span><br><span class="line">          631      575      627     1662      673      553</span><br><span class="line">          627      580      628      577      630      576</span><br><span class="line">          627      579      634      573      631      574</span><br><span class="line">          655      551      630      577      657      550</span><br><span class="line">          655      553      628      578      631      575</span><br><span class="line">          628      578      654      552      627      580</span><br><span class="line">          654      552      632      575      653      554</span><br><span class="line">          626      580      629      577      630      576</span><br><span class="line">          627     1654      657     1652      653</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	name KEY_OPEN</span><br><span class="line">	  8984    4493      648     1659      648      559</span><br><span class="line">	  648      557      649     1656      676      534</span><br><span class="line">          648      557      649      558      648      561</span><br><span class="line">          646     1662      649      557      647      561</span><br><span class="line">          644     1660      655      552      649      558</span><br><span class="line">          648      558      648      559      648      558</span><br><span class="line">          648      560      646      558      649      560</span><br><span class="line">          647      556      650     1658      651      557</span><br><span class="line">          648      560      646      558      648      559</span><br><span class="line">          648      557      650      558      646     1660</span><br><span class="line">          649      558      648     1658      650      559</span><br><span class="line">          648      558      648     1659      649      564</span><br><span class="line">          645    19988</span><br><span class="line"></span><br><span class="line">          648      556      651      558      647      562</span><br><span class="line">          646      558      648      557      650      559</span><br><span class="line">          649      556      649      557      649      557</span><br><span class="line">          651      558      646      557      650      558</span><br><span class="line">          649      556      650      557      656      553</span><br><span class="line">          647      557      649      557      651      556</span><br><span class="line">          650      559      647      560      646      556</span><br><span class="line">          650      569      638      557      649      560</span><br><span class="line">          646      558      649      558      648      562</span><br><span class="line">          646      556      650      557      648      561</span><br><span class="line">          646     1660      648     1659      650    40004</span><br><span class="line"></span><br><span class="line">         8989     4491      648     1659      650      559</span><br><span class="line">          646      560      647     1661      648      559</span><br><span class="line">          647      558      649      556      651      558</span><br><span class="line">          647     1659      651      557      648      558</span><br><span class="line">          650     1659      649      558      649      558</span><br><span class="line">          648      556      650      557      648      557</span><br><span class="line">          652      558      646      559      648      559</span><br><span class="line">          647      560      655     1652      646      559</span><br><span class="line">          651      553      651      557      649      559</span><br><span class="line">          648      555      650      559      649     1657</span><br><span class="line">          650     1658      650     1658      649      557</span><br><span class="line">          651      557      648     1658      650      558</span><br><span class="line">          648    19992</span><br><span class="line"></span><br><span class="line">          648      559      649      559      647      558</span><br><span class="line">          648      559      648      558      647      560</span><br><span class="line">          648      558      648     1658      650      557</span><br><span class="line">          649      557      648      559      648      558</span><br><span class="line">          647      557      651      558      647      558</span><br><span class="line">          648      559      647      567      640      558</span><br><span class="line">          648      560      647      558      648      559</span><br><span class="line">          648      558      649      558      648      559</span><br><span class="line">          648      558      648      557      648      558</span><br><span class="line">          650      560      646      558      648      557</span><br><span class="line">          649     1660      648      558      650</span><br><span class="line"></span><br><span class="line">	  end raw_codes</span><br><span class="line"></span><br><span class="line">end remote</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③最后，把配置文件复制到指定目录 /etc/lirc/lircd.conf/ 并重启lircd服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp aircon.lircd.conf &#x2F;etc&#x2F;lirc&#x2F;lircd.conf.d&#x2F;</span><br><span class="line">sudo service lircd restart</span><br></pre></td></tr></table></figure>

<h3 id="5-发射信号"><a href="#5-发射信号" class="headerlink" title="5. 发射信号"></a>5. 发射信号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 发射命令：irsend SEND_ONCE 遥控器名称 按钮名称</span><br><span class="line">irsend SEND_ONCE aircon KEY_OPEN</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果前面的步骤一切正常，但在发射信号时报错“transmission failed”。请检查生成的遥控器配置文件，查看flags项，若是flags RAW_CODES|CONST_LENGTH，请尝试将其修改成flags RAW_CODES并重启lircd服务。再测试能否发射信号。</p>
</blockquote>
<blockquote>
<p><a href="https://gist.github.com/prasanthj/c15a5298eb682bde34961c322c95378b">github上的一个文章</a><br><a href="https://blog.csdn.net/x_r_su/article/details/53044993">树莓派给家用电器加上智能（红外篇）</a><br><a href="https://segmentfault.com/a/1190000014135418?utm_source=tag-newest">树莓派学习手记——制作一个空调遥控器（红外接收、发射的实现）题</a></p>
</blockquote>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>红外线</tag>
        <tag>HX1838B</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派常用命令</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_39.jpg"></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> sudo raspi-config  初始化配置</span><br><span class="line"><span class="number">2.</span> startx 启动图形化界面</span><br><span class="line"><span class="number">3.</span> sudo rpi-update 升级系统</span><br><span class="line"><span class="number">4.</span> sudo reboot 重启</span><br><span class="line"><span class="number">5.</span> sudo shutdown -h now 立即关机</span><br><span class="line"><span class="number">6.</span> sudo apt-get update   更新软件源</span><br><span class="line"><span class="number">7.</span> sudo apt-get upgrade  更新已经安装的软件</span><br><span class="line"><span class="number">8.</span> sudo apt-get install XX  安装XX软件</span><br><span class="line"><span class="number">9.</span> su root 切换到root用户</span><br><span class="line"><span class="number">10.</span> passwd user  设置user用户的密码</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="资源管理命令："><a href="#资源管理命令：" class="headerlink" title="资源管理命令："></a>资源管理命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. top :查看系统的运行情况</span><br><span class="line">2. free -m(-k, -g):查看内存分配情况</span><br><span class="line">3. sudo df -h ：查看磁盘使用情况</span><br><span class="line">4. sudo du -sh :查看当前目录下的磁盘使用信息</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. ps ：查看系统正在运行的进程</span><br><span class="line">2. ps -ef | less :查看系统所有的进程，包括后台进程。</span><br><span class="line">3. kill -&lt;signal&gt; &lt;PID&gt; 对进程做出一定的操作</span><br><span class="line">  注：* signal 1 (SIGHUP): hang-up的缩写，该信号通知应用程序重新启动</span><br><span class="line">      * signal 3 （SIGQUIT）：该信号通知应用程序清理自身资源并退出</span><br><span class="line">      * signal 6 （SIGABRT）：该信号通知应用程序终止并立即退出</span><br><span class="line">      * signal 9  （SIGKILL）：该信号立即终止应用程序</span><br><span class="line">      * PID ：应用程序的进程号，可以通过ps 查看</span><br></pre></td></tr></table></figure>

<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. pwd :显示当前的绝对路径</span><br><span class="line">2. cd ：切换路径</span><br><span class="line">3. cd .. :切换到上级目录</span><br><span class="line">4. find ：查找文件</span><br><span class="line"> 注：参数解析</span><br><span class="line">     -L ：表示启动符号连接跟踪，默认情况下是不会启动的。</span><br><span class="line">     -maxdepth&lt;number&gt;: 该选项指定find命令最大的目录查看深度，如果为1的话表示当前目录文件和一级子目录文件。</span><br><span class="line">     -newer&lt;file&gt;:表示只查找指定文件的修改时间更新的文件</span><br><span class="line">     -empty：表示只查找空文件</span><br><span class="line">     -atime&lt;number&gt; ：表示只查找距离上次访问指定天数之后的文件</span><br><span class="line">     -name&lt;filename&gt;:表示搜索完全匹配指定文件名的文件</span><br><span class="line">     -exec&lt;command&gt;:指示find命令为每个匹配的文件路径执行指定的命令。</span><br><span class="line"></span><br><span class="line">例：find &#x2F;mnt&#x2F;volumer -empty -name foobar -exec rm</span><br><span class="line">作用：该命令会搜索&#x2F;mnt&#x2F;volumer 中的所有名称匹配foobar的空文件，并执行rm命令将其删去</span><br><span class="line">5、file &lt;filename&gt; :通过读取filename文件的内容判断文件的类型。</span><br><span class="line">6、grep &lt;pattern&gt; &lt;file&gt;: grep 所有的参数都支持通配符，所以你可以搜索整个目录中所有文件内容</span><br></pre></td></tr></table></figure>

<h3 id="编辑器vi的使用：（vi和vim的联系）"><a href="#编辑器vi的使用：（vi和vim的联系）" class="headerlink" title="编辑器vi的使用：（vi和vim的联系）"></a>编辑器vi的使用：（vi和vim的联系）</h3><p>编辑器：编辑器就是一款软件，他的主要作用是用来编辑。如编写文件，编写代码等。<br>windows中的常用编辑器： notepad（笔记本） notepad++,UltraEditor, SlickEditor<br>linux中常用的编辑器：  自带的最古老的vi。比较好用的是vim，gedit。<br>注意：vim是vi的升级版，推荐使用vim。但使用vim（vi）打开一个文件时，如果文件不存在他会帮你新建一个文件。</p>
<p>vi的两种工作模式：<br>命令模式：  当vi打开时默认为命令模式，要转入输入模式，需要按a或i键。在命令模式下所有的输入都被vi当作命令来对待。（所以不要乱按）<br>输入模式： 输入模式用来向文件输入内容。当输入完成要保存文件时需要按Esc键切换到命令模式。<br>注意 :  看屏幕左下角，当命令模式时无提示信息或者提示文件名等信息，当输入模式时，提示：–INSERT–</p>
<p>使用方式：  vi  pathname     打开或创建一个文件</p>
<p>在命令模式下保存文件：<br>            ：wq      保存并且退出<br>            ：w         只保存不退出<br>             ：q         不保存退出  （只是进来看了一下没改时退出用）<br>             ：q!         不保存强制退出<br>             ：wq!      保存并强制退出</p>
<p>vi  的高级使用(在命令模式下使用)</p>
<ul>
<li><p>  /xxx      查找 xxx</p>
</li>
<li><p> ：行数   快速切换到指定行数</p>
</li>
<li><p> ：set nu  设置显示行号</p>
</li>
<li><p>  ：set nonu  设置不显示行号<br>注意：设置永久显示行号，需要修改vi的配置文件。打开vi的配置文件~/.vimrc 在其中输入set nu 即可。</p>
</li>
<li><p>   dd        删除一整行</p>
</li>
<li><p>   numdd    删除num行</p>
</li>
<li><pre><code>numyy    复制num行
</code></pre>
</li>
<li><pre><code>p              粘贴
</code></pre>
<p>注意:    复制时要把光标放在多行的第一行，粘贴时实际粘贴到当前光标所在行的下一行。</p>
</li>
<li><p> vim水平分屏的使用 :vim -on file1 file2 …其中:</p>
<p>   o(是小写字母o,不是数字零)n(表示你要分屏的文件个数)</p>
<p>   filen(文件名多个文件用空格分开)</p>
</li>
</ul>
<p>   我用两个文件做测试想到上面那个文件用:ctrl + w + k</p>
<p>   想到下面的文件用:ctrl + w + j</p>
<p>   当然你懒的话可以用:ctrl + w + w</p>
<ul>
<li> 在水平分屏好的文件中在打开别的文件:sp filename</li>
</ul>
<ul>
<li> vim垂直分屏:vim -On file1 file2 …..</li>
</ul>
<p>  其中:O(是大写字母O,不是数字零)n(表示你要分屏的文件个数)    </p>
<pre><code>       filen(文件名多个文件用空格分开)

  想到左面那个文件用:ctrl + w + h

  想到右面的文件用:ctrl + w + l
</code></pre>
<ul>
<li>  在垂直分屏好的文件中在打开别的文件:vsp filename</li>
</ul>
<ul>
<li><p>撤销命令（命令模式下有效）</p>
<p>  u ：小写的 u 键。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派开发智能小车</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_43.jpg"></p>
<h2 id="小车的配件"><a href="#小车的配件" class="headerlink" title="小车的配件"></a>小车的配件</h2><ol>
<li>底盘</li>
<li>4个轮子和4个减速电机</li>
<li>双路L298N一个</li>
<li>电池盒（最好要5号8节电池）</li>
<li>树莓派</li>
<li>若干的跳线和杜邦线（最好是母对母的）</li>
</ol>
<h2 id="小车代码，使用的Python的Web异步框架（tornado）"><a href="#小车代码，使用的Python的Web异步框架（tornado）" class="headerlink" title="小车代码，使用的Python的Web异步框架（tornado）"></a>小车代码，使用的Python的Web异步框架（tornado）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">IN1=<span class="number">11</span></span><br><span class="line">IN2=<span class="number">12</span></span><br><span class="line">IN3=<span class="number">13</span></span><br><span class="line">IN4=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    GPIO.setmode(GPIO.BOARD)</span><br><span class="line">    GPIO.setup(IN1,GPIO.OUT)</span><br><span class="line">    GPIO.setup(IN2,GPIO.OUT)</span><br><span class="line">    GPIO.setup(IN3,GPIO.OUT)</span><br><span class="line">    GPIO.setup(IN4,GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goLeft</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    GPIO.output(IN1,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN2,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN3,<span class="literal">False</span>)</span><br><span class="line">    GPIO.output(IN4,<span class="literal">False</span>)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goRight</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    GPIO.output(IN1,<span class="literal">False</span>)</span><br><span class="line">    GPIO.output(IN2,<span class="literal">False</span>)</span><br><span class="line">    GPIO.output(IN3,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN4,GPIO.HIGH)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goForward</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    GPIO.output(IN1,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN2,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN3,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN4,GPIO.HIGH)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goBack</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    GPIO.output(IN1,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN2,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN3,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN4,GPIO.LOW)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parkRight</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    GPIO.output(IN1,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN2,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN3,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN4,GPIO.HIGH)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parkLeft</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    GPIO.output(IN1,GPIO.LOW)</span><br><span class="line">    GPIO.output(IN2,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN3,GPIO.HIGH)</span><br><span class="line">    GPIO.output(IN4,GPIO.LOW)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.get_argument(<span class="string">&#x27;key&#x27;</span>))</span><br><span class="line">        arg = self.get_argument(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(arg == <span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">                goLeft()</span><br><span class="line">        <span class="keyword">if</span>(arg == <span class="string">&#x27;d&#x27;</span>):</span><br><span class="line">                goRight()</span><br><span class="line">        <span class="keyword">if</span>(arg == <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">                goForward()</span><br><span class="line">        <span class="keyword">if</span>(arg == <span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">                goBack()</span><br><span class="line">        <span class="keyword">if</span>(arg == <span class="string">&#x27;pr&#x27;</span>):</span><br><span class="line">                parkRight()</span><br><span class="line">        <span class="keyword">if</span>(arg == <span class="string">&#x27;pl&#x27;</span>):</span><br><span class="line">                parkLeft()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="安卓手机APP的程序代码（安卓初学，求放过）"><a href="#安卓手机APP的程序代码（安卓初学，求放过）" class="headerlink" title="安卓手机APP的程序代码（安卓初学，求放过）"></a>安卓手机APP的程序代码（安卓初学，求放过）</h2><ol>
<li><p>界面布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.daniel.controlcar.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:gravity=&quot;center&quot;</span><br><span class="line">            android:layout_marginTop=&quot;128px&quot;&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/go_a&quot;</span><br><span class="line">                android:layout_width=&quot;256px&quot;</span><br><span class="line">                android:layout_height=&quot;256px&quot;</span><br><span class="line">                android:background=&quot;@mipmap/left&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:orientation=&quot;horizontal&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/go_s&quot;</span><br><span class="line">                android:layout_width=&quot;256px&quot;</span><br><span class="line">                android:layout_height=&quot;256px&quot;</span><br><span class="line">                android:background=&quot;@mipmap/down&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/go_w&quot;</span><br><span class="line">                android:layout_width=&quot;256px&quot;</span><br><span class="line">                android:layout_height=&quot;256px&quot;</span><br><span class="line">                android:background=&quot;@mipmap/up&quot;</span><br><span class="line">                android:layout_marginLeft=&quot;256px&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/go_d&quot;</span><br><span class="line">                android:layout_width=&quot;256px&quot;</span><br><span class="line">                android:layout_height=&quot;256px&quot;</span><br><span class="line">                android:background=&quot;@mipmap/right&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/p_left&quot;</span><br><span class="line">                android:layout_width=&quot;256px&quot;</span><br><span class="line">                android:layout_height=&quot;256px&quot;</span><br><span class="line">                android:background=&quot;@mipmap/p_left&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/p_right&quot;</span><br><span class="line">                android:layout_width=&quot;256px&quot;</span><br><span class="line">                android:layout_height=&quot;256px&quot;</span><br><span class="line">                android:background=&quot;@mipmap/p_right&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>后台代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.daniel.controlcar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.daniel.common.HttpUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button goWBtn = (Button) findViewById(R.id.go_w);</span><br><span class="line">        goWBtn.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        Button goABtn = (Button) findViewById(R.id.go_a);</span><br><span class="line">        goABtn.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        Button goSBtn = (Button) findViewById(R.id.go_s);</span><br><span class="line">        goSBtn.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        Button goDBtn = (Button) findViewById(R.id.go_d);</span><br><span class="line">        goDBtn.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        Button goPLeftBtn = (Button) findViewById(R.id.p_left);</span><br><span class="line">        goPLeftBtn.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        Button goPRightBtn = (Button) findViewById(R.id.p_right);</span><br><span class="line">        goPRightBtn.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendPost</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">                String response = httpUtil.doPost(<span class="string">&quot;http://192.168.31.242:8888?key=&quot;</span> + key, <span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">                Log.d(<span class="string">&quot;returnValue&quot;</span>, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            action(view);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledExecutorService scheduledExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始计划任务，定时每100ms执行一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(<span class="keyword">final</span> View view)</span></span>&#123;</span><br><span class="line">        stop();<span class="comment">//首先把已有的定时任务关闭</span></span><br><span class="line">        scheduledExecutor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        scheduledExecutor.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.go_w:</span><br><span class="line">                        sendPost(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.go_a:</span><br><span class="line">                        sendPost(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.go_s:</span><br><span class="line">                        sendPost(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.go_d:</span><br><span class="line">                        sendPost(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.p_left:</span><br><span class="line">                        sendPost(<span class="string">&quot;pl&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.p_right:</span><br><span class="line">                        sendPost(<span class="string">&quot;pr&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">300</span>, TimeUnit.MILLISECONDS);    <span class="comment">//每间隔100ms发送Message</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止计划任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduledExecutor.shutdownNow();</span><br><span class="line">            scheduledExecutor = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>配置文件AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.daniel.controlcar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span> <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HttpUtil</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.daniel.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.MediaType;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.RequestBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Daniel on 2018/6/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON = MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">post</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RequestBody body = RequestBody.create(JSON, json);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.body().string();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPost</span><span class="params">(String url,String paramJson)</span></span>&#123;</span><br><span class="line">        HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">        String responseStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            responseStr = httpUtil.post(url,paramJson);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>智能小车</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派开机启动</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_39.jpg"></p>
<h2 id="制作脚本"><a href="#制作脚本" class="headerlink" title="制作脚本"></a>制作脚本</h2><p>该步骤直接省略，按照个人需求编写</p>
<h2 id="添加开机启动"><a href="#添加开机启动" class="headerlink" title="添加开机启动"></a>添加开机启动</h2><h3 id="方法一-向rc-local文件添加启动代码"><a href="#方法一-向rc-local文件添加启动代码" class="headerlink" title="方法一: 向rc.local文件添加启动代码"></a>方法一: 向rc.local文件添加启动代码</h3><p>修改rc.local文件，在中断输入并回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@raspberry:~$sudo nano &#x2F;etc&#x2F;rc.local</span><br></pre></td></tr></table></figure>

<p>在打开的文本中找到exit 0,在此之前添加的代码再启动时会被执行(在执行代码的末尾加上&amp; 可以在后台执行)：</p>
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/screenshot_1.png" class="">

<h3 id="方法二-将程序作为服务启动"><a href="#方法二-将程序作为服务启动" class="headerlink" title="方法二: 将程序作为服务启动"></a>方法二: 将程序作为服务启动</h3><p>在/etc/init.d/目录下新建一个服务脚本文件，在终端输入并回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@raspberry:~ $ sudo nano &#x2F;etc&#x2F;init.d&#x2F;my_start</span><br></pre></td></tr></table></figure>
<p>在打开的文本编辑器中输入一下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start):</span><br><span class="line">        echo &quot;Starting app&quot;</span><br><span class="line">        nohup python3 &#x2F;home&#x2F;pi&#x2F;share&#x2F;ip_acquire.py &amp;</span><br><span class="line">    ;;</span><br><span class="line">    stop):</span><br><span class="line">        echo &quot;to&quot;</span><br><span class="line">        #kill $( ps aux | grep -m 1 &#39;python3 &#x2F;home&#x2F;pi&#x2F;share&#x2F;ip_acquire.py&#39; | awk &#39;&#123; print $2 &#125;&#39;) ;; *)</span><br><span class="line">        echo &quot;Usage: service start_tool start|stop&quot;</span><br><span class="line">        exit 1 ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p>设置python脚本开机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 &#x2F;etc&#x2F;init.d&#x2F;my_start</span><br></pre></td></tr></table></figure>
<p>这样启动该脚本用service命令就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service my_start start #启动</span><br><span class="line">sudo service my_start stop #停止</span><br></pre></td></tr></table></figure>

<p>最后设置开机启动就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-rc.d my_start defaults</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>开机启动</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派控制低电平触发蜂鸣器</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A7%E5%88%B6%E4%BD%8E%E7%94%B5%E5%B9%B3%E8%A7%A6%E5%8F%91%E8%9C%82%E9%B8%A3%E5%99%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_42.jpg"></p>
<h2 id="连线如下图所示"><a href="#连线如下图所示" class="headerlink" title="连线如下图所示"></a>连线如下图所示</h2><img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A7%E5%88%B6%E4%BD%8E%E7%94%B5%E5%B9%B3%E8%A7%A6%E5%8F%91%E8%9C%82%E9%B8%A3%E5%99%A8/screenshot_1.png" class="">

<h2 id="Python代码-欢乐颂的第一段"><a href="#Python代码-欢乐颂的第一段" class="headerlink" title="Python代码(欢乐颂的第一段)"></a>Python代码(欢乐颂的第一段)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BOARD)</span><br><span class="line">GPIO.setup(<span class="number">12</span>,GPIO.OUT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GPIO.output(<span class="number">12</span>,GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT1</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">523</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT2</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">587</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT3</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">659</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT4</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">698</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT5</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">784</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT6</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">880</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT7</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">988</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">INT11</span>(<span class="params">time1</span>):</span></span><br><span class="line">	p = GPIO.PWM(<span class="number">12</span>,<span class="number">1046</span>)</span><br><span class="line">	p.start(<span class="number">1</span>)</span><br><span class="line">	time.sleep(time1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INT3(<span class="number">0.5</span>)</span><br><span class="line">INT3(<span class="number">0.5</span>)</span><br><span class="line">INT4(<span class="number">0.5</span>)</span><br><span class="line">INT5(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">INT5(<span class="number">0.5</span>)</span><br><span class="line">INT4(<span class="number">0.5</span>)</span><br><span class="line">INT3(<span class="number">0.5</span>)</span><br><span class="line">INT2(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">INT1(<span class="number">0.5</span>)</span><br><span class="line">INT1(<span class="number">0.5</span>)</span><br><span class="line">INT2(<span class="number">0.5</span>)</span><br><span class="line">INT3(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">INT3(<span class="number">1</span>)</span><br><span class="line">INT2(<span class="number">0.5</span>)</span><br><span class="line">INT2(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.stop()</span><br><span class="line">GPIO.cleanup()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 laba.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>蜂鸣器</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派操作摄像头</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_45.jpg"><br>连接方式：连接器的位置：90度垂直连接器，HDMI口旁边那个。连接时触点一侧朝向HDMI接口</p>
<h2 id="1-首先进行系统和软件升级"><a href="#1-首先进行系统和软件升级" class="headerlink" title="1. 首先进行系统和软件升级"></a>1. 首先进行系统和软件升级</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<h2 id="2-设置摄像头enable"><a href="#2-设置摄像头enable" class="headerlink" title="2. 设置摄像头enable"></a>2. 设置摄像头enable</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>
<p>①首先选择Interfacing Options</p>
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/screenshot_1.png" class="">
<p>②选择Camera</p>
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/screenshot_2.png" class="">
<p>③选择Yes，然后回车</p>
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/screenshot_3.png" class="">
<p>④显示设置成功提示</p>
<img src="/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/screenshot_4.png" class="">
<p>⑤重启树莓派</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h2 id="3-使用摄像头拍一张照片"><a href="#3-使用摄像头拍一张照片" class="headerlink" title="3. 使用摄像头拍一张照片"></a>3. 使用摄像头拍一张照片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspistill -o image.jpg  #会在当前目录下生成一张叫image.jpg的图片</span><br></pre></td></tr></table></figure>

<h2 id="4-使用摄像头录制一段-h264格式的-视频"><a href="#4-使用摄像头录制一段-h264格式的-视频" class="headerlink" title="4. 使用摄像头录制一段(h264格式的)视频"></a>4. 使用摄像头录制一段(h264格式的)视频</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspivid -o video.h264</span><br><span class="line">raspivid -o video.h264 -t 10000  #录制一段10S中的视频</span><br></pre></td></tr></table></figure>

<h2 id="5-以demo模式录制视频（没太懂）"><a href="#5-以demo模式录制视频（没太懂）" class="headerlink" title="5. 以demo模式录制视频（没太懂）"></a>5. 以demo模式录制视频（没太懂）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspivid -o video.h264 -t 10000 -d</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="以下是原英文的"><a href="#以下是原英文的" class="headerlink" title="以下是原英文的"></a>以下是原英文的</h2></blockquote>
<p>How to use the Raspberry Pi camera software</p>
<p>raspivid is a command line application that allows you to capture video with the camera module, while the applicationraspistill allows you to capture images.</p>
<p>-o or –output specifies the output filename and -t or –timeout specifies the amount of time that the preview will be displayed in milliseconds. Note that this set to 5s by default and that raspistill will capture the final frame of the preview period.</p>
<p>-d or –demo runs the demo mode that will cycle through the various image effects that are available.</p>
<h2 id="Example-commands"><a href="#Example-commands" class="headerlink" title="Example commands"></a>Example commands</h2><p>Capture an image in jpeg format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspistill -o image.jpg</span><br></pre></td></tr></table></figure>

<p>Capture a 5s video in h264 format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspivid -o video.h264</span><br></pre></td></tr></table></figure>
<p>Capture a 10s video:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspivid -o video.h264 -t 10000</span><br></pre></td></tr></table></figure>

<p>Capture a 10s video in demo mode:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raspivid -o video.h264 -t 10000 -d</span><br></pre></td></tr></table></figure>
<p>To see a list of possible options for running raspivid or raspistill, you can run:</p>
<p>raspivid | less</p>
<p>raspistill | less</p>
<p>Use the arrow keys to scroll and type q to exit.</p>
<p>Extended documentation is available.</p>
<p>Note that we recommend that you change SSH password if you are using a camera, in order to prevent unwanted access.</p>
<h2 id="How-to-stream-video-from-the-Raspberry-Pi-camera-over-a-network"><a href="#How-to-stream-video-from-the-Raspberry-Pi-camera-over-a-network" class="headerlink" title="How to stream video from the Raspberry Pi camera over a network"></a>How to stream video from the Raspberry Pi camera over a network</h2><h3 id="To-view-the-feed-on-Linux"><a href="#To-view-the-feed-on-Linux" class="headerlink" title="To view the feed on Linux"></a>To view the feed on Linux</h3><p>Install the dependencies by running the following in a terminal:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mplayer netcat</span><br></pre></td></tr></table></figure>
<p>Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).</p>
<p>Run the following command in a terminal to view the feed using MPlayer:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -p 5001 | mplayer -fps 31 -cache 1024 -</span><br></pre></td></tr></table></figure>

<h3 id="To-view-the-feed-on-Windows"><a href="#To-view-the-feed-on-Windows" class="headerlink" title="To view the feed on Windows"></a>To view the feed on Windows</h3><p>Install and run Linux instead.</p>
<p>Find your IP address by running ipconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).</p>
<p>Download MPlayer.</p>
<p>Download Netcat.</p>
<p>Note that your browser may complain that these files are malicious, as they are unsigned executables.</p>
<p>Press the Windows key and the ‘r’ key simultaneously to bring up the “Run” dialog. Enter cmd.exe into the dialog and press enter/return to open a DOS prompt.</p>
<p>Enter the following command at the prompt to view the feed using MPlayer:</p>
<p>[Path to nc.exe]\nc.exe -L -p 5001 | [Path to mplayer.exe]\mplayer.exe -fps 31 -cache 1024 -</p>
<h2 id="To-view-the-feed-on-OS-X"><a href="#To-view-the-feed-on-OS-X" class="headerlink" title="To view the feed on OS X"></a>To view the feed on OS X</h2><p>Download MPlayer.</p>
<p>Alternatively, you can download mplayer using Brew, which we recommend.</p>
<p>Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).</p>
<p>Run the following command in Terminal to view the feed using MPlayer:</p>
<p>nc -l -p 5001 | mplayer -fps 31 -cache 1024 -</p>
<p>To view the feed on a Raspberry Pi:</p>
<p>Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).</p>
<p>Run the following commands in a terminal on the receiving Pi:</p>
<p>mkfifo buffer</p>
<p>nc -p 5001 -l &gt; buffer | /opt/vc/src/hello_pi/hello_video/hello_video.bin buffer</p>
<p>To transmit the feed from the Pi with camera module attached</p>
<p>After setting up the “receiving” machine as per the instructions above, run the following commands in a terminal on the “transmitting” Pi:</p>
<p>raspivid -t 999999 -o – | nc [insert the IP address of the client] 5001</p>
<p>You can then use the commands listed in the “How to use the Raspberry Pi camera software” section above to change the capture time or to add a video effect</p>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>摄像头</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派更换apt-get update &amp;&amp; apt-get upgrade源，解决更新慢的问题</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9B%B4%E6%8D%A2apt-get-update-apt-get-upgrade%E6%BA%90%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%9B%B4%E6%96%B0%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_39.jpg"></p>
<blockquote>
<h3 id="起因：树莓派执行sudo-apt-get-update下载慢，中断"><a href="#起因：树莓派执行sudo-apt-get-update下载慢，中断" class="headerlink" title="起因：树莓派执行sudo apt-get update下载慢，中断"></a>起因：树莓派执行sudo apt-get update下载慢，中断</h3></blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>备份sources.list文件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure></li>
<li>编辑sources.list 文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/source.list</span><br></pre></td></tr></table></figure></li>
<li>使用#注释原来的内容,并添加以下内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main non-free contrib</span><br></pre></td></tr></table></figure></li>
<li>更新系统软件并更新已安装的包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; apt-get upgrade -y</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派更换键盘布局</title>
    <url>/2019/02/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9B%B4%E6%8D%A2%E9%94%AE%E7%9B%98%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_40.jpg"></p>
<blockquote>
<p>遇到的问题：树莓派键盘输入的时候会出现不是自己想要的字符，比如说输入|，会出现顶部~线，输入#，显示的却是£字符的问题</p>
</blockquote>
<ol>
<li>首先输入命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure keyboard-configuration</span><br></pre></td></tr></table></figure></li>
<li>选择通用101键盘布局，直接回车</li>
</ol>
<p>3.在键盘Layout中选择Other,回车</p>
<p>4.在选项中选择English(US)，回车</p>
<p>5.再选择English(US, alternative international),回车</p>
<p>6.然后一路回车就可以了</p>
<p>7.最重要的一步，重启系统，整个过程完成</p>
]]></content>
      <categories>
        <category>物联网</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>更换键盘布局</tag>
      </tags>
  </entry>
  <entry>
    <title>根据request获取用户IP地址公共方法</title>
    <url>/2019/01/25/%E6%A0%B9%E6%8D%AErequest%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7IP%E5%9C%B0%E5%9D%80%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_14.jpg"></p>
<blockquote>
<p>获取用户真实IP地址，不使用request.getRemoteAddr();的原因是有可能用户使用了代理软件方式避免真实IP地址,可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值，究竟哪个才是真正的用户端的真实IP呢？答案是取X-Forwarded-For中第一个非unknown的有效IP字符串。如：X-Forwarded-For：192.168.1.110, 192.168.1.120, 192.168.1.130,192.168.1.100用户真实IP为： 192.168.1.110</p>
</blockquote>
<p>具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddress</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String ip = request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>用户IP</tag>
      </tags>
  </entry>
  <entry>
    <title>用户登录对账号和密码加解密</title>
    <url>/2019/01/23/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%AF%B9%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<blockquote><p>背景说明<br>闲的无聊，F12看了下项目上的登录，一看账号和密码都是明文发送的，因此找了下网络上的一些文章，对项目进行了优化</p>
</blockquote>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前的项目登录的时候都是明文的传递账号和密码，具体如下图所示</p>
<img src="/2019/01/23/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%AF%B9%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86/screenshort_1.png" class="">
<img src="/2019/01/23/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%AF%B9%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86/screenshort_2.png" class="">

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="准备资源"><a href="#准备资源" class="headerlink" title="准备资源"></a>准备资源</h3><ul>
<li><p>jar包(使用Maven引入jar包，如果不是Maven项目可以去Maven仓库将jar下载下来，然后导入项目中)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk16<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>加密js文件<br>在Github上找到这个项目<a href="https://github.com/travist/jsencrypt">https://github.com/travist/jsencrypt</a>的bin目录下下载<code>jsencrypt.min.js</code>进行</p>
</li>
</ul>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol>
<li><p>（后台）创建一个RSA工具类(<code>RSAUtil.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RASUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/109:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//KeyPair is a simple holder for a key pair.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> KeyPair keyPair = initKey();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法，产生key pair，提供provider和random</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> KeyPair instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KeyPair <span class="title">initKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//添加provider</span></span><br><span class="line">            Provider provider = <span class="keyword">new</span> org.bouncycastle.jce.provider.BouncyCastleProvider();</span><br><span class="line">            Security.addProvider(provider);</span><br><span class="line">            <span class="comment">//产生用于安全加密的随机数</span></span><br><span class="line">            SecureRandom random = <span class="keyword">new</span> SecureRandom();</span><br><span class="line"></span><br><span class="line">            KeyPairGenerator generator = KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>, provider);</span><br><span class="line">            generator.initialize(<span class="number">1024</span>, random);</span><br><span class="line">            <span class="keyword">return</span> generator.generateKeyPair();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生public key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> public key字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateBase64PublicKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PublicKey publicKey = (RSAPublicKey)keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//encodeBase64(): Encodes binary data using the base64</span></span><br><span class="line">        <span class="comment">//algorithm but does not chunk the output.</span></span><br><span class="line">        <span class="comment">//getEncoded():返回key的原始编码形式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.encodeBase64(publicKey.getEncoded()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 需要解密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  破解之后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptBase64</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//decodeBase64():将Base64数据解码为&quot;八位字节”数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decrypt(Base64.decodeBase64(string.getBytes())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] byteArray) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Provider provider = <span class="keyword">new</span> org.bouncycastle.jce.provider.BouncyCastleProvider();</span><br><span class="line">            Security.addProvider(provider);</span><br><span class="line">            <span class="comment">//Cipher: 提供加密和解密功能的实例</span></span><br><span class="line">            <span class="comment">//transformation: &quot;algorithm/mode/padding&quot;</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">&quot;RSA/ECB/PKCS1Padding&quot;</span>, provider);</span><br><span class="line">            PrivateKey privateKey = keyPair.getPrivate();</span><br><span class="line">            <span class="comment">//初始化</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="comment">//doFinal(): 加密或者解密数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] plainText = cipher.doFinal(byteArray);</span><br><span class="line">            <span class="keyword">return</span> plainText;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>（后台）编写一个生成公钥的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Description</span> 生成公钥</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span> 2018/12/10 9:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/genPubKey&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">genPubKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;code&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">	String publicKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		publicKey = RSAUtil.generateBase64PublicKey();</span><br><span class="line">		map.put(<span class="string">&quot;pubkey&quot;</span>,publicKey);</span><br><span class="line">		map.put(<span class="string">&quot;code&quot;</span>,<span class="number">1</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">		map.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> publicKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>（前台）登录界面引入<code>jsencrypt.min.js</code>，初始化登录页的同时初始化公钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;页面初始化，调取公钥</span><br><span class="line">var publicKey &#x3D; &#39;&#39;;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    getPublicKey();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调取后台生成公钥接口</span><br><span class="line">function getPublicKey()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &quot;user&#x2F;genPubKey&quot;,</span><br><span class="line">        type: &quot;post&quot;,</span><br><span class="line">        dataType: &quot;text&quot;,</span><br><span class="line">		data:&#123;&#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            if(data) publicKey &#x3D; data;</span><br><span class="line">            if(publicKey&#x3D;&#x3D;null)&#123;</span><br><span class="line">                alert(获取publicKey失败，请联系管理员！);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>（前台）点击登录时，使用公钥生成私钥，加密账号和密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var uname &#x3D; $.trim($(&quot;#userName&quot;).val());</span><br><span class="line">var upwd &#x3D; $.trim($(&quot;#passWord&quot;).val());</span><br><span class="line"></span><br><span class="line">var encrypt &#x3D; new JSEncrypt();</span><br><span class="line">if(publicKey)&#123;</span><br><span class="line">encrypt.setPublicKey(publicKey);&#x2F;&#x2F;设置公钥到前端生成私钥</span><br><span class="line">uname &#x3D; encrypt.encrypt(uname);&#x2F;&#x2F;加密用户名</span><br><span class="line">upwd &#x3D; encrypt.encrypt(upwd);&#x2F;&#x2F;加密密码</span><br><span class="line">&#x2F;&#x2F;通过ajax发送加密的账号和密码到后台</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>（后台）后台账号和密码解密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String loginID = RSAUtil.decryptBase64(username);</span><br><span class="line">String pwd = RSAUtil.decryptBase64(passwd);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>前台页面加载时调用生成公钥方法生成公钥，然后用户点击登录时，获取用户名和密码，根据之前生成的公钥，进行私钥加密，传入后台的数据就是已经加密过的数据，然后我们在后台进行解密，得到用户输入的原始密码和账户</p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
        <category>功能相关</category>
        <category>登录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>登录</tag>
        <tag>加解密</tag>
      </tags>
  </entry>
  <entry>
    <title>第10章 深入Spring MVC开发</title>
    <url>/2019/05/25/%E7%AC%AC10%E7%AB%A0-%E6%B7%B1%E5%85%A5Spring-MVC%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_56.jpg"></p>
<h1 id="深入Spring-MVC-开发"><a href="#深入Spring-MVC-开发" class="headerlink" title="深入Spring MVC 开发"></a>深入Spring MVC 开发</h1><h2 id="获取控制器参数"><a href="#获取控制器参数" class="headerlink" title="获取控制器参数"></a>获取控制器参数</h2><h3 id="无注解下获取参数"><a href="#无注解下获取参数" class="headerlink" title="无注解下获取参数"></a>无注解下获取参数</h3><h3 id="使用-RequestParam获取参数"><a href="#使用-RequestParam获取参数" class="headerlink" title="使用@RequestParam获取参数"></a>使用<code>@RequestParam获取参数</code></h3><p>前后端可能出现命名规则不同，这时需要把前端的参数与后台的参数对应起来。Spring MVC提供注解<code>@RequestParam</code>来确定前后端参数名称的映射关系，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/annotation&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">requestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestParam(&quot;int_val&quot;)</span> Integer intVal,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestParam(&quot;long_val&quot;)</span> Integer longVal,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestParam(&quot;str_val&quot;)</span> Integer stringVal</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">&quot;intVal&quot;</span>,intVal);</span><br><span class="line">    paramsMap.put(<span class="string">&quot;longVal&quot;</span>,longVal);</span><br><span class="line">    paramsMap.put(<span class="string">&quot;stringVal&quot;</span>,stringVal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在浏览器中输入<a href="http://localhost:8080/my/annotation?int_val=1&amp;long_val=2&amp;str_val=str%EF%BC%8C%E5%B0%B1%E8%83%BD%E5%A4%9F%E7%9C%8B%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82%E4%BD%86%E6%98%AF%E5%A6%82%E6%9E%9C%E6%8A%8A3%E4%B8%AAHTTP%E5%8F%82%E6%95%B0%E4%B8%AD%E5%8E%BB%E6%8E%89%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%8A%A5%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF%EF%BC%8C%E5%9B%A0%E4%B8%BA%E9%BB%98%E8%AE%A4%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B@RequestParam%E6%A0%87%E6%B3%A8%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF%E4%B8%8D%E8%83%BD%E4%B8%BA%E7%A9%BA%E7%9A%84%EF%BC%8C%E4%B8%BA%E4%BA%86%E5%AE%83%E8%83%BD%E5%A4%9F%E4%B8%BA%E7%A9%BA%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%85%8D%E7%BD%AE%E5%85%B6%E5%B1%9E%E6%80%A7required%E4%B8%BAfalse%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BC%A0%E7%A9%BA%E4%BA%86">http://localhost:8080/my/annotation?int_val=1&amp;long_val=2&amp;str_val=str，就能够看到请求的结果。但是如果把3个HTTP参数中去掉任意一个，就会报异常错误，因为默认的情况下@RequestParam标注的参数是不能为空的，为了它能够为空，可以配置其属性required为false，代码如下，这样就可以传空了</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam(value=&quot;int_val&quot;,required = false)</span> Integer intVal,</span><br></pre></td></tr></table></figure>

<h3 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h3><p>在Spring MVC中，除了可以传递简单的参数外，还可以传递数组。支持用逗号隔开的数组参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/requestArray&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">requestArray</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] intArr, Long[] longArr, String[] strArr</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramMap.put(<span class="string">&quot;intArr&quot;</span>,intArr);</span><br><span class="line">    paramMap.put(<span class="string">&quot;longArr&quot;</span>,longArr);</span><br><span class="line">    paramMap.put(<span class="string">&quot;strArr&quot;</span>,strArr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paramMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在浏览器中输入<a href="http://localhost:8080/my/requestArray?intArr=1,2,3&amp;longArr=4,5,6&amp;strArr=str1,str2,str3%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%9C%80%E8%A6%81%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E6%97%B6%EF%BC%8C%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%8F%AA%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%8D%B3%E5%8F%AF">http://localhost:8080/my/requestArray?intArr=1,2,3&amp;longArr=4,5,6&amp;strArr=str1,str2,str3，可以看到需要传递数组参数时，每个参数的数组元素只需要通过逗号分隔即可</a></p>
<h3 id="传递JSON"><a href="#传递JSON" class="headerlink" title="传递JSON"></a>传递JSON</h3><p>下面演示下使用ajax传递json数据，首先是js代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">  userName:userName,</span><br><span class="line">  note:note</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.post(&#123;</span><br><span class="line">  url:<span class="string">&quot;./insert&quot;</span>,</span><br><span class="line">  <span class="comment">//此处需要告知传递参数类型为JSON，不能缺少</span></span><br><span class="line">  contentType:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  <span class="comment">//将JSON转化为字符串</span></span><br><span class="line">  data:<span class="built_in">JSON</span>.stringify(params),</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的js代码中<code>contentType:&quot;application/json&quot;,</code>和<code>data:JSON.stringify(params),</code>必须要加上，到达后台之后可以通过<code>@RequestBody</code>转化成自己想要的对象</p>
<h3 id="通过URL传递参数"><a href="#通过URL传递参数" class="headerlink" title="通过URL传递参数"></a>通过URL传递参数</h3><p>REST风格的的接口，常规是通过URL传递参数的，例如获取编号为1的用户，url就写成<code>/user/1</code>，这里的1代表的是用户编号（id），通过注解<code>@PathVariable</code>的组合获取参数URL参数，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="JSR-303验证"><a href="#JSR-303验证" class="headerlink" title="JSR-303验证"></a>JSR-303验证</h3><p><code>JSR-303</code>的主要是通过注解的方式进行的，这里先定义一个需要验证的POJO，此时需要在其属性中加入相关的注解，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidtorPojo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非空判断</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只能是将来的日期</span></span><br><span class="line">    <span class="meta">@Future(message = &quot;需要一个将来的日期&quot;)</span></span><br><span class="line">    <span class="comment">//@Past//只能是过去的日期</span></span><br><span class="line">    <span class="comment">//日期格式转换</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="comment">//不能为空</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最小0.1元</span></span><br><span class="line">    <span class="meta">@DecimalMin(value=&quot;0.1&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMax(value=&quot;100000.00&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double aDouble = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value=1,message = &quot;最小值为1&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value=99,message = &quot;最大值为99&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Range(min = 1,max = 888,message = &quot;范围为1至888&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long range;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//邮箱验证</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size(min=20,max = 30,message = &quot;字符串长度要求20到30&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/valid/validate&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">validate</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ValidtorPojo vp, Errors errors)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取错误列表</span></span><br><span class="line">        List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line">        <span class="keyword">for</span>(ObjectError oe : oes)&#123;</span><br><span class="line">            String key = <span class="keyword">null</span>;</span><br><span class="line">            String msg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//字段错误</span></span><br><span class="line">            <span class="keyword">if</span>(oe <span class="keyword">instanceof</span> FieldError)&#123;</span><br><span class="line">                FieldError fe = (FieldError)oe;</span><br><span class="line">                key = fe.getField();<span class="comment">//获取错误验证字段名</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非字段错误</span></span><br><span class="line">                key = oe.getObjectName();<span class="comment">//获取验证对象名称</span></span><br><span class="line">            &#125;</span><br><span class="line">            msg = oe.getDefaultMessage();</span><br><span class="line">            errorMap.put(key,msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> errorMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>代码中使用@RequetBody代表接收一个JSON参数，这样Spring就会获取页面提交过来的JSON 数据，然后@Valid注解则表示启动验证机制，这样Spring就会启动JSR-303验证机制进行验证，它会自动地将验证结果放入Errors对象中，这样就可以从中得到相关验证过后的消息。这些验证只能是简单的验证，复杂类的验证比如说总价的验证=单价*数量，这样的逻辑就不能通过JSR-303验证了，为此Spring还提供了自己的验证机制。</p>
<h3 id="参数验证机制"><a href="#参数验证机制" class="headerlink" title="参数验证机制"></a>参数验证机制</h3><p>在Spring控制器中，还允许使用注解@InitBinder，这个注解的作用是允许在进入控制器方法钱修改WebDataBinder机制。下面在验证机制和日期格式绑定的场景下演示，不过在此之前，需要稍微人事下SPring MVC的验证机制。下面是自定义验证的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置验证器只支持User类验证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aClass.equals(User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象如果为空</span></span><br><span class="line">        <span class="keyword">if</span>(o == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//直接在参数处报错，这样就不能进入控制器的方法</span></span><br><span class="line">            errors.rejectValue(<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;用户不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制转换</span></span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="comment">//用户名非空字符串</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(user.getUserName))&#123;</span><br><span class="line">            <span class="comment">//增加错误，可以进入控制器方法</span></span><br><span class="line">            errors.rejectValue(<span class="string">&quot;userName&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了这个验证器，Spring还不会自动启动它，因为还没有绑定给WebDataBinder机制，在Spring MVC中提供了一个注解@InitBinder，他的作用是在执行控制器方法前，处理器会限制性@InitBinder标注的方法。这时可以讲WebDataBinder对象作为参数传递到方法中，通过这层关系得到WebDatBinder对象，这个对象有一个SetValidator方法，它可以绑定自定义的验证器，这样就可以在获取参数之后，通过自定义的验证器去验证参数，知识WebDataBinder除了可以绑定验证器之外，还可以进行参数的自定义，例如，不适用@DataTimeFormat获取日期参数。假设还继续使用代码StringToUserConverter转换器，使用下面的代码验证和设置日志格式<br>绑定验证器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.validator.UserValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.propertyeditors.CustomDateEditor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: mc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-08-28 20:14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用控制前先执行这个方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">        <span class="comment">//绑定验证器</span></span><br><span class="line">        binder.setValidator(<span class="keyword">new</span> UserValidator());</span><br><span class="line">        <span class="comment">//定义日期参数格式，参数不在徐注解@DateTimeFormat，boolean参数表示是允许为空</span></span><br><span class="line">        binder.registerCustomEditor(Date.class,<span class="keyword">new</span> CustomDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>),<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/validator&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">validator</span><span class="params">(<span class="meta">@Valid</span> User user,Errors errors,Date date)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        map.put(<span class="string">&quot;date&quot;</span>,date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否有错误存在</span></span><br><span class="line">        <span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">            <span class="comment">//获取全部错误</span></span><br><span class="line">            List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line">            <span class="keyword">for</span>(ObjectError oe:oes)&#123;</span><br><span class="line">                <span class="comment">//判断是否字段错误</span></span><br><span class="line">                <span class="keyword">if</span>(oe <span class="keyword">instanceof</span> FieldError)&#123;</span><br><span class="line">                    <span class="comment">//字段错误</span></span><br><span class="line">                    FieldError fe = (FieldError) oe;</span><br><span class="line">                    map.put(fe.getField(),fe.getDefaultMessage());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//对象错误</span></span><br><span class="line">                    map.put(oe.getObjectName(),oe.getDefaultMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的initBinder方法因为标注注解@InitBinder，因此会在控制器方法前执行，并且将WebDataBinder对象传递进去，这个方法里绑定了自定义的验证器UserValidator，而且设置了日期的格式，所以在控制器方法中不在需要@DateTimeFormate去定义日期格式。通过这样的自定义，在使用注解@Valid注解User参数后，Spring MVC会遍历对应的验证器，当遍历到UserValidator时，会去执行他的support方法，因为该方法会返回true，所以SPring MVC会用这个验证去验证User类的数据<br>这里还要关注下控制器中的方法的Errors参数，他是SPring MVC通过验证器验证后得到的错误信息，由Spring MVC执行完验证规则后进行传递，这里首先是判断是否存在错误，如果存在错误，则遍历错误，然后将错误信息放入Map中返回，因为方法标注了@ResponseBody，所以最后会转换成JSON相应请求</p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器设计"><a href="#拦截器设计" class="headerlink" title="拦截器设计"></a>拦截器设计</h3><p>首先所有的拦截器都需要实现<code>HandlerInterceptor</code>接口，拦截器中有三个方法，分别是preHandle、postHandle、afterCompletion，他们的执行顺序如下</p>
<ul>
<li>执行preHandle方法，该方法会返回一个布尔值。如果为false，则结束所有的流程；如果为true则执行下一步</li>
<li>执行处理器逻辑，它包括控制器的功能</li>
<li>执行postHandle方法</li>
<li>执行师徒解析和视图渲染</li>
<li>执行afterCompletion方法<br>因为这个接口是Java8 的接口，所以3个方法都被声明为default，并且提供了空实现。当我们需要自定义方法的时候，主需要实现HandlerInterceptor，覆盖其对应的方法即可。</li>
</ul>
<h3 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.interceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: mc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 项目拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-08-28 21:12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理器前方法&quot;</span>);</span><br><span class="line">        <span class="comment">//返回true，不会拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理器后方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理器完成方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的代码重写了3个方法，在这些方法中打印了一些信息，这样就可以定位拦截器的执行书序。有了这个拦截器，Spring MVC并不会发现他，还需要进行注册才能拦截，为此在配置文件中实现WebMvcConfigurer接口，最后覆盖其addInterceptors方法进行注册拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.interceptor.ApplicationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.ChannelTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.Topic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.xyd.mc&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EntityScan(basePackages = &quot;com.xyd.mc.*.*.pojo&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">    basePackages = &quot;com.xyd.mc.*&quot;,</span></span><br><span class="line"><span class="meta">    sqlSessionTemplateRef = &quot;sqlSessionTemplate&quot;,</span></span><br><span class="line"><span class="meta">    annotationClass = Repository.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McApplication</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/********其他代码********/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注册拦截器到Spring MVC机制，然后他会返回一个拦截器注册</span></span><br><span class="line">        InterceptorRegistration ir = registry.addInterceptor(<span class="keyword">new</span> ApplicationInterceptor());</span><br><span class="line">        <span class="comment">//指定拦截器的匹配模式，限制拦截器拦截请求</span></span><br><span class="line">        ir.addPathPatterns(<span class="string">&quot;/*/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里implements了WebMvcConfigurer接口，并重写了addInterceptors方法，将咱们写的拦截器加进去，他会拦截所有的请求只要是符合<code>/*/*</code>的请求</p>
<h3 id="多个拦截器的顺序"><a href="#多个拦截器的顺序" class="headerlink" title="多个拦截器的顺序"></a>多个拦截器的顺序</h3><ul>
<li>对于处理器前方法采用先注册限制性，而处理器后方法和完成方法则是先注册后执行的原则。</li>
<li>一旦一个拦截器返回false，则后续的拦截器、处理器和所有拦截器的处理器后方法都不会被执行</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>第11章 构建REST风格网站</title>
    <url>/2019/08/28/%E7%AC%AC11%E7%AB%A0-%E6%9E%84%E5%BB%BAREST%E9%A3%8E%E6%A0%BC%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_61.jpg"></p>
<h1 id="构建REST风格网站"><a href="#构建REST风格网站" class="headerlink" title="构建REST风格网站"></a>构建REST风格网站</h1><p>REST风格不是一种标准，而是一种风格，这种风格，在各个微服务之间用于交互的方式，每一个资源知识对应一个网站，而一个代表资源网站应该是一个名词，而不是动词，这代表资源的操作</p>
<h2 id="REST简述"><a href="#REST简述" class="headerlink" title="REST简述"></a>REST简述</h2><h3 id="REST（Representational-State-Transfer）名词解释"><a href="#REST（Representational-State-Transfer）名词解释" class="headerlink" title="REST（Representational State Transfer）名词解释"></a>REST（Representational State Transfer）名词解释</h3><ul>
<li>资源：他可以是系统权限用户、角色和菜单，也可以是一些媒体类型，如文本、图像，可以使用一个URI指向它，每个资源对应一个特定的URI，在REST中每一个资源都会对应一个独一无二的URI</li>
<li>表现层：有了资源还需要确定如何表现这个资源，例如，一个用户可以使用JSON、xml护着其他的形式表现出来</li>
<li>状态转换：显示中资源并不是一成不变的，是一个变化的过程，一个资源可以经历创建、访问、修改、删除的过程。对于HTTP协议，是一个没有状态的协议，这也就意味着对于资源的状态变化只能在服务端保存和修改</li>
</ul>
<p>有了上面的描述，下面稍微总结一下REST风格架构的特点</p>
<ul>
<li>服务器存在一系列的资源，每一个资源通过单独唯一的URI进行标识</li>
<li>服务端和服务器端之间相互传递资源，而资源会以魔偶中表现层得以展示</li>
<li>客户端通过HTTP协议所定义的动作对资源进行操作，已实现资源的状态转换<h3 id="HTTP的动作"><a href="#HTTP的动作" class="headerlink" title="HTTP的动作"></a>HTTP的动作</h3>REST风格的URI设计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取用户信息，1是用户编号</span><br><span class="line">GET &#x2F;user&#x2F;1</span><br><span class="line"># 查询多个用户信息</span><br><span class="line">GET &#x2F;users&#x2F;&#123;userName&#125;&#x2F;&#123;note&#125;</span><br><span class="line"># 创建用户</span><br><span class="line">POST &#x2F;user&#x2F;&#123;userName&#125;&#x2F;&#123;sex&#125;&#x2F;&#123;note&#125;</span><br><span class="line"># 修改用户全部属性</span><br><span class="line">PUT &#x2F;user&#x2F;&#123;id&#125;&#x2F;&#123;userName&#125;&#x2F;&#123;sex&#125;&#x2F;&#123;note&#125;</span><br><span class="line"># 修改用户名称</span><br><span class="line">PATCH &#x2F;user&#x2F;&#123;id&#125;&#x2F;&#123;userName&#125;</span><br><span class="line"># 删除用户</span><br><span class="line">DELETE &#x2F;user&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure>
注意，在URI中并没有出现动词，而是对应参数主要通过URI设计去获取。对于参数超过5个的可以考虑使用JSON方式来传递参数。</li>
</ul>
<h3 id="REST风格的一些误区"><a href="#REST风格的一些误区" class="headerlink" title="REST风格的一些误区"></a>REST风格的一些误区</h3><p>在设计URI时REST风格存在一些规范，例如，一般不应该在URI中存在动词<br><code>GET /user/get/1</code><br>这里的get是一个动词，在REST风格是不应该存在这样的动词的<br>另一个误区是加入版本号，例如：<br><code>GET /v1/user/1</code><br>其中v1代表一个版本号，而user表示用户信息，1则表示用户编号。这是一个错误的表达，因为在REST风格中资源的URI是唯一的，如果存在版本号，可以设置HTTP请求头，使用请求头的信息进行区分，例如，设置请求头的versin参数为1.0<br><code>Accept:version=1.0</code><br>在很多时候REST都不推荐使用类似于<br>PUT users?userName=user_name&amp;note=note<br>这样传递参数。这是一个更新用户的URI，按REST风格的建议是采用<br>PUT /users/{userName}/{note}<br>但是有时候会出现参数很多的情况，如果参数过多，考虑请求体取参数</p>
<h2 id="客户观请求RestTemplate"><a href="#客户观请求RestTemplate" class="headerlink" title="客户观请求RestTemplate"></a>客户观请求RestTemplate</h2><p>在当今的微服务中，会将一个大系统拆分为多个微服务系统。按照微服务应用的建议，每个微服务都会暴漏REST风格URI请求给别的微服务系统所调用，为了方便系统之间的相互调用，Spring给予模板类RestTemplate，通过它可以很方便的对REST请求进行系统之间的调用，完成系统之间的数据集成，在Spring Cloud中还可以声明式调用</p>
<h3 id="使用RestTemplate请求后端"><a href="#使用RestTemplate请求后端" class="headerlink" title="使用RestTemplate请求后端"></a>使用RestTemplate请求后端</h3><ol>
<li>最简单的GET请求<br>RestTemplate的底层是通过HttpURLConnection实现的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个RestTemplate对象</span></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//消费服务，第一个参数是url，第二个是返回类型，第三个是URI路径参数</span></span><br><span class="line">    User user = restTemplate.getForObject(<span class="string">&quot;http://localhost8080/user&#123;id&#125;&quot;</span>,User.class,id);</span><br><span class="line">    System.out.println(user.getUserName());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这是进行了一次最为简单的GET请求，这里的getForObject方法是需要关注的核心方法。第一个参数是URI标明请求服务器什么资源，而{id}则代表参数。第二个参数声明为UserVo.class，表示请求将返回UserVo类的结果，实际上服务器只返回JSON类型的数据，知识RestTemplate内部会将其准变为Java对象。<font color='red'>如果URI中有多个参数，只要按顺序写就可以了</font>，如果参数很多，可以使用下面的方法</li>
<li>多参数GET请求返回List数据<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 多参数GET请求返回List数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: [userName, note]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.List&lt;com.xyd.mc.demo.database.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/findUsers&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName,String note)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//使用Map封装多个参数，提高可读性</span></span><br><span class="line">    Map&lt;String,Object&gt; params =<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;userName&quot;</span>,userName);</span><br><span class="line">    params.put(<span class="string">&quot;note&quot;</span>,note);</span><br><span class="line">    <span class="comment">//Map中的key和URI中的参数意义对应</span></span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/user/findUsers/&#123;userName&#125;/&#123;note&#125;&quot;</span>;</span><br><span class="line">    <span class="comment">//请求后端</span></span><br><span class="line">    ResponseEntity&lt;List&gt; responseEntity = restTemplate.getForEntity(url,List.class,params);</span><br><span class="line">    List&lt;User&gt; users = responseEntity.getBody();</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里将参数用一个Map对象封装起来，而Map的键和URI中定义的参数保持一致，这样就能够将参数一一封装到Map。这里返回的是一个List对象，所以返回类型声明为List，这样RestTemplate就会解析结果返回数据。</li>
<li>通过POST请求传递JSON请求体<br>应用场景：保存/新增用户时出现字段比较多的情况，所以往往采用传递请求体的方式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过POST请求体传递JSON请求体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: [user]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: com.xyd.mc.demo.database.pojo.User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/insertUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 请求头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">    <span class="comment">//2. 创建请求实体对象</span></span><br><span class="line">    HttpEntity&lt;User&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(user,headers);</span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//3. 请求时传递请求尸体对象，并返回回填id的用户</span></span><br><span class="line">    User savedUser = restTemplate.postForObject(<span class="string">&quot;http://localhost:8080/user/insertUser&quot;</span>,request,User.class);</span><br><span class="line">    <span class="keyword">return</span> savedUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上面的代码首先定义了HTTP头，并将请求体内容设置为JSON类型，然后将它和请求体绑定到请求实体对象中，在RestTmplate的postForObject方法中将请求尸体对象传递过去，让后台接收就可以了。</li>
</ol>
<h3 id="获取响应头、状态码和资源交换"><a href="#获取响应头、状态码和资源交换" class="headerlink" title="获取响应头、状态码和资源交换"></a>获取响应头、状态码和资源交换</h3><p>HTTP状态吗可以辨别请求是否成功，如果发生错误，他还可以给出信息反馈错误原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;User&gt; userEntity = restTemplate.postForEntity(url,requestEntity,User.class);</span><br><span class="line"><span class="comment">//获取响应体</span></span><br><span class="line">User user = userEntity.getBody();</span><br><span class="line"><span class="comment">//获取响应头</span></span><br><span class="line">HttpHeaders respHeaders = userEntity.getHeaders();</span><br><span class="line"><span class="comment">//获取相应属性</span></span><br><span class="line">List&lt;String&gt; success = respHoeaders.get(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"><span class="comment">//响应的HTTP状态码</span></span><br><span class="line"><span class="keyword">int</span> status = respHeaders.getStatusCodeValue();</span><br></pre></td></tr></table></figure>
<p>这里可以看到使用了RestTemplate的postForEntity方法，他将会返回一个ResopneseEntity对象，这个对象包含了服务器返回的响应体，状态码和响应头</p>
]]></content>
  </entry>
  <entry>
    <title>第14章 Spring5新框架——WebFlux</title>
    <url>/2019/08/28/%E7%AC%AC14%E7%AB%A0-Spring5%E6%96%B0%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94WebFlux/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_64.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>第13章 学点Spring其他的技术</title>
    <url>/2019/08/28/%E7%AC%AC13%E7%AB%A0-%E5%AD%A6%E7%82%B9Spring%E5%85%B6%E4%BB%96%E7%9A%84%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_63.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>第15章 实践一下——抢购商品</title>
    <url>/2019/08/28/%E7%AC%AC15%E7%AB%A0-%E5%AE%9E%E8%B7%B5%E4%B8%80%E4%B8%8B%E2%80%94%E2%80%94%E6%8A%A2%E8%B4%AD%E5%95%86%E5%93%81/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_65.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>第16章 部署、测试和监控</title>
    <url>/2019/09/08/%E7%AC%AC16%E7%AB%A0-%E9%83%A8%E7%BD%B2%E3%80%81%E6%B5%8B%E8%AF%95%E5%92%8C%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_66.jpg"></p>
<h2 id="部署和运行"><a href="#部署和运行" class="headerlink" title="部署和运行"></a>部署和运行</h2><p>部署分为连个步骤，第一步是项目打包（war或者jar），第二步是如何运行项目。运行项目又可分为内嵌服务器和第三方服务器。</p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>使用IDEA创建项目时，采用的是war打包方式，二十几上还可以使用jar打包，只是这种创建方式不是主流，毕竟Java当前的开发方向是以Web应用为主。使用war创建项目后，IDE会帮助生成Web应用所需要的目录，例如JSP页面的webapp目录，与此同时还会在Maven的配置文件pom.xml中添加一些内容和，其中需要注意的是其中的打包方式<code>packaging</code>标签中的内容是<code>war</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xyd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mc<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在IDEA中，点击Build，选择<code>Build Artifacts..</code>即可编译打包项目，打包完成后会在项目的target目录下生成打包成的war包</p>
<img src="/2019/09/08/%E7%AC%AC16%E7%AB%A0-%E9%83%A8%E7%BD%B2%E3%80%81%E6%B5%8B%E8%AF%95%E5%92%8C%E7%9B%91%E6%8E%A7/screenshot_1.png" class="">
<img src="/2019/09/08/%E7%AC%AC16%E7%AB%A0-%E9%83%A8%E7%BD%B2%E3%80%81%E6%B5%8B%E8%AF%95%E5%92%8C%E7%9B%91%E6%8E%A7/screenshot_2.png" class="">

<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><ol>
<li>使用内嵌服务器运行项目<br>运行项目的方式很简单，对于IDE打出来的包，可以直接<code>java -jar</code>命令就可以直接运行，如下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar projectname.war</span><br></pre></td></tr></table></figure>
有时候可能希望使用命令指定参数，这也是没有问题的。比方说运行时候发现8080端口被占用了，此时希望使用9080，于是可以把命令修改为<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar projectname.war --server.port=9080</span><br></pre></td></tr></table></figure>
这样就可以启用9080端口运行服务器，这里注意项目配置文件中设置的端口也会被这个命令行的参数所覆盖。</li>
<li>使用外部服务器运行项目<br>最常用的中间件服务器是Tomcat，对于部署第三方非内嵌服务器，需要自己初始化Spring MVC的DispatcherServlet，关于这点IDE会帮助我们自动生成，在选择使用war打包项目时，他还会自动生成一个ServletInitializer.java。从名称看，他就是初始化Servlet的，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(McApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里可以看到，他继承可SpringBootServletInitializer，然后实现了configure方法，实现这个方法时为了载入Spring Boot的启动类，依靠这个启动类来读取配置。那么Web容器是如何识别到这SpringBootServletInitializer类的呢。原因是，在Servlet3.1规范之后允许Web容器不通过web.xml配置，只需要实现ServletContainerInitializer接口。在SpringMVC中已经提供了ServletContainerInitializer的实现类SpringServletContainerInitializer，这个实现类会遍历WebApplicationInitializer接口的实现类，加载它所配置的内容。<br>根据以上内容，只需要将生成的war包拷贝到Tomcat的webapps目录下，就可以完成部署</li>
</ol>
<h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>热部署，是在应用正在运行的时候升级软件，缺不需要重启应用。在Spring Boot中热部署也十分简单，通过Maven导入<code>spring-boot-devtools</code>即可，代码清单如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后重启系统，这样当修改其中的文件时，文件就会自动即时生效。其中配置了optional选项为true，代表别的项目依赖于当前项目，这个热部署不会在该项目上生效。热部署是通过LiveReload进行支持的，所以在日志中会看到下面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-09-08 11:18:11.872  INFO 18080 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729</span><br></pre></td></tr></table></figure>
<p>关于热部署的配置，主要有一下选项</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 是否启用一个livereload.com兼容的服务器</span></span><br><span class="line"><span class="meta">spring.devtools.livereload.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># livereload.com服务器端口</span></span><br><span class="line"><span class="meta">spring.devtools.livereload.port</span>=<span class="string">35729</span></span><br><span class="line"><span class="comment"># 在原来的基础上新增重启服务的文件夹目录</span></span><br><span class="line"><span class="meta">spring.devtools.restart.additional-paths</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 在原来的基础上新增不重启服务的文件夹目录</span></span><br><span class="line"><span class="meta">spring.devtools.restart.additional-exclude</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 是否启用自动重启功能</span></span><br><span class="line"><span class="meta">spring.devtools.restart.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 不重启服务的文件夹配置</span></span><br><span class="line"><span class="meta">spring.devtools.restart.exclude</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 设置对路径变化进行检测的时间间隔（毫秒为单位）</span></span><br><span class="line"><span class="meta">spring.devtools.restart.poll-interval</span>=<span class="string">1000ms</span></span><br><span class="line"><span class="comment"># 在没有改变任何classpath的情况下，在重启被出发前的静默时长(毫秒为单位)</span></span><br><span class="line"><span class="meta">spring.devtools.restart.quiet-period</span>=<span class="string">300ms</span></span><br><span class="line"><span class="comment"># 设置触发文件，当需要实现触发启动检查时，则需要修改这个文件</span></span><br><span class="line"><span class="meta">spring.devtools.restart.trigger-file</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在pom文件中引入测试包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-boot-starter-text会引入JUnit的测试包，这也就是先中使用最多的方案，所以下面基于它进行讨论，在Spring Boot可以支持多种方面的测试，如JPA，MongoDB、Rest风格和Redis等，基于使用原则</p>
]]></content>
  </entry>
  <entry>
    <title>第17章 分布式开发-Spring Cloud</title>
    <url>/2019/09/08/%E7%AC%AC17%E7%AB%A0-%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91-Spring-Cloud/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_67.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>第1章 Spring Boot来临</title>
    <url>/2019/04/23/%E7%AC%AC1%E7%AB%A0-Spring-Boot%E6%9D%A5%E4%B8%B4/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_46.jpg"></p>
<h2 id="1-1-Srping的历史"><a href="#1-1-Srping的历史" class="headerlink" title="1.1 Srping的历史"></a>1.1 Srping的历史</h2><h2 id="1-2-注解还是XML"><a href="#1-2-注解还是XML" class="headerlink" title="1.2 注解还是XML"></a>1.2 注解还是XML</h2><p>Spring早起的1.x版本，JDK不支持注解，JDK5加入注解</p>
<ul>
<li>XML配置文件：过于繁复</li>
<li>注解：会使得注解分部的导出都是，难于控制，需要了解很多框架的内部实现才能准确适用注解开发所需的功能  </li>
</ul>
<blockquote>
<p>不成文共识：业务类适用注解，例如，对于MVC开发控制适用@Controller,业务层适用@Service，持久层适用@Repository；对于一些共用的Bean，例如数据库、第三方资源等适用XML进行配置</p>
</blockquote>
<h2 id="1-3-Spring-Boot的优点"><a href="#1-3-Spring-Boot的优点" class="headerlink" title="1.3 Spring Boot的优点"></a>1.3 Spring Boot的优点</h2><p>优点如下：</p>
<ul>
<li>创建独立的Spring应用程序</li>
<li>嵌入Tomcat、Jetty或者Undertow，无需部署war文件</li>
<li>允许通过Maven来根据需要获取starter</li>
<li>尽可能的自动配置Spring</li>
<li>提供生产就绪功能，如指标、健康检查和外部配置</li>
<li>绝对没有代码生成，对XML没有要求配置</li>
</ul>
<p>spring-boot-starter-web捆绑了Spring MVC所以来的包，spring-boot-starter-tomcat绑定了内嵌的Tomcat，这样使得开发者能够尽可能快的搭建开发环境，快速进行开发和部署，这就是Spring Boot的特色</p>
<h2 id="1-4-传统Spring-MVC和Spring-Boot的对比"><a href="#1-4-传统Spring-MVC和Spring-Boot的对比" class="headerlink" title="1.4 传统Spring MVC和Spring Boot的对比"></a>1.4 传统Spring MVC和Spring Boot的对比</h2><ul>
<li>传统Spring MVC项目开发：需要配置DispatcherServlet，还需要配置Spring IoC的容器</li>
<li>使用Spring Boot开发后，只需要创建一个Maven工程，并把其名字定义为chapter1，然后这样就可以看到一个Maven的pom.xml，将其内容修改为如下代码清单<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Starter依赖引入 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- AOP包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Web开发包，将载入Spring MVC所需要的包，且内嵌tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加载测试依赖包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>这里我们只需要开发一个类就可以运行Spring Boot的应用了，为此新建类-Chapter1Main，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter1Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 Vue基础-安装</title>
    <url>/2019/10/18/%E7%AC%AC1%E7%AB%A0-Vue%E5%9F%BA%E7%A1%80-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_68.jpg"></p>
<h1 id="Vue基础之安装"><a href="#Vue基础之安装" class="headerlink" title="Vue基础之安装"></a>Vue基础之安装</h1><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>不支持IE8以下</p>
<h2 id="直接script引入"><a href="#直接script引入" class="headerlink" title="直接script引入"></a>直接script引入</h2><p>如果下面的下载地址没法下载，可以直接去官网进行下载，<a href="https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5">官网地址</a><br><a href="https://cn.vuejs.org/js/vue.js">开发版</a><br><a href="https://cn.vuejs.org/js/vue.min.js">生产版</a></p>
<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><ol>
<li>学习和制作原型，可以使用最新版本，地址为[<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>](<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>)</li>
<li>生产环境，使用地址为[<script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>](<script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>)</li>
<li>如果使用原生ESModule ，这里兼容ES Module的构建文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.esm.browser.js&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p><font color='red'>在用 Vue 构建大型应用时推荐使用 NPM 安装</font>，NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。同时 Vue 也提供配套工具来开发单文件组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新稳定版</span></span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure>

<h1 id="创建第一个Vue应用"><a href="#创建第一个Vue应用" class="headerlink" title="创建第一个Vue应用"></a>创建第一个Vue应用</h1><p>监控value值的变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			&#123;&#123;a&#125;&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> data = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:data</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//监控a值的变化</span></span></span><br><span class="line"><span class="javascript">			vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(newVal,oldVal);</span></span><br><span class="line">			&#125;)</span><br><span class="line"><span class="javascript">			data.a = <span class="string">&#x27;123123&#x27;</span>;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><img src="/2019/10/18/%E7%AC%AC1%E7%AB%A0-Vue%E5%9F%BA%E7%A1%80-%E5%AE%89%E8%A3%85/lifecycle.png" class="">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			&#123;&#123;msg&#125;&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					msg:<span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">//实例化初始之后,数据观测(data observer)和event/watcher事件配置之前被调用</span></span></span><br><span class="line"><span class="javascript">				beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&quot;beforeCreate&quot;</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">//实例创建完成之后立即调用,但是挂载阶段还没开始,$el属性目前不可见</span></span></span><br><span class="line"><span class="javascript">				created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&quot;created&quot;</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">//在挂载开始之前被调用:相关渲染函数首次被调用</span></span></span><br><span class="line"><span class="javascript">				beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&quot;beforeMount&quot;</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">//挂载成功,el被创建,vm.$el替换</span></span></span><br><span class="line"><span class="javascript">				mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&quot;mounted&quot;</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">//数据更新之前调用</span></span></span><br><span class="line"><span class="javascript">				beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&quot;beforeUpdate&quot;</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">//组件DOM已经更新,组件更新完毕</span></span></span><br><span class="line"><span class="javascript">				updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&quot;updated&quot;</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"><span class="javascript">			<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				vm.msg = <span class="string">&quot;changing.....&quot;</span></span></span><br><span class="line">			&#125;, 3000);</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="v-once只赋值一次，后续不可再修改值"><a href="#v-once只赋值一次，后续不可再修改值" class="headerlink" title="v-once只赋值一次，后续不可再修改值"></a>v-once只赋值一次，后续不可再修改值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- v-once 只能一次赋值，后续操作将不执行 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">			&#123;&#123;msg&#125;&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					msg:<span class="string">&#x27;zhangsan&#x27;</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="javascript">			<span class="comment">//因为添加了v-once,所以只能赋值一次,这里就不会再进行赋值操作了</span></span></span><br><span class="line"><span class="javascript">			vm.$msg = <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-html输出html标签并渲染"><a href="#v-html输出html标签并渲染" class="headerlink" title="v-html输出html标签并渲染"></a>v-html输出html标签并渲染</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- v-once 只能一次赋值，后续操作将不执行 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">			&#123;&#123;msg&#125;&#125;</span><br><span class="line">			<span class="comment">&lt;!-- 不使用的情况下是没法显示的 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				Using v-html:&#123;&#123;rawhtml&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 使用v-html标签值指向变量，需要将v-html添加在一个标签上 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span> Using v-html:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawhtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					msg:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">					rawhtml:&#x27;<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: #FF0000;&quot;</span>&gt;</span>this is should be red<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="javascript">			<span class="comment">//因为添加了v-once,所以只能赋值一次,这里就不会再进行赋值操作了</span></span></span><br><span class="line"><span class="javascript">			vm.$msg = <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="动态绑定元素属性"><a href="#动态绑定元素属性" class="headerlink" title="动态绑定元素属性"></a>动态绑定元素属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 绑定样式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">				test red</span><br><span class="line">				<span class="comment">&lt;!-- 绑定元素的id --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;testBindId&quot;</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					<span class="comment">//通过绑定的color属性修改元素的样式</span></span></span><br><span class="line"><span class="javascript">					color:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					testBindId:<span class="string">&#x27;123123&#x27;</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="comment">//通过绑定元素修改对应元素的id属性</span></span></span><br><span class="line"><span class="javascript">			vm.$data.testBindId = <span class="string">&quot;updateId&quot;</span></span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">			.red&#123;</span><br><span class="line"><span class="css">				<span class="attribute">color</span>: <span class="number">#FF0000</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用Javascript表达式"><a href="#使用Javascript表达式" class="headerlink" title="使用Javascript表达式"></a>使用Javascript表达式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 加法表达式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;number+1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 三元运算符 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;ok?hello:bye&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 字符串操作：将字符串拆分然后反向排序之后再拼接 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					number:1,</span><br><span class="line"><span class="javascript">					msg:<span class="string">&#x27;abcedfg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					hello:<span class="string">&#x27;Hello Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					bye:<span class="string">&#x27;Bye Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					ok:<span class="literal">true</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"><span class="javascript">			<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				vm.$data.ok = <span class="literal">false</span>;</span></span><br><span class="line">			&#125;, 3000);</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="模板语法-指令"><a href="#模板语法-指令" class="headerlink" title="模板语法-指令"></a>模板语法-指令</h1><p>指令是带有<code>v-</code>前缀的特殊特性。指令的特性是值逾期是单个JavaScript表达式。指令的职责是当表达式的值发生改变时，其将产生的连带影响，响应式的作用域DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你能看到我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 常规情况下，点击click me会触发父级点击，添加click的修饰符stop就会点击完之后不触发父级事件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;click1&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">&quot;click2&quot;</span>&gt;</span></span><br><span class="line">					click me</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					seen:<span class="literal">false</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line"><span class="javascript">					click1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="string">&#x27;click1&#x27;</span>);</span></span><br><span class="line">					&#125;,</span><br><span class="line"><span class="javascript">					click2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="string">&quot;click2&quot;</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="class和style的绑定"><a href="#class和style的绑定" class="headerlink" title="class和style的绑定"></a>class和style的绑定</h1><h2 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 1. active样式是否生效，取决于isActive --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 2. 动态属性和静态属性可以并存 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 3. 可以通过对象添加多样式 --&gt;</span></span><br><span class="line">			&lt;div</span><br><span class="line">			class=&quot;test&quot;</span><br><span class="line">			v-bind:class=&quot;&#123;active:isActive,green:isGreen&#125;&quot; style=&quot;height: 12.5rem;width: 12.5rem;text-align: center;line-height: 12.5rem;&quot;&gt;</span><br><span class="line">				hi vue</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 通过数组绑定多样式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#x27;active&#x27;,&#x27;green&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">			 <span class="attr">style</span>=<span class="string">&quot;height: 12.5rem;width: 12.5rem;text-align: center;line-height: 12.5rem;&quot;</span>&gt;</span></span><br><span class="line">				通过数组绑定多样式</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 三元运算动态控制样式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[isActive?&#x27;active&#x27;:&#x27;&#x27;,isGreen?&#x27;green&#x27;:&#x27;&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">			 <span class="attr">style</span>=<span class="string">&quot;height: 12.5rem;width: 12.5rem;text-align: center;line-height: 12.5rem;&quot;</span>&gt;</span></span><br><span class="line">				通过数组绑定多样式</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- v-bind:style绑定样式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color:color,fontSize:size,background:isRed?&#x27;#ff0000&#x27;:&#x27;&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">				hi vue</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					isActive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">					isGreen:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">					color:<span class="string">&#x27;#ffffff&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					size:<span class="string">&#x27;30px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					isRed:<span class="literal">true</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="comment">/* 声明样式 */</span></span></span><br><span class="line">			.active&#123;</span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#FF0000</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">			.test&#123;</span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">			.green&#123;</span><br><span class="line"><span class="css">				<span class="attribute">color</span>: <span class="number">#00FF00</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 通过if else 判断是走哪个 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">				A</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === B&quot;</span>&gt;</span></span><br><span class="line">				B</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === C&quot;</span>&gt;</span></span><br><span class="line">				C</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">				NOT A/B/C</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 使用v-show控制显示 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>是否显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					type:<span class="string">&#x27;A&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					isShow:<span class="literal">true</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in items&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;index&#125;&#125;-&#123;&#123;item.message&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;value,key in objects&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					items:[</span><br><span class="line"><span class="javascript">						&#123;<span class="attr">message</span>:<span class="string">&#x27;Foo&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">message</span>:<span class="string">&#x27;Bar&#x27;</span>&#125;,</span></span><br><span class="line">						],</span><br><span class="line">					objects:&#123;</span><br><span class="line"><span class="javascript">						title:<span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						author:<span class="string">&#x27;zp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						publishedAt:<span class="string">&#x27;2019-10-27 09:54:53&#x27;</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cliclkcount += 1&quot;</span>&gt;</span>&#123;&#123;cliclkcount&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addOnce(&#x27;abc&#x27;,$event)&quot;</span>&gt;</span>AddOnce<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					cliclkcount:0,</span><br><span class="line"><span class="javascript">					name:<span class="string">&#x27;Vue&#x27;</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line"><span class="javascript">					addOnce:<span class="function"><span class="keyword">function</span>(<span class="params">str,e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						alert(<span class="string">&#x27;hi&#x27;</span>);</span></span><br><span class="line"><span class="javascript">						alert(<span class="built_in">this</span>.name);</span></span><br><span class="line">						alert(str);</span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.cliclkcount ++;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Edit me&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容为：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message2&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Hint me&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容为：&#123;&#123;message2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-input-row mui-radio &quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;names&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jone&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>Jone<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;names&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lily&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>Lily<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-input-row mui-checkbox mui-left&quot;</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Man&quot;</span> &gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Man<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Woman&quot;</span> &gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Woman<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UnKnown&quot;</span> &gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">label</span>&gt;</span>UnKnown<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Sumbit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="javascript">					message:<span class="string">&quot;123123&quot;</span>,</span></span><br><span class="line"><span class="javascript">					message2:<span class="string">&#x27;测试内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					names:<span class="string">&quot;Lily&quot;</span>,</span></span><br><span class="line"><span class="javascript">					sex:[<span class="string">&#x27;Man&#x27;</span>,<span class="string">&#x27;Woman&#x27;</span>]</span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line"><span class="javascript">					submit:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button-container</span> <span class="attr">title</span>=<span class="string">&quot;title1&quot;</span> @<span class="attr">clicknow</span>=<span class="string">&quot;clicknow&quot;</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 使用slot插入元素 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">button-container</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button-container</span>&gt;</span><span class="tag">&lt;/<span class="name">button-container</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			Vue.component(<span class="string">&#x27;button-container&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">//自定义属性</span></span></span><br><span class="line"><span class="javascript">				props:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="javascript">				data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">return</span> &#123;</span></span><br><span class="line">						count:0</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">				template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickFun&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml">点击了我</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">				methods:&#123;</span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">clickFun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.count ++;</span></span><br><span class="line"><span class="javascript">						<span class="comment">//组件传递参数到外部</span></span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.$emit(<span class="string">&#x27;clicknow&#x27;</span>,<span class="built_in">this</span>.count);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"></span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line"><span class="javascript">					<span class="comment">//自定义事件传出的数据</span></span></span><br><span class="line"><span class="javascript">					clicknow:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(e);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h1><p>局部组件注册及使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 局部组件使用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">// 局部组件定义</span></span></span><br><span class="line">				components:&#123;</span><br><span class="line">					test:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">						template:&#x27;<span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2.....<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1><h2 id="基础插件安装"><a href="#基础插件安装" class="headerlink" title="基础插件安装"></a>基础插件安装</h2><p>在使用单文件组件之前，需要先安装以下环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//1. 安装npm</span><br><span class="line">npm 全称Node Package Manager，是一个基于Node.js的包管理器，也是整个Node.js社区最流行、支持的第三方模块最多的包管理器</span><br><span class="line">npm -v</span><br><span class="line">//2. 由于网络原因，需安装cnpm，是npm的中国镜像</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//3. 安装vue-cli</span><br><span class="line">cnpm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">// 4. 安装webpack，webpack是Javascript打包器（module bundler）</span><br><span class="line">cnpm install -g webpack</span><br></pre></td></tr></table></figure>

<h2 id="使用vue-cli创建项目"><a href="#使用vue-cli创建项目" class="headerlink" title="使用vue-cli创建项目"></a>使用vue-cli创建项目</h2><ol>
<li>使用cmd命令输入<code>vue ui</code>，会自动打开浏览器，并跳转到Vuecli创建项目的界面</li>
<li>选择创建项目，修改项目路径，点击创建</li>
<li>选择默认，继续创建，一段时间后，看所选择的路径下就会创建好项目<img src="/2019/10/18/%E7%AC%AC1%E7%AB%A0-Vue%E5%9F%BA%E7%A1%80-%E5%AE%89%E8%A3%85/screenshot_1.png" class=""></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 开发环境搭建和基本开发</title>
    <url>/2019/04/23/%E7%AC%AC2%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_47.jpg"></p>
<h2 id="搭建Spring-Boot开发环境"><a href="#搭建Spring-Boot开发环境" class="headerlink" title="搭建Spring Boot开发环境"></a>搭建Spring Boot开发环境</h2><ol>
<li>启动IDEA，选择“Creat New Project”，弹出新的窗口选择“Spring Initializr”，切换到你想要的JDK版本，如下图：  <img src="/2019/04/23/%E7%AC%AC2%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/screenshot_1.png" class=""></li>
<li>点击Next，弹出两一个配置窗口，如下所示  <img src="/2019/04/23/%E7%AC%AC2%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/screenshot_2.png" class=""></li>
<li>点击上图的Next会弹出选择starter的窗口，如下图所示,这里需要选择自己需要的依赖<img src="/2019/04/23/%E7%AC%AC2%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/screenshot_3.png" class=""></li>
<li>创建完成后看到一个建好的类<code>Chapter2Application</code>和Maven的pom.xml文件。运行<code>Chapter2Application</code>就可以启动Spring Boot工程，而pom.xml配置好了你选中的starter依赖，这样就能够基础IDEA开发Spring Boot工程了</li>
</ol>
<h2 id="Spring-Boot的依赖和自动配置"><a href="#Spring-Boot的依赖和自动配置" class="headerlink" title="Spring Boot的依赖和自动配置"></a>Spring Boot的依赖和自动配置</h2><ol>
<li>spring-boot-starter-web<br>加入了它spring-boot-starter-web之后，他会通过Maven将对应的资源加载到我们工程中</li>
<li>spring-boot-autoconfigure<br>其中的<code>DispatcherServletAutoConfiguration</code>是<code>DispatcherServlet</code>进行自动配置的类。</li>
</ol>
<h2 id="使用自定义配置"><a href="#使用自定义配置" class="headerlink" title="使用自定义配置"></a>使用自定义配置</h2><p>按照前面的步骤创建完工程<code>chapter2</code>之后，会在resources下面出现一个<code>application.properties</code>文件，，他是一个默认的配置文件，通过它可以根据自己的需要实现自定义。例如修改中间件的端口号，只需要在文件中添加一行</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br></pre></td></tr></table></figure>

<h2 id="开发自己的SPring-Boot项目"><a href="#开发自己的SPring-Boot项目" class="headerlink" title="开发自己的SPring Boot项目"></a>开发自己的SPring Boot项目</h2><p>修改Spring MVC的视图解析器ViewResolver。视图解析器的作用主要是定位师徒，也就是当控制器只是返回一个逻辑名称的时候，是没法直接找到师徒的，是需要视图解析器进行解析的。实际开发过程中最常用的视图之一是JSP，例如返回一个字符串index，那么我们虚妄它对应的开发项目的/WEB-INF/jsp/index.jsp文件。</p>
<ol>
<li>修改pom文件，加入JSP和JSTL的依赖包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSP依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JSTL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改<code>application.properties</code>文件，添加解析器配置<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment"># 这个是前缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB-INF/jsp/</span></span><br><span class="line"><span class="comment"># 这个是后缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure></li>
<li>创建index.jsp文件，这里是使用的idea，因此需要先进行一些简单的设置，配置方法见下图，配置完成后，会在项目路径的webapp上有一个蓝色的小点，下面还有index.jsp的代码<img src="/2019/04/23/%E7%AC%AC2%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/screenshot_4.png" class="">
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;测试视图解析器&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>访问地址<a href="http://localhost:8090/index%EF%BC%8C%E6%89%93%E5%BC%80%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C">http://localhost:8090/index，打开查看效果</a><img src="/2019/04/23/%E7%AC%AC2%E7%AB%A0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/screenshot_5.png" class=""></li>
</ol>
<p><font color='red'>注意:</font><br><code>Chapter2Application</code>类中的<code>@SpringBootApplication</code>标志着这是一个Spring Boot入门文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.run(Chapter2Application.class, args);</span><br></pre></td></tr></table></figure>
<p>上面的这行代码是以Chapter2Application类作为配置类来运行Spring Boot项目，于是Spring Boot就会根据你在Maven加载的依赖完成运行。</p>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第8章 文档数据库MongoDB</title>
    <url>/2019/05/25/%E7%AC%AC8%E7%AB%A0-%E6%96%87%E6%A1%A3%E6%95%B0%E6%8D%AE%E5%BA%93MongoDB/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_54.jpg"></p>
<h1 id="文档数据库——MongoDB"><a href="#文档数据库——MongoDB" class="headerlink" title="文档数据库——MongoDB"></a>文档数据库——MongoDB</h1><p>前面用到Redis美妙执行10万次以上操作，熟读远超数据库，可以极大提高互联网系统的性能，但是它有一些致命的缺陷，其中最为严重的是计算功能十分有限，例如，在一个10W数量的List中，我只是需要满足条件的元素在Redis中，使用集合或者列表，你只是先把元素 去除，然后才能通过条件筛选一格格得到你想要的数据，这显示存在比较大的问题。这时你可能想到通过Lua脚本去完善，当然这也是可以的，知识说这样对于开发者工作量就大大增加了。对于那些需要缓存而且经常需要统计、分析和查询的数据，对于Redis这样简单的NoSQL不是那么便捷，然而MongoDB就能满足上面的操作，可统计、按条件查询和分析的数据库，它是最接近关系数据库的NoSQL<br>MongoDB在负载高时，可以添加更多的节点，保证服务器性能，MongoDB的目的是为了Web应用提供可扩展的高性能数据存储解决方案。<br>MongoDB将数据存储为一个文档，数据结构由键值（key-value）对组成，这里MongoDB文档类似于JSON数据集，所以很容易转化为Java POJO对象或者JavaScript对象，这些字段值还可以包含其他文档、数组及文档数组，例如我们完全可以存储下这个JSON</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">	<span class="attr">&quot;note&quot;</span>:<span class="string">&quot;张三是个好同志&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;user_name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;role&quot;</span>:[</span><br><span class="line">		&#123;id:1,role_name:&quot;高级工程师&quot;&#125;,</span><br><span class="line">		&#123;id:2,role_name:&quot;高级项目经理&quot;&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个文档很接近JSON数据集，去除这个文档可以直接映射为POJO，使用上很方便，与Redis一样，Spring Boot的配置文件也提供了许多关于MongoDB的配置，以方便我们的配置。不过这一切需要引入Spring Boot关于MongoDB的starter，领推荐引入阿里巴巴开发的fastjson的开发包，代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MongoDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h2><p>一旦引入关于spring-boot-starter-data-mongodb的依赖，就意味着Spring Boot已经提供了关于MongoDB的配置，也有了默认的可配置项，其默认配置清单如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.data.mongodb.authentication-database</span>=     <span class="string"># 用于签名的MongoDB数据库</span></span><br><span class="line"><span class="meta">spring.data.mongdb.database</span>=<span class="string">test                 # 数据库名称</span></span><br><span class="line"><span class="meta">spring.data.mongdb.field-naming-strategy</span>         <span class="string"># 使用字段名策略</span></span><br><span class="line"><span class="meta">spring.data.mongdb.grid-fs-database</span>=             <span class="string"># GridFs（网格文件）数据库名称</span></span><br><span class="line"><span class="meta">spring.data.mongdb.host</span>=<span class="string">localhost                # MongoDB服务器，不能设置为URI</span></span><br><span class="line"><span class="meta">spring.data.mongdb.password</span>=                     <span class="string"># MongoDB服务器用户密码，不能设置为URI</span></span><br><span class="line"><span class="meta">spring.data.mongdb.port</span>=                         <span class="string"># MongoDB服务端端口，不能设置为URI</span></span><br><span class="line"><span class="meta">spring.data.mongdb.repositories.type</span> = <span class="string">auto      # 是否启用MongoDB关于JPA规范的编程</span></span><br><span class="line"><span class="meta">spring.data.mongdb.uri</span>=<span class="string">mongodb://localhost/test  # MongoDB默认URI</span></span><br><span class="line"><span class="meta">spring.data.mongdb.username</span>=                     <span class="string"># MongdoDB服务器用户名，不能设置为URI</span></span><br></pre></td></tr></table></figure>
<p>因为有了默认的配置，在默认配置机器不存在MongoDB服务器时会出现报错，因此往往需要加入自己的配置，下面是本章开发的配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MongoDB</span></span><br><span class="line"><span class="meta">spring.data.mongodb.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.data.mongodb.username</span>=<span class="string">spring</span></span><br><span class="line"><span class="meta">spring.data.mongodb.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.data.mongodb.port</span>=<span class="string">27017</span></span><br><span class="line"><span class="meta">spring.data.mongodb.database</span>=<span class="string">springboot</span></span><br></pre></td></tr></table></figure>
<p>有了这些配置Spring Boot就会创建关于MongoDB的Spring Bean，如下<br>|Bean类型|描述|<br>|:-:|:-|<br>|MongoClient|MongoDB客户端|<br>|MongoProperties|SpringBoot关于MongoDB的自动配置属性|<br>|MongoDataAutoConfiguration|Spring Boot关于MongoDB的自动配置类|<br>|SimpleMongoDBFactory|简单的MongoDB的工厂，由它生成MongoDB的绘画，可ton过属性spring.data.mongodb.grid-fs-database的配置转变为GridFsMongoDbFactory|<br>|MongoTemplate|MongoDB的操作模板，在Spring中我们主要通过它对MongoDB进行操作|<br>|MappingMongoConvert|关于MongoDB的类型转换器|<br>|MongoMapppingContext|MongoDB关于Java实体的映射内容配置|<br>|CustomConversions|自定义类型转换器|<br>|MongoRepositoriesAutoConfiguration|MongoDB关于仓库的自动配置|<br>|GeoJsonConfiguration|MongoDB关于地理位置JSON配置|</p>
<h2 id="使用MongoTemplate实例"><a href="#使用MongoTemplate实例" class="headerlink" title="使用MongoTemplate实例"></a>使用MongoTemplate实例</h2><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><ol>
<li>首先创建一个POJO，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.mongodb.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标识为MongoDB文档</span></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDB</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4308441919235697629L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MongoDB文档编号，主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MongoDB中使用user_name保存属性</span></span><br><span class="line">    <span class="meta">@Field(&quot;user_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>第9章 初识Spring MVC</title>
    <url>/2019/05/25/%E7%AC%AC9%E7%AB%A0-%E5%88%9D%E8%AF%86Spring-MVC/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_55.jpg"></p>
<h1 id="初识SpringMVC"><a href="#初识SpringMVC" class="headerlink" title="初识SpringMVC"></a>初识SpringMVC</h1><h2 id="Spring-MVC流程"><a href="#Spring-MVC流程" class="headerlink" title="Spring MVC流程"></a>Spring MVC流程</h2><ol>
<li>通过application.properties定制InternalReourceViewResolver初始化<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB-INF/jsp/</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure>
通过修改这样的配置，就能在Spring Boot的机制下定制InternalResourceViewResolver这个视图解析器的初始化，也就是在返回视图名称之后，就会以前缀prefix和后缀suffix以及视图名称组成全路径定位视图。例如在控制器中返回<code>user/detail</code>，那么就会找到/WEB-INF/jsp/user/detail.jsp作为视图。</li>
</ol>
<h2 id="定制Spring-MVC的初始化"><a href="#定制Spring-MVC的初始化" class="headerlink" title="定制Spring MVC的初始化"></a>定制Spring MVC的初始化</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.async.request-timeout</span>= <span class="string"># 异步请求超时时间（单位毫秒）</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">false # 是否使用请求参数</span></span><br><span class="line"><span class="meta">spring.mvc.date-format</span>= <span class="string"># 日期格式配置，如yyyy-MM-dd</span></span><br><span class="line"><span class="meta">spring.mvc.favicon.enabled</span>=<span class="string">false #Spring MVC 图标是否启用</span></span><br><span class="line"><span class="meta">spring.mvc.formcontent.filter.enabled</span>=<span class="string">true # Servlet 规范要求表格数据可用于HTTP POST而不是HTTP PUT或PATCH请求，这个选项将使得过滤器拦截HTTP PUT和PATCH，切内容类型是application/x-www-form-urlencoded的请求，并且将其转换为POST请求</span></span><br><span class="line"><span class="meta">spring.mvc.ignore-default-model-on-redirect</span>=<span class="string">true # 如果配置了default，那么她就会忽略重定向的场景</span></span><br><span class="line"><span class="meta">spring.mvc.servlet.load-on-startup</span>=<span class="string">1 # 启用Spring Web服务Servlet的有限顺序配置</span></span><br><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>= <span class="string">/** # 指定静态资源路径</span></span><br><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span>=<span class="string">false # 如果请求找不到处理器，是否抛出NoHandlerFoundException异常</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-MVC实例"><a href="#Spring-MVC实例" class="headerlink" title="Spring MVC实例"></a>Spring MVC实例</h2>]]></content>
  </entry>
  <entry>
    <title>第一章 Shiro简介</title>
    <url>/2019/01/25/%E7%AC%AC%E4%B8%80%E7%AB%A0-Shiro%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_12.jpg"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Shiro不仅可以应用在JavaSE环境，也可以用在JavaEE环境。</li>
<li>Shiro能够完成的任务：<ul>
<li>认证</li>
<li>授权</li>
<li>加密</li>
<li>会话管理</li>
<li>Web集成</li>
<li>缓存</li>
</ul>
</li>
</ul>
<img src="/2019/01/25/%E7%AC%AC%E4%B8%80%E7%AB%A0-Shiro%E7%AE%80%E4%BB%8B/screenshot_1.png" class="">

<ul>
<li><strong>Authentication</strong>:身份认证/登录，验证用户是否拥有相应的身份</li>
<li><strong>Authorization</strong>:授权，权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户是否对某个资源是否具有某个权限</li>
<li><strong>Session Manager</strong>:会话管理，用户登录后就是一次会话，在没有退出之前，他的所有信息都会在会话中</li>
<li><strong>Cryptography</strong>:加密，保护数据的安全性，如密码加密存储到数据库，而不是铭文存储</li>
<li><strong>Web Support</strong>:Web支持，可以非常容易的集成到Web环境</li>
<li><strong>Caching</strong>:缓存，比如用户登录后，其用户信息，拥有的角色/授权信息不必每次去查询，这样可以提高效率</li>
<li><strong>Concurrency</strong>:shiro支持多线程应用的并发验证，即如果在一个线程中开一另一个线程，能够把权限自动传播过去</li>
<li><strong>Testing</strong>:提供测试支持</li>
<li><strong>Run As</strong>:允许一个用户假装为另一个用户的身份访问</li>
<li><strong>Remember Me</strong>:记住我，下次再来不用登陆了</li>
</ul>
<blockquote>
<p>Shiro是不会去维护权限、用户的数据的；这些需要我们自己去设计/提供；然后通过相应的接口注入到Shiro</p>
</blockquote>
<img src="/2019/01/25/%E7%AC%AC%E4%B8%80%E7%AB%A0-Shiro%E7%AE%80%E4%BB%8B/screenshot_2.png" class="">

<p>从上图可以看出应用程序代码直接交互的对象是Subject，也就是Shiro的对外核心API是Subject：</p>
<ul>
<li><strong>Subject</strong>:主体，代表当前用户，不一定是具体的人，与当前应用交互的所有对象都可以使Subject；所有的Subject都是绑定到SecurityManager的，也就是最终干活的都是SecurityManager，Subject只是一个门面</li>
<li><strong>SecurityManager</strong>:安全管理器，所有与安全有关的操作都会与SecurityManager交互，而且它管理着所有的Subject。它同时负责着与后面其他的组件的交互。</li>
<li><strong>Realm</strong>:域，Shiro从Realm获取安全数据（用户，角色，权限）；SecurityManager验证用户的时候，需要从Realm中读取数据，验证用户数据的合法性，同时还需要从Realm中读取用户的权限和角色验证用户是否能够操作。简单的来说可以从认为Realm为一个DataSource，即安全数据源</li>
</ul>
<hr>
<p>最简单的Shiro应用设计思路：</p>
<ol>
<li>应用通过Subject来进行认证和授权，而Subject委托给SecurityManager进行处理</li>
<li>我们需要给SecurityManager注入Realm，从而让SecurityManager获取到相应的用户及权限进行判断</li>
</ol>
<hr>
<img src="/2019/01/25/%E7%AC%AC%E4%B8%80%E7%AB%A0-Shiro%E7%AE%80%E4%BB%8B/screenshot_3.png" class="">

<ul>
<li><strong>Subject</strong>:主体，可以看到主体是任何可以与应用交互的“用户”</li>
<li><strong>SecurityManager</strong>:Shiro的心脏，具体的交互都通过Securitymanager进行控制；管理所有的Subject，进行权限、授权、会话及缓存的管理</li>
<li><strong>Authenticator</strong>:认证器，负责主体认证，可自定义实现；其需认证策略（Authentication Strategy），即什么情况下算是用户通过了</li>
<li><strong>Authrizer</strong>:授权器，用来决定主体是否有权限进行相应的操作</li>
<li><strong>Realm</strong>:可以有一个或者多个，安全实体数据源，用于获取安全实体，一般是自己实现Realm</li>
<li><strong>SessionManager</strong>:Session的管理组件，可以通过专门的Session管理服务器实现分布式会话</li>
<li><strong>SessionDao</strong>:当需要把Session存储到数据库的时候使用的工具</li>
<li><strong>CacheManager</strong>:缓存控制器，来管理用户、角色、权限的缓存</li>
<li><strong>Cryptograpy</strong>:密码模块，Shiro提供了一些常见的加密组件用于密码加密和解密</li>
</ul>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Shiro</category>
        <category>跟我学Shiro-张开涛</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>后端开发框架</tag>
        <tag>张开涛</tag>
      </tags>
  </entry>
  <entry>
    <title>系统性学习JVM优化</title>
    <url>/2021/07/02/%E7%B3%BB%E7%BB%9F%E6%80%A7%E5%AD%A6%E4%B9%A0JVM%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_103.jpg"></p>
<p>之前做JVM的优化都是查一点做一点，jmap，MAT也都是现用现查，没有做过系统性的学习，最近有点时间准备把这块补一下</p>
<h1 id="为什么要对JVM做优化"><a href="#为什么要对JVM做优化" class="headerlink" title="为什么要对JVM做优化"></a>为什么要对JVM做优化</h1><p>本地开发中很少会需要JVM优化，但是生产环境高并发，多用户下就会出现下面的情况</p>
<ul>
<li>运行的应用卡住了，没有日志输出，程序没有反应</li>
<li>服务器CPU负载突然升高</li>
<li>….</li>
</ul>
<h1 id="JVM的运行参数"><a href="#JVM的运行参数" class="headerlink" title="JVM的运行参数"></a>JVM的运行参数</h1><p>在JVM中有很多的参数可以惊醒设置，这样可以让jvm在各种环境中都有够高效的运行，绝大部分的参数保持默认即可</p>
<h2 id="三种参数类型"><a href="#三种参数类型" class="headerlink" title="三种参数类型"></a>三种参数类型</h2><p>JVM的参数类型分为三类，分别是：</p>
<ul>
<li>标准参数<ul>
<li>-help</li>
<li>version</li>
</ul>
</li>
<li>X参数（非标准参数）<ul>
<li>-Xint</li>
<li>-Xcomp</li>
</ul>
</li>
<li>-XX参数（使用率比较高，关注）<ul>
<li>-XX:newSize</li>
<li>-XX:+UseSerialGC</li>
</ul>
</li>
</ul>
<h2 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数"></a>标准参数</h2><p>JVM的标准参数，一般都是很稳定的，在未来的JVM版本中不会发生改变，可以使用<code>java -help</code>检索出所有的标准参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -<span class="built_in">help</span></span><br><span class="line">用法: java [-options] class [args...]</span><br><span class="line">           (执行类)</span><br><span class="line">   或  java [-options] -jar jarfile [args...]</span><br><span class="line">           (执行 jar 文件)</span><br><span class="line">其中选项包括:</span><br><span class="line">    -d32          使用 32 位数据模型 (如果可用)</span><br><span class="line">    -d64          使用 64 位数据模型 (如果可用)</span><br><span class="line">    -server       选择 <span class="string">&quot;server&quot;</span> VM</span><br><span class="line">                  默认 VM 是 server.</span><br><span class="line"></span><br><span class="line">    -cp &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">    -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">                  用 ; 分隔的目录, JAR 档案</span><br><span class="line">                  和 ZIP 档案列表, 用于搜索类文件。</span><br><span class="line">    -D&lt;名称&gt;=&lt;值&gt;</span><br><span class="line">                  设置系统属性</span><br><span class="line">    -verbose:[class|gc|jni]</span><br><span class="line">                  启用详细输出</span><br><span class="line">    -version      输出产品版本并退出</span><br><span class="line">    -version:&lt;值&gt;</span><br><span class="line">                  警告: 此功能已过时, 将在</span><br><span class="line">                  未来发行版中删除。</span><br><span class="line">                  需要指定的版本才能运行</span><br><span class="line">    -showversion  输出产品版本并继续</span><br><span class="line">    -jre-restrict-search | -no-jre-restrict-search</span><br><span class="line">                  警告: 此功能已过时, 将在</span><br><span class="line">                  未来发行版中删除。</span><br><span class="line">                  在版本搜索中包括/排除用户专用 JRE</span><br><span class="line">    -? -<span class="built_in">help</span>      输出此帮助消息</span><br><span class="line">    -X            输出非标准选项的帮助</span><br><span class="line">    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  按指定的粒度启用断言</span><br><span class="line">    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  禁用具有指定粒度的断言</span><br><span class="line">    -esa | -enablesystemassertions</span><br><span class="line">                  启用系统断言</span><br><span class="line">    -dsa | -disablesystemassertions</span><br><span class="line">                  禁用系统断言</span><br><span class="line">    -agentlib:&lt;libname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof</span><br><span class="line">                  另请参阅 -agentlib:jdwp=<span class="built_in">help</span> 和 -agentlib:hprof=<span class="built_in">help</span></span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br><span class="line">    -splash:&lt;imagepath&gt;</span><br><span class="line">                  使用指定的图像显示启动屏幕</span><br><span class="line">有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。</span><br></pre></td></tr></table></figure>

<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><blockquote>
<p>实战1：查看JVM版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line"><span class="comment"># -showversion参数是表示，先打印版本信息，再执行后面的命令，在调试的时候非常有用</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实战2： 通过<code>-D</code>设置系统属性参数</p>
</blockquote>
<ol>
<li><p>创建一个<code>java</code>文件，然后输入如下内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJVM</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		String str = System.getProperty(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(str == <span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;testJVM&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(str);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>进行编译和测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;javac TestJVM.java</span><br><span class="line"></span><br><span class="line">C:\Users\Daniel&gt;java TestJVM</span><br><span class="line">testJVM</span><br><span class="line"><span class="comment"># 在这里可以看到使用D参数设置的str能在代码中获取的到</span></span><br><span class="line">C:\Users\Daniel&gt;java -Dstr=123 TestJVM</span><br><span class="line">123</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="server与-client参数"><a href="#server与-client参数" class="headerlink" title="-server与-client参数"></a><code>-server</code>与<code>-client</code>参数</h3><p>可以通过<code>-server</code>或<code>-client</code>设置JVM的运行参数</p>
<ul>
<li>他们的区别是Server VM的初始堆空间会大一些，默认使用的是并行垃圾回收器，启动慢运行快</li>
<li>Client VM相对来讲会保守一些，初始堆空间小一些，使用串行的垃圾回收器，她的目标是让JVM的启动速度更快，但运行速度会比Server VM模式慢些</li>
<li>JVM在启动的时候会根据硬件和操作系统自动选择使用Server还是Client类型的JVM</li>
<li>32位操作系统<ul>
<li>如果是Windows系统，不论硬件配置如何，都默认使用Client类型的JVM</li>
<li>如果是其他操作系统上，机器配置有2GB以上的内存同时又2个以上CPU的话，默认使用server模式，否则使用client模式</li>
</ul>
</li>
<li>64位操作系统<ul>
<li>只有Server类型，不支持Client类型</li>
</ul>
</li>
</ul>
<p>测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -client -showversion TestJVM</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line"><span class="comment"># 因为我的电脑是64位的系统，因此指定Client，也是运行Server模式</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line"></span><br><span class="line">testJVM</span><br></pre></td></tr></table></figure>

<h2 id="X参数"><a href="#X参数" class="headerlink" title="-X参数"></a><code>-X</code>参数</h2><p>JVM的<code>-X</code>参数是非标准参数，在不同版本的JVM中，参数可能会有所不同，可以通过<code>java -X</code>查看非标准参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -X</span><br><span class="line">    -Xmixed           混合模式执行 (默认)</span><br><span class="line">    -Xint             仅解释模式执行</span><br><span class="line">    -Xbootclasspath:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      设置搜索路径以引导类和资源</span><br><span class="line">    -Xbootclasspath/a:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      附加在引导类路径末尾</span><br><span class="line">    -Xbootclasspath/p:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      置于引导类路径之前</span><br><span class="line">    -Xdiag            显示附加诊断消息</span><br><span class="line">    -Xnoclassgc       禁用类垃圾收集</span><br><span class="line">    -Xincgc           启用增量垃圾收集</span><br><span class="line">    -Xloggc:&lt;file&gt;    将 GC 状态记录在文件中 (带时间戳)</span><br><span class="line">    -Xbatch           禁用后台编译</span><br><span class="line">    -Xms&lt;size&gt;        设置初始 Java 堆大小</span><br><span class="line">    -Xmx&lt;size&gt;        设置最大 Java 堆大小</span><br><span class="line">    -Xss&lt;size&gt;        设置 Java 线程堆栈大小</span><br><span class="line">    -Xprof            输出 cpu 配置文件数据</span><br><span class="line">    -Xfuture          启用最严格的检查, 预期将来的默认值</span><br><span class="line">    -Xrs              减少 Java/VM 对操作系统信号的使用 (请参阅文档)</span><br><span class="line">    -Xcheck:jni       对 JNI 函数执行其他检查</span><br><span class="line">    -Xshare:off       不尝试使用共享类数据</span><br><span class="line">    -Xshare:auto      在可能的情况下使用共享类数据 (默认)</span><br><span class="line">    -Xshare:on        要求使用共享类数据, 否则将失败。</span><br><span class="line">    -XshowSettings    显示所有设置并继续</span><br><span class="line">    -XshowSettings:all</span><br><span class="line">                      显示所有设置并继续</span><br><span class="line">    -XshowSettings:vm 显示所有与 vm 相关的设置并继续</span><br><span class="line">    -XshowSettings:properties</span><br><span class="line">                      显示所有属性设置并继续</span><br><span class="line">    -XshowSettings:locale</span><br><span class="line">                      显示所有与区域设置相关的设置并继续</span><br><span class="line"></span><br><span class="line">-X 选项是非标准选项, 如有更改, 恕不另行通知。</span><br></pre></td></tr></table></figure>

<h3 id="Xint、-Xcom、-Xmixed"><a href="#Xint、-Xcom、-Xmixed" class="headerlink" title="-Xint、-Xcom、-Xmixed"></a><code>-Xint</code>、<code>-Xcom</code>、<code>-Xmixed</code></h3><ul>
<li>在解释模式（interpreted mode）下，-Xint标记会强制JVM执行所有的字节码，当然这回降低运行速度，通常低10倍或更多。</li>
<li>-Xcomp参数与-Xint正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化<ul>
<li>然而，很多应用在使用-Xcomp也会有一些性能损失，当然这比使用-Xint损失的少，云因是-Xcomp没有让JVM启动JIT编译器的全部功能。JIT编译器可以对是否需要编译做判断，如果所有代码都进行编译的话，对于一些只执行一次的代码就没有意义了</li>
</ul>
</li>
<li>-Xmixed是会和模式，将解释模式与编译模式进行混合使用，由JVM自己决定，这是jvm默认的模式，也是<font color='red'>推荐使用的模式</font></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 强制设置为解释模式</span></span><br><span class="line">C:\Users\Daniel&gt;java -showversion -Xint TestJVM</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line"><span class="comment"># 本行最后显示的是解释模式</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, interpreted mode)</span><br><span class="line"></span><br><span class="line">testJVM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制设置为编译模式（编译模式下，第一次执行会比解释模式下执行慢一些）</span></span><br><span class="line">C:\Users\Daniel&gt;java -showversion -Xcomp TestJVM</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line"><span class="comment"># 本行最后显示是编译模式</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, compiled mode)</span><br><span class="line"></span><br><span class="line">testJVM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的混合模式</span></span><br><span class="line">C:\Users\Daniel&gt;java -showversion TestJVM</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line"></span><br><span class="line">testJVM</span><br></pre></td></tr></table></figure>

<h2 id="XX参数"><a href="#XX参数" class="headerlink" title="-XX参数"></a><code>-XX</code>参数</h2><p>-XX参数也是非标准参数，主要用于jvm调优和debug操作<br>-XX参数的使用有两种方式，一种是boolean类型，一种是非boolean类型：</p>
<ul>
<li>boolean类型<ul>
<li>格式：-XX:[+-]</li>
<li>如：-XX:+DisableExplicitGC表示禁用手动调用gc操作，也就是说调用System.gc()无效</li>
</ul>
</li>
<li>非boolean类型<ul>
<li>格式：-XX:</li>
<li>如：-XX:NewRatio=1表示新生代和老年代的比值</li>
</ul>
</li>
</ul>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -showversion -XX:+DisableExplicitGC TestJVM</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line"></span><br><span class="line">testJVM</span><br></pre></td></tr></table></figure>

<h2 id="Xms与-Xmx参数"><a href="#Xms与-Xmx参数" class="headerlink" title="-Xms与-Xmx参数"></a><code>-Xms</code>与<code>-Xmx</code>参数</h2><p>-Xms与-Xmx分别是设置JVM的堆内存的初始大小和最大大小<br>-Xmx2048m：等价于-XX:MaxHeapSize，设置JVM最大堆内存为2048M<br>-Xms512m：等价于-XX:InitialHeapSize，设置JVM初始堆内存为512M<br>适当的调整JVM的内存大小，可以充分利用服务器资源，让程序跑得更快，这里提一点，Xmx和Xms最好设置大小一致，初始化即最大，减少GC回收</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -Xms512m -Xmx2048m TestJVM</span><br><span class="line">testJVM</span><br></pre></td></tr></table></figure>

<h2 id="查看JVM的运行参数"><a href="#查看JVM的运行参数" class="headerlink" title="查看JVM的运行参数"></a>查看JVM的运行参数</h2><p>有些时候我们需要查看JVM的运行参数，这个需求可能会存在两种情况</p>
<ul>
<li>运行java命令时打印出运行参数</li>
<li>查看正在运行的java进程的参数</li>
</ul>
<h3 id="运行java命令时打印参数"><a href="#运行java命令时打印参数" class="headerlink" title="运行java命令时打印参数"></a>运行java命令时打印参数</h3><p>运行java命令时打印参数，需要添加-XX:+PrintFlagsFinal参数即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Daniel&gt;java -XX:+PrintFlagsFinal -version</span><br><span class="line">[Global flags]</span><br><span class="line">     intx ActiveProcessorCount                      = -1                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePausePolicy                   = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyOutputInterval          = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyWeight                  = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeThroughPutPolicy              = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveTimeWeight                        = 25                                  &#123;product&#125;</span><br><span class="line">     bool AdjustConcurrency                         = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     bool AggressiveHeap                            = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     bool AggressiveOpts                            = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     intx AliasLevel                                = 3                                   &#123;C2 product&#125;</span><br><span class="line">     bool AlignVector                               = <span class="literal">false</span>                               &#123;C2 product&#125;</span><br><span class="line">     intx AllocateInstancePrefetchLines             = 1                                   &#123;product&#125;</span><br><span class="line">     intx AllocatePrefetchDistance                  = 192                                 &#123;product&#125;</span><br><span class="line">     intx AllocatePrefetchInstr                     = 0                                   &#123;product&#125;</span><br><span class="line">     ......</span><br><span class="line">     bool UseXmmI2D                                 = <span class="literal">false</span>                               &#123;ARCH product&#125;</span><br><span class="line">     bool UseXmmI2F                                 = <span class="literal">false</span>                               &#123;ARCH product&#125;</span><br><span class="line">     bool UseXmmLoadAndClearUpper                   = <span class="literal">true</span>                                &#123;ARCH product&#125;</span><br><span class="line">     bool UseXmmRegToRegMoveAll                     = <span class="literal">true</span>                                &#123;ARCH product&#125;</span><br><span class="line">     bool VMThreadHintNoPreempt                     = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     intx VMThreadPriority                          = -1                                  &#123;product&#125;</span><br><span class="line">     intx VMThreadStackSize                         = 0                                   &#123;pd product&#125;</span><br><span class="line">     intx ValueMapInitialSize                       = 11                                  &#123;C1 product&#125;</span><br><span class="line">     intx ValueMapMaxLoopSize                       = 8                                   &#123;C1 product&#125;</span><br><span class="line">     intx ValueSearchLimit                          = 1000                                &#123;C2 product&#125;</span><br><span class="line">     bool VerifyMergedCPBytecodes                   = <span class="literal">true</span>                                &#123;product&#125;</span><br><span class="line">     bool VerifySharedSpaces                        = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     intx WorkAroundNPTLTimedWaitHang               = 1                                   &#123;product&#125;</span><br><span class="line">    uintx YoungGenerationSizeIncrement              = 20                                  &#123;product&#125;</span><br><span class="line">    uintx YoungGenerationSizeSupplement             = 80                                  &#123;product&#125;</span><br><span class="line">    uintx YoungGenerationSizeSupplementDecay        = 8                                   &#123;product&#125;</span><br><span class="line">    uintx YoungPLABSize                             = 4096                                &#123;product&#125;</span><br><span class="line">     bool ZeroTLAB                                  = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     intx hashCode                                  = 5                                   &#123;product&#125;</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br></pre></td></tr></table></figure>
<p>由上述的信息可以看出，参数由boolean类型和数字类型，值的操作符是=或:=，分别代表默认值或被修改的值</p>
<h3 id="查看正在运行的jvm参数"><a href="#查看正在运行的jvm参数" class="headerlink" title="查看正在运行的jvm参数"></a>查看正在运行的jvm参数</h3><p>如果想要查看正在运行的jvm就需要借助于jinfo命令查看。首先启动一个tomcat用作测试，来观察下jvm的参数</p>
]]></content>
  </entry>
  <entry>
    <title>跟着官方文档学Drools（一）</title>
    <url>/2019/12/26/%E8%B7%9F%E7%9D%80%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%AD%A6Drools%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_70.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先介绍一下<code>Drools</code>是个什么东西:</p>
<blockquote>
<p>Drools is a Business Rules Management System (BRMS) solution. It provides a core Business Rules Engine (BRE), a web authoring and rules management application (Drools Workbench), full runtime support for Decision Model and Notation (DMN) models at Conformance level 3 and an Eclipse IDE plugin for core development  </p>
</blockquote>
<p>说人话：</p>
<blockquote>
<p><code>Drools</code>是一个商业规则引擎系统解决方案。它提供了一个核心商业规则引擎，一个网页认证和规则管理的程序，完全符合级别3的决策模型和注释（DMN）模型的运行时支持，以及用于核心开发的Eclipse IDE插件；</p>
</blockquote>
<p>说人话！！！</p>
<blockquote>
<p>简单来说就是一个系统，可以定义一些规则，然后别的系统通过接口或者其他的方式访问这个系统，把数据发给这个系统，这个系统决定这个用户通不通过，或者给予什么建议等等，就是它会帮你给出决策信息，当然前提是得把决策模型创建好才行。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>准备环境，环境要求如下：</p>
<ul>
<li>JDK1.8</li>
<li>Eclipse IDE（建议Mars版本）</li>
<li>下载Drools<code>runtime</code>和<code>tools</code></li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
        <category>Drools</category>
      </categories>
      <tags>
        <tag>Drools</tag>
        <tag>规则引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>软件整理</title>
    <url>/2019/02/20/%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_37.jpg"></p>
<h2 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h2><blockquote>
<ul>
<li>Python开发工具<br>JetBrains PyCharm 2017.1.2 x64</li>
<li>原型工具<br>Axure RP Pro 7.0（PC端）、墨刀（手机端）</li>
<li>C++开发<br>CodeBlocks</li>
<li>Mysql存储过程调试<br>dbForge Studio for MySQL</li>
<li>截取手机APP请求信息软件<br>Fiddler 4</li>
<li>文本编辑器<br>NodePad++、UltraEdit32、EditPlus</li>
<li>数据库前端软件<br>Navicat Premium、PLSQL、Studio 3T（Mongodb）</li>
<li>大数据分析<br>Tableau、Qlik</li>
<li>邮箱客户端<br>FoxMail、Gmail  </li>
<li>SDCard格式化（树莓派镜像会出现Windows无法格式化情况）<br>SDFormatter</li>
<li>数模设计软件（能够快速导出已完成数据库的数模）<br>PowerDesigner</li>
<li>远程Linux系统<br>Xshell、Xftp</li>
<li>视频播放器、听歌、视频格式化、Win10扫雷<br>完美解码、Potplayer、网易云音乐、格式工厂、MineSweeper</li>
<li>云笔记<br>有道云、Evernote（印象笔记）</li>
<li>安卓开发、IOS开发<br>AndroidStudio、apicloud-studio-2.exe</li>
<li>CAD看图软件<br>CAD迷你看图</li>
<li>Json格式化、XML格式化<br>JsonView、XMLFormat</li>
<li>翻墙软件（需要国外搭建服务器，简单的VPS配置操作，可在搬瓦工上买服务器，相对稳定，不会封杀）<br>Shadowsocks、蓝灯Lantern</li>
<li>Windows内存分析<br>RAMMap.1.50.chs</li>
<li>端口开放情况<br>PortScan</li>
<li>Java反编译工具<br>jd-gui反编译</li>
<li>C#反编译<br>dnSpy</li>
<li>截图软件，这个可以录视频幺<br>FSCapture</li>
<li>接口测试HTTP<br>Postman可自动生成接口调用代码</li>
<li>SQL文件分割工具<br>SQLDumpSplitter</li>
<li>取色工具<br>TakeColor、抓色小猫、Chrome和IE里面也有取色工具</li>
<li>流程在线制作软件<br>Processon</li>
<li>脑图<br>百度脑图、Xmind</li>
<li>关于我们或者推广在线H5展页<br>兔展、人人秀、企业秀</li>
<li>图标下载、GIF图标下载<br><a href="https://preloaders.net/en/free">https://preloaders.net/en/free</a>  GIF图标下载地址，包含等待之类的<br><a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   阿里图标下载，各种图标<br><a href="http://www.easyicon.net/">http://www.easyicon.net</a> 国外的一个图标下载的网址</li>
<li>MarkDown编写工具<br>Typora：（目前免费，样式好看而且可以切换多种样式皮肤，喜欢Github和Vue风格的，适合于本地写文档，可以使用Github同步自己的文档到云端，而且Github是免费的幺，导出功能免费）<br>Atom<br>Cmd Markdown：（写出来的文档好看，文件管理不是很好，导出PDF、带样式HTML收费）  </li>
<li>GIF截屏工具<br>GifCam</li>
<li>鼠标键盘多电脑共享<br>Synergy、MouseWithOutBorder（Windows自带，免费，但是得在同一个WIFI下）、Barrier（免费、开源、跨平台能够Linux和Win使用同一套键鼠）</li>
<li>文件搜索，启动器<br>Listary(推荐，切换窗口能自动跳转路径)或Wox+Everything；<br>Clover：多窗口文件管理软件<br>Everything</li>
<li>卸载软件工具<br>Geek无广告、界面简洁、免费<br>CCleaner 垃圾清理工具（经常提示升级Pro版本）  </li>
<li>内网映射工具<br>frp可以自己搭建服务器进行域名的映射，很简单<br>ngrok(免费,前提是自己有服务器和域名，也可以使用公共的，比较慢) 花生壳（部分功能收费，特别是80端口）</li>
<li>日志查看工具<br>emeditor<br>LogViewer</li>
<li>Redis可视化管理工具<br>Redis Desktop Manager</li>
<li>下载软件<br>Free DownLoad Manager<br>Internet Download Manager简称IDM（30天试用）</li>
</ul>
</blockquote>
<h2 id="开发使用的常用插件"><a href="#开发使用的常用插件" class="headerlink" title="开发使用的常用插件"></a>开发使用的常用插件</h2><blockquote>
<ul>
<li>地图<br>百度地图（SDK jsAPI）等等，使用很方便</li>
<li>图表(柱状、饼状、折线、雷达、地图、仪表盘、漏斗、热力图、混搭配合多种主题组合)<br>Echarts（界面比较美观，可以使用上面JSONview进行分析）</li>
<li>富文本编辑<br>UEditor(本地化保存)</li>
<li>接口管理工具（前后端协作）<br>Swagger apizza  Insomnia</li>
<li>网页打印工具<br>C-lodop</li>
<li>图片剪切上传<br>Cropper</li>
<li>文件上传<br>WebUploader</li>
<li>Word文档文本搜索和数据存储<br>ES</li>
<li>Java后台图片处理（缩放、旋转、水印、剪裁、格式转换、输出到OutputStream、输出到BufferedImage）<br><a href="https://github.com/coobird/thumbnailator">thumbnailator</a></li>
<li>Java工作流开发（流程相关）<br><a href="https://www.activiti.org/">Activiti</a>  </li>
<li>跨服务器跨不同数据库不同业务表不同业务字段数据库同步<br>ETL kettle</li>
<li>Oracle修改导出版本<br>AlxcTools</li>
<li>Web中使用Word、Excel<br>LibreOffice、openoffice、pageOffice</li>
<li>前端RSA加密<br>JSEncrypt</li>
<li>规则引擎<br>Drools</li>
<li>Mock工具<br>RAP2</li>
<li>网站搜索插件<br>Solr</li>
<li>内容管理系统：管理网站的后台和前端页面<br>OpenCMS</li>
<li>BI大屏数据框架<br>AntV、DataV</li>
<li>报表平台<br><a href="https://github.com/zhangdaiscott/JimuReport/issues/new">积木报表：免费开源</a><br><a href="https://gitee.com/youseries/ureport">UReport2</a><br><a href="https://gitee.com/xianrendzw/EasyReport">EasyReport</a><br><a href="https://gitee.com/luob/reportico">报表设计工具 Reportico</a>  </li>
</ul>
</blockquote>
<h2 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h2><blockquote>
<ul>
<li>手机APP开发框架<br>afinal、ThinkAndroid、andBase、KJFrameForAndroid、SmartAndroid、dhroid<br>QMUI（手机APP开发布局框架）、ButterKnife（个人理解是减少findViewById）、OkHttp框架（网络请求框架）</li>
<li>JAVA 开发框架<br>SSM(Spring+SpringMVC+MyBatis)，阿里数据库连接池durid</li>
<li>权限管理框架<br>Apache shiro<br>Spring Security</li>
<li>PC前端开发框架<br>Bootstrap、LayUI(Layer)（PC端管理后台）、Ant Designer、Element UI</li>
<li>手机前端框架<br>uni-app<br><a href="http://framework7.taobao.org/">Framework7</a>(阿里手机前端框架)<br><a href="http://dev.dcloud.net.cn/mui/">MUI</a>(HBuilder)<br>SUI、MUI、WEUI（手机端）GMU(百度) Frozen UI（QQ）</li>
<li>中后台框架<br><a href="https://github.com/zhangdaiscott/jeecg-boot">jeecg-boot</a></li>
</ul>
</blockquote>
<h2 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h2><blockquote>
<ul>
<li>Kali Linux （还在研究各种渗透，里面有很多渗透用的工具）</li>
</ul>
</blockquote>
<h2 id="人工智能、人脸识别"><a href="#人工智能、人脸识别" class="headerlink" title="人工智能、人脸识别"></a>人工智能、人脸识别</h2><blockquote>
<ul>
<li>人脸识别<br>OpenCV</li>
</ul>
</blockquote>
<h2 id="博客、BBS论坛"><a href="#博客、BBS论坛" class="headerlink" title="博客、BBS论坛"></a>博客、BBS论坛</h2><blockquote>
<ul>
<li>博客<br>HEXO、WordPress</li>
<li>论坛<br>Xiuno、<a href="https://discuz.com/">Discuz Q</a></li>
</ul>
</blockquote>
<h2 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h2><blockquote>
<ul>
<li><a href="https://alternativeto.net/software/winmerge/">Alternativeto</a><br>这个网站能够查找一些收费软件的替代方案，会给出一些开源免费软件的建议</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>软件整理</category>
      </categories>
      <tags>
        <tag>软件整理</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Java接口上传下载文件</title>
    <url>/2019/01/28/%E9%80%9A%E8%BF%87Java%E6%8E%A5%E5%8F%A3%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_18.jpg"></p>
<h3 id="Java后台上传文件代码"><a href="#Java后台上传文件代码" class="headerlink" title="Java后台上传文件代码"></a>Java后台上传文件代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/importUserInfo&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONObject <span class="title">importUserInfo</span><span class="params">(<span class="meta">@RequestParam</span> String isUpdateFlag,HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">	JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">	jsonObject.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//转换HttpServletRequest为MultipartHttpServletRequest</span></span><br><span class="line">	MultipartHttpServletRequest multipartRequest  = (MultipartHttpServletRequest) request;</span><br><span class="line">	MultipartFile file = multipartRequest.getFile(<span class="string">&quot;Fdata&quot;</span>);</span><br><span class="line">	String fileName =  file.getOriginalFilename();</span><br><span class="line">    String fileType = fileName.substring(fileName.indexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    InputStream is = file.getInputStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Java后台的接口代码如下"><a href="#Java后台的接口代码如下" class="headerlink" title="Java后台的接口代码如下"></a>Java后台的接口代码如下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/downloadExcel&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadExcel</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=userExcle.xlsx&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;      	</span><br><span class="line">        String path=PathUtil.getClasspath()+<span class="string">&quot;templete/xlsx/userExcle.xlsx&quot;</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path));</span><br><span class="line"></span><br><span class="line">        OutputStream os = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(b)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端的接口代码如下"><a href="#前端的接口代码如下" class="headerlink" title="前端的接口代码如下"></a>前端的接口代码如下</h3><p>直接使用window打开一个新窗口进行下载就可以了，当然也可以通过指向隐藏div进行文件的下载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;http://localhost:8080/MCSForOracle/userManage/downloadExcel&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>SSM</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>文件上传下载</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA15搭建Maven环境</title>
    <url>/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_18.jpg"></p>
<h3 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h3><p>软件配置一次即可，所有Maven项目共享</p>
<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_1.jpeg" class="">
<ol>
<li>如上图标注3 选择自己的仓库<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_2.jpeg" class=""></li>
</ol>
<ul>
<li>如上图标注 2 所示，Import Maven projects automatically 表示 IntelliJ IDEA 会实时监控项目的 pom.xml 文件，进行项目变动设置</li>
<li>如上图标注3 所示，在 Maven 导入依赖包的时候是否自动下载源码和文档。默认是没有勾选的，也不建议勾选，原因是这样可以加快项目从外网导入依赖包的速度，如果我们需要源码和文档的时 候我们到时候再针对某个依赖包进行联网下载即可。IntelliJ IDEA 支持直接从公网下载源码和文档的</li>
<li>上图标注 3 所示，可以设置导入的 VM 参数。一般这个都不需要主动改，除非项目真的导入太慢了我们再增大此参数</li>
</ul>
<h3 id="Maven-骨架创建-Java-Web-项目"><a href="#Maven-骨架创建-Java-Web-项目" class="headerlink" title="Maven 骨架创建 Java Web 项目"></a>Maven 骨架创建 Java Web 项目</h3><ol>
<li>File -&gt; New -&gt; Project…</li>
<li>如下图<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_3.jpeg" class=""></li>
<li>如下图，GroupId和ArtifactId&lt;项目名&gt;还有Version，这三个属性目的是标识你的项目的唯一性<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_4.jpeg" class=""></li>
<li>如下图<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_5.jpeg" class=""></li>
<li>如下图<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_6.jpeg" class=""></li>
<li>点Finish之后，Maven会根据刚才的配置创建一个基于Maven的Web App</li>
</ol>
<ul>
<li>创建结束，其Log如下：<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_7.jpeg" class=""></li>
<li>创建结束，其代码结构如下<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_8.jpeg" class="">
recources文件夹：一般用来存放一些资源文件<br>webapp文件夹：用来存放web配置文件以及jsp页面等，这已经组成了一个原始的web应用</li>
</ul>
<h3 id="启动-Java-Web-项目"><a href="#启动-Java-Web-项目" class="headerlink" title="启动 Java Web 项目"></a>启动 Java Web 项目</h3><ol>
<li>打开“Project Structure”<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_9.jpeg" class=""></li>
<li>配置“Facets”<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_10.jpeg" class=""></li>
<li>配置“Artifacts”<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_11.jpeg" class=""></li>
<li>启动“Edit Configurations”<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_12.jpeg" class=""></li>
<li>Add New ‘Tomcat Server’ 配置<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_13.jpeg" class=""></li>
<li>配置Deplyment<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_14.jpeg" class=""></li>
<li>配置Server<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_15.jpeg" class=""></li>
<li>其结果如下<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_16.jpeg" class=""></li>
<li>启动Web Server<img src="/2019/01/28/IDEA15%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/screenshot_17.jpeg" class="">
现在可以通过Browser访问WebServer的页面了。</li>
</ol>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>搭建</tag>
        <tag>Maven</tag>
        <tag>Idea15</tag>
      </tags>
  </entry>
  <entry>
    <title>Github学习</title>
    <url>/2019/02/19/Github%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_33.jpg"></p>
<h2 id="Git-Flow如何工作"><a href="#Git-Flow如何工作" class="headerlink" title="Git Flow如何工作"></a>Git Flow如何工作</h2><h3 id="初始分支"><a href="#初始分支" class="headerlink" title="初始分支"></a>初始分支</h3><p>所有在Master分支上Commit应该Tag  </p>
<img src="/2019/02/19/Github%E5%AD%A6%E4%B9%A0/screenshot_1.png" class="">

<h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>分支名feature<br>Feature分支做完之后，必须合并回Develop分支，合并完之后一般会删除这个Feature分支，但是我们也是可以保留的  </p>
<img src="/2019/02/19/Github%E5%AD%A6%E4%B9%A0/screenshot_2.png" class="">

<h3 id="Release分支"><a href="#Release分支" class="headerlink" title="Release分支"></a>Release分支</h3><p>分支名release<br>Release分支基于Develop分支创建，打完Release分支之后，我们可以在Release分支上测试，修改BUG，同时，其他研发人员可以基于开发新的Feature（一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支）<br>发布Release分支时，合并Release到Master和Develop，同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了  </p>
<img src="/2019/02/19/Github%E5%AD%A6%E4%B9%A0/screenshot_3.png" class="">

<h3 id="维护分支Hotfix"><a href="#维护分支Hotfix" class="headerlink" title="维护分支Hotfix"></a>维护分支Hotfix</h3><p>分支名hotfix<br>hotfix分支基于Master分支创建，开发完后需要合并回Master和Develop分支，同时在Master上打一个Tag</p>
<img src="/2019/02/19/Github%E5%AD%A6%E4%B9%A0/screenshot_4.png" class="">

<h2 id="Git-Flow代码示例"><a href="#Git-Flow代码示例" class="headerlink" title="Git Flow代码示例"></a>Git Flow代码示例</h2><ul>
<li><p>创建develop分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure></li>
<li><p>开始新Feature开发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#基于develop创建feature分支  </span><br><span class="line">git checkout -b new-feature develop  </span><br><span class="line">#可选，是否推送feature分支到remote端  </span><br><span class="line">git push -u origin new-feature</span><br><span class="line"></span><br><span class="line">#做一些改动</span><br><span class="line">git status</span><br><span class="line">git add some-file #或者 git add *</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></li>
<li><p>完成feature</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#拉取开发库远端，保证合并代码不覆盖</span><br><span class="line">git pull orgin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff new-feature</span><br><span class="line">git push origin develop</span><br><span class="line"></span><br><span class="line">#删除功能分支</span><br><span class="line">git branch -d new-feature</span><br><span class="line">#如果你把功能分支推送到远端了</span><br><span class="line">git push origin --delete new-feature</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>开始Release</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建基于develop的release分支</span><br><span class="line">git checkout -b release-0.1.0 develop</span><br><span class="line"></span><br><span class="line">#可选项：Bump version number，commit</span><br><span class="line">#Prepare release，commit 这个地方还没看懂</span><br></pre></td></tr></table></figure></li>
<li><p>完成Release</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将release代码合并到主分支上</span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">#将release分支合并到develop分支上</span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">#删除release分支</span><br><span class="line">git branch -d release-0.1.0</span><br><span class="line"></span><br><span class="line">#如果远端也有release分支，需要进行删除操作</span><br><span class="line">git push origin --delete release-0.1.0</span><br><span class="line"></span><br><span class="line">#给主分支打标签</span><br><span class="line">git tag -a v0.1.0 master</span><br><span class="line">git push --tags</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>开始Hotfix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#首先clone master分支</span><br><span class="line">git checkout -b hotfix-0.1.9 master</span><br></pre></td></tr></table></figure></li>
<li><p>完成Hostfix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切换到master分支上，将hotfix合并到master分支上</span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff hotfix-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">#然后将分支内容合并到develop分支上</span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff hotfix-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">#删除hotfix分支</span><br><span class="line">git branch -d hotfix-0.1.0</span><br><span class="line"></span><br><span class="line">#给master分支打标签</span><br><span class="line">git tag -a v0.1.1 master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>引用自：<a href="https://www.cnblogs.com/cnblogsfans/p/5075073.html%EF%BC%8C%E6%B2%A1%E4%BA%8B%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%8B">https://www.cnblogs.com/cnblogsfans/p/5075073.html，没事的可以看下</a> Git Flow确实是一个很好的Git开发流程</p>
</blockquote>
]]></content>
      <categories>
        <category>办公知识</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA2018搭建SSM框架（一）前期搭建</title>
    <url>/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_16.jpg"></p>
<h1 id="搭建环境说明"><a href="#搭建环境说明" class="headerlink" title="搭建环境说明"></a>搭建环境说明</h1><ul>
<li>JDK1.8</li>
<li>IDEA 2018</li>
<li>Maven 3.5.3</li>
</ul>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="1-首先创建Maven-webapp项目"><a href="#1-首先创建Maven-webapp项目" class="headerlink" title="1. 首先创建Maven webapp项目"></a>1. 首先创建Maven webapp项目</h2><img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_1.png" class="">
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_2.png" class="">
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_3.png" class="">
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_4.png" class="">

<h2 id="2-搭建项目结构"><a href="#2-搭建项目结构" class="headerlink" title="2. 搭建项目结构"></a>2. 搭建项目结构</h2><blockquote>
<p>搭建完成的文件目录如下  </p>
</blockquote>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_5.png" class="">

<blockquote>
<p>建设完目录的过程中需要设置文件的类型为<code>Source</code>,<code>Test</code>,<code>Resources</code>,设置完成后的效果图如下：</p>
</blockquote>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_6.png" class="">

<h2 id="3-配置文件内容"><a href="#3-配置文件内容" class="headerlink" title="3. 配置文件内容"></a>3. 配置文件内容</h2><blockquote>
<p><font color='red'><strong>pom.xml</strong></font></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chatRobot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ChatRobot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ChatRobot Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置项目编码编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- java ee --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 实现slf4j接口并整合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- JSON --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis/spring整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ChatRobot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 设置JDK版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color='red'>记得设置左下角的自动引入</font></p>
<blockquote>
<p><font color='red'><strong>logback.xml</strong></font>选择logback比log4j好，具体原因自己百度</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>jdbc.properties</strong></font></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">#数据库地址</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;xxxxxxxxx:3306&#x2F;ChatRobot?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8</span><br><span class="line">#用户名</span><br><span class="line">jdbc.username&#x3D;xxxx</span><br><span class="line">#密码</span><br><span class="line">jdbc.password&#x3D;xxxxx</span><br><span class="line">#最大连接数</span><br><span class="line">c3p0.maxPoolSize&#x3D;30</span><br><span class="line">#最小连接数</span><br><span class="line">c3p0.minPoolSize&#x3D;10</span><br><span class="line">#关闭连接后不自动commit</span><br><span class="line">c3p0.autoCommitOnClose&#x3D;false</span><br><span class="line">#获取连接超时时间</span><br><span class="line">c3p0.checkoutTimeout&#x3D;10000</span><br><span class="line">#当获取连接失败重试次数</span><br><span class="line">c3p0.acquireRetryAttempts&#x3D;2</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>spring-mybatis.xml</strong></font></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.chatRobot.service&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxPoolSize&quot; value&#x3D;&quot;$&#123;c3p0.maxPoolSize&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;minPoolSize&quot; value&#x3D;&quot;$&#123;c3p0.minPoolSize&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;autoCommitOnClose&quot; value&#x3D;&quot;$&#123;c3p0.autoCommitOnClose&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;checkoutTimeout&quot; value&#x3D;&quot;$&#123;c3p0.checkoutTimeout&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;acquireRetryAttempts&quot; value&#x3D;&quot;$&#123;c3p0.acquireRetryAttempts&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置SqlSessionFactory对象 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 扫描model包 使用别名 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;typeAliasesPackage&quot; value&#x3D;&quot;com.chatRobot.model&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:mapper&#x2F;*.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.chatRobot.dao&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置基于注解的声明式事务 --&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>spring-mvc.xml</strong></font></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描web相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.chatRobot.controller&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启SpringMVC注解模式 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 静态资源默认servlet配置 --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置jsp 显示ViewResolver --&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;viewClass&quot; value&#x3D;&quot;org.springframework.web.servlet.view.JstlView&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;views&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>web.xml</strong></font></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_1.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;3.1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;ChatRobot&lt;&#x2F;display-name&gt;</span><br><span class="line">    &lt;description&gt;ChatRobot_Alpha_0.0.1&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 编码过滤器 --&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置DispatcherServlet --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;!-- 配置springMVC需要加载的配置文件--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:spring-*.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">        &lt;async-supported&gt;true&lt;&#x2F;async-supported&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;!-- 匹配所有请求，此处也可以配置成 *.do 形式 --&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;index.html&lt;&#x2F;welcome-file&gt;</span><br><span class="line">    &lt;&#x2F;welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><ul>
<li><p>首先导入一份数据库测试文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;用户ID&#39;,</span><br><span class="line">  &#96;email&#96; varchar(255) NOT NULL COMMENT &#39;用户邮箱&#39;,</span><br><span class="line">  &#96;password&#96; varchar(255) NOT NULL COMMENT &#39;用户密码&#39;,</span><br><span class="line">  &#96;username&#96; varchar(255) NOT NULL COMMENT &#39;用户昵称&#39;,</span><br><span class="line">  &#96;role&#96; varchar(255) NOT NULL COMMENT &#39;用户身份&#39;,</span><br><span class="line">  &#96;status&#96; int(1) NOT NULL COMMENT &#39;用户状态&#39;,</span><br><span class="line">  &#96;regTime&#96; datetime NOT NULL COMMENT &#39;注册时间&#39;,</span><br><span class="line">  &#96;regIp&#96; varchar(255) NOT NULL COMMENT &#39;注册IP&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;email&#96; (&#96;email&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;xxx&#39;, &#39;xxxxx&#39;, &#39;xxxxx&#39;, &#39;root&#39;, &#39;0&#39;, &#39;2017-03-28 09:40:31&#39;, &#39;127.0.0.1&#39;);</span><br><span class="line">SET FOREIGN_KEY_CHECKS&#x3D;1;</span><br></pre></td></tr></table></figure></li>
<li><p>创建类</p>
<blockquote>
<p><font color='red'><strong>UserController.java</strong></font></p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chatRobot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chatRobot.model.User;</span><br><span class="line"><span class="keyword">import</span> com.chatRobot.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showUser.do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> userId = Long.parseLong(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        User user = <span class="keyword">this</span>.userService.selectUser(userId);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        response.getWriter().write(mapper.writeValueAsString(user));</span><br><span class="line">        response.getWriter().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>IUserDao.java</strong></font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chatRobot.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chatRobot.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectUser</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color='red'><strong>User.java</strong></font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chatRobot.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> Date regTime;</span><br><span class="line">    <span class="keyword">private</span> String regIp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getRegTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> regTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegTime</span><span class="params">(Date regTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.regTime = regTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRegIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> regIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegIp</span><span class="params">(String regIp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.regIp = regIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color='red'><strong>IUserService.java</strong></font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chatRobot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chatRobot.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>UserServiceImpl.java</strong></font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chatRobot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chatRobot.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.chatRobot.model.User;</span><br><span class="line"><span class="keyword">import</span> com.chatRobot.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userDao.selectUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'><strong>UserDao.xml</strong></font></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置为IUserDao接口方法提供sql语句配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.chatRobot.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color='red'>创建测试类<strong>IUserDaoTest.java</strong></font></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chatRobot.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chatRobot.model.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载spring配置文件</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&#123;&quot;classpath:spring-mybatis.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IUserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> id = <span class="number">1</span>;</span><br><span class="line">        User user = dao.selectUser(id);</span><br><span class="line">        System.out.println(user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color='red'>运行测试类，会在控制台输出上面sql文件中用户的名字</font>  </p>
</blockquote>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_7.png" class="">

<ul>
<li>继续新建个页面来测试springmvc和mybatis<blockquote>
<p><font color='red'>创建测试类<strong>index.html</strong></font></p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function selectUser() &#123;</span><br><span class="line">        var xmlhttp &#x3D; new XMLHttpRequest();</span><br><span class="line">        xmlhttp.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">            if (xmlhttp.readyState &#x3D;&#x3D; 4 &amp;&amp; xmlhttp.status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">                document.getElementById(&quot;test&quot;).innerHTML &#x3D; xmlhttp.responseText;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xmlhttp.open(&quot;POST&quot;, &quot;user&#x2F;showUser.do&quot;, true);</span><br><span class="line">        xmlhttp.setRequestHeader(&quot;Content-type&quot;, &quot;application&#x2F;x-www-form-urlencoded&quot;);</span><br><span class="line">        xmlhttp.send(&quot;id&#x3D;1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;test&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;selectUser()&quot;&gt;onclick test&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>新建完成后配置项目运行环境，点击Run-Edit Configurations…点击加号新建运行环境，选择Tomcat Server-Local</p>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_8.png" class=""></li>
<li><p>选中新建好的服务器，右边选择Deployment,点击加号-Atifact…</p>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_9.png" class=""></li>
<li><p>选择第二项  </p>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_10.png" class=""></li>
<li><p>然后在右边Application context配置你的项目名</p>
<img src="/2019/01/28/IDEA2018%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E6%9C%9F%E6%90%AD%E5%BB%BA/screenshot_11.png" class=""></li>
<li><p>最后运行项目，在打开的页面中点击按钮测试，成功的话会在页面上显示id为1的用户信息</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>SSM</category>
        <category>SSM框架搭建</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle SQL性能优化</title>
    <url>/2019/02/19/Oracle-SQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_28.jpg"></p>
<blockquote>
<p>Oracle SQL查询对于大数据量的查询，通常会因为一些SQL编写上不规范造成效率低的问题，比如在查询中使用START WITH 造成分页的时候，拼接外部，从而改变内部执行策略，本来3S能执行完的SQL，到最后执行了20S+，因此Copy了这篇文章大家看看</p>
</blockquote>
<h4 id="SQL语句的执行顺序"><a href="#SQL语句的执行顺序" class="headerlink" title="SQL语句的执行顺序"></a>SQL语句的执行顺序</h4><p>语法分析&gt; 语义分析&gt; 视图转换 &gt;表达式转换&gt; 选择优化器 &gt;选择连接方式 &gt;选择连接顺序 &gt;选择数据的搜索路径 &gt;运行“执行计划”</p>
<h4 id="选择适合的Oracle优化器"><a href="#选择适合的Oracle优化器" class="headerlink" title="选择适合的Oracle优化器"></a>选择适合的Oracle优化器</h4><p>RULE（基于规则）  COST（基于成本）  CHOOSE（选择性）</p>
<h4 id="访问TABLE的方式"><a href="#访问TABLE的方式" class="headerlink" title="访问TABLE的方式"></a>访问TABLE的方式</h4><p><strong>全表扫描</strong></p>
<p>全表扫描就是顺序地访问表中每条记录，ORACLE采用一次读入多个数据块(database block)的方式优化全表扫描</p>
<p><strong>通过ROWID访问表</strong></p>
<p>ROWID包含了表中记录的物理位置信息，ORACLE采用索引实现了数据和存放数据的物理位置(ROWID)之间的联系，通常索引提供了快速访问ROWID的方法，因此那些基于索引列的查询就可以得到性能上的提高</p>
<h4 id="共享-SQL-语句"><a href="#共享-SQL-语句" class="headerlink" title="共享 SQL 语句"></a><strong>共享 SQL 语句</strong></h4><ul>
<li>Oracle提供对执行过的SQL语句进行高速缓冲的机制。被解析过并且确定了执行路径的SQL语句存放在SGA的共享池中</li>
<li>Oracle执行一个SQL语句之前每次先从SGA共享池中查找是否有缓冲的SQL语句，如果有则直接执行该SQL语句</li>
<li>可以通过适当调整SGA共享池大小来达到提高Oracle执行性能的目的</li>
</ul>
<h4 id="选择最有效率的表名顺序"><a href="#选择最有效率的表名顺序" class="headerlink" title="选择最有效率的表名顺序"></a><strong><font color='red'>选择最有效率的表名顺序</font></strong></h4><ul>
<li>ORACLE的解析器按照<font color='red'>从右到左</font>的顺序处理FROM子句中的表名，因此FROM子句中写在最后的表(基础表 driving table)将被最先处理</li>
<li>当ORACLE处理多个表时，会运用排序及合并的方式连接它们。首先，扫描第一个表(FROM子句中最后的那个表)并对记录进行排序，然后扫描第二个表(FROM子句中最后第二个表)，最后将所有从第二个表中检索出的记录与第一个表中合适记录进行合并</li>
<li>只在基于规则的优化器中有效</li>
<li><font color='red'>简单来说，就是把数据多的放在左侧，数据少的放在右侧（描述有待大家考证）</font></li>
</ul>
<p>举例：</p>
<p>表 TAB1 16,384 条记录</p>
<p>表 TAB2 1 条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*选择TAB2作为基础表 (最好的方法)*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tab1,tab2   执行时间<span class="number">0.96</span>秒</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*选择TAB2作为基础表 (不佳的方法)*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tab2,tab1   执行时间<span class="number">26.09</span>秒</span><br></pre></td></tr></table></figure>

<p>如果有3个以上的表连接查询, 那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表。</p>
<p>EMP:交叉表，包含LOCATION和CATEGORY的关联关系</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> LOCATION L, CATEGORY C, EMP E</span><br><span class="line"><span class="keyword">WHERE</span> E.EMP_NO <span class="keyword">BETWEEN</span> <span class="number">1000</span> <span class="keyword">AND</span> <span class="number">2000</span></span><br><span class="line">     <span class="keyword">AND</span> E.CAT_NO <span class="operator">=</span> C.CAT_NO</span><br><span class="line">     <span class="keyword">AND</span> E.LOCN <span class="operator">=</span> L.LOCN</span><br></pre></td></tr></table></figure>

<p>将比下列SQL更有效率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP E, LOCATION L, CATEGORY C</span><br><span class="line"><span class="keyword">WHERE</span> E.CAT_NO <span class="operator">=</span> C.CAT_NO</span><br><span class="line">     <span class="keyword">AND</span> E.LOCN <span class="operator">=</span> L.LOCN</span><br><span class="line">     <span class="keyword">AND</span> E.EMP_NO <span class="keyword">BETWEEN</span> <span class="number">1000</span> <span class="keyword">AND</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<h4 id="Where子句中的连接顺序"><a href="#Where子句中的连接顺序" class="headerlink" title="Where子句中的连接顺序"></a><strong>Where子句中的连接顺序</strong></h4><p>Oracle采用<font color='red'>自下而上</font>的顺序解析WHERE子句。 根据这个原理,表之间的连接必须写在其他WHERE条件之前，那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效,执行时间156.3秒*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> EMP E</span><br><span class="line"><span class="keyword">WHERE</span>  SAL <span class="operator">&gt;</span> <span class="number">50000</span></span><br><span class="line">     <span class="keyword">AND</span>  JOB <span class="operator">=</span> ‘MANAGER’</span><br><span class="line">     <span class="keyword">AND</span>  <span class="number">25</span> <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> EMP</span><br><span class="line">                         <span class="keyword">WHERE</span> MGR <span class="operator">=</span> E.EMPNO)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效,执行时间10.6秒*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> EMP E</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">25</span> <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> EMP</span><br><span class="line">                        <span class="keyword">WHERE</span> MGR<span class="operator">=</span>E.EMPNO)</span><br><span class="line">     <span class="keyword">AND</span> SAL <span class="operator">&gt;</span> <span class="number">50000</span></span><br><span class="line">     <span class="keyword">AND</span> JOB <span class="operator">=</span> ‘MANAGER’</span><br></pre></td></tr></table></figure>

<h4 id="SELECT子句中避免使用“-”"><a href="#SELECT子句中避免使用“-”" class="headerlink" title="SELECT子句中避免使用“*”"></a><strong>SELECT子句中避免使用“*”</strong></h4><ul>
<li>Oracle在解析SQL语句的时候，对于“*”将通过查询数据库字典来将其转换成对应的列名。</li>
<li>如果在Select子句中需要列出所有的Column时，建议列出所有的Column名称，而不是简单的用“*”来替代，这样可以减少多于的数据库查询开销</li>
</ul>
<h4 id="减少访问数据库的次数"><a href="#减少访问数据库的次数" class="headerlink" title="减少访问数据库的次数"></a><strong>减少访问数据库的次数</strong></h4><p>当执行每条SQL语句时, ORACLE在内部执行了许多工作：  解析SQL语句 &gt; 估算索引的利用率 &gt; 绑定变量 &gt; 读数据块等等</p>
<p>由此可见, 减少访问数据库的次数 , 就能实际上减少ORACLE的工作量</p>
<h4 id="整个简单无关联的数据库访问"><a href="#整个简单无关联的数据库访问" class="headerlink" title="整个简单无关联的数据库访问"></a><strong>整个简单无关联的数据库访问</strong></h4><p>如果有几个简单的数据库查询语句，你可以把它们整合到一个查询中（即使它们之间没有关系），以减少多于的数据库IO开销。</p>
<p>虽然采取这种方法，效率得到提高，但是程序的可读性大大降低，所以还是要权衡之间的利弊</p>
<h4 id="使用Truncate而非Delete"><a href="#使用Truncate而非Delete" class="headerlink" title="使用Truncate而非Delete"></a><strong>使用Truncate而非Delete</strong></h4><ul>
<li>Delete表中记录的时候，Oracle会在Rollback段中保存删除信息以备恢复。Truncate删除表中记录的时候不保存删除信息，不能恢复。因此Truncate删除记录比Delete快，而且占用资源少</li>
<li>删除表中记录的时候，如果不需要恢复的情况之下应该尽量使用Truncate而不是Delete</li>
<li><font color='red'>Truncate仅适用于删除全表的记录</font></li>
</ul>
<h4 id="尽量多使用COMMIT"><a href="#尽量多使用COMMIT" class="headerlink" title="尽量多使用COMMIT"></a><strong>尽量多使用COMMIT</strong></h4><p>只要有可能,在程序中尽量多使用COMMIT, 这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少</p>
<p>COMMIT所释放的资源：</p>
<ul>
<li>回滚段上用于恢复数据的信息</li>
<li>被程序语句获得的锁</li>
<li>redo log buffer 中的空间</li>
<li>ORACLE为管理上述3种资源中的内部花费</li>
</ul>
<h4 id="计算记录条数"><a href="#计算记录条数" class="headerlink" title="计算记录条数"></a><strong>计算记录条数</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tablename;</span><br><span class="line"><span class="keyword">Select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tablename;</span><br><span class="line"><span class="keyword">Select</span> <span class="built_in">max</span>(rownum) <span class="keyword">from</span> tablename;</span><br></pre></td></tr></table></figure>

<p>一般认为，在没有索引的情况之下，第一种方式最快。 如果有索引列，使用索引列当然最快</p>
<h4 id="用Where子句替换Having子句"><a href="#用Where子句替换Having子句" class="headerlink" title="用Where子句替换Having子句"></a><strong>用Where子句替换Having子句</strong></h4><p>避免使用HAVING子句，HAVING 只会在检索出所有记录之后才对结果集进行过滤。这个处理需要排序、总计等操作。 如果能通过WHERE子句限制记录的数目，就能减少这方面的开销</p>
<h4 id="减少对表的查询操作"><a href="#减少对表的查询操作" class="headerlink" title="减少对表的查询操作"></a><strong>减少对表的查询操作</strong></h4><p>在含有子查询的SQL语句中，要注意减少对表的查询操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效的查询方式*/</span></span><br><span class="line"><span class="keyword">SELECT</span> TAB_NAME  <span class="keyword">FROM</span> TABLES</span><br><span class="line"><span class="keyword">WHERE</span> TAB_NAME <span class="operator">=</span>（<span class="keyword">SELECT</span> TAB_NAME</span><br><span class="line">                           <span class="keyword">FROM</span> TAB_COLUMNS</span><br><span class="line">                         <span class="keyword">WHERE</span> VERSION <span class="operator">=</span> <span class="number">604</span>）</span><br><span class="line">     <span class="keyword">AND</span> DB_VER <span class="operator">=</span>（<span class="keyword">SELECT</span> DB_VER</span><br><span class="line">                           <span class="keyword">FROM</span> TAB_COLUMNS</span><br><span class="line">                         <span class="keyword">WHERE</span> VERSION <span class="operator">=</span> <span class="number">604</span>）</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TAB_NAME  <span class="keyword">FROM</span> TABLES</span><br><span class="line"><span class="keyword">WHERE</span> （TAB_NAME，DB_VER）<span class="operator">=</span></span><br><span class="line">             （<span class="keyword">SELECT</span> TAB_NAME，DB_VER</span><br><span class="line">                  <span class="keyword">FROM</span> TAB_COLUMNS</span><br><span class="line">                <span class="keyword">WHERE</span> VERSION <span class="operator">=</span> <span class="number">604</span>）</span><br></pre></td></tr></table></figure>

<h4 id="使用表的别名（Alias）"><a href="#使用表的别名（Alias）" class="headerlink" title="使用表的别名（Alias）"></a><strong>使用表的别名（Alias）</strong></h4><p>当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个Column上.这样一来,就可以减少解析的时间并减少那些由Column歧义引起的语法错误。</p>
<p>Column歧义指的是由于SQL中不同的表具有相同的Column名,当SQL语句中出现这个Column时,SQL解析器无法判断这个Column的归属。</p>
<h4 id="用EXISTS替代IN"><a href="#用EXISTS替代IN" class="headerlink" title="用EXISTS替代IN"></a><strong>用EXISTS替代IN</strong></h4><p>在许多基于基础表的查询中，为了满足一个条件 ，往往需要对另一个表进行联接。在这种情况下，使用EXISTS(或NOT EXISTS)通常将提高查询的效率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP (基础表)</span><br><span class="line"><span class="keyword">WHERE</span> EMPNO <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">      <span class="keyword">AND</span> DEPTNO <span class="keyword">IN</span> (<span class="keyword">SELECT</span> DEPTNO</span><br><span class="line">                          <span class="keyword">FROM</span> DEPT</span><br><span class="line">                        <span class="keyword">WHERE</span> LOC <span class="operator">=</span> ‘MELB’)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP (基础表)</span><br><span class="line"><span class="keyword">WHERE</span> EMPNO <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> ‘X’</span><br><span class="line">                      <span class="keyword">FROM</span> DEPT</span><br><span class="line">                    <span class="keyword">WHERE</span> DEPT.DEPTNO <span class="operator">=</span> EMP.DEPTNO</span><br><span class="line">                                 <span class="keyword">AND</span> LOC <span class="operator">=</span> ‘MELB’)</span><br></pre></td></tr></table></figure>

<h4 id="用NOT-EXISTS替代NOT-IN"><a href="#用NOT-EXISTS替代NOT-IN" class="headerlink" title="用NOT EXISTS替代NOT IN"></a><strong>用NOT EXISTS替代NOT IN</strong></h4><p>在子查询中，NOT IN子句将执行一个内部的排序和合并，对子查询中的表执行一个全表遍历，因此是非常低效的。</p>
<p>为了避免使用NOT IN，可以把它改写成外连接（Outer Joins）或者NOT EXISTS。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> DEPT_NO <span class="keyword">NOT</span> <span class="keyword">IN</span> （<span class="keyword">SELECT</span> DEPT_NO</span><br><span class="line">                              <span class="keyword">FROM</span> DEPT</span><br><span class="line">                          <span class="keyword">WHERE</span> DEPT_CAT<span class="operator">=</span>’A’）</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ….</span><br><span class="line">  <span class="keyword">FROM</span> EMP E</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> （<span class="keyword">SELECT</span> ‘X’</span><br><span class="line">                       <span class="keyword">FROM</span> DEPT D</span><br><span class="line">                    <span class="keyword">WHERE</span> D.DEPT_NO <span class="operator">=</span> E.DEPT_NO</span><br><span class="line">                                  <span class="keyword">AND</span> DEPT_CAT <span class="operator">=</span> ‘A’）</span><br></pre></td></tr></table></figure>

<h4 id="用表连接替换EXISTS"><a href="#用表连接替换EXISTS" class="headerlink" title="用表连接替换EXISTS"></a><strong>用表连接替换EXISTS</strong></h4><p>通常来说 ，采用表连接的方式比EXISTS更有效率 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ENAME</span><br><span class="line">   <span class="keyword">FROM</span> EMP E</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> （<span class="keyword">SELECT</span> ‘X’</span><br><span class="line">                  <span class="keyword">FROM</span> DEPT</span><br><span class="line">              <span class="keyword">WHERE</span> DEPT_NO <span class="operator">=</span> E.DEPT_NO</span><br><span class="line">                           <span class="keyword">AND</span> DEPT_CAT <span class="operator">=</span> ‘A’）</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ENAME</span><br><span class="line">   <span class="keyword">FROM</span> DEPT D，EMP E</span><br><span class="line"><span class="keyword">WHERE</span> E.DEPT_NO <span class="operator">=</span> D.DEPT_NO</span><br><span class="line">     <span class="keyword">AND</span> DEPT_CAT <span class="operator">=</span> ‘A’</span><br></pre></td></tr></table></figure>

<h4 id="用EXISTS替换DISTINCT"><a href="#用EXISTS替换DISTINCT" class="headerlink" title="用EXISTS替换DISTINCT"></a><strong>用EXISTS替换DISTINCT</strong></h4><p>当提交一个包含对多表信息（比如部门表和雇员表）的查询时，避免在SELECT子句中使用DISTINCT。 一般可以考虑用EXIST替换。</p>
<p>EXISTS 使查询更为迅速，因为RDBMS核心模块将在子查询的条件一旦满足后，立刻返回结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> DEPT_NO，DEPT_NAME</span><br><span class="line">       <span class="keyword">FROM</span> DEPT D，EMP E</span><br><span class="line">    <span class="keyword">WHERE</span> D.DEPT_NO <span class="operator">=</span> E.DEPT_NO</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> DEPT_NO，DEPT_NAME</span><br><span class="line">      <span class="keyword">FROM</span> DEPT D</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> （<span class="keyword">SELECT</span> ‘X’</span><br><span class="line">                  <span class="keyword">FROM</span> EMP E</span><br><span class="line">                <span class="keyword">WHERE</span> E.DEPT_NO <span class="operator">=</span> D.DEPT_NO</span><br></pre></td></tr></table></figure>

<h4 id="识别低效的SQL语句"><a href="#识别低效的SQL语句" class="headerlink" title="识别低效的SQL语句"></a><strong>识别低效的SQL语句</strong></h4><p>下面的SQL工具可以找出低效SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EXECUTIONS, DISK_READS, BUFFER_GETS,</span><br><span class="line">   ROUND ((BUFFER_GETS<span class="operator">-</span>DISK_READS)<span class="operator">/</span>BUFFER_GETS, <span class="number">2</span>) Hit_radio,</span><br><span class="line">   ROUND (DISK_READS<span class="operator">/</span>EXECUTIONS, <span class="number">2</span>) Reads_per_run,</span><br><span class="line">   SQL_TEXT</span><br><span class="line"><span class="keyword">FROM</span>   V$SQLAREA</span><br><span class="line"><span class="keyword">WHERE</span>  EXECUTIONS<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span>     BUFFER_GETS <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> (BUFFER_GETS<span class="operator">-</span>DISK_READS)<span class="operator">/</span>BUFFER_GETS <span class="operator">&lt;</span> <span class="number">0.8</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">4</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>另外也可以使用SQL Trace工具来收集正在执行的SQL的性能状态数据，包括解析次数，执行次数，CPU使用时间等</p>
<h4 id="用Explain-Plan分析SQL语句"><a href="#用Explain-Plan分析SQL语句" class="headerlink" title="用Explain Plan分析SQL语句"></a><strong>用Explain Plan分析SQL语句</strong></h4><p>EXPLAIN PLAN 是一个很好的分析SQL语句的工具, 它甚至可以在不执行SQL的情况下分析语句. 通过分析, 我们就可以知道ORACLE是怎么样连接表, 使用什么方式扫描表(索引扫描或全表扫描)以及使用到的索引名称</p>
<h4 id="SQL-PLUS的TRACE"><a href="#SQL-PLUS的TRACE" class="headerlink" title="SQL PLUS的TRACE"></a><strong>SQL PLUS的TRACE</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> list</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> dept, emp</span><br><span class="line">  <span class="number">3</span><span class="operator">*</span> <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> autotrace traceonly <span class="comment">/*traceonly 可以不显示执行结果*/</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="operator">/</span></span><br><span class="line"><span class="keyword">rows</span> selected.</span><br><span class="line">Execution Plan</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line">     <span class="keyword">SELECT</span> STATEMENT Optimizer<span class="operator">=</span>CHOOSE</span><br><span class="line">   <span class="number">0</span>   NESTED LOOPS</span><br><span class="line">   <span class="number">1</span>     <span class="keyword">TABLE</span> ACCESS (<span class="keyword">FULL</span>) <span class="keyword">OF</span> <span class="string">&#x27;EMP&#x27;</span></span><br><span class="line">   <span class="number">1</span>     <span class="keyword">TABLE</span> ACCESS (<span class="keyword">BY</span> INDEX ROWID) <span class="keyword">OF</span> <span class="string">&#x27;DEPT&#x27;</span></span><br><span class="line">   <span class="number">3</span>       INDEX (<span class="keyword">UNIQUE</span> SCAN) <span class="keyword">OF</span> <span class="string">&#x27;PK_DEPT&#x27;</span> (<span class="keyword">UNIQUE</span>)</span><br></pre></td></tr></table></figure>

<h4 id="用索引提高效率"><a href="#用索引提高效率" class="headerlink" title="用索引提高效率"></a><strong>用索引提高效率</strong></h4><ul>
<li><p>特点</p>
<ul>
<li>优点：提高效率 主键的唯一性验证</li>
<li>代价：需要空间存储 定期维护</li>
</ul>
<p>重构索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX <span class="operator">&lt;</span>INDEXNAME<span class="operator">&gt;</span> REBUILD <span class="operator">&lt;</span>TABLESPACENAME<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Oracle对索引的两种访问模式</p>
<ul>
<li>索引唯一扫描 (Index Unique Scan)</li>
<li>索引范围扫描 (Index Range Scan)</li>
</ul>
</li>
<li><p>基础表的选择</p>
<ul>
<li>基础表(Driving Table)是指被最先访问的表(通常以全表扫描的方式被访问)。 根据优化器的不同，SQL语句中基础表的选择是不一样的</li>
<li>如果你使用的是CBO (COST BASED OPTIMIZER)，优化器会检查SQL语句中的每个表的物理大小，索引的状态，然后选用花费最低的执行路径</li>
<li>如果你用RBO (RULE BASED OPTIMIZER)， 并且所有的连接条件都有索引对应，在这种情况下，基础表就是FROM 子句中列在最后的那个表</li>
</ul>
</li>
<li><p>多个平等索引</p>
<ul>
<li>当SQL语句的执行路径可以使用分布在多个表上的多个索引时，ORACLE会同时使用多个索引并在运行时对它们的记录进行合并，检索出仅对全部索引有效的记录</li>
<li>在ORACLE选择执行路径时，唯一性索引的等级高于非唯一性索引。然而这个规则只有当WHERE子句中索引列和常量比较才有效。如果索引列和其他表的索引类相比较。这种子句在优化器中的等级是非常低的</li>
<li>如果不同表中两个相同等级的索引将被引用，FROM子句中表的顺序将决定哪个会被率先使用。 FROM子句中最后的表的索引将有最高的优先级</li>
<li>如果相同表中两个相同等级的索引将被引用，WHERE子句中最先被引用的索引将有最高的优先级</li>
</ul>
</li>
<li><p>等式比较优先于范围比较</p>
</li>
</ul>
<p>DEPTNO上有一个非唯一性索引，EMP_CAT也有一个非唯一性索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME</span><br><span class="line">     <span class="keyword">FROM</span> EMP</span><br><span class="line">     <span class="keyword">WHERE</span> DEPTNO <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line">     <span class="keyword">AND</span> EMP_CAT <span class="operator">=</span> ‘A’;</span><br></pre></td></tr></table></figure>

<p>这里只有EMP_CAT索引被用到,然后所有的记录将逐条与DEPTNO条件进行比较. 执行路径如下:</p>
<p>TABLE ACCESS BY ROWID ON EMP</p>
<p>INDEX RANGE SCAN ON CAT_IDX</p>
<p>即使是唯一性索引，如果做范围比较，其优先级也低于非唯一性索引的等式比较</p>
<ul>
<li>不明确的索引等级</li>
</ul>
<p>当ORACLE无法判断索引的等级高低差别，优化器将只使用一个索引,它就是在WHERE子句中被列在最前面的</p>
<p>DEPTNO上有一个非唯一性索引，EMP_CAT也有一个非唯一性索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME</span><br><span class="line">     <span class="keyword">FROM</span> EMP</span><br><span class="line">     <span class="keyword">WHERE</span> DEPTNO <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line">     <span class="keyword">AND</span> EMP_CAT <span class="operator">&gt;</span> ‘A’;</span><br></pre></td></tr></table></figure>

<p>这里, ORACLE只用到了DEPT_NO索引. 执行路径如下:</p>
<p>TABLE ACCESS BY ROWID ON EMP</p>
<p>INDEX RANGE SCAN ON DEPT_IDX</p>
<ul>
<li>强制索引失效</li>
</ul>
<p>如果两个或以上索引具有相同的等级，你可以强制命令ORACLE优化器使用其中的一个(通过它,检索出的记录数量少) 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME</span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> EMPNO <span class="operator">=</span> <span class="number">7935</span>  </span><br><span class="line"><span class="keyword">AND</span> DEPTNO <span class="operator">+</span> <span class="number">0</span> <span class="operator">=</span> <span class="number">10</span>    <span class="comment">/*DEPTNO上的索引将失效*/</span></span><br><span class="line"><span class="keyword">AND</span> EMP_TYPE <span class="operator">||</span> ‘’ <span class="operator">=</span> ‘A’  <span class="comment">/*EMP_TYPE上的索引将失效*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>避免在索引上使用计算</li>
</ul>
<p>WHERE子句中，如果索引列是函数的一部分。优化器将不使用索引而使用全表扫描</p>
<ul>
<li>自动选择索引</li>
</ul>
<p>如果表中有两个以上（包括两个）索引，其中有一个唯一性索引，而其他是非唯一性索引。在这种情况下，ORACLE将使用唯一性索引而完全忽略非唯一性索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME</span><br><span class="line">  <span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> EMPNO <span class="operator">=</span> <span class="number">2326</span>  </span><br><span class="line">     <span class="keyword">AND</span> DEPTNO  <span class="operator">=</span> <span class="number">20</span> ;</span><br></pre></td></tr></table></figure>

<p>这里，只有EMPNO上的索引是唯一性的，所以EMPNO索引将用来检索记录。</p>
<p>TABLE ACCESS BY ROWID ON EMP</p>
<p>INDEX UNIQUE SCAN ON EMP_NO_IDX</p>
<ul>
<li>避免在索引上使用NOT</li>
</ul>
<p>通常，我们要避免在索引列上使用NOT，NOT会产生在和在索引列上使用函数相同的影响。当ORACLE遇到NOT，它就会停止使用索引转而执行全表扫描</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line">  <span class="keyword">SELECT</span> …</span><br><span class="line">     <span class="keyword">FROM</span> DEPT</span><br><span class="line">   <span class="keyword">WHERE</span> <span class="keyword">NOT</span> DEPT_CODE <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ol>
<li>用&gt;=代替&gt;</li>
</ol>
<p>如果DEPTNO上有一个索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">     <span class="keyword">FROM</span> EMP</span><br><span class="line">   <span class="keyword">WHERE</span> DEPTNO <span class="operator">&gt;=</span><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>两者的区别在于，前者DBMS将直接跳到第一个DEPT等于4的记录，而后者将首先定位到DEPTNO等于3的记录并且向前扫描到第一个DEPT大于3的记录.</p>
<h4 id="用Union替换OR（适用于索引列）"><a href="#用Union替换OR（适用于索引列）" class="headerlink" title="用Union替换OR（适用于索引列）"></a><strong>用Union替换OR（适用于索引列）</strong></h4><p>通常情况下，用UNION替换WHERE子句中的OR将会起到较好的效果。对索引列使用OR将造成全表扫描。 注意，以上规则只针对多个索引列有效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> LOC_ID , LOC_DESC , REGION</span><br><span class="line">     <span class="keyword">FROM</span> LOCATION</span><br><span class="line">   <span class="keyword">WHERE</span> LOC_ID <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">   <span class="keyword">UNION</span></span><br><span class="line">   <span class="keyword">SELECT</span> LOC_ID , LOC_DESC , REGION</span><br><span class="line">     <span class="keyword">FROM</span> LOCATION</span><br><span class="line">   <span class="keyword">WHERE</span> REGION <span class="operator">=</span> “MELBOURNE”</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> LOC_ID , LOC_DESC , REGION</span><br><span class="line">     <span class="keyword">FROM</span> LOCATION</span><br><span class="line">   <span class="keyword">WHERE</span> LOC_ID <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> REGION <span class="operator">=</span> “MELBOURNE”</span><br></pre></td></tr></table></figure>

<h4 id="用IN替换OR"><a href="#用IN替换OR" class="headerlink" title="用IN替换OR"></a>用IN替换OR</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span>….</span><br><span class="line">  <span class="keyword">FROM</span> LOCATION</span><br><span class="line"><span class="keyword">WHERE</span> LOC_ID <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">       <span class="keyword">OR</span>  LOC_ID <span class="operator">=</span> <span class="number">20</span></span><br><span class="line">       <span class="keyword">OR</span>  LOC_ID <span class="operator">=</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>…</span><br><span class="line">  <span class="keyword">FROM</span> LOCATION</span><br><span class="line"><span class="keyword">WHERE</span> LOC_IN <span class="keyword">IN</span> （<span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>）</span><br></pre></td></tr></table></figure>

<p>实际的执行效果还须检验，在ORACLE8i下， 两者的执行路径似乎是相同的</p>
<h4 id="避免在索引上使用IS-NULL-和IS-NOT-NULL"><a href="#避免在索引上使用IS-NULL-和IS-NOT-NULL" class="headerlink" title="避免在索引上使用IS NULL 和IS NOT NULL"></a>避免在索引上使用IS NULL 和IS NOT NULL</h4><p>避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*低效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> DEPARTMENT</span><br><span class="line"><span class="keyword">WHERE</span> DEPT_CODE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> DEPARTMENT</span><br><span class="line"><span class="keyword">WHERE</span> DEPT_CODE <span class="operator">&gt;=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h4 id="总是使用索引的第一列"><a href="#总是使用索引的第一列" class="headerlink" title="总是使用索引的第一列"></a>总是使用索引的第一列</h4><p>如果索引是建立在多个列上， 只有在它的第一个列(leading column)被where子句引用时， 优化器才会选择使用该索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">create</span> index multindex <span class="keyword">on</span> multiindexusage(inda,indb);</span><br><span class="line">Index created.</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  multiindexusage <span class="keyword">where</span> indb <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Execution Plan</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line">     <span class="keyword">SELECT</span> STATEMENT Optimizer<span class="operator">=</span>CHOOSE</span><br><span class="line">   <span class="number">0</span>   <span class="keyword">TABLE</span> ACCESS (<span class="keyword">FULL</span>) <span class="keyword">OF</span> <span class="string">&#x27;MULTIINDEXUSAGE&#x27;</span></span><br></pre></td></tr></table></figure>

<p>很明显, 当仅引用索引的第二个列时,优化器使用了全表扫描而忽略了索引。</p>
<h4 id="使用UNION-ALL替换UNION"><a href="#使用UNION-ALL替换UNION" class="headerlink" title="使用UNION ALL替换UNION"></a>使用UNION ALL替换UNION</h4><p>当SQL语句需要UNION两个查询结果集合时，这两个结果集合会以UNION-ALL的方式被合并，然后在输出最终结果前进行排序。如果用UNION ALL替代UNION，这样排序就不是必要了，效率就会因此得到提高。</p>
<p>由于UNION ALL的结果没有经过排序，而且不过滤重复的记录，因此是否进行替换需要根据业务需求而定。</p>
<h4 id="对UNION的优化"><a href="#对UNION的优化" class="headerlink" title="对UNION的优化"></a>对UNION的优化</h4><p>由于UNION会对查询结果进行排序，而且过滤重复记录，因此其执行效率没有UNION ALL高。 UNION操作会使用到SORT_AREA_SIZE内存块，因此对这块内存的优化也非常重要。</p>
<p>可以使用下面的SQL来查询排序的消耗量 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> substr（name，<span class="number">1</span>，<span class="number">25</span>）  &quot;Sort Area Name&quot;，</span><br><span class="line">       substr（<span class="keyword">value</span>，<span class="number">1</span>，<span class="number">15</span>）   &quot;Value&quot;</span><br><span class="line"><span class="keyword">from</span> v$sysstat</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;sort%&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="避免改变索引列的类型"><a href="#避免改变索引列的类型" class="headerlink" title="避免改变索引列的类型"></a>避免改变索引列的类型</h4><p>当比较不同数据类型的数据时， ORACLE自动对列进行简单的类型转换。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*假设EMP_TYPE是一个字符类型的索引列.*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> EMP</span><br><span class="line"> <span class="keyword">WHERE</span> EMP_TYPE <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个语句被ORACLE转换为:*/</span></span><br><span class="line"><span class="keyword">SELECT</span> …</span><br><span class="line">  <span class="keyword">FROM</span> EMP</span><br><span class="line"> <span class="keyword">WHERE</span> TO_NUMBER(EMP_TYPE)<span class="operator">=</span><span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>因为内部发生的类型转换，这个索引将不会被用到</p>
<p>几点注意：</p>
<ul>
<li>当比较不同数据类型的数据时，ORACLE自动对列进行简单的类型转换</li>
<li><font color='red'>如果在索引列上面进行了隐式类型转换，在查询的时候将不会用到索引</font></li>
<li>注意当字符和数值比较时，ORACLE会优先转换数值类型到字符类型</li>
<li>为了避免ORACLE对SQL进行隐式的类型转换，最好把类型转换用显式表现出来</li>
</ul>
<h4 id="几种不能使用索引的WHERE子句"><a href="#几种不能使用索引的WHERE子句" class="headerlink" title="几种不能使用索引的WHERE子句"></a>几种不能使用索引的WHERE子句</h4><ul>
<li>下面的例子中，‘!=’ 将不使用索引 ，索引只能告诉你什么存在于表中，而不能告诉你什么不存在于表中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*不使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME</span><br><span class="line">      <span class="keyword">FROM</span> TRANSACTION</span><br><span class="line">   <span class="keyword">WHERE</span> AMOUNT <span class="operator">!=</span><span class="number">0</span>；</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME</span><br><span class="line">      <span class="keyword">FROM</span> TRANSACTION</span><br><span class="line">    <span class="keyword">WHERE</span> AMOUNT <span class="operator">&gt;</span> <span class="number">0</span>；</span><br></pre></td></tr></table></figure>

<ul>
<li>下面的例子中，‘||’是字符连接函数。就象其他函数那样，停用了索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*不使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME，AMOUNT</span><br><span class="line">  <span class="keyword">FROM</span> TRANSACTION</span><br><span class="line"><span class="keyword">WHERE</span> ACCOUNT_NAME<span class="operator">||</span>ACCOUNT_TYPE<span class="operator">=</span>’AMEXA’；</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME，AMOUNT</span><br><span class="line">  <span class="keyword">FROM</span> TRANSACTION</span><br><span class="line"><span class="keyword">WHERE</span> ACCOUNT_NAME <span class="operator">=</span> ‘AMEX’</span><br><span class="line">     <span class="keyword">AND</span> ACCOUNT_TYPE<span class="operator">=</span>’ A’；</span><br></pre></td></tr></table></figure>

<ul>
<li>下面的例子中，‘+’是数学函数。就象其他数学函数那样，停用了索引。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*不使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME，AMOUNT</span><br><span class="line">  <span class="keyword">FROM</span> TRANSACTION</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT <span class="operator">+</span> <span class="number">3000</span> <span class="operator">&gt;</span><span class="number">5000</span>；</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME，AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> TRANSACTION</span><br><span class="line"><span class="keyword">WHERE</span> AMOUNT <span class="operator">&gt;</span> <span class="number">2000</span> ；</span><br></pre></td></tr></table></figure>

<ul>
<li>下面的例子中，相同的索引列不能互相比较，这将会启用全表扫描</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*不使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME, AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> TRANSACTION</span><br><span class="line"><span class="keyword">WHERE</span> ACCOUNT_NAME <span class="operator">=</span> NVL(:ACC_NAME, ACCOUNT_NAME)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用索引*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCOUNT_NAME，AMOUNT</span><br><span class="line"><span class="keyword">FROM</span> TRANSACTION</span><br><span class="line"><span class="keyword">WHERE</span> ACCOUNT_NAME <span class="keyword">LIKE</span> NVL(:ACC_NAME, ’<span class="operator">%</span>’)</span><br></pre></td></tr></table></figure>

<h4 id="连接多个扫描"><a href="#连接多个扫描" class="headerlink" title="连接多个扫描"></a>连接多个扫描</h4><p>如果对一个列和一组有限的值进行比较，优化器可能执行多次扫描并对结果进行合并连接</p>
<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">      <span class="keyword">FROM</span> LODGING</span><br><span class="line">    <span class="keyword">WHERE</span> MANAGER <span class="keyword">IN</span> (‘BILL GATES’, ’KEN MULLER’)</span><br></pre></td></tr></table></figure>

<p>优化器可能将它转换成以下形式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> LODGING</span><br><span class="line">  <span class="keyword">WHERE</span> MANAGER <span class="operator">=</span> ‘BILL GATES’</span><br><span class="line">         <span class="keyword">OR</span> MANAGER <span class="operator">=</span> ’KEN MULLER’</span><br></pre></td></tr></table></figure>

<h4 id="CBO下使用更具选择性的索引"><a href="#CBO下使用更具选择性的索引" class="headerlink" title="CBO下使用更具选择性的索引"></a>CBO下使用更具选择性的索引</h4><ul>
<li>基于成本的优化器（CBO，Cost-Based Optimizer）对索引的选择性进行判断来决定索引的使用是否能提高效率</li>
<li>如果检索数据量超过30%的表中记录数，使用索引将没有显著的效率提高</li>
<li>在特定情况下，使用索引也许会比全表扫描慢。而通常情况下，使用索引比全表扫描要块几倍乃至几千倍</li>
</ul>
<h4 id="避免使用耗费资源的操作"><a href="#避免使用耗费资源的操作" class="headerlink" title="避免使用耗费资源的操作"></a>避免使用耗费资源的操作</h4><ul>
<li><p>带有DISTINCT，UNION，MINUS，INTERSECT，ORDER BY的SQL语句会启动SQL引擎执行耗费资源的排序（SORT）功能。DISTINCT需要一次排序操作，而其他的至少需要执行两次排序</p>
</li>
<li><p>通常，带有UNION，MINUS，INTERSECT的SQL语句都可以用其他方式重写</p>
</li>
</ul>
<h4 id="优化GROUP-BY"><a href="#优化GROUP-BY" class="headerlink" title="优化GROUP BY"></a><strong>优化GROUP BY</strong></h4><p>提高GROUP BY语句的效率，可以通过将不需要的记录在GROUP BY之前过滤掉</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*低效*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> JOB ，AVG（SAL）</span><br><span class="line">    <span class="keyword">FROM</span> EMP</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB</span><br><span class="line"><span class="keyword">HAVING</span> JOB <span class="operator">=</span> ‘PRESIDENT’</span><br><span class="line">         <span class="keyword">OR</span> JOB <span class="operator">=</span> ‘MANAGER’</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高效*/</span></span><br><span class="line"><span class="keyword">SELECT</span> JOB，AVG（SAL）</span><br><span class="line">   <span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> JOB <span class="operator">=</span> ‘PRESIDENT’</span><br><span class="line">        <span class="keyword">OR</span> JOB <span class="operator">=</span> ‘MANAGER’</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB</span><br></pre></td></tr></table></figure>

<h4 id="使用日期"><a href="#使用日期" class="headerlink" title="使用日期"></a>使用日期</h4><p>当使用日期时，需要注意如果有超过5位小数加到日期上，这个日期会进到下一天</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_DATE（‘<span class="number">01</span><span class="operator">-</span>JAN<span class="number">-93</span>’<span class="operator">+</span><span class="number">.99999</span>）</span><br><span class="line">  <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">Returns</span>：</span><br><span class="line">’<span class="number">01</span><span class="operator">-</span>JAN<span class="number">-93</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span>’</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TO_DATE（‘<span class="number">01</span><span class="operator">-</span>JAN<span class="number">-93</span>’<span class="operator">+</span><span class="number">.999999</span>）</span><br><span class="line">  <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">Returns</span>：</span><br><span class="line">’<span class="number">02</span><span class="operator">-</span>JAN<span class="number">-93</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>’</span><br></pre></td></tr></table></figure>

<h4 id="使用显示游标（CURSORS）"><a href="#使用显示游标（CURSORS）" class="headerlink" title="使用显示游标（CURSORS）"></a>使用显示游标（CURSORS）</h4><p>使用隐式的游标，将会执行两次操作。第一次检索记录，第二次检查TOO MANY ROWS 这个exception。而显式游标不执行第二次操作。</p>
<ol>
<li>分离表和索引</li>
</ol>
<ul>
<li>总是将你的表和索引建立在不同的表空间内（TABLESPACES）</li>
<li>决不要将不属于ORACLE内部系统的对象存放到SYSTEM表空间里</li>
<li>确保数据表空间和索引表空间置于不同的硬盘上</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Webuploader多图上传及回显</title>
    <url>/2019/01/25/Webuploader%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0%E5%8F%8A%E5%9B%9E%E6%98%BE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_8.jpg"></p>
<h3 id="goods-detail-uploader-js-这个是图片上传的js"><a href="#goods-detail-uploader-js-这个是图片上传的js" class="headerlink" title="goods_detail_uploader.js 这个是图片上传的js"></a>goods_detail_uploader.js 这个是图片上传的js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function($)&#123;</span><br><span class="line">    &#x2F;&#x2F; 当domReady的时候开始初始化</span><br><span class="line">    $(function() &#123;</span><br><span class="line">        var $wrap &#x3D; $(&#39;#uploader&#39;),</span><br><span class="line">            &#x2F;&#x2F; 图片容器</span><br><span class="line">            $queue &#x3D; $( &#39;&lt;ul class&#x3D;&quot;filelist&quot;&gt;&lt;&#x2F;ul&gt;&#39; ).appendTo( $wrap.find( &#39;.queueList&#39; ) ),</span><br><span class="line">            &#x2F;&#x2F; 状态栏，包括进度和控制按钮</span><br><span class="line">            $statusBar &#x3D; $wrap.find( &#39;.statusBar&#39; ),</span><br><span class="line">            &#x2F;&#x2F; 文件总体选择信息。</span><br><span class="line">            $info &#x3D; $statusBar.find( &#39;.info&#39; ),</span><br><span class="line">            &#x2F;&#x2F; 上传按钮</span><br><span class="line">            $upload &#x3D; $wrap.find( &#39;.uploadBtn&#39; ),</span><br><span class="line">            &#x2F;&#x2F; 没选择文件之前的内容。</span><br><span class="line">            $placeHolder &#x3D; $wrap.find( &#39;.placeholder&#39; ),</span><br><span class="line">            $progress &#x3D; $statusBar.find( &#39;.progress&#39; ).hide(),</span><br><span class="line">            &#x2F;&#x2F; 添加的文件数量</span><br><span class="line">            fileCount &#x3D; 0,</span><br><span class="line">            &#x2F;&#x2F; 添加的文件总大小</span><br><span class="line">            fileSize &#x3D; 0,</span><br><span class="line">            &#x2F;&#x2F; 优化retina, 在retina下这个值是2</span><br><span class="line">            ratio &#x3D; window.devicePixelRatio || 1,</span><br><span class="line">            &#x2F;&#x2F; 缩略图大小</span><br><span class="line">            thumbnailWidth &#x3D; 110 * ratio,</span><br><span class="line">            thumbnailHeight &#x3D; 110 * ratio,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 可能有pedding, ready, uploading, confirm, done.</span><br><span class="line">            state &#x3D; &#39;pedding&#39;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 所有文件的进度信息，key为file id</span><br><span class="line">            percentages &#x3D; &#123;&#125;,</span><br><span class="line">            &#x2F;&#x2F; 判断浏览器是否支持图片的base64</span><br><span class="line">            isSupportBase64 &#x3D; ( function() &#123;</span><br><span class="line">                var data &#x3D; new Image();</span><br><span class="line">                var support &#x3D; true;</span><br><span class="line">                data.onload &#x3D; data.onerror &#x3D; function() &#123;</span><br><span class="line">                    if( this.width !&#x3D; 1 || this.height !&#x3D; 1 ) &#123;</span><br><span class="line">                        support &#x3D; false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                data.src &#x3D; &quot;data:image&#x2F;gif;base64,R0lGODlhAQABAIAAAAAAAP&#x2F;&#x2F;&#x2F;ywAAAAAAQABAAACAUwAOw&#x3D;&#x3D;&quot;;</span><br><span class="line">                return support;</span><br><span class="line">            &#125; )(),</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 检测是否已经安装flash，检测flash的版本</span><br><span class="line">            flashVersion &#x3D; ( function() &#123;</span><br><span class="line">                var version;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    version &#x3D; navigator.plugins[ &#39;Shockwave Flash&#39; ];</span><br><span class="line">                    version &#x3D; version.description;</span><br><span class="line">                &#125; catch ( ex ) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        version &#x3D; new ActiveXObject(&#39;ShockwaveFlash.ShockwaveFlash&#39;)</span><br><span class="line">                                .GetVariable(&#39;$version&#39;);</span><br><span class="line">                    &#125; catch ( ex2 ) &#123;</span><br><span class="line">                        version &#x3D; &#39;0.0&#39;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                version &#x3D; version.match( &#x2F;\d+&#x2F;g );</span><br><span class="line">                return parseFloat( version[ 0 ] + &#39;.&#39; + version[ 1 ], 10 );</span><br><span class="line">            &#125; )(),</span><br><span class="line"></span><br><span class="line">            supportTransition &#x3D; (function()&#123;</span><br><span class="line">                var s &#x3D; document.createElement(&#39;p&#39;).style,</span><br><span class="line">                    r &#x3D; &#39;transition&#39; in s ||</span><br><span class="line">                            &#39;WebkitTransition&#39; in s ||</span><br><span class="line">                            &#39;MozTransition&#39; in s ||</span><br><span class="line">                            &#39;msTransition&#39; in s ||</span><br><span class="line">                            &#39;OTransition&#39; in s;</span><br><span class="line">                s &#x3D; null;</span><br><span class="line">                return r;</span><br><span class="line">            &#125;)(),</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; WebUploader实例</span><br><span class="line">            uploader;</span><br><span class="line"></span><br><span class="line">        if ( !WebUploader.Uploader.support(&#39;flash&#39;) &amp;&amp; WebUploader.browser.ie ) &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; flash 安装了但是版本过低。</span><br><span class="line">            if (flashVersion) &#123;</span><br><span class="line">                (function(container) &#123;</span><br><span class="line">                    window[&#39;expressinstallcallback&#39;] &#x3D; function( state ) &#123;</span><br><span class="line">                        switch(state) &#123;</span><br><span class="line">                            case &#39;Download.Cancelled&#39;:</span><br><span class="line">                                alert(&#39;您取消了更新！&#39;);</span><br><span class="line">                                break;</span><br><span class="line"></span><br><span class="line">                            case &#39;Download.Failed&#39;:</span><br><span class="line">                                alert(&#39;安装失败&#39;);</span><br><span class="line">                                break;</span><br><span class="line"></span><br><span class="line">                            default:</span><br><span class="line">                                alert(&#39;安装已成功，请刷新！&#39;);</span><br><span class="line">                                break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        delete window[&#39;expressinstallcallback&#39;];</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    var swf &#x3D; &#39;.&#x2F;expressInstall.swf&#39;;</span><br><span class="line">                    &#x2F;&#x2F; insert flash object</span><br><span class="line">                    var html &#x3D; &#39;&lt;object type&#x3D;&quot;application&#x2F;&#39; +</span><br><span class="line">                            &#39;x-shockwave-flash&quot; data&#x3D;&quot;&#39; +  swf + &#39;&quot; &#39;;</span><br><span class="line"></span><br><span class="line">                    if (WebUploader.browser.ie) &#123;</span><br><span class="line">                        html +&#x3D; &#39;classid&#x3D;&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; &#39;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    html +&#x3D; &#39;width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; style&#x3D;&quot;outline:0&quot;&gt;&#39;  +</span><br><span class="line">                        &#39;&lt;param name&#x3D;&quot;movie&quot; value&#x3D;&quot;&#39; + swf + &#39;&quot; &#x2F;&gt;&#39; +</span><br><span class="line">                        &#39;&lt;param name&#x3D;&quot;wmode&quot; value&#x3D;&quot;transparent&quot; &#x2F;&gt;&#39; +</span><br><span class="line">                        &#39;&lt;param name&#x3D;&quot;allowscriptaccess&quot; value&#x3D;&quot;always&quot; &#x2F;&gt;&#39; +</span><br><span class="line">                    &#39;&lt;&#x2F;object&gt;&#39;;</span><br><span class="line"></span><br><span class="line">                    container.html(html);</span><br><span class="line"></span><br><span class="line">                &#125;)($wrap);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 压根就没有安转。</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $wrap.html(&#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.adobe.com&#x2F;go&#x2F;getflashplayer&quot; target&#x3D;&quot;_blank&quot; border&#x3D;&quot;0&quot;&gt;&lt;img alt&#x3D;&quot;get flash player&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.adobe.com&#x2F;macromedia&#x2F;style_guide&#x2F;images&#x2F;160x41_Get_Flash_Player.jpg&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&#39;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return;</span><br><span class="line">        &#125; else if (!WebUploader.Uploader.support()) &#123;</span><br><span class="line">            alert( &#39;Web Uploader 不支持您的浏览器！&#39;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var locat &#x3D; (window.location+&#39;&#39;).split(&#39;&#x2F;&#39;);</span><br><span class="line">    	if(&#39;pictures&#39;&#x3D;&#x3D; locat[3])&#123;locat &#x3D;  locat[0]+&#39;&#x2F;&#x2F;&#39;+locat[2];&#125;else&#123;locat &#x3D;  locat[0]+&#39;&#x2F;&#x2F;&#39;+locat[2]+&#39;&#x2F;&#39;+locat[3];&#125;;</span><br><span class="line">        uploader &#x3D; WebUploader.create(&#123;</span><br><span class="line">            pick: &#123;</span><br><span class="line">                id: &#39;#filePicker&#39;,</span><br><span class="line">                label: &#39;点击选择图片&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            formData: &#123;</span><br><span class="line">                uid: 123</span><br><span class="line">            &#125;,</span><br><span class="line">            dnd: &#39;#dndArea&#39;,</span><br><span class="line">            paste: &#39;#uploader&#39;,</span><br><span class="line">            swf: &#39;.&#x2F;Uploader.swf&#39;,</span><br><span class="line">            chunked: false,</span><br><span class="line">            chunkSize: 512 * 1024,</span><br><span class="line">            &#x2F;&#x2F;server: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;pictures&#x2F;save.do&#39;,</span><br><span class="line">            server: &#39;goodsDetail&#x2F;uploadImg.do?&#39;,</span><br><span class="line">            &#x2F;&#x2F;runtimeOrder: &#39;flash&#39;,</span><br><span class="line"></span><br><span class="line">            accept: &#123;</span><br><span class="line">                 title: &#39;Images&#39;,</span><br><span class="line">                 extensions: &#39;gif,jpg,jpeg,bmp,png&#39;,</span><br><span class="line">                 mimeTypes: &#39;image&#x2F;*&#39;</span><br><span class="line">             &#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 禁掉全局的拖拽功能。这样不会出现图片拖进页面的时候，把图片打开。</span><br><span class="line">            disableGlobalDnd: true,</span><br><span class="line">            fileNumLimit: 5,</span><br><span class="line">            fileSizeLimit: 200 * 1024 * 1024,    &#x2F;&#x2F; 200 M</span><br><span class="line">            fileSingleSizeLimit: 50 * 1024 * 1024    &#x2F;&#x2F; 50 M</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 拖拽时不接受 js, txt 文件。</span><br><span class="line">        uploader.on( &#39;dndAccept&#39;, function( items ) &#123;</span><br><span class="line">            var denied &#x3D; false,</span><br><span class="line">                len &#x3D; items.length,</span><br><span class="line">                i &#x3D; 0,</span><br><span class="line">                &#x2F;&#x2F; 修改js类型</span><br><span class="line">                unAllowed &#x3D; &#39;text&#x2F;plain;application&#x2F;javascript &#39;;</span><br><span class="line"></span><br><span class="line">            for ( ; i &lt; len; i++ ) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果在列表里面</span><br><span class="line">                if ( ~unAllowed.indexOf( items[ i ].type ) ) &#123;</span><br><span class="line">                    denied &#x3D; true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return !denied;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; uploader.on(&#39;filesQueued&#39;, function() &#123;</span><br><span class="line">        &#x2F;&#x2F;     uploader.sort(function( a, b ) &#123;</span><br><span class="line">        &#x2F;&#x2F;         if ( a.name &lt; b.name )</span><br><span class="line">        &#x2F;&#x2F;           return -1;</span><br><span class="line">        &#x2F;&#x2F;         if ( a.name &gt; b.name )</span><br><span class="line">        &#x2F;&#x2F;           return 1;</span><br><span class="line">        &#x2F;&#x2F;         return 0;</span><br><span class="line">        &#x2F;&#x2F;     &#125;);</span><br><span class="line">        &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 添加“添加文件”的按钮，</span><br><span class="line">        uploader.addButton(&#123;</span><br><span class="line">            id: &#39;#filePicker2&#39;,</span><br><span class="line">            label: &#39;继续添加&#39;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">		 var getFileBlob &#x3D; function(url, cb) &#123;</span><br><span class="line">			var xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">			xhr.open(&quot;GET&quot;, url);</span><br><span class="line">			xhr.responseType &#x3D; &quot;blob&quot;;</span><br><span class="line">			xhr.addEventListener(&#39;load&#39;, function() &#123;</span><br><span class="line">				cb(xhr.response);</span><br><span class="line">			&#125;);</span><br><span class="line">			xhr.send();</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		var blobToFile &#x3D; function(blob, name) &#123;</span><br><span class="line">			blob.lastModifiedDate &#x3D; new Date();</span><br><span class="line">			blob.name &#x3D; name;</span><br><span class="line">			return blob;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		var getFileObject &#x3D; function(filePathOrUrl, cb) &#123;</span><br><span class="line">			getFileBlob(filePathOrUrl, function(blob) &#123;</span><br><span class="line">				cb(blobToFile(blob, &#39;test.jpg&#39;));</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;回显图片</span><br><span class="line">        uploader.on(&#39;ready&#39;, function() &#123;</span><br><span class="line">        	debugger;</span><br><span class="line">            window.uploader &#x3D; uploader;</span><br><span class="line">            var filePathArg &#x3D; $(&quot;#FILE_PATH&quot;)[0].value.split(&#39;;&#39;);</span><br><span class="line">            var files&#x3D;new Array();</span><br><span class="line">            var i&#x3D;0;</span><br><span class="line">            if(filePathArg.length&gt;0)&#123;</span><br><span class="line">			$.each(filePathArg, function(index,item) &#123;</span><br><span class="line">				&#x2F;&#x2F;如果图片是空值，就直接返回</span><br><span class="line">				if(item&#x3D;&#x3D;&#39;&#39;||item&#x3D;&#x3D;&quot;undefined&quot;||item&#x3D;&#x3D;undefined)&#123;</span><br><span class="line">					return true;</span><br><span class="line">				&#125;</span><br><span class="line">				getFileObject(item, function(fileObject) &#123;</span><br><span class="line">					var wuFile &#x3D; new WebUploader.Lib.File(WebUploader.guid(&#39;rt_&#39;), fileObject);</span><br><span class="line">					var tempfile &#x3D; new WebUploader.File(wuFile);</span><br><span class="line">					tempfile.url&#x3D;item;</span><br><span class="line">					tempfile.setStatus(&#39;complete&#39;);</span><br><span class="line">					uploader.addFiles(tempfile);</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        uploader.on( &#39;uploadSuccess&#39;, function( file,response ) &#123;</span><br><span class="line">        	file.url&#x3D;response.path;</span><br><span class="line">        	$(&quot;#FILE_PATH&quot;)[0].value &#x3D; $(&quot;#FILE_PATH&quot;)[0].value+&quot;;&quot;+response.path;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 当有文件添加进来时执行，负责view的创建</span><br><span class="line">        function addFile( file ) &#123;</span><br><span class="line">            var $li &#x3D; $( &#39;&lt;li id&#x3D;&quot;&#39; + file.id + &#39;&quot;&gt;&#39; +</span><br><span class="line">                    &#39;&lt;p class&#x3D;&quot;title&quot;&gt;&#39; + file.name + &#39;&lt;&#x2F;p&gt;&#39; +</span><br><span class="line">                    &#39;&lt;p class&#x3D;&quot;imgWrap&quot;&gt;&lt;&#x2F;p&gt;&#39;+</span><br><span class="line">                    &#39;&lt;p class&#x3D;&quot;progress&quot;&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&#39; +</span><br><span class="line">                    &#39;&lt;&#x2F;li&gt;&#39; ),</span><br><span class="line"></span><br><span class="line">                $btns &#x3D; $(&#39;&lt;div class&#x3D;&quot;file-panel&quot;&gt;&#39; +</span><br><span class="line">                    &#39;&lt;span class&#x3D;&quot;cancel&quot;&gt;删除&lt;&#x2F;span&gt;&#39; +</span><br><span class="line">                    &#39;&lt;span class&#x3D;&quot;rotateRight&quot;&gt;向右旋转&lt;&#x2F;span&gt;&#39; +</span><br><span class="line">                    &#39;&lt;span class&#x3D;&quot;rotateLeft&quot;&gt;向左旋转&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;).appendTo( $li ),</span><br><span class="line">                $prgress &#x3D; $li.find(&#39;p.progress span&#39;),</span><br><span class="line">                $wrap &#x3D; $li.find( &#39;p.imgWrap&#39; ),</span><br><span class="line">                $info &#x3D; $(&#39;&lt;p class&#x3D;&quot;error&quot;&gt;&lt;&#x2F;p&gt;&#39;),</span><br><span class="line"></span><br><span class="line">                showError &#x3D; function( code ) &#123;</span><br><span class="line">                    switch( code ) &#123;</span><br><span class="line">                        case &#39;exceed_size&#39;:</span><br><span class="line">                            text &#x3D; &#39;文件大小超出&#39;;</span><br><span class="line">                            break;</span><br><span class="line"></span><br><span class="line">                        case &#39;interrupt&#39;:</span><br><span class="line">                            text &#x3D; &#39;上传暂停&#39;;</span><br><span class="line">                            break;</span><br><span class="line"></span><br><span class="line">                        default:</span><br><span class="line">                            text &#x3D; &#39;上传失败，请重试&#39;;</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $info.text( text ).appendTo( $li );</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">            if ( file.getStatus() &#x3D;&#x3D;&#x3D; &#39;invalid&#39; ) &#123;</span><br><span class="line">                showError( file.statusText );</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; @todo lazyload</span><br><span class="line">                $wrap.text( &#39;预览中&#39; );</span><br><span class="line">                uploader.makeThumb( file, function( error, src ) &#123;</span><br><span class="line">                    var img;</span><br><span class="line"></span><br><span class="line">                    if ( error ) &#123;</span><br><span class="line">                        $wrap.text( &#39;不能预览&#39; );</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if( isSupportBase64 ) &#123;</span><br><span class="line">                        img &#x3D; $(&#39;&lt;img src&#x3D;&quot;&#39;+src+&#39;&quot;&gt;&#39;);</span><br><span class="line">                        $wrap.empty().append( img );</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        $.ajax(&#39;..&#x2F;..&#x2F;server&#x2F;preview.php&#39;, &#123;</span><br><span class="line">                            method: &#39;POST&#39;,</span><br><span class="line">                            data: src,</span><br><span class="line">                            dataType:&#39;json&#39;</span><br><span class="line">                        &#125;).done(function( response ) &#123;</span><br><span class="line">                            if (response.result) &#123;</span><br><span class="line">                                img &#x3D; $(&#39;&lt;img src&#x3D;&quot;&#39;+response.result+&#39;&quot;&gt;&#39;);</span><br><span class="line">                                $wrap.empty().append( img );</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                $wrap.text(&quot;预览出错&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, thumbnailWidth, thumbnailHeight );</span><br><span class="line"></span><br><span class="line">                percentages[ file.id ] &#x3D; [ file.size, 0 ];</span><br><span class="line">                file.rotation &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            file.on(&#39;statuschange&#39;, function( cur, prev ) &#123;</span><br><span class="line">                if ( prev &#x3D;&#x3D;&#x3D; &#39;progress&#39; ) &#123;</span><br><span class="line">                    $prgress.hide().width(0);</span><br><span class="line">                &#125; else if ( prev &#x3D;&#x3D;&#x3D; &#39;queued&#39; ) &#123;</span><br><span class="line">                    $li.off( &#39;mouseenter mouseleave&#39; );</span><br><span class="line">                    $btns.remove();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 成功</span><br><span class="line">                if ( cur &#x3D;&#x3D;&#x3D; &#39;error&#39; || cur &#x3D;&#x3D;&#x3D; &#39;invalid&#39; ) &#123;</span><br><span class="line">                    console.log( file.statusText );</span><br><span class="line">                    showError( file.statusText );</span><br><span class="line">                    percentages[ file.id ][ 1 ] &#x3D; 1;</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;interrupt&#39; ) &#123;</span><br><span class="line">                    showError( &#39;interrupt&#39; );</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;queued&#39; ) &#123;</span><br><span class="line">                    percentages[ file.id ][ 1 ] &#x3D; 0;</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;progress&#39; ) &#123;</span><br><span class="line">                    $info.remove();</span><br><span class="line">                    $prgress.css(&#39;display&#39;, &#39;block&#39;);</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;complete&#39; ) &#123;</span><br><span class="line">                    $li.append( &#39;&lt;span class&#x3D;&quot;success&quot;&gt;&lt;&#x2F;span&gt;&#39; );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $li.removeClass( &#39;state-&#39; + prev ).addClass( &#39;state-&#39; + cur );</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $li.on( &#39;mouseenter&#39;, function() &#123;</span><br><span class="line">                $btns.stop().animate(&#123;height: 30&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $li.on( &#39;mouseleave&#39;, function() &#123;</span><br><span class="line">                $btns.stop().animate(&#123;height: 0&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $btns.on( &#39;click&#39;, &#39;span&#39;, function() &#123;</span><br><span class="line">                var index &#x3D; $(this).index(),</span><br><span class="line">                    deg;</span><br><span class="line"></span><br><span class="line">                switch ( index ) &#123;</span><br><span class="line">                    case 0:</span><br><span class="line">                        uploader.removeFile( file );</span><br><span class="line">                        return;</span><br><span class="line"></span><br><span class="line">                    case 1:</span><br><span class="line">                        file.rotation +&#x3D; 90;</span><br><span class="line">                        break;</span><br><span class="line"></span><br><span class="line">                    case 2:</span><br><span class="line">                        file.rotation -&#x3D; 90;</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if ( supportTransition ) &#123;</span><br><span class="line">                    deg &#x3D; &#39;rotate(&#39; + file.rotation + &#39;deg)&#39;;</span><br><span class="line">                    $wrap.css(&#123;</span><br><span class="line">                        &#39;-webkit-transform&#39;: deg,</span><br><span class="line">                        &#39;-mos-transform&#39;: deg,</span><br><span class="line">                        &#39;-o-transform&#39;: deg,</span><br><span class="line">                        &#39;transform&#39;: deg</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $wrap.css( &#39;filter&#39;, &#39;progid:DXImageTransform.Microsoft.BasicImage(rotation&#x3D;&#39;+ (~~((file.rotation&#x2F;90)%4 + 4)%4) +&#39;)&#39;);</span><br><span class="line">                    &#x2F;&#x2F; use jquery animate to rotation</span><br><span class="line">                    &#x2F;&#x2F; $(&#123;</span><br><span class="line">                    &#x2F;&#x2F;     rotation: rotation</span><br><span class="line">                    &#x2F;&#x2F; &#125;).animate(&#123;</span><br><span class="line">                    &#x2F;&#x2F;     rotation: file.rotation</span><br><span class="line">                    &#x2F;&#x2F; &#125;, &#123;</span><br><span class="line">                    &#x2F;&#x2F;     easing: &#39;linear&#39;,</span><br><span class="line">                    &#x2F;&#x2F;     step: function( now ) &#123;</span><br><span class="line">                    &#x2F;&#x2F;         now &#x3D; now * Math.PI &#x2F; 180;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;         var cos &#x3D; Math.cos( now ),</span><br><span class="line">                    &#x2F;&#x2F;             sin &#x3D; Math.sin( now );</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;         $wrap.css( &#39;filter&#39;, &quot;progid:DXImageTransform.Microsoft.Matrix(M11&#x3D;&quot; + cos + &quot;,M12&#x3D;&quot; + (-sin) + &quot;,M21&#x3D;&quot; + sin + &quot;,M22&#x3D;&quot; + cos + &quot;,SizingMethod&#x3D;&#39;auto expand&#39;)&quot;);</span><br><span class="line">                    &#x2F;&#x2F;     &#125;</span><br><span class="line">                    &#x2F;&#x2F; &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $li.appendTo( $queue );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 负责view的销毁</span><br><span class="line">        function removeFile( file ) &#123;</span><br><span class="line">            var $li &#x3D; $(&#39;#&#39;+file.id);</span><br><span class="line"></span><br><span class="line">            delete percentages[ file.id ];</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">            $li.off().find(&#39;.file-panel&#39;).off().end().remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function updateTotalProgress() &#123;</span><br><span class="line">            var loaded &#x3D; 0,</span><br><span class="line">                total &#x3D; 0,</span><br><span class="line">                spans &#x3D; $progress.children(),</span><br><span class="line">                percent;</span><br><span class="line"></span><br><span class="line">            $.each( percentages, function( k, v ) &#123;</span><br><span class="line">                total +&#x3D; v[ 0 ];</span><br><span class="line">                loaded +&#x3D; v[ 0 ] * v[ 1 ];</span><br><span class="line">            &#125; );</span><br><span class="line"></span><br><span class="line">            percent &#x3D; total ? loaded &#x2F; total : 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            spans.eq( 0 ).text( Math.round( percent * 100 ) + &#39;%&#39; );</span><br><span class="line">            spans.eq( 1 ).css( &#39;width&#39;, Math.round( percent * 100 ) + &#39;%&#39; );</span><br><span class="line">            updateStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function updateStatus() &#123;</span><br><span class="line">            var text &#x3D; &#39;&#39;, stats;</span><br><span class="line"></span><br><span class="line">            if ( state &#x3D;&#x3D;&#x3D; &#39;ready&#39; ) &#123;</span><br><span class="line">                text &#x3D; &#39;选中&#39; + fileCount + &#39;张图片，共&#39; +</span><br><span class="line">                        WebUploader.formatSize( fileSize ) + &#39;。&#39;;</span><br><span class="line">            &#125; else if ( state &#x3D;&#x3D;&#x3D; &#39;confirm&#39; ) &#123;</span><br><span class="line">                stats &#x3D; uploader.getStats();</span><br><span class="line">                if ( stats.uploadFailNum ) &#123;</span><br><span class="line">                    text &#x3D; &#39;已成功上传&#39; + stats.successNum+ &#39;张照片至XX相册，&#39;+</span><br><span class="line">                        stats.uploadFailNum + &#39;张照片上传失败，&lt;a class&#x3D;&quot;retry&quot; href&#x3D;&quot;#&quot;&gt;重新上传&lt;&#x2F;a&gt;失败图片或&lt;a class&#x3D;&quot;ignore&quot; href&#x3D;&quot;#&quot;&gt;忽略&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                stats &#x3D; uploader.getStats();</span><br><span class="line">                text &#x3D; &#39;共&#39; + fileCount + &#39;张（&#39; +</span><br><span class="line">                        WebUploader.formatSize( fileSize )  +</span><br><span class="line">                        &#39;），已上传&#39; + stats.successNum + &#39;张&#39;;</span><br><span class="line"></span><br><span class="line">                if ( stats.uploadFailNum ) &#123;</span><br><span class="line">                    text +&#x3D; &#39;，失败&#39; + stats.uploadFailNum + &#39;张&#39;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $info.html( text );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function setState( val ) &#123;</span><br><span class="line">            var file, stats;</span><br><span class="line"></span><br><span class="line">            if ( val &#x3D;&#x3D;&#x3D; state ) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $upload.removeClass( &#39;state-&#39; + state );</span><br><span class="line">            $upload.addClass( &#39;state-&#39; + val );</span><br><span class="line">            state &#x3D; val;</span><br><span class="line"></span><br><span class="line">            switch ( state ) &#123;</span><br><span class="line">                case &#39;pedding&#39;:</span><br><span class="line">                    $placeHolder.removeClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $queue.hide();</span><br><span class="line">                    $statusBar.addClass( &#39;element-invisible&#39; );</span><br><span class="line">                    uploader.refresh();</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;ready&#39;:</span><br><span class="line">                    $placeHolder.addClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $( &#39;#filePicker2&#39; ).removeClass( &#39;element-invisible&#39;);</span><br><span class="line">                    $queue.show();</span><br><span class="line">                    $statusBar.removeClass(&#39;element-invisible&#39;);</span><br><span class="line">                    uploader.refresh();</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;uploading&#39;:</span><br><span class="line">                    $( &#39;#filePicker2&#39; ).addClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $progress.show();</span><br><span class="line">                    $upload.text( &#39;暂停上传&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;paused&#39;:</span><br><span class="line">                    $progress.show();</span><br><span class="line">                    $upload.text( &#39;继续上传&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;confirm&#39;:</span><br><span class="line">                    $progress.hide();</span><br><span class="line">                    $( &#39;#filePicker2&#39; ).removeClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $upload.text( &#39;开始上传&#39; );</span><br><span class="line"></span><br><span class="line">                    stats &#x3D; uploader.getStats();</span><br><span class="line">                    if ( stats.successNum &amp;&amp; !stats.uploadFailNum ) &#123;</span><br><span class="line">                        setState( &#39;finish&#39; );</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;finish&#39;:</span><br><span class="line">                    stats &#x3D; uploader.getStats();</span><br><span class="line">                    if ( stats.successNum ) &#123;</span><br><span class="line">                        &#x2F;&#x2F;alert( &#39;上传成功&#39; );</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        &#x2F;&#x2F; 没有成功的图片，重设</span><br><span class="line">                        state &#x3D; &#39;done&#39;;</span><br><span class="line">                        location.reload();</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            updateStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uploader.onUploadProgress &#x3D; function( file, percentage ) &#123;</span><br><span class="line">            var $li &#x3D; $(&#39;#&#39;+file.id),</span><br><span class="line">                $percent &#x3D; $li.find(&#39;.progress span&#39;);</span><br><span class="line"></span><br><span class="line">            $percent.css( &#39;width&#39;, percentage * 100 + &#39;%&#39; );</span><br><span class="line">            percentages[ file.id ][ 1 ] &#x3D; percentage;</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        uploader.onFileQueued &#x3D; function( file ) &#123;</span><br><span class="line">            fileCount++;</span><br><span class="line">            fileSize +&#x3D; file.size;</span><br><span class="line"></span><br><span class="line">            if ( fileCount &#x3D;&#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">                $placeHolder.addClass( &#39;element-invisible&#39; );</span><br><span class="line">                $statusBar.show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addFile( file );</span><br><span class="line">            setState( &#39;ready&#39; );</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        uploader.onFileDequeued &#x3D; function( file ) &#123;</span><br><span class="line">            fileCount--;</span><br><span class="line">            fileSize -&#x3D; file.size;</span><br><span class="line"></span><br><span class="line">            if ( !fileCount ) &#123;</span><br><span class="line">                setState( &#39;pedding&#39; );</span><br><span class="line">            &#125;</span><br><span class="line">            removeFile(file);</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        uploader.on( &#39;all&#39;, function( type ) &#123;</span><br><span class="line">            var stats;</span><br><span class="line">            switch( type ) &#123;</span><br><span class="line">                case &#39;uploadFinished&#39;:</span><br><span class="line">                    setState( &#39;confirm&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;startUpload&#39;:</span><br><span class="line">                    setState( &#39;uploading&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;stopUpload&#39;:</span><br><span class="line">                    setState( &#39;paused&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        uploader.onError &#x3D; function( code ) &#123;</span><br><span class="line">        	if(code &#x3D;&#x3D; &#39;F_DUPLICATE&#39;)&#123;</span><br><span class="line">        		alert( &#39;图片重复&#39; );</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            	alert( &#39;Eroor: &#39; + code );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        $upload.on(&#39;click&#39;, function() &#123;</span><br><span class="line">            if ( $(this).hasClass( &#39;disabled&#39; ) ) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ( state &#x3D;&#x3D;&#x3D; &#39;ready&#39; ) &#123;</span><br><span class="line">                uploader.upload();</span><br><span class="line">            &#125; else if ( state &#x3D;&#x3D;&#x3D; &#39;paused&#39; ) &#123;</span><br><span class="line">                uploader.upload();</span><br><span class="line">            &#125; else if ( state &#x3D;&#x3D;&#x3D; &#39;uploading&#39; ) &#123;</span><br><span class="line">                uploader.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $info.on( &#39;click&#39;, &#39;.retry&#39;, function() &#123;</span><br><span class="line">            uploader.retry();</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        $info.on( &#39;click&#39;, &#39;.ignore&#39;, function() &#123;</span><br><span class="line">            alert( &#39;todo&#39; );</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        $upload.addClass( &#39;state-&#39; + state );</span><br><span class="line">        updateTotalProgress();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)( jQuery );</span><br></pre></td></tr></table></figure>

<h3 id="图片上传页面"><a href="#图片上传页面" class="headerlink" title="图片上传页面"></a>图片上传页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	String path = request.getContextPath();</span><br><span class="line">    String basePath = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + path + &quot;/&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;overview &amp; stats&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;static/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;static/css/bootstrap-responsive.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/font-awesome.min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/chosen.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/ace.min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/ace-responsive.min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/ace-skins.min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/js/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;plugins/webuploader/webuploader.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;plugins/webuploader/style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">#wrapper &#123;</span><br><span class="line"><span class="css">	<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#uploader .placeholder &#123;</span><br><span class="line"><span class="css">	<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">plugins/webuploader/image.png</span>) center <span class="number">23px</span> no-repeat;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding-top</span>: <span class="number">88px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">min-height</span>: <span class="number">110px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;goodsDetail/$&#123;msg &#125;.do&quot;</span> <span class="attr">name</span>=<span class="string">&quot;goodsForm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;goodsForm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;zhongxin&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table_report&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle&quot;</span>&gt;</span>轮播图:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;FILE_PATH&quot;</span> <span class="attr">id</span>=<span class="string">&quot;FILE_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;pd.FILE_PATH&#125;&quot;</span> /&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">								<span class="comment">&lt;!--头部，相册选择和格式选择--&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;uploader&quot;</span>&gt;</span></span><br><span class="line">										<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;queueList&quot;</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dndArea&quot;</span> <span class="attr">class</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">												<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;filePicker&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">												<span class="tag">&lt;<span class="name">p</span>&gt;</span>或将照片拖到这里，单次最多可选1张<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">										<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">										<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;statusBar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">												<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line">												<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;filePicker2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">												<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;uploadBtn&quot;</span>&gt;</span>开始上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">											<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">										<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-mini btn-primary&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;save();&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-mini btn-danger&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;top.Dialog.close();&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;zhongxin2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/images/jiazai.gif&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;lighter block green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 引入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.jQuery || <span class="built_in">document</span>.write(<span class="string">&quot;&lt;script src=&#x27;static/js/jquery-1.9.1.min.js&#x27;&gt;\x3C/script&gt;&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/ace-elements.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/ace.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/js/chosen.jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;plugins/webuploader/webuploader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/goods/goods_detail_edit.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> tempqueue;</span></span><br><span class="line"><span class="javascript">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">//单选框</span></span></span><br><span class="line"><span class="javascript">			$(<span class="string">&quot;.chzn-select&quot;</span>).chosen();</span></span><br><span class="line"><span class="javascript">			$(<span class="string">&quot;.chzn-select-deselect&quot;</span>).chosen(&#123;<span class="attr">allow_single_deselect</span>:<span class="literal">true</span>&#125;);</span></span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="comment">//保存</span></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//获取所有在图片列表中的URL传给后台</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> files = uploader.getFiles();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> filePath = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">		files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">if</span>(e.getStatus()==<span class="string">&quot;complete&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">				filePath = filePath+<span class="string">&quot;;&quot;</span>+e.url;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#FILE_PATH&quot;</span>)[<span class="number">0</span>].value = filePath;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#goodsForm&quot;</span>).submit();</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#zhongxin&quot;</span>).hide();</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#zhongxin2&quot;</span>).show();</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="comment">//校验编码是否存在</span></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">checkHasCode</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> goodsCode = $(<span class="string">&quot;#GOODS_CODE&quot;</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> checkGoodsCode = $(<span class="string">&quot;#checkGoodsCode&quot;</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span>(goodsCode == checkGoodsCode)<span class="keyword">return</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">		$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">			type: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">			url: <span class="string">&#x27;&lt;%=basePath%&gt;goodsDetail/hasCode.do?tm=&#x27;</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">&#x27;&amp;GOODS_CODE=&#x27;</span> + goodsCode,</span></span><br><span class="line"><span class="javascript">				data : <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				dataType : <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				cache : <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">				success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span> (data.result == <span class="string">&quot;error&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">						alert(<span class="string">&quot;编码重复，请重新输入&quot;</span>);</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#GOODS_CODE&quot;</span>)[<span class="number">0</span>].value = checkGoodsCode;</span></span><br><span class="line">					&#125;;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>java后台上传图片代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 上传图片</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/uploadImg&quot;)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">save</span><span class="params">(<span class="meta">@RequestParam(required=false)</span> MultipartFile file,String goodsCode)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		logBefore(logger, <span class="string">&quot;GoodsDetail上传图片&quot;</span>);</span><br><span class="line">		Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"><span class="comment">//		String  ffile = DateUtil.getDays(), fileName = &quot;&quot;;</span></span><br><span class="line">		PageData pd = <span class="keyword">new</span> PageData();</span><br><span class="line">		String imageUrls = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(Jurisdiction.buttonJurisdiction(menuUrl, <span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != file &amp;&amp; !file.isEmpty()) &#123;</span><br><span class="line">				<span class="comment">//上传图片到FastDFS</span></span><br><span class="line">				MultipartFile[] files = <span class="keyword">new</span> MultipartFile[<span class="number">1</span>];</span><br><span class="line">				files[<span class="number">0</span>] = file;</span><br><span class="line">				imageUrls = fastDFSService.upload(files);</span><br><span class="line"><span class="comment">//				String filePath = PathUtil.getClasspath() + Const.FILEPATHIMG + ffile;		//文件上传路径</span></span><br><span class="line"><span class="comment">//				fileName = FileUpload.fileUp(file, filePath, this.get32UUID());				//执行上传</span></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		map.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line"><span class="comment">//		map.put(&quot;path&quot;, ffile + &quot;/&quot; + fileName);</span></span><br><span class="line">		map.put(<span class="string">&quot;path&quot;</span>, imageUrls);</span><br><span class="line">		<span class="keyword">return</span> AppUtil.returnObject(pd, map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端插件</category>
        <category>Webuploader</category>
      </categories>
      <tags>
        <tag>Webuploader</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>windows curl安装及常规命令使用</title>
    <url>/2019/02/16/windows-curl%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_1.jpg"></p>
<h2 id="curl是什么"><a href="#curl是什么" class="headerlink" title="curl是什么"></a>curl是什么</h2><p>curl是一个利用URL语法在命令行下工作的文件传输工具，它支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。curl还支持SSL认证、HTTP POST、HTTP PUT、FTP上传, HTTP form based upload、proxies、HTTP/2、cookies、用户名+密码认证(Basic, Plain, Digest, CRAM-MD5, NTLM, Negotiate and Kerberos)、file transfer resume、proxy tunneling</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="下载Windows版本的curl"><a href="#下载Windows版本的curl" class="headerlink" title="下载Windows版本的curl"></a>下载Windows版本的curl</h3><ol>
<li>下载Win版curl的地址如下<a href="https://curl.haxx.se/windows/">https://curl.haxx.se/windows/</a></li>
<li>根据你自己的个人系统位数，下载对应的版本，我是X64的因此下载了下图中的红圈标注出来的版本</li>
<li>下载完成后解压，放到你想放置的位置，本次安装放在了<code>D:\Program Files\curl</code>（这里进行了解压文件的重命名，也可以不用重命名）<img src="/2019/02/16/windows-curl%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/screenshot_1.png" class=""></li>
</ol>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><ol>
<li>我的电脑-&gt;右键“属性”-&gt;高级系统设置-&gt;环境变量<br>在**<font color='red'>系统变量</font>**中点击<code>新建</code>按钮，如下图所示<img src="/2019/02/16/windows-curl%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/screenshot_2.png" class=""></li>
<li>弹出<code>新建系统变量</code>界面，在变量名中输入<code>CURL_HOME</code>，在变量值中输入<code>D:\Program Files\curl\bin</code><font color='red'>这个地方需要注意，替换成你自己的curl安装目录，并在最后添加\bin</font>，具体如下图所示<img src="/2019/02/16/windows-curl%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/screenshot_3.png" class=""></li>
<li>修改<code>系统变量</code>中的<code>Path</code>，添加<code>%CURL_HOME%</code>，具体操作见下图<img src="/2019/02/16/windows-curl%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B8%B8%E8%A7%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/screenshot_4.png" class=""></li>
<li>添加完成后，点击确定<h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3></li>
<li>打开<code>CMD</code>窗口，然后输入<code>curl --help</code>，看是否有反应，如果有如下输出，说明正常，如果没有，说明安装失败，根据具体的提示百度确认问题出在哪里<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl --<span class="built_in">help</span></span><br><span class="line">Usage: curl [options...] &lt;url&gt;</span><br><span class="line">     --abstract-unix-socket &lt;path&gt; Connect via abstract Unix domain socket</span><br><span class="line">     --anyauth       Pick any authentication method</span><br><span class="line"> -a, --append        Append to target file when uploading</span><br><span class="line">     --basic         Use HTTP Basic Authentication</span><br><span class="line">     --cacert &lt;file&gt; CA certificate to verify peer against</span><br><span class="line">     --capath &lt;dir&gt;  CA directory to verify peer against</span><br><span class="line"> -E, --cert &lt;certificate[:password]&gt; Client certificate file and password</span><br><span class="line">     --cert-status   Verify the status of the server certificate</span><br><span class="line">     --cert-type &lt;<span class="built_in">type</span>&gt; Certificate file <span class="built_in">type</span> (DER/PEM/ENG)</span><br><span class="line">     --ciphers &lt;list of ciphers&gt; SSL ciphers to use</span><br><span class="line">     --compressed    Request compressed response</span><br><span class="line">     --compressed-ssh Enable SSH compression</span><br><span class="line"> -K, --config &lt;file&gt; Read config from a file</span><br><span class="line">     --connect-timeout &lt;seconds&gt; Maximum time allowed <span class="keyword">for</span> connection</span><br><span class="line">     --connect-to &lt;HOST1:PORT1:HOST2:PORT2&gt; Connect to host</span><br><span class="line"> -C, --continue-at &lt;offset&gt; Resumed transfer offset</span><br><span class="line"> -b, --cookie &lt;data&gt; Send cookies from string/file</span><br><span class="line"> -c, --cookie-jar &lt;filename&gt; Write cookies to &lt;filename&gt; after operation</span><br><span class="line">     --create-dirs   Create necessary <span class="built_in">local</span> directory hierarchy</span><br><span class="line">     --crlf          Convert LF to CRLF <span class="keyword">in</span> upload</span><br><span class="line">     --crlfile &lt;file&gt; Get a CRL list <span class="keyword">in</span> PEM format from the given file</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>详细的使用方法见地址<a href="https://curl.haxx.se/docs/manpage.html">https://curl.haxx.se/docs/manpage.html</a><br>语法：<code>#curl [option] [url]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-a/--append 上传文件时，附加到目标文件  </span><br><span class="line"> -A/--user-agent &lt;string&gt;  设置用户代理发送给服务器  </span><br><span class="line"> - anyauth   可以使用“任何”身份验证方法  </span><br><span class="line"> -b/--cookie &lt;name=string/file&gt; cookie字符串或文件读取位置  </span><br><span class="line"> - basic 使用HTTP基本验证  </span><br><span class="line"> -B/--use-ascii 使用ASCII /文本传输  </span><br><span class="line"> -c/--cookie-jar &lt;file&gt; 操作结束后把cookie写入到这个文件中  </span><br><span class="line"> -C/--continue-at &lt;offset&gt;  断点续转  </span><br><span class="line"> -d/--data &lt;data&gt;   HTTP POST方式传送数据  </span><br><span class="line"> --data-ascii &lt;data&gt;  以ascii的方式post数据  </span><br><span class="line"> --data-binary &lt;data&gt; 以二进制的方式post数据  </span><br><span class="line"> --negotiate     使用HTTP身份验证  </span><br><span class="line"> --digest        使用数字身份验证  </span><br><span class="line"> --disable-eprt  禁止使用EPRT或LPRT  </span><br><span class="line"> --disable-epsv  禁止使用EPSV  </span><br><span class="line"> -D/--dump-header &lt;file&gt; 把header信息写入到该文件中  </span><br><span class="line"> --egd-file &lt;file&gt; 为随机数据(SSL)设置EGD socket路径  </span><br><span class="line"> --tcp-nodelay   使用TCP_NODELAY选项  </span><br><span class="line"> -e/--referer 来源网址  </span><br><span class="line"> -E/--cert &lt;cert[:passwd]&gt; 客户端证书文件和密码 (SSL)  </span><br><span class="line"> --cert-type &lt;<span class="built_in">type</span>&gt; 证书文件类型 (DER/PEM/ENG) (SSL)  </span><br><span class="line"> --key &lt;key&gt;     私钥文件名 (SSL)  </span><br><span class="line"> --key-type &lt;<span class="built_in">type</span>&gt; 私钥文件类型 (DER/PEM/ENG) (SSL)  </span><br><span class="line"> --pass  &lt;pass&gt;  私钥密码 (SSL)  </span><br><span class="line"> --engine &lt;eng&gt;  加密引擎使用 (SSL). <span class="string">&quot;--engine list&quot;</span> <span class="keyword">for</span> list  </span><br><span class="line"> --cacert &lt;file&gt; CA证书 (SSL)  </span><br><span class="line"> --capath &lt;directory&gt; CA目录 (made using c_rehash) to verify peer against (SSL)  </span><br><span class="line"> --ciphers &lt;list&gt;  SSL密码  </span><br><span class="line"> --compressed    要求返回是压缩的形势 (using deflate or gzip)  </span><br><span class="line"> --connect-timeout &lt;seconds&gt; 设置最大请求时间  </span><br><span class="line"> --create-dirs   建立本地目录的目录层次结构  </span><br><span class="line"> --crlf          上传是把LF转变成CRLF  </span><br><span class="line"> -f/--fail          连接失败时不显示http错误  </span><br><span class="line"> --ftp-create-dirs 如果远程目录不存在，创建远程目录  </span><br><span class="line"> --ftp-method [multicwd/nocwd/singlecwd] 控制CWD的使用  </span><br><span class="line"> --ftp-pasv      使用 PASV/EPSV 代替端口  </span><br><span class="line"> --ftp-skip-pasv-ip 使用PASV的时候,忽略该IP地址  </span><br><span class="line"> --ftp-ssl       尝试用 SSL/TLS 来进行ftp数据传输  </span><br><span class="line"> --ftp-ssl-reqd  要求用 SSL/TLS 来进行ftp数据传输  </span><br><span class="line"> -F/--form &lt;name=content&gt; 模拟http表单提交数据  </span><br><span class="line"> -form-string &lt;name=string&gt; 模拟http表单提交数据  </span><br><span class="line"> -g/--globoff 禁用网址序列和范围使用&#123;&#125;和[]  </span><br><span class="line"> -G/--get 以get的方式来发送数据  </span><br><span class="line"> -h/--<span class="built_in">help</span> 帮助  </span><br><span class="line"> -H/--header &lt;line&gt;自定义头信息传递给服务器  </span><br><span class="line"> --ignore-content-length  忽略的HTTP头信息的长度  </span><br><span class="line"> -i/--include 输出时包括protocol头信息  </span><br><span class="line"> -I/--head  只显示文档信息  </span><br><span class="line"> 从文件中读取-j/--junk-session-cookies忽略会话Cookie  </span><br><span class="line"> - 界面&lt;interface&gt;指定网络接口/地址使用  </span><br><span class="line"> - krb4 &lt;级别&gt;启用与指定的安全级别krb4  </span><br><span class="line"> -j/--junk-session-cookies 读取文件进忽略session cookie  </span><br><span class="line"> --interface &lt;interface&gt; 使用指定网络接口/地址  </span><br><span class="line"> --krb4 &lt;level&gt;  使用指定安全级别的krb4  </span><br><span class="line"> -k/--insecure 允许不使用证书到SSL站点  </span><br><span class="line"> -K/--config  指定的配置文件读取  </span><br><span class="line"> -l/--list-only 列出ftp目录下的文件名称  </span><br><span class="line"> --limit-rate &lt;rate&gt; 设置传输速度  </span><br><span class="line"> --local-port&lt;NUM&gt; 强制使用本地端口号  </span><br><span class="line"> -m/--max-time &lt;seconds&gt; 设置最大传输时间  </span><br><span class="line"> --max-redirs &lt;num&gt; 设置最大读取的目录数  </span><br><span class="line"> --max-filesize &lt;bytes&gt; 设置最大下载的文件总量  </span><br><span class="line"> -M/--manual  显示全手动  </span><br><span class="line"> -n/--netrc 从netrc文件中读取用户名和密码  </span><br><span class="line"> --netrc-optional 使用 .netrc 或者 URL来覆盖-n  </span><br><span class="line"> --ntlm          使用 HTTP NTLM 身份验证  </span><br><span class="line"> -N/--no-buffer 禁用缓冲输出  </span><br><span class="line"> -o/--output 把输出写到该文件中  </span><br><span class="line"> -O/--remote-name 把输出写到该文件中，保留远程文件的文件名  </span><br><span class="line"> -p/--proxytunnel   使用HTTP代理  </span><br><span class="line"> --proxy-anyauth 选择任一代理身份验证方法  </span><br><span class="line"> --proxy-basic   在代理上使用基本身份验证  </span><br><span class="line"> --proxy-digest  在代理上使用数字身份验证  </span><br><span class="line"> --proxy-ntlm    在代理上使用ntlm身份验证  </span><br><span class="line"> -P/--ftp-port &lt;address&gt; 使用端口地址，而不是使用PASV  </span><br><span class="line"> -Q/--quote &lt;cmd&gt;文件传输前，发送命令到服务器  </span><br><span class="line"> -r/--range &lt;range&gt;检索来自HTTP/1.1或FTP服务器字节范围  </span><br><span class="line"> --range-file 读取（SSL）的随机文件  </span><br><span class="line"> -R/--remote-time   在本地生成文件时，保留远程文件时间  </span><br><span class="line"> --retry &lt;num&gt;   传输出现问题时，重试的次数  </span><br><span class="line"> --retry-delay &lt;seconds&gt;  传输出现问题时，设置重试间隔时间  </span><br><span class="line"> --retry-max-time &lt;seconds&gt; 传输出现问题时，设置最大重试时间  </span><br><span class="line"> -s/--silent静音模式。不输出任何东西  </span><br><span class="line"> -S/--show-error   显示错误  </span><br><span class="line"> --socks4 &lt;host[:port]&gt; 用socks4代理给定主机和端口  </span><br><span class="line"> --socks5 &lt;host[:port]&gt; 用socks5代理给定主机和端口  </span><br><span class="line"> --stderr &lt;file&gt;  </span><br><span class="line"> -t/--telnet-option &lt;OPT=val&gt; Telnet选项设置  </span><br><span class="line"> --trace &lt;file&gt;  对指定文件进行debug  </span><br><span class="line"> --trace-ascii &lt;file&gt; Like --跟踪但没有hex输出  </span><br><span class="line"> --trace-time    跟踪/详细输出时，添加时间戳  </span><br><span class="line"> -T/--upload-file &lt;file&gt; 上传文件  </span><br><span class="line"> --url &lt;URL&gt;     Spet URL to work with  </span><br><span class="line"> -u/--user &lt;user[:password]&gt;设置服务器的用户和密码  </span><br><span class="line"> -U/--proxy-user &lt;user[:password]&gt;设置代理用户名和密码  </span><br><span class="line"> -v/--verbose  </span><br><span class="line"> -V/--version 显示版本信息  </span><br><span class="line"> -w/--write-out [format]什么输出完成后  </span><br><span class="line"> -x/--proxy &lt;host[:port]&gt;在给定的端口上使用HTTP代理  </span><br><span class="line"> -X/--request &lt;<span class="built_in">command</span>&gt;指定什么命令  </span><br><span class="line"> -y/--speed-time 放弃限速所要的时间。默认为30  </span><br><span class="line"> -Y/--speed-limit 停止传输速度的限制，速度时间<span class="string">&#x27;秒  </span></span><br><span class="line"><span class="string"> -z/--time-cond  传送时间设置  </span></span><br><span class="line"><span class="string"> -0/--http1.0  使用HTTP 1.0  </span></span><br><span class="line"><span class="string"> -1/--tlsv1  使用TLSv1（SSL）  </span></span><br><span class="line"><span class="string"> -2/--sslv2 使用SSLv2的（SSL）  </span></span><br><span class="line"><span class="string"> -3/--sslv3         使用的SSLv3（SSL）  </span></span><br><span class="line"><span class="string"> --3p-quote      like -Q for the source URL for 3rd party transfer  </span></span><br><span class="line"><span class="string"> --3p-url        使用url，进行第三方传送  </span></span><br><span class="line"><span class="string"> --3p-user       使用用户名和密码，进行第三方传送  </span></span><br><span class="line"><span class="string"> -4/--ipv4   使用IP4  </span></span><br><span class="line"><span class="string"> -6/--ipv6   使用IP6  </span></span><br><span class="line"><span class="string"> -#/--progress-bar 用进度条显示当前的传送状态</span></span><br></pre></td></tr></table></figure>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><ol>
<li><p>获取页面的数据<br><code>curl www.baidu.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl www.baidu.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet <span class="built_in">type</span>=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=<span class="comment">#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li><p>获取页面数据的同时，查看HTTP头信息<br><code>curl -i www.baidu.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -i www.baidu.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 2381</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sat, 16 Feb 2019 02:10:54 GMT</span><br><span class="line">Etag: <span class="string">&quot;588604c8-94d&quot;</span></span><br><span class="line">Last-Modified: Mon, 23 Jan 2017 13:27:36 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet <span class="built_in">type</span>=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=<span class="comment">#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li><p>仅获取HTTP头信息<br><code>curl -I www.baidu.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -I www.baidu.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 277</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sat, 16 Feb 2019 02:12:46 GMT</span><br><span class="line">Etag: <span class="string">&quot;575e1f60-115&quot;</span></span><br><span class="line">Last-Modified: Mon, 13 Jun 2016 02:50:08 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br></pre></td></tr></table></figure></li>
<li><p>获取更详细的信息，包解析ip的过程等等<br><code>curl -v www.baidu.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -v www.baidu.com</span><br><span class="line">* Expire <span class="keyword">in</span> 0 ms <span class="keyword">for</span> 6 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 1 ms <span class="keyword">for</span> 1 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 1 ms <span class="keyword">for</span> 1 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 2 ms <span class="keyword">for</span> 1 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 6 ms <span class="keyword">for</span> 1 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 7 ms <span class="keyword">for</span> 1 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 10 ms <span class="keyword">for</span> 1 (transfer 0x23fb58a20a0)</span><br><span class="line">*   Trying 111.13.100.91...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Expire <span class="keyword">in</span> 149983 ms <span class="keyword">for</span> 3 (transfer 0x23fb58a20a0)</span><br><span class="line">* Expire <span class="keyword">in</span> 200 ms <span class="keyword">for</span> 4 (transfer 0x23fb58a20a0)</span><br><span class="line">* Connected to www.baidu.com (111.13.100.91) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: www.baidu.com</span><br><span class="line">&gt; User-Agent: curl/7.64.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 2381</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Date: Sat, 16 Feb 2019 02:14:02 GMT</span><br><span class="line">&lt; Etag: <span class="string">&quot;588604c8-94d&quot;</span></span><br><span class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:27:36 GMT</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Server: bfe/1.0.8.18</span><br><span class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line">&lt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet <span class="built_in">type</span>=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=<span class="comment">#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.co</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li><p>保存访问的网页(文件会下载到你当前命令执行的所在目录)</p>
</li>
</ol>
<ul>
<li><p>使用重定向功能保存<br><code>curl www.baidu.com &gt;&gt; index.html</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl http://www.baidu.com &gt;&gt;index.html</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2381  100  2381    0     0  27367      0 --:--:-- --:--:-- --:--:-- 27367</span><br></pre></td></tr></table></figure></li>
<li><p>使用curl内置option:-o(小写) 保存网页<br><code>curl -o temp.html www.baidu.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -o temp.html www.baidu.com</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2381  100  2381    0     0  27686      0 --:--:-- --:--:-- --:--:-- 27686</span><br></pre></td></tr></table></figure></li>
<li><p>使用curl内置option:-O(大写) 保存网页上的文件<br><code>curl -O http://www.linux.com/hello.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -O http://www.linux.com/hello.sh</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="6">
<li>测试网页返回值<br>测试网站是否正常的常用方法<br><code>curl -o /dev/null -s -w %&#123;http_code&#125; www.linux.com</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt; curl -o /dev/null -s -w %&#123;http_code&#125; www.linux.com</span><br><span class="line">301</span><br></pre></td></tr></table></figure></li>
<li>通过执行代理服务器及端口访问<br><code>curl -x 192.168.100.100:1080 http://www.linux.com</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -x 192.168.100.100:1080 http://www.linux.com</span></span><br></pre></td></tr></table></figure></li>
<li>Cookie<br>很多网站上使用cookie记录session信息，curl可以增加相关参数处理cookie信息</li>
</ol>
<ul>
<li>保存网站上的cookie，内置option: -c(小写)，文件会存储在你命令执行的位置<br><code>curl -c cookie.txt www.baidu.com</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -c cookie.txt www.baidu.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet <span class="built_in">type</span>=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=<span class="comment">#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class=&quot;bg s_btn_wr&quot;&gt;&lt;input type=submit id=su value=百度一下 class=&quot;bg s_btn&quot;&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.bai</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li>保存http的response里面的header信息，内置option:-D<br><code>curl -D cookie.txt www.baidu.com</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -D cookie.txt www.baidu.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet <span class="built_in">type</span>=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=<span class="comment">#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=kw name=wd class=s_ipt value maxleng</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li>使用cookie<br>网站访问有时候会检测你的cookie信息是否合法，因此需要使用上面保存的cookie信息，内置option:-b<br><code>curl -b cookie.txt www.baidu.com</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -b cookie.txt www.baidu.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet <span class="built_in">type</span>=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=<span class="comment">#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class=&quot;bg s_btn_wr&quot;&gt;&lt;input type=submit id=su value=百度一下 class=&quot;bg s_btn&quot;&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="9">
<li><p>模拟浏览器<br>有些网站需要特定的浏览器进行访问，而且还有些需要特定的版本。curl内置option:-A可以让我们指定浏览器去访问网址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -A <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&quot;</span> http://www.linux.com</span><br></pre></td></tr></table></figure></li>
<li><p>伪造referer（盗链）<br>很多服务器会出现检测http访问的rederer从而控制访问。比如：先访问主页，然后再访问主页上的邮箱页面，这里访问邮箱的referer地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的referer地址不是首页地址，断定是盗链<br>curl内置option:-e 可以让我们设定referer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -e &quot;www.linux.com&quot; http://mail.linux.com</span></span><br></pre></td></tr></table></figure></li>
<li><p>下载文件</p>
</li>
</ol>
<ul>
<li><p>利用curl下载文件<br>使用内置option: -o (小写)<br><code>curl -o baidulogo.png https://www.baidu.com/img/superlogo_c4d7df0a003d3db9b65e9ef0fe6da1ec.png</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\zp&gt;curl -o baidulogo.png https://www.baidu.com/img/superlogo_c4d7df0a003d3db9b65e9ef0fe6da1ec.png?<span class="built_in">where</span>=super</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  6958  100  6958    0     0  18654      0 --:--:-- --:--:-- --:--:-- 18654</span><br></pre></td></tr></table></figure></li>
<li><p>使用内置option: -O (大写)，这个会保存服务器上文件的名字作为本地文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://www.baidu.com/img/superlogo_c4d7df0a003d3db9b65e9ef0fe6da1ec.png?<span class="built_in">where</span>=super</span><br></pre></td></tr></table></figure></li>
<li><p>循环下载<br>有时候下载图片可能是前面的部分一样，但是后一部分不一样的情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -O http://www.linux.com/dodo[1-5].JPG</span></span><br></pre></td></tr></table></figure></li>
<li><p>下载重名文件<br>如果两次下载的文件重名，就出现文件覆盖的情况，为了不覆盖文件，可执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -o #1_#2.JPG http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</span></span><br></pre></td></tr></table></figure>

<p>这样在hello/dodo1.JPG的文件下载下来就会变成hello_dodo1.JPG,其他文件依此类推，从而有效的避免了文件被覆盖</p>
</li>
<li><p>分块下载<br>有时候文件比较大，需要分段去下载，使用内置的option:-r</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG</span><br><span class="line">curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG</span><br><span class="line">curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG</span><br><span class="line">cat dodo1_part* &gt; dodo1.JPG/*这个是linux指令，因此需要在Linux环境下*/</span><br></pre></td></tr></table></figure></li>
<li><p>通过FTP下载文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</span></span><br><span class="line"><span class="comment"># curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</span></span><br></pre></td></tr></table></figure></li>
<li><p>显示下载进度条</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O -<span class="comment"># http://www.linux.com/dodo1.JPG</span></span><br></pre></td></tr></table></figure></li>
<li><p>断点续传<br>在Window中，我们可以使用迅雷进行断点续传，curl内置option:-C 同样可以达到相同的效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -C -O http://www.linux.com/dodo1.JPG</span><br></pre></td></tr></table></figure></li>
<li><p>上传文件<br>内置option:-T 实现文件上传，下面是上传一个demo.txt文件到ftp服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -T  demo.txt -u 用户名:用户密码 ftp://www.linux.com/img/</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>Windows</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式生成ID的几种方式</title>
    <url>/2020/02/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%94%9F%E6%88%90ID%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_78.jpg"></p>
<h1 id="为什么要用分布式"><a href="#为什么要用分布式" class="headerlink" title="为什么要用分布式"></a>为什么要用分布式</h1><h2 id="什么是分布式ID"><a href="#什么是分布式ID" class="headerlink" title="什么是分布式ID"></a>什么是分布式ID</h2><p>拿MySQL数据库举个例子：<br>在业务数据量不大的时候，单库单表完全可以支撑现有业务，数据量再大点可以弄MySQL主从同步读写分离来对付。<br>但是随着数据日渐增长，主从也扛不住了，就需要对数据库进行分库分表，但分库分表需要有一个唯一ID来标识一条数据，数据库的自增ID显然是不能满足需求；特别一点的如订单、优惠券也都需要唯一ID作为标识。此时一个能够生成全局唯一ID的系统是非常必要的。那这个全局唯一ID就叫做分布式ID</p>
<h2 id="分布式ID需要满足哪些条件"><a href="#分布式ID需要满足哪些条件" class="headerlink" title="分布式ID需要满足哪些条件"></a>分布式ID需要满足哪些条件</h2><ul>
<li>全局唯一：必须保证ID是全局唯一的</li>
<li>高性能：高可用低延迟，ID生成相应快，否则会成为业务瓶颈</li>
<li>高可用：需要无线接近于100%的可用性</li>
<li>好接入：要秉承拿来即用的原则</li>
<li>趋势递增：最好趋势递增，这个要求就看具体业务场景，不严格要求</li>
</ul>
<h2 id="分布式ID都有哪些生成方式"><a href="#分布式ID都有哪些生成方式" class="headerlink" title="分布式ID都有哪些生成方式"></a>分布式ID都有哪些生成方式</h2><p>下面有9种：</p>
<ul>
<li>UUID</li>
<li>数据库自增ID</li>
<li>数据库多主模式</li>
<li>号段模式</li>
<li>Redis</li>
<li>雪花算法（SnowFlake）</li>
<li>滴滴出品（TinyID）</li>
<li>百度（Uidgenerator）</li>
<li>美团（Leaf）<img src="/2020/02/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%94%9F%E6%88%90ID%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/generate_id.jpg" class=""></li>
</ul>
<h1 id="几种分布式生成ID的优缺点"><a href="#几种分布式生成ID的优缺点" class="headerlink" title="几种分布式生成ID的优缺点"></a>几种分布式生成ID的优缺点</h1><h2 id="基于UUID"><a href="#基于UUID" class="headerlink" title="基于UUID"></a>基于UUID</h2><p>在Java的世界里，想要得到一个具有唯一性的ID，首先想到的就是UUID，UUID是全球唯一的特性。UUID也是可以做分布式ID的，但是不推荐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  String uuid = UUID.randomUUID().toString.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">  System.out.print(uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UUID的生成简单到只有一行代码，但是UUID缺并不适用于实际的业务需求，像作为订单号UUID这样的字符串没有丝毫意义，看不出订单的相关信息；而对于数据库来说作为业务主键ID，不仅太长还是字符串，存储性能差，查询也很好使，所以不推荐作为分布式ID<br><strong>优点</strong></p>
<ul>
<li>生成足够简单，本地生成无网络小号，具有唯一性</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>无序的字符串，不具备趋势自增特性</li>
<li>没有具体的业务含义</li>
<li>长度过长，对数据性能消耗过大，MySQL官方明确建议主键应该尽量越短越好，作为数据库主键UUID的无序性会导致数据位置频繁变动，影响性能  </li>
</ul>
<h2 id="基于数据库自增ID"><a href="#基于数据库自增ID" class="headerlink" title="基于数据库自增ID"></a>基于数据库自增ID</h2><p>基于数据库的<code>auto_increment</code>自增ID完全可以充当分布式ID，具体实现需要一个单独的MySQL实例来完成，建表结构如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="string">&#x27;SEQ_ID&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sequence_id` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="keyword">value</span>` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>当我们需要一个ID的时候，向表中插入一条记录返回主键ID，但是这种方式由一个致命的缺点，访问量激增时MySQL本身就是系统的瓶颈，用它来实现分布式服务风险比较大，不推荐</p>
<p><strong>优点</strong></p>
<ul>
<li>实现简单，ID单调自增，数据类型查询速度快</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>DB单点存在宕机风险，无法抗住高并发场景</li>
</ul>
<h2 id="基于数据库集群模式"><a href="#基于数据库集群模式" class="headerlink" title="基于数据库集群模式"></a>基于数据库集群模式</h2><p>前边说了单点数据库方式不可取，那对上边的方式做一些高可用优化，换成主从模式集群。害怕一些主节点挂点没法用，那就做双主模式集群，也就是两个MySQL实例都能单独生成自增ID。那这样还会有个问题，两个MySQL实例的自增ID都是从1开始，会生成重复的ID怎么办<br><strong>解决方案</strong><br>设置<code>起始值</code>和<code>自增步长</code></p>
<ol>
<li>MySQL_1配置：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@auto</span>_increment_offset <span class="operator">=</span> <span class="number">1</span>;     <span class="comment">-- 起始值</span></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@auto</span>_increment_increment <span class="operator">=</span> <span class="number">2</span>;  <span class="comment">-- 步长</span></span><br></pre></td></tr></table></figure></li>
<li>MySQL_2配置：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@auto</span>_increment_offset <span class="operator">=</span> <span class="number">2</span>;     <span class="comment">-- 起始值</span></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@auto</span>_increment_increment <span class="operator">=</span> <span class="number">2</span>;  <span class="comment">-- 步长</span></span><br></pre></td></tr></table></figure>
水平扩展的数据库集群，有利于解决数据库单点的压力问题，同时为了ID生成特性，将自增步长按照机器数量来设置。<br>增加第三台MySQL实例需要人工修改一、二两台MySQL实例的起始值和步长，把第三台的ID其实生成位置设置为比现有自增ID的位置远一些，但必须在前两台MySQL实例ID还没有增长到第三台实例的其实ID值的时候，否则会出现ID重复，必要时还需要停机修改</li>
</ol>
<p><strong>优点</strong></p>
<ul>
<li>解决DB单点问题</li>
</ul>
<p><strong>缺点</strong><br>不利于后续扩容，而且实际上单个数据库自身压力还是大，已久无法满足高并发场景</p>
<h2 id="基于数据库的号段模式"><a href="#基于数据库的号段模式" class="headerlink" title="基于数据库的号段模式"></a>基于数据库的号段模式</h2><p>号段模式是当下分布式ID生成器的主流实现方式之一，号段可以理解为从数据库批量的获取自增ID，每次从数据库去除一个号段范围，例如(0,1000]代表1000个ID，具体的业务服务将本号段，生成1~1000的自增ID并加载到<font color='red'>内存</font>。表结构如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `id_generator` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `max_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;当前最大id&#x27;</span>,</span><br><span class="line">  `step` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;号段的步长&#x27;</span>,</span><br><span class="line">  `biz_type` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;业务类型&#x27;</span>,</span><br><span class="line">  `version` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>biz_type:代表不同业务类型<br>max_id：当前最大的可用id<br>step:代表号段的长度<br>version:是一个乐观锁，每次都更新version，保证并发数据的正确性<br>|id|biz_type|max_id|step|version|<br>|-|-|-|-|-|<br>|1|101|1000|2000|0|<br>等这批号段ID用完，再次向数据库申请新号段，对max_id字段做一次update操作，update max_id = max_id+step,update 成功后则说明新号段获取成功，新的号段范围是(max_id,max_id+step]</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">update id_generator set max_id = #&#123;max_id+step&#125;, version = version + 1 where version = # &#123;version&#125; and biz_type = XXX</span><br></pre></td></tr></table></figure>
<p>由于多业务端可能同时操作，所以采用版本号version乐观锁方式更新，这种分布式ID生成方式不强依赖与数据库，不会频繁的访问数据库，对数据库的压力小很多</p>
<h2 id="基于Redis模式"><a href="#基于Redis模式" class="headerlink" title="基于Redis模式"></a>基于Redis模式</h2><p>Redis也同样可以实现，原理就是利用Redis的incr命令实现ID的原子性自增</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> seq_id 1     // 初始化自增ID为1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr seq_id      // 增加1，并返回递增后的数值</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>
<p>用Redis实现需要注意一点，要考虑redis的持久化的问题。redis有两种持久化方式分别是RDB和AOF</p>
<ul>
<li>RDB会定时打一个快照进行持久化，加入持续自增但Redis没及时持久化，而这会Redis挂掉了，重启Redis会出现ID重复的情况</li>
<li>AOF会对每条写命令都进行持久化，即使Redis挂掉了也不会出现重复ID的情况，但由于incr命令的特殊性，会导致Redis重启恢复的数据时间过长</li>
</ul>
<h2 id="基于雪花算法（Snowflake）模式"><a href="#基于雪花算法（Snowflake）模式" class="headerlink" title="基于雪花算法（Snowflake）模式"></a>基于雪花算法（Snowflake）模式</h2><h3 id="雪花算法（Snowflake）介绍"><a href="#雪花算法（Snowflake）介绍" class="headerlink" title="雪花算法（Snowflake）介绍"></a>雪花算法（Snowflake）介绍</h3><p>雪花酸防是twitter公司内部分布式项目采用的ID生成算法，开源后广受国内大厂的好评，在该算法影响下各大公司相继开发出各具特色的分布式生成器</p>
<img src="/2020/02/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%94%9F%E6%88%90ID%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/snowflake_id_generate.jpg" class="">
<p><code>Snowflake</code>生成的是Long类型的ID，一个Long类型占8个字节，每个字节占8比特，也就是说一个Long类型占64个比特。<br>Snowflake ID组成结构：正数位（占1比特）+时间戳（占41比特）+机器ID（占5比特）+数据中心（占5比特）+自增值（占12比特），共64比特组成的一个Long类型</p>
<ul>
<li>第一个bit（1bit）：Java中long类的最高位是代表正负，正数是0，附属是1，一般生成ID都是正数，所以默认为0</li>
<li>时间戳部分（41bit）：毫秒级时间，不建议存当前时间戳，而是用（当前时间戳-固定开始时间戳）的差值，可以是产生的ID从更小的值开始；41位的时间可以使用69年，（1L&lt;&lt;41）/(1000L<em>60</em>60<em>24</em>365) = 69年，解析下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2^41&#x2F;(1000*365*24*60*60)&#x3D;69</span><br></pre></td></tr></table></figure></li>
<li>工作机器id(10bit):也被叫做workId，这个可以灵活配置，机房或者机器号组合都可以</li>
<li>序列号部分（12bit），自增值支持统一毫秒内同一个节点可以生成4096个ID<br>根据这个算法的逻辑，只需要将这个算法用Java语言实现出来，封装为一个工具方法，那么各个业务应用可以直接使用该工具方法来获取分布式ID，只需保证每个业务应用有自己的工作机器ID即可，而不需要单独去搭建分布式ID的应用  </li>
</ul>
<h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter的SnowFlake算法,使用SnowFlake算法生成一个整数，然后转化为62进制变成一个短地址URL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * https://github.com/beyondfengyu/SnowFlake</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeShortUrl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始的时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> START_TIMESTAMP = <span class="number">1480166465631L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分占用的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">12</span>;   <span class="comment">//序列号占用的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">5</span>;     <span class="comment">//机器标识占用的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATA_CENTER_BIT = <span class="number">5</span>; <span class="comment">//数据中心占用的位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分的最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_SEQUENCE = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_MACHINE_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_DATA_CENTER_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; DATA_CENTER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分向左的位移</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TIMESTAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> dataCenterId;  <span class="comment">//数据中心</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> machineId;     <span class="comment">//机器标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>; <span class="comment">//序列号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimeStamp = -<span class="number">1L</span>;  <span class="comment">//上一次时间戳</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNextMill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mill = getNewTimeStamp();</span><br><span class="line">        <span class="keyword">while</span> (mill &lt;= lastTimeStamp) &#123;</span><br><span class="line">            mill = getNewTimeStamp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNewTimeStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的数据中心ID和机器标志ID生成指定的序列号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataCenterId 数据中心ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machineId    机器标志ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowFlakeShortUrl</span><span class="params">(<span class="keyword">long</span> dataCenterId, <span class="keyword">long</span> machineId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataCenterId &gt; MAX_DATA_CENTER_NUM || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;DtaCenterId can&#x27;t be greater than MAX_DATA_CENTER_NUM or less than 0！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;MachineId can&#x27;t be greater than MAX_MACHINE_NUM or less than 0！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">        <span class="keyword">this</span>.machineId = machineId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生下一个ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currTimeStamp = getNewTimeStamp();</span><br><span class="line">        <span class="keyword">if</span> (currTimeStamp &lt; lastTimeStamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currTimeStamp == lastTimeStamp) &#123;</span><br><span class="line">            <span class="comment">//相同毫秒内，序列号自增</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">//同一毫秒的序列数已经达到最大</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0L</span>) &#123;</span><br><span class="line">                currTimeStamp = getNextMill();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不同毫秒内，序列号置为0</span></span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastTimeStamp = currTimeStamp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (currTimeStamp - START_TIMESTAMP) &lt;&lt; TIMESTAMP_LEFT <span class="comment">//时间戳部分</span></span><br><span class="line">                | dataCenterId &lt;&lt; DATA_CENTER_LEFT       <span class="comment">//数据中心部分</span></span><br><span class="line">                | machineId &lt;&lt; MACHINE_LEFT             <span class="comment">//机器标识部分</span></span><br><span class="line">                | sequence;                             <span class="comment">//序列号部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowFlakeShortUrl snowFlake = <span class="keyword">new</span> SnowFlakeShortUrl(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">4</span>); i++) &#123;</span><br><span class="line">            <span class="comment">//10进制</span></span><br><span class="line">            System.out.println(snowFlake.nextId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="百度（uid-generator）"><a href="#百度（uid-generator）" class="headerlink" title="百度（uid-generator）"></a>百度（uid-generator）</h2><p><code>uid-generator</code>是一个由百度技术开发，Github地址为<a href="https://github.com/baidu/uid-generator">https://github.com/baidu/uid-generator</a><br><code>uid-generator</code>是基于<code>SnowFlake</code>算法实现的，与原始snowflake算法不同在于，uid-id_generator支持自定义时间戳、工作ID和序列号等各部分的位数，而且<code>uid-generator</code>中采用用户自定义workId的生成策略<br>uid-generator需要与数据库配合使用，需要新增一个WORKER_NODE表，当应用启动时会想数据库中插入一条数据，插入后返回的自增ID就是该机器的workId数据由host和port组成</p>
<p>对于uid-generator ID组成结构<br>workId，占用22个bit，时间占用了28个bit位，序列化占用了13个bit位，需要注意的是，和原始的snowflake不太一样，时间单位是秒，而不是毫秒，workId也不一样，而且同一应用每次重启就会消费一个workId</p>
<h2 id="美团（Leaf）"><a href="#美团（Leaf）" class="headerlink" title="美团（Leaf）"></a>美团（Leaf）</h2><p>Leaf是由美团开发，Github地址<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a><br>Leaf同时支持号段模式和snowflake算法模式，可以切换使用</p>
<ol>
<li>号段模式<br>首先导入源码<a href="https://link.zhihu.com/?target=https://github.com/Meituan-Dianping/Leaf">https://link.zhihu.com/?target=https%3A//github.com/Meituan-Dianping/Leaf</a>，再新建一张表<code>leaf_alloc</code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `leaf_alloc`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `leaf_alloc` (</span><br><span class="line">  `biz_tag` <span class="type">varchar</span>(<span class="number">128</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;业务key&#x27;</span>,</span><br><span class="line">  `max_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;当前已经分配了的最大id&#x27;</span>,</span><br><span class="line">  `step` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;初始步长，也是动态调整的最小步长&#x27;</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">256</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;业务key的描述&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;数据库维护的更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`biz_tag`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>
然后在项目中启动号段模式，配置对应的数据库信息，并关闭snowflake模式<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">leaf.name</span>=<span class="string">com.sankuai.leaf.opensource.test</span></span><br><span class="line"><span class="meta">leaf.segment.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">leaf.jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/leaf_test?useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8</span></span><br><span class="line"><span class="meta">leaf.jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">leaf.jdbc.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="meta">leaf.snowflake.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#leaf.snowflake.zk.address=</span></span><br><span class="line"><span class="comment">#leaf.snowflake.port=</span></span><br></pre></td></tr></table></figure>
启动leaf-server 模块的 LeafServerApplication项目就跑起来了<br>号段模式获取分布式自增ID的测试url ：<a href="http%EF%BC%9A//localhost%EF%BC%9A8080/api/segment/get/leaf-segment-test">http：//localhost：8080/api/segment/get/leaf-segment-test</a><br>监控号段模式：<a href="http://localhost:8080/cache">http://localhost:8080/cache</a></li>
<li>snowflake模式<br>Leaf的snowflake模式依赖于ZooKeeper，不同于原始snowflake算法也主要是在workId的生成上，Leaf中workId是基于ZooKeeper的顺序Id来生成的，每个应用在使用Leaf-snowflake时，启动时都会都在Zookeeper中生成一个顺序Id，相当于一台机器对应一个顺序节点，也就是一个workId。<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">leaf.snowflake.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">leaf.snowflake.zk.address</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">leaf.snowflake.port</span>=<span class="string">2181</span></span><br></pre></td></tr></table></figure>
snowflake模式获取分布式自增ID的测试url:<a href="http://localhost:8080/api/snowflake/get/test">http://localhost:8080/api/snowflake/get/test</a></li>
</ol>
<h2 id="滴滴（Tinyid）"><a href="#滴滴（Tinyid）" class="headerlink" title="滴滴（Tinyid）"></a>滴滴（Tinyid）</h2><p>Tinyid由滴滴开发，Github地址<a href="https://github.com/didi/tinyid">https://github.com/didi/tinyid</a><br>Tinyid是基于号段模式原理实现的与Leaf如出一辙，每个服务获取一个较短(1000,2000],(2000,3000],(3000,4000]</p>
<img src="/2020/02/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%94%9F%E6%88%90ID%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/tinyid_id_generate.jpg" class="">

<p>Tinyid提供http和tinyid-client两种方式接入</p>
<ol>
<li>HTTP 方式接入</li>
</ol>
<ul>
<li>导入源码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/didi/tinyid</span><br></pre></td></tr></table></figure></li>
<li>创建数据表<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tiny_id_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `biz_type` <span class="type">varchar</span>(<span class="number">63</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;业务类型，唯一&#x27;</span>,</span><br><span class="line">  `begin_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;开始id，仅记录初始值，无其他含义。初始化时begin_id和max_id应相同&#x27;</span>,</span><br><span class="line">  `max_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;当前最大id&#x27;</span>,</span><br><span class="line">  `step` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;步长&#x27;</span>,</span><br><span class="line">  `delta` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;每次id增量&#x27;</span>,</span><br><span class="line">  `remainder` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;余数&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-01-01 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-01-01 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `version` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uniq_biz_type` (`biz_type`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT <span class="string">&#x27;id信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tiny_id_token` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增id&#x27;</span>,</span><br><span class="line">  `token` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">  `biz_type` <span class="type">varchar</span>(<span class="number">63</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;此token可访问的业务类型标识&#x27;</span>,</span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-01-01 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-01-01 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT <span class="string">&#x27;token信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tiny_id_info` (`id`, `biz_type`, `begin_id`, `max_id`, `step`, `delta`, `remainder`, `create_time`, `update_time`, `version`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	(<span class="number">1</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100000</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2018-07-21 23:52:58&#x27;</span>, <span class="string">&#x27;2018-07-22 23:19:27&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tiny_id_info` (`id`, `biz_type`, `begin_id`, `max_id`, `step`, `delta`, `remainder`, `create_time`, `update_time`, `version`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	(<span class="number">2</span>, <span class="string">&#x27;test_odd&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100000</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;2018-07-21 23:52:58&#x27;</span>, <span class="string">&#x27;2018-07-23 00:39:24&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tiny_id_token` (`id`, `token`, `biz_type`, `remark`, `create_time`, `update_time`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	(<span class="number">1</span>, <span class="string">&#x27;0f673adf80504e2eaa552f5d791b644c&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2017-12-14 16:36:46&#x27;</span>, <span class="string">&#x27;2017-12-14 16:36:48&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tiny_id_token` (`id`, `token`, `biz_type`, `remark`, `create_time`, `update_time`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	(<span class="number">2</span>, <span class="string">&#x27;0f673adf80504e2eaa552f5d791b644c&#x27;</span>, <span class="string">&#x27;test_odd&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2017-12-14 16:36:46&#x27;</span>, <span class="string">&#x27;2017-12-14 16:36:48&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li>配置数据库<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">datasource.tinyid.names</span>=<span class="string">primary</span></span><br><span class="line"><span class="meta">datasource.tinyid.primary.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">datasource.tinyid.primary.url</span>=<span class="string">jdbc:mysql://ip:port/databaseName?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">datasource.tinyid.primary.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">datasource.tinyid.primary.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li>
<li>启动tinyid-server后测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取分布式自增ID: http:&#x2F;&#x2F;localhost:9999&#x2F;tinyid&#x2F;id&#x2F;nextIdSimple?bizType&#x3D;test&amp;token&#x3D;0f673adf80504e2eaa552f5d791b644c&#39;</span><br><span class="line">返回结果: 3</span><br><span class="line"></span><br><span class="line">批量获取分布式自增ID:</span><br><span class="line">http:&#x2F;&#x2F;localhost:9999&#x2F;tinyid&#x2F;id&#x2F;nextIdSimple?bizType&#x3D;test&amp;token&#x3D;0f673adf80504e2eaa552f5d791b644c&amp;batchSize&#x3D;10&#39;</span><br><span class="line">返回结果:  4,5,6,7,8,9,10,11,12,13</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>Java客户端方式接入</li>
</ol>
<ul>
<li>重复HTTP中的2和3步骤</li>
<li>引入依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaoju.uemc.tinyid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tinyid-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;tinyid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tinyid.server &#x3D;localhost:9999</span><br><span class="line">tinyid.token &#x3D;0f673adf80504e2eaa552f5d791b644c</span><br></pre></td></tr></table></figure>
test 、tinyid.token是在数据库表中预先插入的数据，test 是具体业务类型，tinyid.token表示可访问的业务类型<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取单个分布式自增ID</span></span><br><span class="line">Long id =  TinyId . nextId( <span class="string">&quot; test &quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需批量分布式自增ID</span></span><br><span class="line">List&lt; Long &gt; ids =  TinyId . nextId( <span class="string">&quot; test &quot;</span> , <span class="number">10</span> );</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>第12章 安全——Spring Security</title>
    <url>/2019/08/28/%E7%AC%AC12%E7%AB%A0-%E5%AE%89%E5%85%A8%E2%80%94%E2%80%94Spring-Security/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_62.jpg"></p>
<h1 id="安全——Spring-Security"><a href="#安全——Spring-Security" class="headerlink" title="安全——Spring Security"></a>安全——Spring Security</h1><p>为了保证系统的安全性，Spring提供了安全框架Spring Security，他是一种能够为基于Spring生态圈，提供安全访问控制解决方案的框架。它提供了一组可以在Spring应用上下文中配置的机制，充分的利用了Spring的强大特性，微应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。<br>为了使用Spring Security，需要引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Security--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样工程就能够把Spring Security的依赖包引入进来</p>
<h2 id="概述和简单安全认证"><a href="#概述和简单安全认证" class="headerlink" title="概述和简单安全认证"></a>概述和简单安全认证</h2><p>在Java项目中一般使用Servlet过滤器（Filter）队请求进行拦截，然后在Filter中通过自己的验证逻辑来决定是否放行请求。同样Spring Security中也是基于这个原理，在进入到DispatcherServlet钱就可以对Spring MVC的请求进行拦截，然后通过一定的验证，从而决定是否放行请求系统。<br>为了对请求进行拦截，Spring Security提供了过滤器DelegatingFilterProxy类给予开发者配置。传统Web工程中，可以使用web.xml进行配置，在Spring Boot中推荐使用注解。在这里只需要引入上面的pom就可以自动启动Spring Secutiry<br>启动项目你会发现在日志的打印内容会包含如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-08-31 11:39:06.517  INFO 13924 --- [  restartedMain] .s.s.UserDetailsServiceAutoConfiguration :</span><br><span class="line">Using generated security password: 7f859ab3-d0e6-4676-9b93-253e7865102c</span><br></pre></td></tr></table></figure>
<p>在文本框中输入用户名（User）为user，密码为日志打印出来的随机密码，然后点击登录（Login）按钮，就可以跳转到请求路径</p>
<img src="/2019/08/28/%E7%AC%AC12%E7%AB%A0-%E5%AE%89%E5%85%A8%E2%80%94%E2%80%94Spring-Security/screenshot_1.png" class="">
<p>但是上面的情况遇到了很多问题：</p>
<ul>
<li>每次启动都会造成密码不同，客户需要输入不同的密码，不方便</li>
<li>用户只能使用user，无法多样化，无法构建不同的用户的不同权限</li>
<li>不能自定义验证的方法，毕竟有些企业拥有自己的验证方式和策略</li>
<li>登录页面不能自定义，不美观</li>
<li>不能自定义那些请求需要安全验证，那些请求不需要安全验证<br>下面一步一步的揭开面纱，首先Spring Boot的自动配置机制，允许开发者很快的修改用户名和密码。例如，我们在application.properties文件中加入代码清单所示配置。</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义用户名和密码</span></span><br><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">ceshimima</span></span><br></pre></td></tr></table></figure>
<p>有了安全配置的属性，即使不加入@EnableWebSecurity，SpringBoot也会根据配置的项自动启动安全机制。只是用户名和密码会修改成上面配置的，而不是生成的随机密码，除了上面的配置外，SpringBoot还支持其他的配置，如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Spring Security过滤器排序</span></span><br><span class="line"><span class="meta">spring.security.filter.order</span>=<span class="string">-100</span></span><br><span class="line"><span class="comment"># 安全过滤器责任链拦截的分发类型</span></span><br><span class="line"><span class="meta">spring.security.filter.dispatcher-types</span>=<span class="string">async,error,request</span></span><br><span class="line"><span class="comment"># 用户角色</span></span><br><span class="line"><span class="meta">spring.security.user.roles</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Oauth提供者详细配置信息</span></span><br><span class="line"><span class="meta">spring.security.oauth2.client.provider.*</span>=<span class="string">#</span></span><br><span class="line"><span class="comment">#Oauth客户端登记信息</span></span><br><span class="line"><span class="meta">spring.security.oauth2.client.registration.*</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>
<p>以上是Spring Boot关于Spring Security可以配置的选项。在实际工作中，只需要配置少量的内容即可。</p>
<h2 id="使用WebSecurityConfigurerAdapter自定义"><a href="#使用WebSecurityConfigurerAdapter自定义" class="headerlink" title="使用WebSecurityConfigurerAdapter自定义"></a>使用WebSecurityConfigurerAdapter自定义</h2><p>开发者可以通过集成WebSecurityConfigurer得到默认的安全功能。也可以通过覆盖它提供的方法来自定义自己的安全拦截方案。下面是WebSecurityConfigurerAdapter中默认的3个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用来配置用户签名服务，主要是user-details机制，你可以给予用户赋予角色</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> auth 签名管理器构造器，用于构建用户具体权限控制</span></span><br><span class="line"><span class="comment">* /</span></span><br><span class="line"><span class="comment">protected void configure(AuthenticationManagerBuilder auth);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用来配置Filter链</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> web Spring Web Security对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用来配置拦截保护的请求，比如什么请求放行，什么请求需要验证</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> http http 安全请求对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>WebSecurityConfigurerAdapter提供空实现，也没有任何配置。而对于AuthenticationManagerBuilder参数的方法，则是定义用户（user），密码（password）和角色（role），在默认的情况下Spring不互为你创建任何的用户和密码，也就是有登录页面二没有可登录的用户。对于HtppSecurity参数的方法，则是指定用户和角色与对应URL的访问权限，也就是开发者可以通过覆盖这个方法来指定用户或者角色的访问权限。在WebSecurityConfigurerAdapter提供的验证方式下满足通过用户验证或者HTTP基本验证的任何请求，Spring Security都会放行</p>
<h2 id="自定义用户服务信息"><a href="#自定义用户服务信息" class="headerlink" title="自定义用户服务信息"></a>自定义用户服务信息</h2><p>正如之前所论述的，在WebSecurityConfigurerAdapter中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span></span>;</span><br></pre></td></tr></table></figure>
<p>是一个用户配置用户信息的方法，在Spring Security中默认是没有任何用户配置的。而在Spring Boot中，如果没有用户的配置，他将会自动生成一个名为user、密码通过随机生成的用户，密码则可以在日志中观察得到。但是这样就存在各类的弊端，这里先来讨论如何进行自定义用户签名服务。这里主要包含使用内存签名服务、数据库签名服务和自定义签名服务。</p>
<h3 id="使用内存签名服务"><a href="#使用内存签名服务" class="headerlink" title="使用内存签名服务"></a>使用内存签名服务</h3><p>如标题克制，是将用户的信息存放在内存中。相对而言，他比较简单，适合测试的快速环境搭建，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.interceptor.ApplicationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.ChannelTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.Topic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.xyd.mc&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EntityScan(basePackages = &quot;com.xyd.mc.*.*.pojo&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">    basePackages = &quot;com.xyd.mc.*&quot;,</span></span><br><span class="line"><span class="meta">    sqlSessionTemplateRef = &quot;sqlSessionTemplate&quot;,</span></span><br><span class="line"><span class="meta">    annotationClass = Repository.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McApplication</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************其他代码********************/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//密码编译器</span></span><br><span class="line">        PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">//使用内存存储</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                <span class="comment">//设置密码编译器</span></span><br><span class="line">        .passwordEncoder(passwordEncoder)</span><br><span class="line">                <span class="comment">//注册用户admin，密码为abc，并赋予USER和ADMIN的角色权限</span></span><br><span class="line">        .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                <span class="comment">//通过passwordEncoder.encode(&quot;abc&quot;)得到加密后的密码</span></span><br><span class="line">        .password(passwordEncoder.encode(<span class="string">&quot;abc&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                <span class="comment">//连接方法and</span></span><br><span class="line">        .and()</span><br><span class="line">                <span class="comment">//注册用户myuser，密码为123456，并赋予USER的角色权限</span></span><br><span class="line">        .withUser(<span class="string">&quot;myuser&quot;</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Spring5的Security中都要求使用密码编码器，否则会发生异常，所以代码中首先创建一个BCryptPasswordEncoder实例，这个类实现了PasswordEncoder接口，它采用的是单项不可逆的密码加密方式，这里的AuthenticationManagerBuilder是关注的焦点，其中inMeneoryAuthentication方法将返回内存保存用户信息的管理配置前，这样启用内存缓存的机制保护用户信息。首先通过passwordEncoder方法，设置了密码编码器，这里的withUser方法是注册用户名称，返回用户详细构造器（UserDetailsBuilder）对象，这样就能够去配置用户的信息了；password方法是设置密码，采用的BCrypt加密方式加密后的密码字符串，于是用户登录就需要这个密码；roles方法赋予角色类型，将来就可以通过这个角色名称赋权限。知识这个role方法还有内涵，他实际是另外一个方法的简写，这个方法是authorities，使用它可以注册角色名称，而代码中roles方法给的角色名称实际上Spring Security都会加入前缀“ROLE_”；and方法则是一个连接方法，也就是开启另外一个用户的注册。<br>上面的代码使用了and方法作为连接。有时候这样显得比较冗余，于是我们可以修改代码清单中的configure方法，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//密码编译器</span></span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用内存存储</span></span><br><span class="line">    InMemoryUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; userConfig = auth.inMemoryAuthentication()</span><br><span class="line">            <span class="comment">//设置密码编码器</span></span><br><span class="line">            .passwordEncoder(passwordEncoder);</span><br><span class="line">    <span class="comment">//注册用户admin，并赋予abc，并赋予USER和ADMIN的角色权限</span></span><br><span class="line">    userConfig.withUser(<span class="string">&quot;admin&quot;</span>).password(passwordEncoder.encode(<span class="string">&quot;abc&quot;</span>)).authorities(<span class="string">&quot;ROLE_USER&quot;</span>,<span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册用户myuser，面膜为123456，并赋予USER的角色权限</span></span><br><span class="line">    userConfig.withUser(<span class="string">&quot;myuser&quot;</span>).password(passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>)).authorities(<span class="string">&quot;ROLE_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里和上面实现的功能相同，只是这里将role方法修改为了authenorities方法，所以多加入了前缀“ROLE_”。但是无论如何，使用内存缓存用户信息方式不是主要的方式，因为空间毕竟有限，而且会占用JVM内存。因为用户详情构造器（UserDetailBuilder）后面还会经常用到，所以给出下面的表来介绍其他放的使用</p>
<table>
<thead>
<tr>
<th align="left">项目类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">accountExpired(boolean)</td>
<td align="left">设置账号是否过期</td>
</tr>
<tr>
<td align="left">accountLocked(boolean)</td>
<td align="left">是否锁定账号</td>
</tr>
<tr>
<td align="left">credentialsExpired(boolean)</td>
<td align="left">定义凭据是否过期</td>
</tr>
<tr>
<td align="left">diabled(boolean)</td>
<td align="left">是否禁用用户</td>
</tr>
<tr>
<td align="left">username(String)</td>
<td align="left">定义用户名</td>
</tr>
<tr>
<td align="left">authorities(GrantedAuthority…)</td>
<td align="left">赋予一个或者多个权限</td>
</tr>
<tr>
<td align="left">authorities(List&lt;? extends GrantedAuthority&gt;)</td>
<td align="left">使用列表赋予权限</td>
</tr>
<tr>
<td align="left">password(String)</td>
<td align="left">定义密码</td>
</tr>
<tr>
<td align="left">roles(String…)</td>
<td align="left">赋予角色，会自动加入前缀ROLE_</td>
</tr>
</tbody></table>
<h3 id="使用数据库定义用户认证服务"><a href="#使用数据库定义用户认证服务" class="headerlink" title="使用数据库定义用户认证服务"></a>使用数据库定义用户认证服务</h3><p>大部分情况下，用户的信息会存放在数据库，为此Spring Security提供了对数据库的查询方法来满足开发者的需求。JdbcUserDetailsManagerConfigurer是一个Spring Securty对于数据库配置的支持，并且他也提供默认的SQL。知识大部分的情况下，不会采用它默认提供的SQL，基于使用的原则，下面先准备表和数据</p>
<ol>
<li>创建用户权限和用户权限关系表<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_role (</span><br><span class="line">	id <span class="type">INT</span> (<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment,</span><br><span class="line">	role_name <span class="type">VARCHAR</span> (<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	note <span class="type">VARCHAR</span> (<span class="number">256</span>),</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">	id <span class="type">INT</span> (<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment,</span><br><span class="line">	user_name <span class="type">VARCHAR</span> (<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	pwd <span class="type">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	available <span class="type">INT</span> (<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">CHECK</span> (available <span class="keyword">IN</span>(<span class="number">0</span>, <span class="number">1</span>)),</span><br><span class="line">	note <span class="type">VARCHAR</span> (<span class="number">256</span>),</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">	<span class="keyword">UNIQUE</span> (user_name)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 用户角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user_role (</span><br><span class="line">	id <span class="type">INT</span> (<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment,</span><br><span class="line">	role_id <span class="type">INT</span> (<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	user_id <span class="type">INT</span> (<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">	<span class="keyword">UNIQUE</span> (role_id, user_id)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_user_role <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_Reference_1 <span class="keyword">FOREIGN</span> KEY (role_id) <span class="keyword">REFERENCES</span> t_role (id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE RESTRICT;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_user_role <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_Reference_2 <span class="keyword">FOREIGN</span> KEY (user_id) <span class="keyword">REFERENCES</span> t_user (id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE RESTRICT;</span><br></pre></td></tr></table></figure></li>
<li>Spring Security提供的数据库权限进行验证<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//使用用户名称查询密码</span></span><br><span class="line">    String pwdQuery = <span class="string">&quot;select user_name,pwd,available from t_user where user_name = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//使用用户名称查询用户角色信息</span></span><br><span class="line">    String roleUqery = <span class="string">&quot;select u.user_name,r.role_name from t_user u,t_user_role ur,t_role r where u.id = ur.user_id and r.id = ur.role_id and u.user_name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码编码器</span></span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line"></span><br><span class="line">    auth.jdbcAuthentication()</span><br><span class="line">            <span class="comment">//密码编码器</span></span><br><span class="line">    .passwordEncoder(passwordEncoder)</span><br><span class="line">            <span class="comment">//数据源</span></span><br><span class="line">    .dataSource(applicationContext.getBean(DataSource.class))</span><br><span class="line">            <span class="comment">//查询用户，自动判断密码是否一致</span></span><br><span class="line">    .usersByUsernameQuery(pwdQuery)</span><br><span class="line">            <span class="comment">//赋予权限</span></span><br><span class="line">    .authoritiesByUsernameQuery(roleUqery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
usersByUserNameQuery方法，<font color='red'>通过pwdQuery所定义的SQL返回3列，分别是用户名、密码、布尔值。这样就可以对用户名和密码进行验证了，其中布尔值是判断用户是否有效，这里返回的是available列，它存储的数据已经被约束为1和0，如果为1则表示用户是有效的，否则用户是无效的。而authoritiesByUsernameQuery方法会用roleQuery定义的SQL通过用户名称去查询角色名称，这样Spring Security就会根据查询的结果赋予权限。值得注意的是，如果这条SQL返回多条，那么就会给这个用户赋予多个角色</font><br>但是上面的代码存在一个弊端，虽然通过BCrypt加密的密文很难破译，但是仍旧不能比曼用户使用类似a123456等简单的密码，如果被人连接了这些简单的密码，进行匹配，那么一些用户的密码就可能被别人破译，为了克服这些问题，在实际的企业生产中还可以通过自己的阴钥对密码进行加密处理，而阴钥存在企业服务器上，这样即使密文被别人截取，别人也无法得到阴钥破解密文，这样就能够大大的提高网站的安全性。对此Spring Security也进行了支持，只需要使用密码编码器（Pbkdf2PasswordEncoder类）对象即可。这里我们在application.properties中加入一个属性<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码加密阴钥</span></span><br><span class="line"><span class="meta">system.user.password.secret</span>=<span class="string">uvwxyz</span></span><br></pre></td></tr></table></figure>
这是一个阴钥，只有拿到这个阴钥才能通过加密算法对密码进行匹配，这样破解的难度就大大增加了，就能够更加安全的保护密码信息，然后对上面的代码进行改造，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入配置的阴钥</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;system.user.password.secret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//使用用户名称查询密码</span></span><br><span class="line">    String pwdQuery = <span class="string">&quot;select user_name,pwd,available from t_user where user_name = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//使用用户名称查询用户角色信息</span></span><br><span class="line">    String roleUqery = <span class="string">&quot;select u.user_name,r.role_name from t_user u,t_user_role ur,t_role r where u.id = ur.user_id and r.id = ur.role_id and u.user_name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码编码器</span></span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> Pbkdf2PasswordEncoder(<span class="keyword">this</span>.secret);</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
在这段代码中，使用了Pbkdf2PasswordEncoder创建密码编码器（PasswordEncoder）实际上，Spring Security还存在其他密码加载器，用户可以根据自己的需求去创建不同的密码编码器</li>
</ol>
<h3 id="重点-使用自定义用户认证服务"><a href="#重点-使用自定义用户认证服务" class="headerlink" title="(重点)使用自定义用户认证服务"></a><font color='red'>(重点)</font>使用自定义用户认证服务</h3><p>目前大量的企业使用NoSQL存储用户数据，如Redis，这样就能够大大的加速用户的验证速度，因此有时候需要用户进行自定义验证。</p>
<ol>
<li>实现UserDetailsService接口定义用户服务类<br>首先设置用户权限的当时，对于Spring Security提供了一个UserDetailsService接口，通过它可以获取用户信息，而这个接口只有一个loadUserByUsername方法需要实现，这个方法定义返回UserDetails接口对象，于是很快就可以通过类似于如下代码实现这个接口，进而获取用户信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xyd.mc.demo.database.service.impl;</span><br><span class="line"></span><br><span class="line">import com.xyd.mc.demo.database.pojo.DatabaseRole;</span><br><span class="line">import com.xyd.mc.demo.database.pojo.DatabaseUser;</span><br><span class="line">import com.xyd.mc.demo.database.service.UserRoleService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.GrantedAuthority;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @project: mc</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: zp</span><br><span class="line"> * @create: 2019-08-31 15:59</span><br><span class="line"> **&#x2F;</span><br><span class="line"> @Service</span><br><span class="line">public class UserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserRoleService userRoleService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取数据库用户信息</span><br><span class="line">        DatabaseUser dbUser &#x3D; userRoleService.getUserByName(userName);</span><br><span class="line">        &#x2F;&#x2F;获取数据库角色列表</span><br><span class="line">        List&lt;DatabaseRole&gt; roleList &#x3D; userRoleService.findRolesByUserName(userName);</span><br><span class="line">        &#x2F;&#x2F;将信息转换为UserDetails对象</span><br><span class="line">        return changeToUser(dbUser,roleList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private UserDetails changeToUser(DatabaseUser dbUser,List&lt;DatabaseRole&gt; roleList)&#123;</span><br><span class="line">        &#x2F;&#x2F;权限列表</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorityList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;赋予查询到的角色</span><br><span class="line">        for(DatabaseRole role : roleList)&#123;</span><br><span class="line">            GrantedAuthority authority &#x3D; new SimpleGrantedAuthority(role.getRoleName());</span><br><span class="line">            authorityList.add(authority);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建UserDetails对象，设置用户名、密码和权限</span><br><span class="line">        UserDetails userDetails &#x3D; new User(dbUser.getUserName(), dbUser.getPwd(),authorityList);</span><br><span class="line">        return userDetails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
把这个类标注为@Service，这样Spring就会自动扫描它为Bean，然后通过自动注入了UserRoleService接口。接着覆盖接口的loadUserByUsername方法，这个方法先通过UserRoleService接口查询到用户和对应的角色信息，然后通过changeToUser方法将它转换成一个UserDetails接口帝乡，在这个changeToUser方法中，先是构建一个权限列表，然后通过User的构建方法将用户名称和密码传递，这样用户详情就拥有了这些信息<br>然后我们需要给认证服务注册这个UserDetailsServiceImpl，因此需要改造Spring Boot 的启动文件，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入配置的阴钥</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;system.user.password.secret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码编码器</span></span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> Pbkdf2PasswordEncoder(<span class="keyword">this</span>.secret);</span><br><span class="line">    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里因为UserDetailsServiceImpl被标注了@Service，所以会被Spring的上下文扫描装备为Bean。configure方法首先生命了密码编码器，这样就能够对密码进行加密比较，然后通过userDetailsService方法注册用户服务实现类，同时绑定密码的编译器，这样就能够使用加密过后的密码了。</li>
</ol>
<h2 id="限制请求"><a href="#限制请求" class="headerlink" title="限制请求"></a>限制请求</h2><p>上面只是验证了用户，并且还给与用户赋予了不同的角色，但对于不同角色而言，其访问的权限是不一样的，因此还需要对不同的橘色赋予不同的权限。在上述配置用户中，集成了抽象类WebSecurityConfigurerAdapter，并覆盖了configure(AuthenticationManagerBuilder AuthenticationManagerBuilder)方法，除此之外，这个抽象类还提供了另外一个方法，那就是configure(HttpSecurity)，通过它便可以实现对不同角色赋予不同权限的功能<br>因为WebSecurityConfigurerAdapter已经实现configure(HttpSecurity)的方法，所以先从它原有的方法进行探讨<br><font color='red'>下面是源码：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).&quot;</span>);</span><br><span class="line">        ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)</span><br><span class="line">        <span class="comment">//只需要通过验证就可以访问所有的请求</span></span><br><span class="line">        <span class="comment">//authorizeRequests方法限定只对签名成功的用户请求</span></span><br><span class="line">        <span class="comment">//anyRequest方法限定所有请求</span></span><br><span class="line">        <span class="comment">//authenticated方法对所有的签名成功的用户允许方法</span></span><br><span class="line">        http.authorizeRequests().anyRequest()).authenticated()</span><br><span class="line">        <span class="comment">//and方法是连接词，formLogin代表使用Spring Security默认的登录界面</span></span><br><span class="line">        .and()).formLogin()</span><br><span class="line">        <span class="comment">//httpBasic方法说明启用HTTP基础认证</span></span><br><span class="line">        .and()).httpBasic();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>从源码可以看出，只需要通过用户认证便可以访问所有的请求地址。丫还通过formLogin方法配置使用SpringSecurity默认登录页面和httpBasic方法启用浏览器的HTTP基础认证方式。所以在默认的情况下，只要登录了用户，一些的请求就会畅通无阻，单着往往不是我们真正需要的，毕竟不同的用户有着不同的角色，有时候我们需要根据角色赋予权限，因此在很多的时候需要覆盖掉这个方法，让不同的角色有着不同的权限。</p>
<h3 id="配置请求路径访问权限"><a href="#配置请求路径访问权限" class="headerlink" title="配置请求路径访问权限"></a>配置请求路径访问权限</h3><p>对于SpringSecurity，它允许使用Ant放个或者正则式的路径限定安全请求，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//限定签名后的权限</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">//限定&quot;/user/welcome&quot;请求赋予角色ROLE_USER或者ROLE_ADMIN</span></span><br><span class="line">    .antMatchers(<span class="string">&quot;/user/welcome&quot;</span>,<span class="string">&quot;/user/detais&quot;</span>).hasAnyRole(<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">            <span class="comment">//限定“/admin”下所有请求权限赋予角色ROLE_ADMIN</span></span><br><span class="line">    .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>)</span><br><span class="line">            <span class="comment">//其他路径允许签名后访问</span></span><br><span class="line">    .anyRequest().permitAll()</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对于没有配置权限的其他请求允许匿名访问</span></span><br><span class="line">    .and().anonymous()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Spring Security默认的登录页面</span></span><br><span class="line">    .and().formLogin()</span><br><span class="line">            <span class="comment">//启用http基础验证</span></span><br><span class="line">    .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于权限的方法还有很多，如下表</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">access(String)</td>
<td align="left">参数为SpEL，如果返回true则允许访问</td>
</tr>
<tr>
<td align="left">anonymous()</td>
<td align="left">允许匿名访问</td>
</tr>
<tr>
<td align="left">authorizeRequests()</td>
<td align="left">限定通过签名的请求</td>
</tr>
<tr>
<td align="left">anyRequest()</td>
<td align="left">限定任意的请求</td>
</tr>
<tr>
<td align="left">hasAnyRole(String…)</td>
<td align="left">将访问权限赋予多个角色，角色会自动加入前缀ROLE_</td>
</tr>
<tr>
<td align="left">hasAnyRole()</td>
<td align="left">将访问权限赋予一个角色，默认加入前缀ROLE</td>
</tr>
<tr>
<td align="left">permitAll()</td>
<td align="left">无条件允许访问</td>
</tr>
<tr>
<td align="left">httpBasic()</td>
<td align="left">启用浏览器的HTTP基础验证</td>
</tr>
<tr>
<td align="left">formLogin()</td>
<td align="left">启用Spring Security默认的登录页面</td>
</tr>
<tr>
<td align="left">not()</td>
<td align="left">对其他方法的访问采取求反</td>
</tr>
<tr>
<td align="left">fullyAuthenticated()</td>
<td align="left">如果是完整验证（并非Remember-me）则允许访问</td>
</tr>
<tr>
<td align="left">denyAll()</td>
<td align="left">无条件不允许任何访问</td>
</tr>
<tr>
<td align="left">hasIpAddress(String)</td>
<td align="left">如果是给定的IP地址则允许访问</td>
</tr>
<tr>
<td align="left">rememberme()</td>
<td align="left">用户通过Remember-me功能验证就允许访问</td>
</tr>
<tr>
<td align="left">hasAuthority(String)</td>
<td align="left">如果是给定的橘色就允许访问不加入前缀ROLE_</td>
</tr>
<tr>
<td align="left">hasAnyAutoirity(String…)</td>
<td align="left">如果是给定的角色中的任意一个就允许访问（不加入前缀ROLE_）</td>
</tr>
</tbody></table>
<h3 id="使用Spring表达式配置访问权限"><a href="#使用Spring表达式配置访问权限" class="headerlink" title="使用Spring表达式配置访问权限"></a>使用Spring表达式配置访问权限</h3><p>有时候需要更加强大的验证功能，而上述功能只能是使用方法进行配置，为了更加灵活，我们还可以使用Spring EL进行配置。这样就需要使用到上表中access方法，他的参数是一个Spring的表达式，如果这个表达式返回true，则允许访问，否则不允许访问。初次之外，Spring Security还提供了一些有用的表示式语言曾倩原有的功能，注意下面的代码中的<code>access(&quot;hasAuthority(&#39;ROLE_ADMIN&#39;)&quot;)</code>，多个条件进行限制的时候使用<code>access(&quot;hasRole(&#39;ADMIN&#39;) and hasRole(&#39;DBA&#39;)&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//限定签名后的权限</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">//限定&quot;/user/welcome&quot;请求赋予角色ROLE_USER或者ROLE_ADMIN</span></span><br><span class="line">    .antMatchers(<span class="string">&quot;/user/welcome&quot;</span>,<span class="string">&quot;/user/detais&quot;</span>).hasAnyRole(<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">            <span class="comment">//限定“/admin”下所有请求权限赋予角色ROLE_ADMIN</span></span><br><span class="line">    .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasAuthority(&#x27;ROLE_ADMIN&#x27;)&quot;</span>)</span><br><span class="line">            <span class="comment">//其他路径允许签名后访问</span></span><br><span class="line">    .anyRequest().permitAll()</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对于没有配置权限的其他请求允许匿名访问</span></span><br><span class="line">    .and().anonymous()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Spring Security默认的登录页面</span></span><br><span class="line">    .and().formLogin()</span><br><span class="line">            <span class="comment">//启用http基础验证</span></span><br><span class="line">    .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>第5章 访问数据库</title>
    <url>/2019/04/23/%E7%AC%AC5%E7%AB%A0-%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_50.jpg"><br>MyBatis是一个不屏蔽SQL且提供动态SQL，接口式编程和简易SQL绑定POJO的半自动化框架</p>
<h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>在依赖于Spring Boot的spring-boot-starter-data-jpa后，她就会默认为你配置数据源，这些默认的数据源主要是内存数据库，如h2，hqldb和Derby等</p>
<h3 id="配置自定义数据源"><a href="#配置自定义数据源" class="headerlink" title="配置自定义数据源"></a>配置自定义数据源</h3><p>以MySQL作为自定义数据源。代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--数据库基础依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mysql 数据库依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--jdbc依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>下面还需要配置数据库相关信息才能连接到数据库，这里可以配置<code>application.properties</code><br>配置文件打到配置数据源的效果，代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/chatper5</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zhang1989</span></span><br><span class="line"><span class="comment"># spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 最大等待连接中的数量，设0表示没有限制</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.max-idle</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接活动数</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.max-active</span>=<span class="string">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大等待毫秒数，单位为ms，超过时间会处错误信息</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.max-wait</span>=<span class="string">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接池初始化连接数</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.initial-size</span>=<span class="string">5</span></span><br></pre></td></tr></table></figure>

<p>这样我们就完成了Spring Boot的数据源配置，虽然上面注释掉了驱动类配置，但是他还是能连接数据源的，这是因为Spring Boot会尽可能去判断数据源是什么类型，然后根据其默认的情况去匹配驱动类。在他不能匹配的情况下，你可以明确的配置它。接着可以根据需要配置数据源的属性，因为上面使用Tomcat自带的数据库连接池<br>上面只是匹配Spring Boot绑定的Tomcat的数据源，有时候我们希望使用的第三方的数据源，例如，我们要使用DBCP数据源，只需要加入DBCP的数据源Maven依赖即可，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DBCP2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样工程就会把DBCP2对应的jar包加进来，我们只要将<code>application.properties</code>配置文件修改如下即可：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_boot_chapter5?serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zhang1989</span></span><br><span class="line"><span class="comment"># spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 指定数据库连接池的类型</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">org.apache.commons.dbcp2.BasicDataSource</span></span><br><span class="line"><span class="comment"># 最大等待连接中的数量，设0表示没有限制</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.max-idle</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接活动数</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.max-total</span>=<span class="string">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大等待毫秒数，单位为ms，超过时间会处错误信息</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.max-wait-millis</span>=<span class="string">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接池初始化连接数</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.initial-size</span>=<span class="string">5</span></span><br></pre></td></tr></table></figure>
<p>上述代码，我们首先通过spring.datasource.type属性制定了数据库连接池类型，然后再使用spring.datasource.dbcp2.* 去配置数据库连接池的属性，这样Spring Boot就会根据这些属性去配置对应的数据库连接池，从而知道使用的是DBCP数据源。为了验证这个结果，我们新建一个Bean，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Spring Bean生命周期接口ApplicationContextAware</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceShow</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spring容器会自动调用这个方法，注入Spring IoC容器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        DataSource dataSource = applicationContext.getBean(DataSource.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(dataSource.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中实现了接口ApplicationContextAware的方法setApplicationContext()，依照Spring Bean生命周期的规则，在其初始化的时候该方法会被调用，从而获取Spring IoC容器的上下文，这时初始化的时候方法就会被调用，从而Spring IoC容器的上下文，这时通过getBean方法就可以获取到连接池，然后打印出数据连接池的全部限定名，这样就可以知道使用的是那种数据库连接池了。启动Spring Boot程序，就可以发现类似下面的日志。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------</span><br><span class="line">org.apache.commons.dbcp2.BasicDataSource</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure>
<p>显然这里是使用了DBCP2的数据库连接池服务，我们可以使用类似的方法配置第三方数据源，首先创建一个表，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T_USER (</span><br><span class="line">	ID <span class="type">INT</span> (<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	USER_NAME <span class="type">VARCHAR</span> (<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	SEX <span class="type">INT</span> (<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">CHECK</span> (SEX <span class="keyword">IN</span>(<span class="number">1</span>, <span class="number">2</span>)),</span><br><span class="line">	NOTE <span class="type">VARCHAR</span> (<span class="number">256</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>接下来创建POJO用户来与这张表进行对应，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.pojo;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.enumeration.SexEnum;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> SexEnum sex;<span class="comment">//枚举</span></span><br><span class="line">  <span class="keyword">private</span> String note;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> SexEnum <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(SexEnum sex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> note;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.note = note;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SexEnum.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.enumeration;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> </span>&#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="keyword">int</span> id, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SexEnum <span class="title">getEnumById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(SexEnum sex : SexEnum.values())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sex.getId() == id)&#123;</span><br><span class="line">                <span class="keyword">return</span> sex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用JdbcTemplete操作数据库"><a href="#使用JdbcTemplete操作数据库" class="headerlink" title="使用JdbcTemplete操作数据库"></a>使用JdbcTemplete操作数据库</h2><p>在配置数据源欧，Spring Boot通过其自动配置机制配置好了JdbcTemplete，模板是Spring框架提供的。<br>下面创建一个Service接口，定义一些方法，这样通过它的实现类就可以注入Spring Boot已经为我们配置好的JdbcTemplete，直接就可以使用了。体现了Spring Boot的理念，尽量减少程序员的配置。接口代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JdbcTmpUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName, String note)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.enumeration.SexEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.service.JdbcTmpUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTmpUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">JdbcTmpUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取映射关系</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RowMapper&lt;User&gt; <span class="title">getUserMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用Lambda表达式创建用户映射关系</span></span><br><span class="line">        RowMapper&lt;User&gt; userRowMapper = (ResultSet rs,<span class="keyword">int</span> rownum) -&gt;&#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(rs.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            user.setUserName(rs.getString(<span class="string">&quot;user_name&quot;</span>));</span><br><span class="line">            <span class="keyword">int</span> sexId = rs.getInt(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">            SexEnum sex = SexEnum.getEnumById(sexId);</span><br><span class="line">            user.setSex(sex);</span><br><span class="line">            user.setNote(rs.getString(<span class="string">&quot;note&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> userRowMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select id, user_name, sex, note from t_user where id = ?&quot;</span>;</span><br><span class="line">        Object[] params = &#123;id&#125;;</span><br><span class="line">        User user = jdbcTemplate.queryForObject(sql,params,getUserMapper());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select id, user_name, sex, note from t_user where&quot;</span></span><br><span class="line">                +<span class="string">&quot; user_name like concat(&#x27;%&#x27;,?,&#x27;%&#x27;) and note like concat(&#x27;%&#x27;,?,&#x27;%&#x27;)&quot;</span>;</span><br><span class="line">        Object[] params = &#123;userName,note&#125;;</span><br><span class="line">        List&lt;User&gt; userList = jdbcTemplate.query(sql,params,getUserMapper());</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into t_user(user_name,sex,note) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql,user.getUserName(),user.getSex().getId(),user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update t_user set user_name = ?, sex=?,note=? where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql,user.getUserName(),user.getSex(),user.getNote(),user.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from t_user where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对JdbcTemplete的映射关系是需要开发者自己实现RowMapper的接口，这样就可以完成数据库数据到POJO对象的映射了，上面都是比较简单的只执行一条SQL，有时候我们需要执行多条SQL，只是JdbcTemplete是没调用一次便会生成一个数据库连接，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">this</span>.jdbcTemplete.query(sql1,rowMapper);</span><br><span class="line"><span class="keyword">this</span>.jdbcTemplete.update(sql2);</span><br></pre></td></tr></table></figure>
<p>从表面上看，这两个SQL都是同一个逻辑完成，二十几从底层的角度看，他们是使用不同的数据库连接完成。当JdbcTemplete执行query方法时，会从数据库连接池分配一条数据库连接资源。当其执行完后，会关闭数据库连接；当执行update时，它又从数据库连接池分配一条新的连接去执行sql。所以这种方式不被推荐。有时候我们希望一个连接里面执行多条SQL，对此我们也可以使用StatementCallback或者ConnectionCallback接口实现回调，代码如下</p>
<h2 id="整合MyBatis框架"><a href="#整合MyBatis框架" class="headerlink" title="整合MyBatis框架"></a>整合MyBatis框架</h2><h3 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h3><p>官方定义：支持定制化SQL，存储过程以及高级映射的优秀的持久层框架。MyBatis可以对配置和原生Map使用简单的xml或者注解，将接口和Java的POJO映射成数据库中的记录。<br>MyBatis是基于一种SQL到POJO的模型，他需要我们提供SQL映射关系和POJO，对于SQL和POJO的映射关系，他提供自动映射和驼峰映射等，是开发者的开发工作大大减少；它还支持动态SQL，以适应需求的变化。<br>MyBatis的配置文件包括两部分，意识基础配置文件，一个是映射文件。在MyBatis中也可以使用注解来实现映射，只是由于功能和可读性的限制，在实际的企业中使用的比较少。<br>首先在Maven中添加依赖包，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MyBatis的配置"><a href="#MyBatis的配置" class="headerlink" title="MyBatis的配置"></a>MyBatis的配置</h3><p>MyBatis是一个基于SqlSessionFactory构建的框架，作用是生成SqlSession接口对象，这个接口对象是MyBatis操作的核心。对于mybatis-spring-boot-starter，它会给予我们的配置文件<code>application.properties</code>进行Configuration配置的相关内容。下面是COnfiguration可以配置的内容</p>
<ul>
<li>properties（属性）：属性文件在实际应用中一般采用Spring进行配置，而不是MyBatis</li>
<li>settings（设置）：它的配置将改变MyBatis的底层行为，可以配置映射规则，如自动映射和驼峰映射、执行器类型、缓存等内容</li>
<li>typeAliases：因为使用类全限定名会比较长，所以MyBatis会对常用的类提供默认的别名，此外还允许我们通过typeAliases配置自定义的别名</li>
<li>typeHandlers：这个接口对象是MyBatis操作的核心的重要配置之一，在MyBatis写入和读取数据库的过程中对于不同类型的数据进行自定义转换</li>
<li>objectFactory（对象工厂）：这是一个在MyBatis生成返回POJO时会调用的工厂类。一般我们使用MyBatis默认提供的对象工厂。</li>
<li>plugins（插件）：有时候也叫拦截器，是MyBatis最强大也是最危险的组件，可以修改MyBatis底层实现功能。</li>
<li>enviroments（数据库环境）：可以配置数据库链接内容和事务。一般交由Spring托管</li>
<li>databaseIdProvider（数据库厂商标识）：允许MyBatis配置多类型的数据库支持</li>
<li>mappers（映射器）：Mybatis核心组件，提供SQL和POJO映射关系<br>下面是一个简单的例子，为了使用MyBatis的别名，先修改User类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.enumeration.SexEnum;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(value = &quot;user&quot;)</span><span class="comment">//MyBatis指定别名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">//性别枚举，这里需要使用typeHandler进行转换</span></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/****setter and getter****/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里添加的注解@Alias，并且指定的别名为user。同时注意，这里的属性中枚举，在MyBatis体系中，枚举是可以通过typeHander进行转换的，为此开发typeHandler，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.typehandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.enumeration.SexEnum;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明JdbcType为整形</span></span><br><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.INTEGER)</span></span><br><span class="line"><span class="comment">//声明JavaType为SexEnum</span></span><br><span class="line"><span class="meta">@MappedTypes(value=SexEnum.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SexTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">SexEnum</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过列名读取性别</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SexEnum <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sex = resultSet.getInt(s);</span><br><span class="line">        <span class="keyword">if</span>(sex != <span class="number">1</span> &amp;&amp; sex != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SexEnum.getEnumById(sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过下表读取性别</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SexEnum <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; i != <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SexEnum.getEnumById(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过存储过程读取性别</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SexEnum <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span> &amp;&amp; i !=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SexEnum.getEnumById(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置非空性别参数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, SexEnum sexEnum, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setInt(i,sexEnum.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在MyBatis中对于typeHandler的要求是实现TypeHandler<T>接口，而它自身为了更加方便也通过抽象类BaseTypeHandler<T>实现了TypeHandler<T>接口，所以这里直接集成抽象类BaseTypeHandler就可以了。注解@MappedJdbcTypes生命JdbcType为数据库的整型，@MappedTypes声明JavaType为SexEnum，这样MyBatis即可根据此对对应的数据库进行转换了。<br>为了使这个POJO能够与数据库的数据对应，还需要提供一个映射文件，代码如下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.chapter5.dao.MyBatisUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select id, user_name as userName,sex,note from t_user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
这里先看到<mapper>元素的namespace属性，它指定一个接口，后文会提供这个接口；接着定义一个<code>&lt;select&gt;</code>元素，它代表一个查询语句，而id属性指代这条SQL，paramterType属性配置为long，则表示是一个长整型参数，resultType指定返回值类型，这里使用user，这是一个别名，在User实体类中有别名，所以这里可以使用，也可以使用全限定名<code>com.example.chapter5.pojo.User</code>；再就是一个SQL语句，这里的列名和POJO的属性是保持一致的。<font color='red'>数据库中的字段名是user_name，而POJO的属性名为userName，这里的SQL是通过字段的别名来让他们保持一致的。在默认的情况下，MyBatis会启动自动映射，将SQL中的列映射到POJO上，有时候你也可以启动驼峰映射，这样就可以不用启用别名了，为了启用这个映射，我们还需要一个接口，仅需要一个接口，并不需要任何实现类，他就是<mapper>元素的namespace属性定义的MyBatisUserDao，代码如下</font><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyBatisUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注意，这里加了一个注解<code>@Repository</code>。这个注解在将来讨论扫描加载MyBatis接口Bean时是十分有用的，而它的方法getUser和映射文件中定义的查询SQL的id是保持一致的，参数也是如此，这样就能够顶一个查询方法。下面开始配置MyBatis。这里需要对映射文件、POJO的别名和typeHandler进行配置，这样就可以在配置文件<code>application.properties</code>中加入代码如下：<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mybatis 映射文件通配</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:com/example/chapter5/mapper/*.xml</span></span><br><span class="line"><span class="comment"># MyBatis扫描别明报，和注解@Alias联动</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.example.chapter5.pojo</span></span><br><span class="line"><span class="comment"># 配置typeHandler的扫描宝</span></span><br><span class="line"><span class="meta">mybatis.type-handlers-package</span>=<span class="string">com.example.chapter5.typehandler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="meta">logging.level.root</span>=<span class="string">DEBUGE</span></span><br><span class="line"><span class="meta">logging.level.org.springframework</span>=<span class="string">DEBUGE</span></span><br><span class="line"><span class="meta">logging.level.org.mybatis</span>=<span class="string">DEBUGE</span></span><br></pre></td></tr></table></figure>
这里配置了映射文件、别名文件和typeHandler，这样就可以让MyBatis扫描他们了。日志配置为DEBUG，更好地观察测试结果</li>
</ul>
<h2 id="Spring-Boot-整合Mybatis"><a href="#Spring-Boot-整合Mybatis" class="headerlink" title="Spring Boot 整合Mybatis"></a>Spring Boot 整合Mybatis</h2><p>为了方便使用，MyBatis社区在与Spring整合的包中提供了两个类，他们是MapperFactoryBean和MapperScannerConfigurer。他们的区别是MapperFactoryBean是针对一个接口配置，而MapperScannerConfigurer则是扫描装配，也就是提供扫描装配到Spring IOC中。实际上，MyBatis还提供了注解@MapperScan，能够将MyBatis所需要的对应接口扫描装配到Spring IOC容器中，而且MapperScan更简单，常规情况下都是使用MapperScan。<br>先用MapperFactoryBean配置MyBatisUserDao接口，在<font color='red'>Spring Boot的启动配置文件中加入如下代码</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个MyBatis的Mapper接口</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MapperFactoryBean&lt;MyBatisUserDao&gt; <span class="title">initMyBatisUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MapperFactoryBean&lt;MyBatisUserDao&gt; bean = <span class="keyword">new</span> MapperFactoryBean&lt;&gt;();</span><br><span class="line">    bean.setMapperInterface(MyBatisUserDao.class);</span><br><span class="line">    bean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的SqlSessionFactory是Spring Boot自动为我们生成的，可以直接拿来用，然后直接使用MapperFactory来定义Mapper接口，下面开发服务层来装配他，服务接口和实现类如下<br>– 服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.service;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyBatisUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>– 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.dao.MyBatisUserDao;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.service.MyBatisUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">MyBatisUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyBatisUserDao myBatisUserDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myBatisUserDao.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为在启动配置文件中装配了对应的接口，所以可以@Autowired注入应用。接着实现getUser方法，下面开发控制器，完成接口的测试，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter5.service.MyBatisUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mybatis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyBatisUserService myBatisUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myBatisUserService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在浏览器中输入<a href="http://localhost:8080/mybatis/getUser?id=1">http://localhost:8080/mybatis/getUser?id=1</a>，就可以看到下面的结果</p>
<img src="/2019/04/23/%E7%AC%AC5%E7%AB%A0-%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/screenshot_1.png" class="">
<p>显然到这里已经整合了MyBatis，并且成功打印出JSON数据集。然而上面只是一个Dao接口，如果有很多Dao接口，一个一个的定义肯定会比较麻烦，这个时候，就可以使用MapperScannerConfigurer类来定义扫描了，他可以配置包和注解类型进行装配，首先把Spring Boot启动配置文件中的关于Dao注入的代码删掉，然后在其中加入如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MyBatis接口扫描</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回扫描器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义扫描实例</span></span><br><span class="line">    MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">    <span class="comment">//加载SqlSessionFactory，SpringBoot会自动生产，SqlSessionFactory实例</span></span><br><span class="line">    mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactory&quot;</span>);</span><br><span class="line">    <span class="comment">//定义扫描的包</span></span><br><span class="line">    mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.example.chapter5.*&quot;</span>);</span><br><span class="line">    <span class="comment">//限定被表位@Repository的接口才被扫描</span></span><br><span class="line">    mapperScannerConfigurer.setAnnotationClass(Repository.class);</span><br><span class="line">    <span class="comment">//通过集成某个接口限制扫描，一般用不多</span></span><br><span class="line">    <span class="comment">//mapperScannerConfigurer.setMarkerInterface(......);</span></span><br><span class="line">    <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中使用MapperScannerConfigurer定义扫描包，这样程序就会去自动扫描对应的恶报，然后还使用了注解限制，限制为@Repository，这就是为什么在上面代码中为什么使用这个注解的原因，这样就可以防止扫描中被错误装配。<br>但是上述还是需要编写代码，而实际上还有更为简单的方式，那就是注解@MapperScan，例如我们可以删除上述关于MapperFactoryBean和MapperScannerConfigurer的相关代码，单独使用@MapperScan，例如可以Spring Boot启动代码可以修改为如下格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义SpringBoot扫描包路径</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.example.chapter5&quot;&#125;)</span></span><br><span class="line"><span class="comment">//定义JPA接口扫描路径</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;com.example.chapter5.dao&quot;)</span></span><br><span class="line"><span class="comment">//定义实体Bean扫描包路径</span></span><br><span class="line"><span class="meta">@EntityScan(basePackages = &quot;com.example.chapter5.pojo&quot;)</span></span><br><span class="line"><span class="comment">//定义MyBatis的扫描</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">        //指定扫描包</span></span><br><span class="line"><span class="meta">        basePackages = &quot;com.example.chapter5.*&quot;,</span></span><br><span class="line"><span class="meta">        //指定SqlSessionFactory，如果sqlSessionTemplate被指定，则作废</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;sqlSessionFactory&quot;,</span></span><br><span class="line"><span class="meta">        //指定sqlSessionTemplate，将忽略sqlSessionFactory的配置</span></span><br><span class="line"><span class="meta">        sqlSessionTemplateRef = &quot;sqlSessionTemplate&quot;,</span></span><br><span class="line"><span class="meta">        //markerInterface = Class.class //限制扫描接口，不常用</span></span><br><span class="line"><span class="meta">        annotationClass = Repository.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter5Application</span> </span>&#123;</span><br><span class="line">  ······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@MapperScan</code>允许我们通过扫描加载MyBatis的Mapper，如果你的Spring Boot项目中不存在多个SqlSessionFactory，那么你可以不用配置<code>sqlSessionFactoryRef</code>，上述代码关于他们的配置是可有可无的，但是如果存在多个时，就需要我们指定了，而且有一点需要注意的：sqlSessionTemplateRef的优先权是大于sqlSessionFactoryRef的，也就是当我们将两者都配置之后，系统会优先选择sqlSessionTemplateRef，而把sqlSessionFactoryRef作废。与我们代码开发一样，指定扫描的包和注解限定，当然也可以选择接口限定，只是这并不常用。这里我们选择使用注解@Repository作为限定，这是一个Spirng对持久层的注解，而事实上MyBatis也提供了一个队Mapper的注解@Mapper，工作中可以二选其一</p>
<h3 id="MyBatis的其他配置"><a href="#MyBatis的其他配置" class="headerlink" title="MyBatis的其他配置"></a>MyBatis的其他配置</h3><p>下面是我们常用的配置项，代码如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mybatis映射文件通配</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:com/example/chapter5/mapper/*.xml</span></span><br><span class="line"><span class="comment"># Mybatis扫描别名包和注解@Alias连用</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.example.chapter5.pojo</span></span><br><span class="line"><span class="comment">#MyBatis配置文件比较复杂的时候，可以使用下面这个</span></span><br><span class="line"><span class="meta">mybatis.config-location</span>=<span class="string">.....</span></span><br><span class="line"><span class="comment"># 配置MyBatis插件（拦截器）</span></span><br><span class="line"><span class="meta">mybatis.configuration.interceptors</span>=<span class="string">...</span></span><br><span class="line"><span class="comment"># 配置typeHandler的扫描包</span></span><br><span class="line"><span class="meta">mybatis.type-handlers-package</span>=<span class="string">com.example.chapter5.typehandler</span></span><br><span class="line"><span class="comment"># 级联延迟加在属性配置</span></span><br><span class="line"><span class="meta">mybatis.configuration.aggressive-lazy-loading</span>=<span class="string">...</span></span><br><span class="line"><span class="comment"># 执行器，可以配置SIMPLE，REUSE，BATCH，默认SIMPLE</span></span><br><span class="line"><span class="meta">mybatis.executor-type</span>=<span class="string">...</span></span><br></pre></td></tr></table></figure>
<p>上述在Spring Boot中比较常用的Mybatis的配置选项。如果你遇到比较复杂的配置可以通过mybatis.config-location去指定MyBatis本身的配置文件，去完成你需要的复杂配置项；当你的项目不是很复杂的时候，使用Spring Boot提供给你的配置就可以了。下面我们再来讲解Spring Boot集成MyBatis插件的例子。<br>现在存在一个Mybatis的插件MyPlugin，其内容代码清单如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter5.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Plugin;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**** imports ****/</span></span><br><span class="line"><span class="comment">// 定义拦截签名</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">		@Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123; Connection.class, Integer.class &#125;) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Properties properties = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 拦截方法逻辑</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;插件拦截方法......&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> invocation.proceed();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成MyBatis拦截器代理对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置插件属性</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一个MyBatis插件就创建出来了，但是我们没有把它配置到MyBatis配置中，这个时候，我们完全可以通过application.properties文件增加下面的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置MyBatis配置文件</span><br><span class="line">mybatis.config-location&#x3D;classpath:mybatis&#x2F;mybatis-config.xml</span><br></pre></td></tr></table></figure>
<p>这样就制定了MyBatis的配置文件路径。然后我们在对应的位置上创建这个配置文件，其内容如下所述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.example.chapter5.plugin.MyPlugin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;key1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;key2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;key3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个文件只是配置了MyBatis部分组件，开发者按照自己所需的部分进行自定义即可，因为MyBatis其他的组件Spring Boot已经默认地生产了。<br>当然，如果不希望使用配置文件，也可以使用编码的形式进行处理。如果项目依赖了mybatis-spring-boot-starter后，Spring Boot就会自动地在IoC容器中创建名称为sqlSessionFactory和sqlSessionTemplate的两个Bean。有时候如果配置比较少，也可以使用他们来配置MyBatis的相关内容，这样也是比较方便的，但是需要开发者对MyBatis底层的内容有足够的认知才行。例如我们现在删掉关于MyBatis文件mybatis-config.xml的配置和内容，仅仅使用代码处理，这时我们修改一下Spring Boot的启动文件，代码如下：</p>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第6章 数据库事务处理</title>
    <url>/2019/05/25/%E7%AC%AC6%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_52.jpg"><br>首先配置数据库连接配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>:<span class="string">jdbc:mysql://localhost:3306/spring_boot_chapter6</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zhang1989</span></span><br><span class="line"><span class="comment"># 最大等待连接中的数量，设0位没有限制</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大连接活动数</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.max-active</span>=<span class="string">50</span></span><br><span class="line"><span class="comment"># 最大等待毫秒数，单位为ms，超过时间会处错误信息</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.max-wait</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment"># 数据库连接池初始化连接数</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.initial-size</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="meta">logging.level.root</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">logging.level.org.springframework</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">logging.level.org.mybatis</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>在编程过程中，会使用编程式事务和声明式事务，大部分情况下会使用声明式事务。</p>
<h2 id="JDBC的数据库事务"><a href="#JDBC的数据库事务" class="headerlink" title="JDBC的数据库事务"></a>JDBC的数据库事务</h2><p>为了更直观，先从JDBC的代码入手。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.service.JdbcService;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.TransactionIsolationLevel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcServiceImpl</span> <span class="keyword">implements</span> <span class="title">JdbcService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(String userName,String note)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//设置隔离级别</span></span><br><span class="line">            conn.setTransactionIsolation(TransactionIsolationLevel.READ_COMMITTED.getLevel());</span><br><span class="line">            <span class="comment">//执行SQL</span></span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(<span class="string">&quot;insert into t_user (user_name,note) values (?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,userName);</span><br><span class="line">            ps.setString(<span class="number">2</span>,note);</span><br><span class="line">            result = ps.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭数据库连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span> &amp;&amp; !conn.isClosed())&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-声明式事务的使用"><a href="#Spring-声明式事务的使用" class="headerlink" title="Spring 声明式事务的使用"></a>Spring 声明式事务的使用</h2><p>第4章中看到Spring AOP约定，它会把我们的代码织入约定的流程中。同样的，使用AOP思维，执行SQL的代码就可以织入Spring约定的数据库事务的流程中。</p>
<h3 id="Spring声明式数据库事务约定"><a href="#Spring声明式数据库事务约定" class="headerlink" title="Spring声明式数据库事务约定"></a>Spring声明式数据库事务约定</h3><p>声明事务是使用<code>@Transactional</code>进行标注。这个注解可以标注在类（类中所有非静态方法都将开启事务）或者方法上。在<code>@Transactional</code>中，还允许配置事务的隔离等级和传播行为。如异常类型，从而确定方法发生什么异常下回滚或者发生什么异常下不回滚等。这些配置内容，是在Spring IoC容器在加载时就会将这些配置信息解析出来，然后把这些信息存储到事务订一起中，并且记录哪些类或者方法需要启动事务功能，采取什么策略去执行事务。事务的处理流程如下：</p>
<img src="/2019/05/25/%E7%AC%AC6%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/screenshot_1.png" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Transactional注解，标识insertUser方法需要启动事务机制，那么Spring就会织入约定的流程中，这样对于数据库连接关闭事务提交都不需要编写任何代码。</p>
<h3 id="Transactional的配置项"><a href="#Transactional的配置项" class="headerlink" title="@Transactional的配置项"></a>@Transactional的配置项</h3><ul>
<li>value和transactionManager：配置一个Spring的事务管理器</li>
<li>timeout：事务允许存在的时间戳，单位为秒</li>
<li>readOnly：事务是否是只读事务；</li>
<li>rollbackFor：方法在发生指定异常时回滚，默认是所有异常都回滚</li>
<li>rollbackForClassName：方法在发生指定异常名称时回滚，默认是所有异常都回滚</li>
<li>noRollBackFor：方法在发生指定异常时不回滚，默认是所有异常都回滚</li>
<li>noRollbackForClassName：方法在发生指定异常名称不回滚，默认是所有异常都回滚</li>
<li>propagation：传播行为</li>
<li>isolation：隔离级别<h3 id="Spring事务管理器"><a href="#Spring事务管理器" class="headerlink" title="Spring事务管理器"></a>Spring事务管理器</h3>MyBatis中最常用的事务管理器是<code>DataSourceTransactionManager</code>，在SpringBoot中如果依赖了<code>mybatis-spring-boot-starter</code>之后会自动创建一个DataSourceTransactionManager对象，作为事务管理器，如果依赖于<code>spring-boot-starter-data-jpa</code>，则会自动创建<code>JpaTransactionManager</code>对象作为事务管理器，所以不需要自己创建事务管理器。<h3 id="测试数据库事务"><a href="#测试数据库事务" class="headerlink" title="测试数据库事务"></a>测试数据库事务</h3>首先创建一张表，SQL如下<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `note` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>
为了与它映射，需要一个POJO，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****setter and getter*****/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
实现一个MyBatis接口，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6.dao;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
接着是与这个MyBatis接口文件对应的一个映射文件，代码如下：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.chapter6.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select id, user_name as userName,note from t_user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user (user_name,note) value(#&#123;userName&#125;,#&#123;note&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
创建UserService和它的实现类UserServiceImpl，然后通过@Transactional启用Spring数据库事务机制<br>接口类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6.service;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,timeout = 1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,timeout = 1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试控制类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试获取用户</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试插入用户</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/insertUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">insertUser</span><span class="params">(String userName,String note)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        user.setNote(note);</span><br><span class="line">        <span class="comment">//结果会回填主键到user中</span></span><br><span class="line">        <span class="keyword">int</span> update = userService.insertUser(user);</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>,update == <span class="number">1</span>);</span><br><span class="line">        result.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
下面还需要给SpringBoot配置MyBatis框架的内容，修改application.properties中加入如下代码：<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.example.chapter6.pojo</span></span><br></pre></td></tr></table></figure>
配置完成。最后在SpringBoot启动器中加入如下代码，查看自动创建的事务管理器、SqlsessionFactory和SqlSessionTemplate信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.chapter6&quot;,annotationClass = Repository.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;com.example.chapter6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter6Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter6Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入事务管理器，自动生成的</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用后初始化方法，观察自动生成的事务管理器</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewTransactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//启动后加入断点观测</span></span><br><span class="line">        System.out.println(transactionManager.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h3 id="数据库事务的知识"><a href="#数据库事务的知识" class="headerlink" title="数据库事务的知识"></a>数据库事务的知识</h3><p>数据库事务具有以下4个基本特征，也是著名的ACID</p>
<ul>
<li>Atomic（原子性）：事务中的操作被视为一个整体的业务单元，这个业务单元中的操作要么全成功，要么全部失败，不会出现部分成功部分是失败的情况</li>
<li>Consistency（一致性）：事务在完成时，必须使所有的数据保持一致状态，在数据库中所有的修改都基于事务，保证了数据的完整性</li>
<li>Isolation（隔离性）：多个线程同时访问同一数据时，会产生丢失更新，通过定义隔离的概念，可以在不同程度上压制丢失更新的发生，这个是重点</li>
<li>Durability（持久性）：事务结束后，所有的数据会固化到一个地方，如保存到磁盘当中<h3 id="详解隔离级别"><a href="#详解隔离级别" class="headerlink" title="详解隔离级别"></a>详解隔离级别</h3></li>
</ul>
<ol>
<li>未提交读<br>未提交读（read uncommited）允许一个事务读取另一个事务未提交的数据，是一种<font color='red'>危险</font>的隔离级别，有点并发高，适合对数据一致性无要求但并发量高的场景，最大坏处出现脏读</li>
<li>读写提交<br>读写提交（read commited）隔离级别，一个事务只能读取另一个事务已经提交的数据，不能读取未提交的数据</li>
</ol>
<table>
<thead>
<tr>
<th align="center">时刻</th>
<th align="left">事务1</th>
<th align="left">事务2</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">T0</td>
<td align="left">-</td>
<td align="left">-</td>
<td align="left">商品库存初始化为2</td>
</tr>
<tr>
<td align="center">T1</td>
<td align="left">读取库存为2</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">T2</td>
<td align="left">扣减库存</td>
<td align="left"></td>
<td align="left">库存为1</td>
</tr>
<tr>
<td align="center">T3</td>
<td align="left"></td>
<td align="left">扣减库存</td>
<td align="left">库存为1，读取不到事务1未提交的库存数据</td>
</tr>
<tr>
<td align="center">T4</td>
<td align="left"></td>
<td align="left">提交事务</td>
<td align="left">库存保存为1</td>
</tr>
<tr>
<td align="center">T5</td>
<td align="left">回滚事务</td>
<td align="left"></td>
<td align="left">因为第一类丢失更新已经克服，所以不会回滚为2</td>
</tr>
<tr>
<td align="center"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">库存为1，结果正确</td>
</tr>
<tr>
<td align="center">3. 可重复读</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">可重复读是客服读写提交中出现的不可重复读的现象，因为在读写提交的时候，可能会出现一些值的变化，影响当前事务的执行</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">4. 串行化（Serializable）</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">是数据库最高的隔离级别，所有的SQL会顺序执行，能够保证数据的一致性</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">5. 使用合理的隔离级别</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">项目类型</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">未提交读</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">读写提交</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">可重复读</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">串行化</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><ol>
<li>使用注解的形式进行配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE,timeout = 1)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上面的代码使用了序列化的隔离来保证数据的一致性，这将阻塞其他的事务进行并发，所以只能运用在地并发又需要数据一致性的场景下，对于高并发下又要保证数据一致性的场景，还需要进行处理</li>
<li>在springboot的配置文件中配置<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dbcp2数据库连接池默认隔离级别</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.default-transaction-isolation</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h2><p>绝大部分的情况下，数据库事务要么全程共，要么全失败。但实际情况中允许一个批量程序中会处理很多交易，绝大部分交易是可以顺利完成的，但是极少数的交易因为特殊情况不能完成发生异常，这时不能全部回滚，使得那些本完成的交易编程了不能完成，这种情况下当一些交易发生异常，知识回滚那些出现异常的交易，而不是整批量任务</p>
<img src="/2019/05/25/%E7%AC%AC6%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/screenshot_2.png" class="">
<p>在Spring中，当一个方法调用另一个方法时，可以让事务猜去不同的策略工作，如新建事务或者挂起当前事务等，这边是事务的<font color='red'><b>传播行为</b></font>，上图中批量任务称之为当前事务，当调用单个交易时，称为单个交易的字方法，当前方法调用子方法的时候，让每一个子方法不在当前事务中执行，创建一个新的事务去执行子方法，我们就说当前方法调用子方法的传播行为为新建事务，此外，还可以让子方法在无事务、独立事务中执行，这些取决于业务需求</p>
<h3 id="传播行为定义"><a href="#传播行为定义" class="headerlink" title="传播行为定义"></a>传播行为定义</h3><p>在Spring事务机制中对数据存在7种传播行为，它是通过枚举类Propagation定义的，下面加粗的是常用的几种传播行为</p>
<ul>
<li><b>REQUIRED</b>:需要事务，默认传播行为，如果当前存在事务，就沿用当前事务，否则新建一个事务运行子方法</li>
<li>SUPPORT：支持事务，如果当前存在事务，沿用当前事务，不存在，则继续采用无事务的方法执行子方法</li>
<li>MANDATORY：必须使用事务，如果当前没有事务，则会抛出异常，如果当前存在事务，沿用当前事务</li>
<li><b>REQUIRES_NEW</b>：无论当前是否存在，都创建新事务运行方法，这样事务就可以拥有新的锁和隔离级别等特性，与当前事务相互独立</li>
<li>NOT_SUPPORTED：不支持事务，当前存在事务时，挂起事务，运行方法</li>
<li>NEVER：不支持事务，如果当前方法存在事务，则抛出异常，否则继续使用无事务机制运行</li>
<li><b>NESTED</b>：在当前方法方法调用子方法时，如果子方法发生异常，只回滚子方法执行过的SQL，而不回滚当前方法的事务</li>
</ul>
<h3 id="测试传播行为"><a href="#测试传播行为" class="headerlink" title="测试传播行为"></a>测试传播行为</h3><p>下面针对<code>REQUIRED</code>,<code>REQUIRES_NEW</code>,<code>NESTED</code>3种最常用的传播行为进行测试。</p>
<ol>
<li>REQUIRED<br>创建一个接口<code>UserBatchService</code>和他的实现类<code>UserBatchServiceImpl</code>，代码如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserBatchService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUsers</span><span class="params">(List&lt;User&gt; users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.service.impl;</span><br><span class="line"><span class="comment">/****imports****/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBatchServiceBatchImpl</span> <span class="keyword">implements</span> <span class="title">UserBatchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUsers</span><span class="params">(List&lt;User&gt; users)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(User user: users)&#123;</span><br><span class="line">            <span class="comment">//调用子方法，使用@Transactional定义的传播行为</span></span><br><span class="line">            count += userService.insertUser(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用insertUser方法，只是insertUser方法中没有定义传播行为。按照之前的论述，会采用<code>REQUIRED</code>，也就是沿用当前的事务，所以它将与insertUsers方法使用同一事务，下面是Controller中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/insertUsers&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">insertUsers</span><span class="params">(String userName1,String note1,String userName2,String note2)</span></span>&#123;</span><br><span class="line">    User user1 = <span class="keyword">new</span> User();</span><br><span class="line">    user1.setUserName(userName1);</span><br><span class="line">    user1.setNote(note1);</span><br><span class="line"></span><br><span class="line">    User user2 = <span class="keyword">new</span> User();</span><br><span class="line">    user2.setUserName(userName2);</span><br><span class="line">    user2.setNote(note2);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    users.add(user1);</span><br><span class="line">    users.add(user2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> insertCount = userBatchService.insertUsers(users);</span><br><span class="line">    Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">&quot;success&quot;</span>,insertCount&gt;<span class="number">0</span>);</span><br><span class="line">    result.put(<span class="string">&quot;user&quot;</span>,users);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过请求这个方法来测试用户的批量插入，在浏览器中输入<a href="http://localhost:8080/user/insertUsers?userName1=username_1&note1=note_1&userName2=username_2&note2=note_2">http://localhost:8080/user/insertUsers?userName1=username_1&amp;note1=note_1&amp;userName2=username_2&amp;note2=note_2</a>，可观察后台日志<br>log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Participating in existing transaction</span><br><span class="line">.....</span><br><span class="line">Participating in existing transaction</span><br></pre></td></tr></table></figure>
<p>通过上面我们可以看到是沿用了当前事务<br>2. REQUIRES_NEW<br>修改子方法的，添加事务回滚，并声明为传播行为为REQUIRED_NEW，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在浏览器中再输入<a href="http://localhost:8080/user/insertUsers?userName1=username_1&note1=note_1&userName2=username_2&note2=note_2">http://localhost:8080/user/insertUsers?userName1=username_1&amp;note1=note_1&amp;userName2=username_2&amp;note2=note_2</a>进行测试</p>
<h2 id="Transactional自调用失效问题"><a href="#Transactional自调用失效问题" class="headerlink" title="@Transactional自调用失效问题"></a><code>@Transactional</code>自调用失效问题</h2><p><code>@Transactional</code>在某些场景下会失效，在上面的测试中，使用了一个UserBatchServiceImpl去调用UserServiceImpl类的方法，那么如果我们不创建UserBatchServiceImpl类，而只是使用UserServiceImpl，在子方法是REQUIRE_NEW的时候，子方法是不会创建新的事务的，也就是会失效<br>这是因为AOP原理是动态代理，在自调用的过程中，是类自身的调用，而不是代理去调用，那么就不会产生AOP，这样就没法将你的代码织入到约定流程中，就失败了，如果非要使用这种方法，可以从Spring IoC容器中获取代理去启用AOP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceimpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">ApplicationContextAware</span></span></span><br><span class="line"><span class="class"><span class="title">UserService</span> <span class="title">userService</span> </span>= applicationContext.getBean(UserService.class) ;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 Shiro授权</title>
    <url>/2019/01/25/%E7%AC%AC%E4%B8%89%E7%AB%A0-Shiro%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_15.jpg"></p>
<p>授权，访问控制，在应用中控制哪些用户能够访问哪些资源（如页面/编辑数据/页面操作）。授权需要了解几个关键对象：主题（Subject）、资源（Resource）、权限（Permission）、角色（Role）</p>
<h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><p>访问应用的用户。用户只有授权后才允许访问对应的资源</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>在应用中用户可以访问的任何东西，比如JSP页面、查看/编辑某些数据、访问某个业务方法、打印文本等都是资源。用户只有首选后才能访问。</p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>安全策略中的原子授权单位。通过权限我们可以表示在应用中用户能不能访问某个资源，如：<br>访问用户列表页面<br>查看/新增/修改/删除用户数据（即很多时候都是CRUD（增删改查）式权限控制）<br>打印文档等等  </p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>角色代表操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较访问。典型的如：项目经理，技术总监、CTO等等，不同的角色拥有不同的权限。  </p>
<h3 id="隐式角色"><a href="#隐式角色" class="headerlink" title="隐式角色"></a>隐式角色</h3><p>直接通过角色来验证用户有没有操作权限，需要在代码中进行维护，比较麻烦，粒度较粗</p>
<h3 id="显示角色"><a href="#显示角色" class="headerlink" title="显示角色"></a>显示角色</h3><p>在程序中通过权限控制谁能访问某个资源，角色聚合一组权限集合；这样假设某个角色不能访问某个资源，只需要从角色对应的权限集合中移除即可；无须修改多出代码，即粒度是以资源/实例为单位的；粒度较细</p>
<h2 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h2><p>Shiro支持三种方式的授权<br><strong>编程式</strong>：通过if/else授权代码块方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//有权限</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注解式</strong>：通过在执行的Java方法上防止相应的注解完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//有权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有权限将抛出相应的异常<br><strong>JSP/GSP标签</strong>：在JSP/GSP页面通过相应的标签完成：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;shiro:hasRole name=<span class="string">&quot;admin&quot;</span>&gt;</span><br><span class="line">&lt;!--有权限--&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure>
<p>后续部分将详细介绍如何使用</p>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="基于角色的访问控制（隐式角色）"><a href="#基于角色的访问控制（隐式角色）" class="headerlink" title="基于角色的访问控制（隐式角色）"></a>基于角色的访问控制（隐式角色）</h3><p>1、在ini配置文件配置用户拥有的角色（shiro-role.ini）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">zhang&#x3D;123,role1.role2</span><br><span class="line">wang&#x3D;123,role1</span><br></pre></td></tr></table></figure>
<p>规则即：“用户名=密码,角色1,角色2”，如果需要在应用中判断用户是否拥有相应的角色，就需要在相应的Realm中返回角色信息，也就是说Shiro不负责维护用户-角色信息，需要应用提供，Shiro只是提供相应的接口方便验证，后续会介绍如何动态的获取用户角色。<br>2、测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RoleTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/615:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHasRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        login(<span class="string">&quot;classpath:shiro-role.ini&quot;</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断拥有角色：role1</span></span><br><span class="line">        Assert.assertTrue(subject().hasRole(<span class="string">&quot;role1&quot;</span>));</span><br><span class="line">        <span class="comment">//判断拥有角色：role1 and role2</span></span><br><span class="line">        Assert.assertTrue(subject().hasAllRoles(Arrays.asList(<span class="string">&quot;role1&quot;</span>,<span class="string">&quot;role2&quot;</span>)));</span><br><span class="line">        <span class="comment">//判断拥有角色：role1 and role2 and !role3</span></span><br><span class="line">        <span class="keyword">boolean</span>[] result = subject().hasRoles(Arrays.asList(<span class="string">&quot;role1&quot;</span>,<span class="string">&quot;role2&quot;</span>,<span class="string">&quot;role3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="keyword">true</span>,result[<span class="number">0</span>]);</span><br><span class="line">        Assert.assertEquals(<span class="keyword">true</span>,result[<span class="number">1</span>]);</span><br><span class="line">        Assert.assertEquals(<span class="keyword">false</span>,result[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Shiro提供了hasRole/hasRoles用于判断用户是否拥有角色/某些权限；但是没有提供如hasAnyRole用于判断是否有某些权限中的一个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected = UnauthorizedException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    login(<span class="string">&quot;classpath:shiro-role.ini&quot;</span>, <span class="string">&quot;zhang&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="comment">//断言拥有角色：role1</span></span><br><span class="line">    subject().checkRole(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">    <span class="comment">//断言拥有角色：role1 and role3 失败抛出异常</span></span><br><span class="line">    subject().checkRoles(<span class="string">&quot;role1&quot;</span>, <span class="string">&quot;role3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Shiro 提供的checkRole/checkRole和hasRole/hasAllRoles不同的地方是他在判断为假的情况下会抛出UnauthorizedException异常。<br>到此基于角色的访问控制（隐式角色）就完成了，这种方式的缺点就是如果很多地方进行角判断，但是有一天不需要了，那么久需要修改相应代码把所有相关的地方进行删除，这就是粗粒度造成的问题。</p>
<h3 id="基于资源的访问控制（显示角色）"><a href="#基于资源的访问控制（显示角色）" class="headerlink" title="基于资源的访问控制（显示角色）"></a>基于资源的访问控制（显示角色）</h3><p>1、在ini配置文件配置用户拥有的角色角色-权限关系（shiro-permission.ini）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhang&#x3D;123,role1,role2</span><br><span class="line">wang&#x3D;123,role1</span><br><span class="line"></span><br><span class="line">[roles]</span><br><span class="line">#对资源user拥有create、update权限</span><br><span class="line">role1&#x3D;user:create,user:update</span><br><span class="line">#对资源user拥有create、delete权限</span><br><span class="line">role2&#x3D;user:create,user:delete</span><br></pre></td></tr></table></figure>
<p><strong>规则：</strong>“用户名=密码，角色1，角色2” “角色=权限1，权限2”，即首先根据用户名找到角色，然后根据角色再找到权限；即角色时权限的集合；Shiro同样不进行权限的额维护，需要我们通过Realm返回相应的权限信息。只需要维护“用户-角色”之间的关系即可。</p>
<p>2、测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPermitted</span><span class="params">()</span></span>&#123;</span><br><span class="line">    login(<span class="string">&quot;classpath:shiro-permission.ini&quot;</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断拥有权限：user:create</span></span><br><span class="line">    Assert.assertTrue(subject().isPermitted(<span class="string">&quot;user:create&quot;</span>));</span><br><span class="line">    <span class="comment">//判断拥有权限：user:update and user:delete</span></span><br><span class="line">    Assert.assertTrue(subject().isPermittedAll(<span class="string">&quot;user:update&quot;</span>,<span class="string">&quot;user:delete&quot;</span>));</span><br><span class="line">    <span class="comment">//断言没有权限user:view</span></span><br><span class="line">    Assert.assertFalse(subject().isPermitted(<span class="string">&quot;user:view&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Shiro提供了isPermitted和isPermittedAll用于判断用户是否拥有某个权限或者所有权限，也就是没有提供如isPermittedAny用于判断拥有某一个权限的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected = UnauthorizedException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCHeckPermission</span><span class="params">()</span></span>&#123;</span><br><span class="line">    login(<span class="string">&quot;classpath:shiro-permission.ini&quot;</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    subject().checkPermission(<span class="string">&quot;user:create&quot;</span>);</span><br><span class="line">    subject().checkPermissions(<span class="string">&quot;user:delete&quot;</span>,<span class="string">&quot;user:update&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject().checkPermissions(<span class="string">&quot;user:view&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthorizationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此基于资源的访问控制（显示角色）就完成了，也就是基于权限的访问控制，这种方法一般规则是“资源标识符：操作”。即是资源级别的粒度；这种方式的好处是如果要修改基本都是一个资源级别的修改，不会对其他模块代码产生影响，粒度小。但是实现起来可能稍微复杂点，需要维护“用户-角色，角色-权限（资源：操作）”之间的关系</p>
<h2 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h2><h3 id="字符串通配符权限"><a href="#字符串通配符权限" class="headerlink" title="字符串通配符权限"></a>字符串通配符权限</h3><p><strong>规则：</strong>“资源标识符：操作：对象实例ID”即对那个资源的哪个实例可以进行什么操作。其默认支持通配符权限字符串，“：”表示资源/操作/实例的分割；“，”表示操作的分割；“*”表示任意资源/操作/实例<br>1、单个资源单个权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;system:user:update&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>拥护拥有资源“system:user”的update权限<br>2、单个资源多个权限<br>ini配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role41&#x3D;system:user:update,system:user:delete</span><br></pre></td></tr></table></figure>
<p>通过如下代码进行判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;system:user:update&quot;</span>,<span class="string">&quot;system:user:delete&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>用户拥有资源“system:user”的update和delete权限。如上可以简写成：<br>ini配置文件（表示角色4拥有system:user资源的update和delete权限）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">role42=<span class="string">&quot;system:user:update,delete&quot;</span></span><br></pre></td></tr></table></figure>
<p>接着可以通过如下代码判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;system:user:update,delete&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>通过“system:user:update,delete”验证“system:user:update,system:user:delete”是没有问题的，但是反过来是规则不成立的。  </p>
<p>3、单个资源全部权限<br>ini配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">role51=<span class="string">&quot;system:user:create,update,delete,view&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后通过如下代码判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;system:user:create,delete,update,view&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>用户拥有资源“system:user”的“create”、“update”、“delete”和“view”所有权限。如上可以简写成：<br>ini配置文件（表示角色5拥有system:user的所有权限）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">role52=system:user:*</span><br></pre></td></tr></table></figure>
<p>也可以简写成（推荐上边的写法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">role53=system:user</span><br></pre></td></tr></table></figure>
<p>然后通过如下代码判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;system:user:*&quot;</span>);</span><br><span class="line">subject().checkPermissions(<span class="string">&quot;system:user&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>通过“system:user:*”验证“system:user:create,delete,update:view”可以，但是反过来是不成立的。  </p>
<p>4、所有资源全部权限<br>ini配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role61&#x3D;*:view</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;user:view&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>用户拥有所有资源的“view”所有权限。假设判断的权限是“system:user:view”，那么需要“role5=<em>:</em>:view”这样写才行。  </p>
<p>5、实例级别的权限<br>5.1、单个实例单个权限<br>ini配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role71&#x3D;user:view:1</span><br></pre></td></tr></table></figure>
<p>对资源user的1实例拥有view权限。<br>通过下面的代码判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;user:view:1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>5.2、单个实例多个权限<br>ini配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role72&#x3D;&quot;user:update,delete:1&quot;</span><br></pre></td></tr></table></figure>
<p>对资源user的1实例拥有update、delete权限<br>然后通过如下代码判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;user:delete,update:1&quot;</span>);</span><br><span class="line">subject().checkPermissions(<span class="string">&quot;user:update:1&quot;</span>,<span class="string">&quot;user:delete:1&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>5.3、单个实例所有权限<br>ini配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role73&#x3D;user:*:1</span><br></pre></td></tr></table></figure>
<p>对资源user的1实例拥有所有权限<br>然后通过如下代码判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;user:update:1&quot;</span>,<span class="string">&quot;user:delete:1&quot;</span>,<span class="string">&quot;user:view:1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>5.4、所有实例单个权限<br>ini配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role74&#x3D;user:auth:*</span><br></pre></td></tr></table></figure>
<p>对资源user的1实例拥有所有的权限<br>然后通过如下代码判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;user:auth:1&quot;</span>,<span class="string">&quot;user:auth:2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>5.5、所有实例所有权限<br>ini配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">role75&#x3D;user:*:*</span><br></pre></td></tr></table></figure>
<p>对资源user的1实例拥有所有权限<br>判断代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermissions(<span class="string">&quot;user:view:1&quot;</span>,<span class="string">&quot;user:auth:2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>6、Shiro对权限字符串却是部分的处理<br>如<code>user:view</code>等价于<code>user:view:*</code>；而<code>organization</code>等价于<code>organization:*</code>或者<code>organization:*:*</code>,这种方式实现了前缀匹配。<br>另外如<code>user:*</code>可以匹配<code>user:delete</code>、<code>user:delete</code>可以匹配<code>user:delete:1``user:*:1</code>,可以匹配如<code>user:view:1</code>、<code>user</code>可以匹配<code>user:view</code>或<code>user:view:1</code>等。即<em>可以匹配所有，不加</em>可以进行前缀匹配；但是如<code>*:view</code>不能匹配<code>system:user:view</code>，需要<code>*:*:view</code>，即后缀匹配必须制定前缀（多个冒号就需要多个来匹配）。<br>7、WildcardPermission<br>如下面两种方式是等价的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">subject().checkPermission(<span class="string">&quot;menu:view:1&quot;</span>)</span><br><span class="line">subject.checkPermission(<span class="keyword">new</span> WildcardPermission(<span class="string">&quot;menu:view:1&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>因此没什么必要的话使用字符串更方便。</p>
<p>8、性能问题<br>通配符匹配方式比字符串相等的陪陪来说是更复杂，因此需要花费更长时间，但是一般系统的权限不会太多，且乐意配合缓存来提供其性能，如果这样性能还打不到要求我们可以实现操作算法实现吸能你更好的权限匹配。另外实力级别的权限验证如果数据量太大也不建议使用，可能造成查询权限及匹配变慢。可以考虑比如sql查询时加上权限字符串之类的方式在查询时就完成权限匹配。</p>
<h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><img src="/2019/01/25/%E7%AC%AC%E4%B8%89%E7%AB%A0-Shiro%E6%8E%88%E6%9D%83/screenshot_1.png" class="">
<p><strong>流程如下：</strong><br>1、首先调用<code>Subject.isPermitted*/hasROle*</code>接口，其会委托给<code>SecurityManager</code>,而<code>SecurityManager</code>接着会委托给<code>Authorizer</code>;<br>2、Authorizer是真正的授权者，如果我们调用如isPermitted(“user:view”),其首先会通过PermissionResolver把字符串转换成相应的Permission实例；<br>3、在进行授权之前，其会调用相应的Real获取Subject相应的角色/权限用于匹配传入的角色/权限。<br>4、Authorizer会判断Realm的角色/权限是否和传入的匹配，如果多个Realm，会委托给ModularRealmAuthorizer进行循环判断，如果匹配如isPermitted*/hasRole*会返回true，否则返回false表示授权失败  </p>
<p>ModularRealmAuthorizer进行多Realm匹配流程：<br>1、首先检查相应的Realm是否实现了Authorizer；<br>2、如果实现了Authorizer，那么接着调用其他相应的isPermitted*/hasRole*接口进行匹配<br>3、如果有一个Realm匹配那么僵返回true，否则返回false；  </p>
<p>如果Realm进行授权的话，应该继承AuthorizingRealm，起流程是：<br>1.1、如果调用hasRole*,则直接获取AuthorizationInfo.getRoles()与传入的角色比较即可；<br>1.2、首先调用如isPermitted(“user:view”),首先通过PermissionResolver，即转换为通配符的WildcardPermission；<br>2、通过AuthoricationInfo.getObjectPermissions()得到Permission实例集合；通过AuthorizationInfo.getStringPermission得到字符串合并通过RolePermissionResolver解析角色对应的权限集合（默认没有实现，可以自己提供）<br>3、接着调用Permission.implies(Permission p )诸葛与传入的权限比较，如果有匹配的则返回true，否则返回false。</p>
<h2 id="Authorizer、PermissionResolver及RolePermissionResolver"><a href="#Authorizer、PermissionResolver及RolePermissionResolver" class="headerlink" title="Authorizer、PermissionResolver及RolePermissionResolver"></a>Authorizer、PermissionResolver及RolePermissionResolver</h2><p>Authorizer的职责是进行授权（访问控制），是ShiroAPI中授权核心的入口点，其提供了相应的角色/权限判断接口，具体请参考其JavaDoc。SecurityManager集成了Authorizer接口，且提供了ModularRealmAuthorizer用于多Realm时的授权匹配。PermissionResolver用于解析权限字符串到Permission实例，而RolePermissionResolver用于根据角色解析相应的权限集合。<br>我们可以通过如下ini配置更改Authorizer实现：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">authorizer&#x3D;org.apache.shiro.authz.ModularRealmAuthorizer</span><br><span class="line">securityManager.authorizer&#x3D;$authorizer</span><br></pre></td></tr></table></figure>
<p>对于ModularRealmAuthorizer，相应的AuthorizingSecurityManager会在初始化完成后自动将相应的realm设置进去，我们也可以通过调用其setRealm()方法进行设置。对于实现自己的authorizer可以参考ModularRealmAuthorizer实现即可，再次不提供示例了。<br>设置ModularRealmAuthorizer的permissionResolver，其会自动设置到相应的Realm上（其实现了PermissionResolverAware接口），如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver</span><br><span class="line">authorizer.permissionResolver=$permissionResolver</span><br></pre></td></tr></table></figure>
<p>设置ModularRealmAuthorizer的rolePermissionResolver,其会自动设置到相应的Realm上（其实现了RolePermissionResolverAware接口），如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rolePermissionResolver&#x3D;com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver</span><br><span class="line">authorizer.rolePermissionResolver&#x3D;$rolePermissionResolver</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>1、ini配置(shiro-authorizer.ini)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">#自定义authorizer</span><br><span class="line">authorizer&#x3D;org.apache.shiro.authz.ModularRealmAuthorizer</span><br><span class="line">#自定义permissionResolver</span><br><span class="line">#permissionResolver&#x3D;org.apache.shiro.authz.permission.WildcardPermissionResolver</span><br><span class="line">permissionResolver&#x3D;com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver</span><br><span class="line">authorizer.permissionResolver&#x3D;$permissionResolver</span><br><span class="line">#自定义rolePermissionResolver</span><br><span class="line">rolePermissionResolver&#x3D;com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver</span><br><span class="line">authorizer.rolePermissionResolver&#x3D;$rolePermissionResolver</span><br><span class="line"></span><br><span class="line">securityManager.authorizer&#x3D;$authorizer</span><br><span class="line"></span><br><span class="line">#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</span><br><span class="line">realm&#x3D;com.github.zhangkaitao.shiro.chapter3.realm.MyRealm</span><br><span class="line">securityManager.realms&#x3D;$realm</span><br></pre></td></tr></table></figure>
<p>设置securityManager的realms一定要放在最后，因为在调用SecurityManager.setRealms的时候会将realms设置给authorizer，并为各个Realm设置permissionResolver和rolePermissionResolver。另外，不能使用IniSecurityManagerFactory创建IniRealm，因为其初始化顺序的问题可能会造成后续初始化Permission造成影响。</p>
<p>2、定义BitAndWildPermissionResolver及BitPermission<br>BitPermission用于实现位移方式权限，规则是：<br>权限字符串格式：+资源字符串+权限位+实例ID；以+开头，中间通过+分割；权限：0表示所有权限；1表示新增（二级制0001）、2表示修改（二级制0010）、4删除（二进制0100）、8查看（二进制1000）；如+user+10表示对资源user拥有修改/查看权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.Permission;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> BitPermission</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/2716:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitPermission</span> <span class="keyword">implements</span> <span class="title">Permission</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String resourceIdentify;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> permissionBit;</span><br><span class="line">    <span class="keyword">private</span> String instanceId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitPermission</span><span class="params">(String permissionString)</span> </span>&#123;</span><br><span class="line">        String[] array = permissionString.split(<span class="string">&quot;\\+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            resourceIdentify = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(resourceIdentify)) &#123;</span><br><span class="line">            resourceIdentify = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(array.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            permissionBit = Integer.valueOf(array[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(array.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            instanceId = array[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(instanceId)) &#123;</span><br><span class="line">            instanceId = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">implies</span><span class="params">(Permission p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(p <span class="keyword">instanceof</span> BitPermission)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BitPermission other = (BitPermission) p;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;*&quot;</span>.equals(<span class="keyword">this</span>.resourceIdentify) || <span class="keyword">this</span>.resourceIdentify.equals(other.resourceIdentify))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="keyword">this</span>.permissionBit ==<span class="number">0</span> || (<span class="keyword">this</span>.permissionBit &amp; other.permissionBit) != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;*&quot;</span>.equals(<span class="keyword">this</span>.instanceId) || <span class="keyword">this</span>.instanceId.equals(other.instanceId))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BitPermission&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;resourceIdentify=&#x27;&quot;</span> + resourceIdentify + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, permissionBit=&quot;</span> + permissionBit +</span><br><span class="line">                <span class="string">&quot;, instanceId=&#x27;&quot;</span> + instanceId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Permission接口提供了boolean implies(Permission p)方法，用于判断权限匹配的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.Permission;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.permission.PermissionResolver;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.permission.WildcardPermission;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> BitAndWildPermissionResolver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/2716:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitAndWildPermissionResolver</span> <span class="keyword">implements</span> <span class="title">PermissionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Permission <span class="title">resolvePermission</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BitPermission(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WildcardPermission(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BitAndWildPermissionResolver实现了PermissionResolver接口，并根据权限字符串是否以“+”开头来解析权限字符串为BitPermission或WildcardPermission</p>
<p>3、定义MyRolePermissionResolver<br>PermissionResolver用于根据角色字符串来解析得到权限集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.Permission;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.permission.RolePermissionResolver;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.permission.WildcardPermission;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyRolePermissionResolver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/2716:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRolePermissionResolver</span> <span class="keyword">implements</span> <span class="title">RolePermissionResolver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Permission&gt; <span class="title">resolvePermissionsInRole</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;role1&quot;</span>.equals(s))&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList((Permission)<span class="keyword">new</span> WildcardPermission(<span class="string">&quot;menu:*&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处的逻辑很简单，如果用户拥有role1，那么就返回“menu:*”的权限<br>4、自定义Realm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.smartcore.permission.BitPermission;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.permission.WildcardPermission;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyRealm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/2716:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        authorizationInfo.addRole(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">        authorizationInfo.addRole(<span class="string">&quot;role2&quot;</span>);</span><br><span class="line">        authorizationInfo.addObjectPermission(<span class="keyword">new</span> BitPermission(<span class="string">&quot;+user1+10&quot;</span>));</span><br><span class="line">        authorizationInfo.addObjectPermission(<span class="keyword">new</span> WildcardPermission(<span class="string">&quot;user1:*&quot;</span>));</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;+user2+10&quot;</span>);</span><br><span class="line">        authorizationInfo.addStringPermission(<span class="string">&quot;user2:*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = (String)token.getPrincipal();  <span class="comment">//得到用户名</span></span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[])token.getCredentials()); <span class="comment">//得到密码</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;zhang&quot;</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(); <span class="comment">//如果用户名错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;123&quot;</span>.equals(password)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(); <span class="comment">//如果密码错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果身份认证验证成功，返回一个AuthenticationInfo实现；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, password, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们继承 AuthorizingRealm而不是实现Realm接口；推荐使用 AuthorizingRealm ，因为：</p>
<ul>
<li>AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)：表示获取身份验证信息</li>
<li>AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)：表示根据用户身份获取身份信息<br>这种方式的好处是当需要身份验证时只需要获取身份验证信息而不需要获取授权信息。<br>另外我们还可以使用JdbcRealm，需要如下操作：</li>
<li>执行  sql/ shiro-init-data.sql 插入相关的权限数据</li>
<li>使用shiro-jdbc-authorizer.ini 的配置文件，需要设置jdbcRealm.permissionsLookupEnabled为true来开启权限查询</li>
<li>此次还要注意就是不能把我们自定义的如“+user+10”配置到ini文件中即使有IniRealm完成，IniRealm在new完成后就会解析这些权限字符串，默认使用WildCardPermissionResolver，即此处是一个设计权限，如果采用生命周期（如使用初始化方法）的方式进行加载就可以解决我们自定义permissionResolver的问题。<br>5、测试用例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AuthorizerTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/288:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizerTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIsPermitted</span><span class="params">()</span></span>&#123;</span><br><span class="line">        login(<span class="string">&quot;classpath:shiro-authorizer.ini&quot;</span>, <span class="string">&quot;zhang&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断拥有权限：user:create</span></span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;user1:update&quot;</span>));</span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;user2:update&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过二级制方式表示权限</span></span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;+user1+2&quot;</span>));<span class="comment">//新增权限</span></span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;+user1+8&quot;</span>));<span class="comment">//查看权限</span></span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;+user2+10&quot;</span>));<span class="comment">//新增及查看权限</span></span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;+user1+4&quot;</span>));<span class="comment">//没有删除权限</span></span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(subject().isPermitted(<span class="string">&quot;menu:view&quot;</span>));<span class="comment">//通过MyRolePermissionResolver解析得到权限</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过上面的步骤可以实现自定义验证了。另外因为不支持hasAnyRole/isPermittedAny这种方法的授权，可以参考<a href="http://jinnianshilongnian.iteye.com/blog/1864800">shiro扩展实现NOT、AND、OR权限验证</a>进行简单的扩展完成这个需求，在这篇文章中通过重写 AuthorizingRealm 里面的验证逻辑实现的。</p>
<h2 id="本章节亮点"><a href="#本章节亮点" class="headerlink" title="本章节亮点"></a>本章节亮点</h2><h3 id="BaseTest"><a href="#BaseTest" class="headerlink" title="BaseTest"></a>BaseTest</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ThreadContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> BaseTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/615:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ThreadContext.unbindSubject();<span class="comment">//退出时请解除绑定Subject到线程 否则对下次测试造成影响</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String configFile,String username,String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(configFile);</span><br><span class="line"></span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line"></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">subject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityUtils.getSubject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Shiro</category>
        <category>跟我学Shiro-张开涛</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>后端开发框架</tag>
        <tag>张开涛</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 身份认证</title>
    <url>/2019/01/25/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_14.jpg"></p>
<p><strong>身份认证:</strong> 在应用中证明自己是谁；一般提供用户自己的ID证明自己是谁，比如用户名和密码<br>在Shiro中，用户需要提供<code>principals</code>(身份)和<code>credentials</code>（证明）给shiro，从而验证用户的身份<br><strong>principals:</strong> 身份，主体的标识属性，可以是任何东西：邮箱，用户名等等，但必须唯一。一个主体可以有多个<code>principals</code>，但只有一个Primary principals<br><strong>credentials:</strong> 证明，凭据，即主体对应的安全值，如密码/数字证书等。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0-RC2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="登录-退出"><a href="#登录-退出" class="headerlink" title="登录/退出"></a>登录/退出</h2><ol>
<li>用户身份凭据（shior.ini）<br>在<code>shiro-test\src\test\resources</code>下创建文件<code>shiro.ini</code>，用来保存用户信息,通过<code>[users]</code>制定了两个主体<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">zhang&#x3D;123</span><br><span class="line">wang&#x3D;123</span><br></pre></td></tr></table></figure></li>
<li>测试用例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginLogoutTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloworld</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取SecurityManager工厂，此处使用ini配置文件初始化SecurityManager</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="comment">//2、得到SecurityManager实例 并绑定SecurityUtil</span></span><br><span class="line">        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//3、得到Subject及创建用户名/密码身份验证Token（用户身份证/凭据）</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4、登录，即身份验证成功</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="comment">//5、身份认证失败</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="keyword">true</span>,subject.isAuthenticated());<span class="comment">//断言用户已经登录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、退出</span></span><br><span class="line">        subject.logout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>代码解析</p>
</blockquote>
<p>1、首先通过<code>new IniSecurityManagerFactory</code>并制定一个<code>ini</code>文件来创建一个<code>SecurityManager</code>工厂；<br>2、接着获取<code>SecurityManager</code>并绑定到<code>SecurityUtils</code>, <strong><font color='red'> 这是一个全局设置，设置一次即可</font></strong><br>3、通过<code>SecurityUtil</code>得到<code>Subject</code>,其会自动绑定到当前线程；如果web环境在请求结束，需要解除绑定；然后获取身份认证的Token，如用户名/密码<br>4、调用<code>subject.log</code>方法进行登录，其会自动委托给<code>SecurityManager.login</code>方法进行登录<br>5、如果身份验证失败请捕获<code>AuthenticationException</code>或其子类，常见如：<code>DiabledAccountExceprion</code>(禁用的账号)、<code>LockedAccountException</code>(锁定的账号)、<code>UnKnownAccountException</code>（未知的账号）、<code>、ExcessiveAttemptsException</code>(登录失败次数过多)、<code>IncorrectCredentialsException</code>（错误凭证）、<code>ExpiredCredentialsException</code>(过期凭证)，对于错误消息的展示，最好使用“用户名或密码不正确”，防止提示太过详细，容易出现恶意扫描账号<br>6、最后可以调用<code>subject.logout</code>退出<br><strong>如上代码可总结出身份验证的步骤：</strong><br>1、收集用户身份凭据，如用户名和密码<br>2、调用Subject.login()进行登录，如果失败，得到相应的AuthenticationException异常；否则登录成功<br>3、调用Subject.logout进行退出操作  </p>
<h2 id="身份认证的流程"><a href="#身份认证的流程" class="headerlink" title="身份认证的流程"></a>身份认证的流程</h2><img src="/2019/01/25/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/screenshot_1.png" class="">

<ol>
<li>首先调用<code>Subject.login(token)</code>进行登录，其会自动委托给<code>SecurityManager</code>，调用之前必须通过<code>SecurityUtil.setSecurityManger()</code>设置  </li>
<li>SecurityManager负责真正的身份验证逻辑；他会委托给Authenticator进行身份验证  </li>
<li><code>Authenticator</code>才是真正的身份验证者， <strong>可以自定义自己的实现</strong></li>
<li><code>Authenticator</code>可能会委托给相应的<code>AuthenticationStrategy</code>进行多<code>Realm</code>身份验证，默认<code>ModularRealmAuthenticator</code>会调用<code>AuthenticationStrategy</code>进行多Realm身份验证；</li>
<li>Authenticator  会把相应的<code>token</code>传入Realm，从<code>Realm</code>中获取身份验证信息，如果没有返回或者抛出异常表明身份验证失败。<strong>可以自定义多个Realm，将按照相应的顺序和策略进行访问</strong>  <h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2></li>
</ol>
<p><strong>Realm：</strong> 域,Shiro从Realm中获取安全数据（用户、角色、权限），可以理解为Realm是DataSource，安全数据源，如上面配置的ini文件使用的<code>org.apache.shiro.realm.text.IniRealm</code></p>
<ul>
<li><code>org.apache.shiro.realm.Realm</code>接口如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String getName();&#x2F;&#x2F;返回一个唯一的Realm的名字</span><br><span class="line">boolean supports(AuthenticationToken token)&#x2F;&#x2F;判断此Realm是否支持此Token</span><br><span class="line">AuthenticationInfo  getAuthenticationInfo(AuthenticationToken token)</span><br><span class="line">    throws AuthenticationException;&#x2F;&#x2F;根据Token获取认证信息</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="单Realm配置"><a href="#单Realm配置" class="headerlink" title="单Realm配置"></a>单Realm配置</h2><ol>
<li><p>自定义Realm实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm1</span> <span class="keyword">implements</span> <span class="title">Realm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;myrealm1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken authenticationToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationToken <span class="keyword">instanceof</span> UsernamePasswordToken;<span class="comment">//仅支持UsernamePasswordToken类型的Token</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String userName = (String)authenticationToken.getPrincipal();</span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[])authenticationToken.getCredentials());<span class="comment">//得到密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;zhang&quot;</span>.equals(userName))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();<span class="comment">//用户名错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();<span class="comment">//密码错误</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(userName,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ini配置文件指定自定义的Realm（<code>shiro-realm.ini</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 声明一个realm</span><br><span class="line">myRealm1&#x3D;com.shirotest.realm.MyRealm1</span><br><span class="line"># 指定securityManager的realms实现</span><br><span class="line">securityManager.realms&#x3D;$myRealm1</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testCustomRealm()&#123;</span><br><span class="line">    &#x2F;&#x2F;1、获取SecurityManager工厂，此处使用ini配置文件初始化SecurityManager</span><br><span class="line">    Factory&lt;SecurityManager&gt; factory &#x3D; new IniSecurityManagerFactory(&quot;classpath:shiro-realm.ini&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2、得到SecurityManager实例，绑定SecurityUtil</span><br><span class="line">    SecurityManager securityManager &#x3D; factory.getInstance();</span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;3、得到Subject及创建用户名和密码对应的Token</span><br><span class="line">    Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">    UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhang&quot;,&quot;123&quot;);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;4、登录，即身份验证成功</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">        &#x2F;&#x2F;5、身份认证失败</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(true,subject.isAuthenticated());&#x2F;&#x2F;断言用户已经登录</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;6、退出</span><br><span class="line">    subject.logout();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="多Realm实现"><a href="#多Realm实现" class="headerlink" title="多Realm实现"></a>多Realm实现</h2><p>1、myRealm2代码  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.realm.Realm;</span><br><span class="line"></span><br><span class="line">public class MyRealm2 implements Realm &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;myrealm2&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(AuthenticationToken authenticationToken) &#123;</span><br><span class="line">        return authenticationToken instanceof UsernamePasswordToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AuthenticationInfo getAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        String userName &#x3D; (String)authenticationToken.getPrincipal();</span><br><span class="line">        String password &#x3D; new String((char[])authenticationToken.getCredentials());</span><br><span class="line"></span><br><span class="line">        if(!&quot;wang&quot;.equals(userName))&#123;</span><br><span class="line">            throw new UnknownAccountException();&#x2F;&#x2F;账号错误</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(!&quot;123&quot;.equals(password))&#123;</span><br><span class="line">            throw new IncorrectCredentialsException();&#x2F;&#x2F;密码错误</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果认证通过，返回一个AuthenticationInfo实现</span><br><span class="line">        return new SimpleAuthenticationInfo(userName,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、ini配置文件（shiro-multi-realm.ini）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 声明一个realm</span><br><span class="line">myRealm1&#x3D;com.shirotest.realm.MyRealm1</span><br><span class="line">myRealm2&#x3D;com.shirotest.realm.MyRealm2</span><br><span class="line"># 指定securityManager的realms实现</span><br><span class="line">securityManager.realms&#x3D;$myRealm1,$myRealm2</span><br></pre></td></tr></table></figure>
<p><strong>security按照realm指定的顺序进行身份认证。</strong> 此处我们使用显示指定顺序的方式指定了Realm的顺序，如果删除掉<code>securityManager.realms=$myRealm1,$myRealm2</code>，那么securityManager会按照realm声明的顺序进行使用（即无需声明顺序，系统会自动查找Realm），当我们<code>显示</code>指定realm后，其他没有指定的realm会被忽略，如<code>securityManager.realms=$myRealm1</code>,myRealm2会被自动忽略</p>
<p>3、测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomMultiRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">&quot;classpath:shiro-multi-realm.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">    SecurityManager securityManager = factory.getInstance();</span><br><span class="line"></span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    subject.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Shiro默认提供的Realm"><a href="#Shiro默认提供的Realm" class="headerlink" title="Shiro默认提供的Realm"></a>Shiro默认提供的Realm</h2><img src="/2019/01/25/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/screenshot_2.png" class="">
<p>以后一般集成<code>AuthorizingRealm</code>(授权)即可；其集成了<code>AuthenticatingRealm</code>（即身份认证），而且间接集成了<code>CachingRealm</code>(带缓存实现)。其中主要默认实现如下：<br><strong>org.apache.shiro.realm.text.IniRealm:</strong> [users]部分指定用户名/密码及对应角色；[roles]部分指定角色即角色授权信息；<br><strong>org.apache.shiro.realm.text.PropertiesRealm:</strong> user.username=password,role1,role2指定用户/密码及角色；role.role1=permission1,permission2指定角色对应即权限；<br>**org.apache.shiro.realm.jdbc.JdbcRealm:**通过sql查询相应的信息，如<code>select password from users where username = ?</code> 获取用户密码;<code>select password,password_salt from users where username = ?</code>获取用户密码及盐；<code>select permission from role_permissions where role_name = ?</code>获取角色对应权限；也可以调用相应的api进行自定义sql；</p>
<h2 id="JDBC-Realm使用"><a href="#JDBC-Realm使用" class="headerlink" title="JDBC Realm使用"></a>JDBC Realm使用</h2><p>1、数据库及依赖(pom.xml)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;shiro-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.4.0-RC2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.45&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.1.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>2、数据库shiro创建三张表：<code>users</code>（用户名/密码）、<code>user_roles</code>(用户/角色)、<code>roles_permissions</code>(角色权限)，并添加一个用户名/密码为zhang/123;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> shiro;</span><br><span class="line"><span class="keyword">create</span> database shiro;</span><br><span class="line">use shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users (</span><br><span class="line">  id <span class="type">bigint</span> auto_increment,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  password_salt <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">constraint</span> pk_users <span class="keyword">primary</span> key(id)</span><br><span class="line">) charset<span class="operator">=</span>utf8 ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_users_username <span class="keyword">on</span> users(username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_roles(</span><br><span class="line">  id <span class="type">bigint</span> auto_increment,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  role_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">constraint</span> pk_user_roles <span class="keyword">primary</span> key(id)</span><br><span class="line">) charset<span class="operator">=</span>utf8 ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_roles <span class="keyword">on</span> user_roles(username, role_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> roles_permissions(</span><br><span class="line">  id <span class="type">bigint</span> auto_increment,</span><br><span class="line">  role_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  permission <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">constraint</span> pk_roles_permissions <span class="keyword">primary</span> key(id)</span><br><span class="line">) charset<span class="operator">=</span>utf8 ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_roles_permissions <span class="keyword">on</span> roles_permissions(role_name, permission);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users(username,password)<span class="keyword">values</span>(<span class="string">&#x27;zhang&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>3、ini配置（shiro-jdbc.realm.ini）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">jdbcRealm&#x3D;org.apache.shiro.realm.jdbc.JdbcRealm</span><br><span class="line">dataSource&#x3D;com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">dataSource.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">dataSource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.2.62:3306&#x2F;shiro</span><br><span class="line">dataSource.username&#x3D;root</span><br><span class="line">dataSource.password&#x3D;mcprd</span><br><span class="line">jdbcRealm.dataSource&#x3D;$dataSource</span><br><span class="line">securityManager.realms&#x3D;$jdbcRealm</span><br></pre></td></tr></table></figure>

<h2 id="Authenticator及AuthenticationStrategy"><a href="#Authenticator及AuthenticationStrategy" class="headerlink" title="Authenticator及AuthenticationStrategy"></a>Authenticator及AuthenticationStrategy</h2><p>Authenticator的职责是验证用户账号，是Shiro API中身份验证核心的入口点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationInfo  <span class="title">authenticate</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException</span></span><br></pre></td></tr></table></figure>
<p>如果验证成功，将返回AuthenticationInfo验证信息；此信息中包含了身份及凭证；如果验证失败抛出相应的AuthenticationException实现。<br>SecurityManager接口集成了Authenticator，另外还有一个ModularRealAuthenticator实现，其委托了多个Realm进行验证，验证规则通过AuthenticationStrategy接口指定，默认提供的实现：<br><strong>FirstSuccessfulStrategy</strong>：只要有一个Realm验证通过即可，只返回第一个Realm身份验证成功的认证信息，其他忽略<br><strong>AtLeastOneSuccessfulStrategy</strong>:只要有一个Realm验证成功即可，和<code>FirstSuccessfulStrategy</code>不同点载于，返回所有Realm身份验证成功的认证信息<br><strong>AllSuccessfulStrategy</strong>:所有Realm验证成功，且返回所有的Realm验证成功信息，如果有一个失败就整个失败。</p>
<p><code>ModularRealmAuthenticator</code>默认使用<code>AtLeastOneSuccessfulStrategy</code>策略。<br>假设有三个Realm：</p>
<ul>
<li>myRealm1：用户名和密码分别为zhang/123的时候登录成功，并返回登录信息zhang/123</li>
<li>myRealm2：用户名和密码分别为wang/123的时候登录成功，并返回登录信息wang/123</li>
<li>myRealm3：用户名和密码分别为zhang/123的时候登录成功，并返回登录信息<a href="mailto:&#x7a;&#104;&#x61;&#110;&#103;&#x40;&#49;&#54;&#51;&#46;&#99;&#111;&#109;">&#x7a;&#104;&#x61;&#110;&#103;&#x40;&#49;&#54;&#51;&#46;&#99;&#111;&#109;</a>/123<br>myRealm3和myRealm1基本上一样，但是返回时的身份变了</li>
</ul>
<p>1、ini配置文件（shiro-authenticator-all-success.ini）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line"># 指定securityManager的authenticator实现</span><br><span class="line">authenticator&#x3D;org.apache.shiro.authc.pam.ModularRealmAuthenticator</span><br><span class="line">securityManager.authenticator&#x3D;$authenticator</span><br><span class="line"></span><br><span class="line"># 指定securityManager.authenticator的authenticationStrategy</span><br><span class="line">allSuccessfulStrategy&#x3D;org.apache.shiro.authc.pam.AllSuccessfulStrategy</span><br><span class="line">securityManager.authenticator.authenticationStrategy&#x3D;$allSuccessfulStrategy</span><br><span class="line"></span><br><span class="line">myRealm1&#x3D;com.shirotest.realm.MyRealm1</span><br><span class="line">myRealm2&#x3D;com.shirotest.realm.MyRealm2</span><br><span class="line">myRealm3&#x3D;com.shirotest.realm.MyRealm3</span><br><span class="line">securityManager.realms&#x3D;$myRealm1,$myRealm3</span><br></pre></td></tr></table></figure>
<p>2、MyRealm3的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyRealm3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/313:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm3</span> <span class="keyword">implements</span> <span class="title">Realm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;myrealm3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken authenticationToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationToken <span class="keyword">instanceof</span> UsernamePasswordToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String userName = (String)authenticationToken.getPrincipal();</span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[])authenticationToken.getCredentials());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;zhang&quot;</span>.equals(userName))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(userName+<span class="string">&quot;@163.com&quot;</span>,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、测试代码<br>3.1、测试全部验证成功并返回多条成功验证结果记录（ AllSuccessfulStrategy ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AuthenticatorTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/313:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAllSuccessfulStrategyWithSuccess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        login(<span class="string">&quot;shiro-authenticator-all-success.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到一个身份集合，其包含了Realm验证成功的身份信息</span></span><br><span class="line">        PrincipalCollection principalCollection = subject.getPrincipals();</span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>,principalCollection.asList().size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@Description</span> 常规测试登录代码</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> [configFile]</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span> zp</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@date</span> 2018/11/3 15:56</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String configFile)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">&quot;classpath:&quot;</span>+configFile);</span><br><span class="line"></span><br><span class="line">        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.2、测试不能通过所有验证，返回失败代码（AllSuccessfulStrategy）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line"># 指定securityManager的authenticator实现</span><br><span class="line">authenticator&#x3D;org.apache.shiro.authc.pam.ModularRealmAuthenticator</span><br><span class="line">securityManager.authenticator&#x3D;$authenticator</span><br><span class="line"></span><br><span class="line">#指定securityManager.authenticator的authenticationStrategy</span><br><span class="line">allSuccessfulStrategy&#x3D;org.apache.shiro.authc.pam.AllSuccessfulStrategy</span><br><span class="line">securityManager.authenticator.authenticationStrategy&#x3D;$allSuccessfulStrategy</span><br><span class="line"></span><br><span class="line">myRealm1&#x3D;com.shirotest.realm.MyRealm1</span><br><span class="line">myRealm2&#x3D;com.shirotest.realm.MyRealm2</span><br><span class="line">myRealm3&#x3D;com.shirotest.realm.MyRealm3</span><br><span class="line">securityManager.realms&#x3D;$myRealm1,$myRealm2</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected = UnknownAccountException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAllSucessfulStrategyWithFail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    login(<span class="string">&quot;shior-authenticator-all-fail.ini&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>shiro-authenticator-all-fail.ini</code> 与 <code>shiro-authenticator-all-success.ini</code>不同的配置是使用了securityManager.realms=$myRealm1,$myRealm2；即myRealm2验证失败。</p>
<p>对于AtLeastOneSuccessfulStrategy和FirstSuccessfulStrategy的区别，在与第一个是至少有一个满足就可以验证通过，第二个是只要找到一个就可以通过验证，并且返回第一个验证通过的Realm信息。</p>
<p>自定义AuthenticationStrategy实现：</p>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Shiro</category>
        <category>跟我学Shiro-张开涛</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>后端开发框架</tag>
        <tag>张开涛</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker教程</title>
    <url>/2020/07/02/Docker%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_84.jpg"></p>
<h2 id="Docker-教程"><a href="#Docker-教程" class="headerlink" title="Docker 教程"></a>Docker 教程</h2><h3 id="Docker-教程-1"><a href="#Docker-教程-1" class="headerlink" title="Docker 教程"></a>Docker 教程</h3><h4 id="Docker-的应用场景"><a href="#Docker-的应用场景" class="headerlink" title="Docker 的应用场景"></a>Docker 的应用场景</h4><ul>
<li>Web应用的自动化打包和发布</li>
<li>自动化测试和持续集成、发布</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用</li>
</ul>
<h4 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h4><p>Docker是一个用于开发、交付和运行应用程序的开放平台。DOcker使能够将应用程序与基础架构分开，从而可以快速交付软件。借助Docker，可以与管理应用程序相同的方式来管理基础架构。通过利用Docker的方法来快速交付，测试和部署代码，可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>
<ol>
<li>快速，一致的交付应用程序<br>Docker允许开发者使用提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期</li>
</ol>
<ul>
<li>开发者在本地编写代码，并使用Docker容器与同事共享工作</li>
<li>使用Docker将应用程序推送到测试环境中，并执行自动或手动测试</li>
<li>当开发人员发现错误时，他们可以在开发环境中对其进行秀谷，然后将其重新部署到测试环境中，以进行测试和验证</li>
<li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li>
</ul>
<ol start="2">
<li>响应式部署和扩展<br>Docker是基于容器的平台，允许高度可移植的工作负载。Docker容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上火混合环境中运行<br>DOcker的可移植性和轻量级的特点，还可以轻松的完成动态管理的工作负担，并根据业务需求指示，实现扩展或拆除应用程序和服务。</li>
<li>在同一硬件上运行更多工作负载<br>Docker轻巧快速。他为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker非常适合高密度环境以及中小型部署，而可以使用更少的资源做更多的事情。</li>
</ol>
<h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>Docker包含三个基本概念</p>
<ul>
<li>镜像（Image）：Docker镜像，就相当于是一个root文件系统。比如官方镜像ubuntu16.04就是包含了完整的一套Ubuntu最小系统的root文件系统</li>
<li>容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像时静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停。</li>
<li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。<br>Docker 使用客户端-服务器（C/S）架构模式，使用远程API来管理和创建Docker容器。<br>Docker容器通过Docker镜像来创建。<br>容器和镜像的关系类似于面向对象编程中的对象和类。Docker中容器是对象，镜像是类。<img src="/2020/07/02/Docker%E6%95%99%E7%A8%8B/screen_shot_1.png" class=""></li>
</ul>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Docker镜像（Images）</td>
<td>Docker镜像是用于创建DOcker容器的模板</td>
</tr>
<tr>
<td>Docker容器（Container）</td>
<td>容器是独立运行的一个或一组应用，是镜像运行时的实体</td>
</tr>
<tr>
<td>Docker客户端（Client）</td>
<td>Docker客户端通过命令或其他工具使用Docker SDK(<a href="https://docs.docker.com/develop/sdk/))%E4%B8%8EDocker%E7%9A%84%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%EF%BC%88daemon%EF%BC%89%E9%80%9A%E8%AE%AF">https://docs.docker.com/develop/sdk/))与Docker的守护进程（daemon）通讯</a></td>
</tr>
<tr>
<td>Docker主机（Host）</td>
<td>一个物理或者虚拟的机器用于执行Docker守护进程和容器</td>
</tr>
<tr>
<td>Docker Registry</td>
<td>Docker仓库用来保存镜像，可以理解为代码版本控制中的代码仓库 <br> Docker Hub(<a href="https://hub.docker.com/)%E6%8F%90%E4%BE%9B%E4%BA%86%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E9%9B%86%E5%90%88%E4%BE%9B%E4%BD%BF%E7%94%A8">https://hub.docker.com/)提供了庞大的镜像集合供使用</a> <br> 一个Docker Registry中可以包含多个仓库（Repositry）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像<br>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应的该软件的哥哥版本。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>的格式来制定具体是这个软件那个版本的镜像。如果不给出标签，将以latest作为默认标签</td>
</tr>
<tr>
<td>Docker Machine</td>
<td>Docker Machine是一个简单化Docker安装的命令行工具，通过一个简单的命令就即可在相应的平台上安装Docker</td>
</tr>
</tbody></table>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CentOS-Docker安装"><a href="#CentOS-Docker安装" class="headerlink" title="CentOS Docker安装"></a>CentOS Docker安装</h3><ol>
<li>如果之前安装过旧的版本，先卸载下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></li>
<li>使用仓库（Repository）安装方式（推荐）<br>首先需要 设置下Docker仓库，然后你可以从仓库中安装或更新Docker</li>
</ol>
<ul>
<li>设置仓库：安装<code>yum-utils</code>包（该包提供<code>yum-config-manager</code> 单元）然后设置稳定版仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>安装 Docker 引擎</li>
</ol>
<ul>
<li>安装最新版本的Docker引擎和容器，安装过程中会要求输入两次‘y’<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
Docker 已经安装完成，但是还没有启动</li>
<li>（安装最新版本的可略过本步骤）安装特定版本的Docker 引擎<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用版本</span></span><br><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure></li>
<li>根据指定版本安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>启动Docker<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li>运行<code>hello-world</code>镜像验证是否安装成功，显示<code>This message shows that your installation appears to be working correctly</code>表示安装成功<br>下面这个命令是下载一个测试镜像然后在容器中运行它，当容器运行后，将会打印相关信息然后退出<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run hello-world</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete</span><br><span class="line">Digest: sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><h3 id="Docker-Hello-world"><a href="#Docker-Hello-world" class="headerlink" title="Docker Hello world"></a>Docker Hello world</h3><p>Docker 允许你在容器内运行应用程序，使用<code>docker run</code>命令来在容器内运行一个应用程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-xxx-2-l</span><br><span class="line">- docker:docker的二进制执行文件</span><br><span class="line">- run:与前面的docker组合来运行一个容器</span><br><span class="line">- `ubuntu:15.10`:指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker就会从镜像仓库Docker Hub下载公共镜像</span><br><span class="line">- `/bin/<span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span>`:在启动的容器里面执行的命令</span><br><span class="line">完整意思：Docker以ubuntu15.10镜像创建一个新的容器，然后在容器里面执行bin/<span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span>，然后输出结果；当然也可以尝试下面的命令，会进入一个新的系统幺：</span><br><span class="line">```bash</span><br><span class="line">[root@hecs-x-xxxx-2-linux-xxxxx ~]<span class="comment"># docker run -it ubuntu bash</span></span><br><span class="line">root@70b1006ae6a1:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h4 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h4><p>我们通过docker的两个参数-i -t，让docker运行的容器实现“对话”的能力</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -it ubuntu:15.10 /bin/bash</span></span><br><span class="line"><span class="comment"># 进入一个ubuntu15.10系统的容器</span></span><br><span class="line">root@686f91a07af0:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>各个参数解析：</p>
<ul>
<li>-t：在新容器内指定一个伪终端或终端</li>
<li>-i：允许你对容器内的标准输入（STDIN）进行交互</li>
</ul>
<p>我们可以以通过exit命令或者Ctrl+D退出容器</p>
<h4 id="启动容器（后台模式）"><a href="#启动容器（后台模式）" class="headerlink" title="启动容器（后台模式）"></a>启动容器（后台模式）</h4><p>使用一下命令创建一个以<font color='red'>进程方式</font>运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -d ubuntu:15.10 /bin/sh -c &quot;while true;do echo hello world;sleep1;done&quot;</span></span><br><span class="line">2698163a0d659bd4d98d7ad3ec8dd6eb3027fb529dcc4159b8b2cef2a505724b</span><br></pre></td></tr></table></figure>
<p>在输出中，我们没有看到期望的“hello world”，而是一串长字符<br>2698163a0d659bd4d98d7ad3ec8dd6eb3027fb529dcc4159b8b2cef2a505724b<br>在这个长字符串叫做容器ID，对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么<br>首先，需要确认容器有在运行，可以通过docker ps 查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">2698163a0d65        ubuntu:15.10        <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   2 minutes ago       Up 2 minutes                            flamboyant_golick</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>CONTAINER ID：容器ID</li>
<li>IMAGE：使用的镜像</li>
<li>COMMAND：启动容器时运行的命令</li>
<li>CREATED：创建时间</li>
<li>STATUS：容器状态<ul>
<li>created：已创建</li>
<li>restarting：重启中</li>
<li>running：运行中</li>
<li>removing：前一种</li>
<li>paused：暂停</li>
<li>exited：停止</li>
<li>dead：死亡</li>
</ul>
</li>
<li>PORTS：容器的端口信息和使用的连接类型（tcp/udp）</li>
<li>NAMES：自动分配的容器名称</li>
</ul>
<p>在宿主主机内使用docker logs命令，查看容器内的标准输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]# docker logs 2b1b7a428627</span><br></pre></td></tr></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><p>shiyong <code>docker stop</code>命令来停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]# docker stop 2b1b7a428627</span><br></pre></td></tr></table></figure>

<h3 id="Docker-容器使用"><a href="#Docker-容器使用" class="headerlink" title="Docker 容器使用"></a>Docker 容器使用</h3><h4 id="Docker客户端"><a href="#Docker客户端" class="headerlink" title="Docker客户端"></a>Docker客户端</h4><p>docker客户端非常简单，可以输入docker命令查看Docker客户端的所有命令选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker</span></span><br><span class="line"></span><br><span class="line">Usage:	docker [OPTIONS] COMMAND</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime <span class="keyword">for</span> containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --config string      Location of client config files (default <span class="string">&quot;/root/.docker&quot;</span>)</span><br><span class="line">  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context <span class="built_in">set</span> with <span class="string">&quot;docker context use&quot;</span>)</span><br><span class="line">  -D, --debug              Enable debug mode</span><br><span class="line">  -H, --host list          Daemon socket(s) to connect to</span><br><span class="line">  -l, --log-level string   Set the logging level (<span class="string">&quot;debug&quot;</span>|<span class="string">&quot;info&quot;</span>|<span class="string">&quot;warn&quot;</span>|<span class="string">&quot;error&quot;</span>|<span class="string">&quot;fatal&quot;</span>) (default <span class="string">&quot;info&quot;</span>)</span><br><span class="line">      --tls                Use TLS; implied by --tlsverify</span><br><span class="line">      --tlscacert string   Trust certs signed only by this CA (default <span class="string">&quot;/root/.docker/ca.pem&quot;</span>)</span><br><span class="line">      --tlscert string     Path to TLS certificate file (default <span class="string">&quot;/root/.docker/cert.pem&quot;</span>)</span><br><span class="line">      --tlskey string      Path to TLS key file (default <span class="string">&quot;/root/.docker/key.pem&quot;</span>)</span><br><span class="line">      --tlsverify          Use TLS and verify the remote</span><br><span class="line">  -v, --version            Print version information and quit</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  context     Manage contexts</span><br><span class="line">  engine      Manage the docker engine</span><br><span class="line">  image       Manage images</span><br></pre></td></tr></table></figure>

<p>可以通过docker command –help 更深入的了解指定的Docker命令使用方法<br>例如我们要查看docker stats指令的具体使用方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker stats --help</span></span><br><span class="line"></span><br><span class="line">Usage:	docker stats [OPTIONS] [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Display a live stream of container(s) resource usage statistics</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-stream       Disable streaming stats and only pull the first result</span><br><span class="line">      --no-trunc        Do not truncate output</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h4><ol>
<li><p>获取镜像<br>如果本地没有ubuntu镜像，我们可以使用<code>docker pull</code>命令里载入ubuntu镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker pull ubuntu</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">Digest: sha256:35c4a2c15539c6c1e4e5fa4e554dac323ad0107d8eb5c582d6ff386b383b7dce</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker pull centos</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">6910e5a164f7: Pull complete</span><br><span class="line">Digest: sha256:4062bbdd1bb0801b0aa38e0f83dece70fb7a5e9bce223423a68de2d8b784b43b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></table></figure></li>
<li><p>启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">[root@92f340d92240 /]<span class="comment"># docker ps</span></span><br><span class="line">bash: docker: <span class="built_in">command</span> not found</span><br><span class="line">[root@92f340d92240 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动已停止运行的容器<br>查看所有的容器命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                            PORTS               NAMES</span><br><span class="line">83e3a5b2c60f        centos              <span class="string">&quot;/bin/bash&quot;</span>              About a minute ago   Exited (0) About a minute ago                         blissful_wright</span><br><span class="line">92f340d92240        centos              <span class="string">&quot;/bin/bash&quot;</span>              About a minute ago   Exited (127) About a minute ago                       priceless_burnell</span><br><span class="line">2698163a0d65        ubuntu:15.10        <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   25 minutes ago       Exited (137) 19 minutes ago                           flamboyant_golick</span><br><span class="line">686f91a07af0        ubuntu:15.10        <span class="string">&quot;/bin/bash&quot;</span>              34 minutes ago       Exited (0) 30 minutes ago                             epic_tereshkova</span><br><span class="line">3ae7d786d261        ubuntu:15.10        <span class="string">&quot;/bin/echo &#x27;Hello Wo…&quot;</span>   18 hours ago         Exited (0) 18 hours ago                               vigilant_payne</span><br></pre></td></tr></table></figure>
<p>使用docker start 启动一个已停止的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker start 92f340d92240</span></span><br></pre></td></tr></table></figure></li>
<li><p>后台运行<br>在大部分场景下，我们希望docker的服务是在后台运行的，我们可以通过<code>-d</code>指定容器的运行模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -itd --name ubuntu-test ubuntu:15.10 /bin/sh</span></span><br><span class="line">dd3cff7cf16a8e73187be4fb62e411822d9ffc81f1870e9078a1b9f777d3f652</span><br></pre></td></tr></table></figure>
<p><font color='red'>注：</font>加了<code>-d</code>参数默认不会进入容器，想要进入容器要使用指令<code>docker exec</code></p>
</li>
<li><p>停止/重启一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker stop &lt;容器ID&gt;</span><br></pre></td></tr></table></figure>
<p>容器可以通过<code>docker restart</code>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker restart  dd3cff7cf16a</span></span><br><span class="line">dd3cff7cf16a</span><br></pre></td></tr></table></figure></li>
<li><p>进入容器<br>在使用<code>-d</code>参数的时候，容器启动会进入后台。此时如果想要进入容器，可以通过下面指令进入</p>
</li>
</ol>
<ul>
<li>docker attach</li>
<li>docker exec:推荐使用该命令，因为此退出容器中断，不会导致容器停止</li>
</ul>
<p>下面演示使用docker exec 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker exec -it dd3cff7cf16a /bin/bash</span></span><br><span class="line">root@dd3cff7cf16a:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">dd3cff7cf16a        ubuntu:15.10        <span class="string">&quot;/bin/sh&quot;</span>           23 minutes ago      Up 18 minutes                           ubuntu-test</span><br></pre></td></tr></table></figure>
<p>可以看到上面的退出之后，容器还是在运行着的<br>5. 导出和导入容器<br>如果要导出本地某个容器，可以使用<code>docker export</code>命令，使用下面的命令就可以导出容器快照到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxxx ~]<span class="comment"># docker export dd3cff7cf16a &gt; ubuntu.tar.gz</span></span><br><span class="line">[root@hecs-x-medium-2-linux-xxxxx ~]<span class="comment"># ls</span></span><br><span class="line">ubuntu.tar.gz</span><br></pre></td></tr></table></figure>

<p>导入容器快照<br>可以使用<code>docker import</code>从容器快照文件中在导入镜像，以下实例快照ubuntu.tar.gz 导入到镜像test/ubuntu:v1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># cat ubuntu.tar.gz|docker import - test/ubuntu:v1</span></span><br><span class="line">sha256:8837160e99131307a3b98bc357624a6a883888b3ec7cb6837f08388012538ab7</span><br></pre></td></tr></table></figure>
<p>此外，也可以通过URL或者某个目录导入，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxxx ~]<span class="comment">#  docker import http://example.com/exampleimage.tgz example/imagerepo</span></span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除容器使用<code>docker rm</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxxx ~]<span class="comment"># docker rm -f dd3cff7cf16a</span></span><br><span class="line">dd3cff7cf16a</span><br></pre></td></tr></table></figure>
<p>下面这个命令可以清零掉所有处于终止状态的容器</p>
<h3 id="运行一个web应用"><a href="#运行一个web应用" class="headerlink" title="运行一个web应用"></a>运行一个web应用</h3><p>下面将在docker 容器中运行一个Python Flask应用来运行一个web应用<br>首先把镜像拉去下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker pull training/webapp</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from training/webapp</span><br></pre></td></tr></table></figure>
<p>然后运行镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -d -P training/webapp python app.py</span></span><br><span class="line">a9c60ebe355aa679fa9989a36b5b3ecbf22a66ddbc854e38258d9250c9c7c0e8</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">a9c60ebe355a        training/webapp     <span class="string">&quot;python app.py&quot;</span>     5 seconds ago       Up 3 seconds        0.0.0.0:32768-&gt;5000/tcp   bold_ellis</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-d:让容器在后台运行</li>
<li>-P：将容器内部使用的网络端口随机映射到我们使用的主机上</li>
</ul>
<h3 id="查看WEB应用"><a href="#查看WEB应用" class="headerlink" title="查看WEB应用"></a>查看WEB应用</h3><p>使用docker ps 来查看我们正在运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                     NAMES</span><br><span class="line">a9c60ebe355a        training/webapp     <span class="string">&quot;python app.py&quot;</span>     About a minute ago   Up About a minute   0.0.0.0:32768-&gt;5000/tcp   bold_ellis</span><br></pre></td></tr></table></figure>
<p>这里多了端口信息(PORTS)<br>Docker 开放了5000端口映射到主机端口32768端口上，我们可以使用浏览器访问WEB应用<br>也可以通过-p参数来设置不一样的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]$ docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line">84f844338385cb95414ae1c15b3227a0a6017a96c3f7bd5f12b30f2223c89e36</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS                    NAMES</span><br><span class="line">84f844338385        training/webapp     <span class="string">&quot;python app.py&quot;</span>     12 seconds ago      Up 11 seconds                 0.0.0.0:5000-&gt;5000/tcp   strange_bassi</span><br></pre></td></tr></table></figure>

<h3 id="网络端口快捷方式"><a href="#网络端口快捷方式" class="headerlink" title="网络端口快捷方式"></a>网络端口快捷方式</h3><p>通过<code>docker ps</code>可以查看端口映射情况，docker 还提供了另一个快捷方式<code>docker port</code>，可以指定容器ID查看端口情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker port 84f844338385</span></span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="查看WEB应用程序日志"><a href="#查看WEB应用程序日志" class="headerlink" title="查看WEB应用程序日志"></a>查看WEB应用程序日志</h3><p>docker logs[ID或者名字] 可以查看容器内部的标准日志输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxxxx ~]<span class="comment"># docker logs aa53c237d4e5</span></span><br><span class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>-f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</p>
<h3 id="查看WEB应用程序容器的进程"><a href="#查看WEB应用程序容器的进程" class="headerlink" title="查看WEB应用程序容器的进程"></a>查看WEB应用程序容器的进程</h3><p>我们还可以通过<code>docker top </code>来查看容器内部的运行进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxxx ~]<span class="comment"># docker top aa53c237d4e5</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                3627                3611                0                   08:59               ?                   00:00:00            python app.py</span><br></pre></td></tr></table></figure>

<h3 id="检查WEB应用程序"><a href="#检查WEB应用程序" class="headerlink" title="检查WEB应用程序"></a>检查WEB应用程序</h3><p>使用<code>docker inspect</code> 来查看docker的底层信息。它会返回一个JSON文件记录着Docker容器的配置和状态信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker inspect aa53c237d4e5</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-07-06T00:59:34.605869182Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;app.py&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 3627,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2020-07-06T00:59:34.851310537Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:6fae60ef344644649a39240b94d73b8ba9c67f898ede85cf8e947a887b3e6557&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ResolvConfPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed/resolv.conf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostnamePath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed/hostname&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostsPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed/hosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LogPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed/aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed-json.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;/laughing_hofstadter&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RestartCount&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h3 id="停止WEB应用容器"><a href="#停止WEB应用容器" class="headerlink" title="停止WEB应用容器"></a>停止WEB应用容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker stop aa53c237d4e5</span></span><br><span class="line">aa53c237d4e5</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="重启WEB应用程序"><a href="#重启WEB应用程序" class="headerlink" title="重启WEB应用程序"></a>重启WEB应用程序</h3><p>已经停止的容器，我们可以使用命令<code>docker start</code>来启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker start aa53c237d4e5</span></span><br><span class="line">aa53c237d4e5</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p><code>docker ps -l</code>查询最后一次创建的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker ps -l</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">aa53c237d4e5        training/webapp     <span class="string">&quot;python app.py&quot;</span>     22 minutes ago      Up 46 seconds       0.0.0.0:5000-&gt;5000/tcp   laughing_hofstadter</span><br></pre></td></tr></table></figure>
<p>正在运行的容器，我们可以使用<code>docker restart</code>命令来重启</p>
<h3 id="移除WEB应用容器"><a href="#移除WEB应用容器" class="headerlink" title="移除WEB应用容器"></a>移除WEB应用容器</h3><p>我们可以使用<code>docker rm</code>命令来删除不需要的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker rm aa53c237d4e5</span></span><br><span class="line">aa53c237d4e5</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>删除容器时，容器必须是停止状态，否则会报如下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker rm aa53c237d4e5</span></span><br><span class="line">Error response from daemon: You cannot remove a running container aa53c237d4e5ef476203c3712ed9b60ac929ededc1df6f659ad8535d451739ed. Stop the container before attempting removal or force remove</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a>Docker 镜像使用</h2><p>当运行容器时，使用的镜像如果在本地中不存在，docker就会自动从docker镜像仓库中下载，默认是<code>Docker Hub</code>公共镜像源下载</p>
<h3 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h3><p>我们可以使用<code>docker images</code>来列出本地主机上的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"><span class="built_in">test</span>/ubuntu         v1                  8837160e9913        2 days ago          119MB</span><br><span class="line">ubuntu              latest              74435f89ab78        2 weeks ago         73.9MB</span><br><span class="line">centos              latest              831691599b88        2 weeks ago         215MB</span><br><span class="line">hello-world         latest              bf756fb1ae65        6 months ago        13.3kB</span><br><span class="line">ubuntu              15.10               9b9cb95443b5        3 years ago         137MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        5 years ago         349MB</span><br></pre></td></tr></table></figure>
<p>各个选项说明：</p>
<ul>
<li>REPOSITORY：表示镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像ID</li>
<li>CREATED：镜像创建时间</li>
<li>SIZE：镜像大小<br>同一个仓库源可以有多个TAG，代表这个仓库源的不同个版本，使用REPOSITORY:TAG来定义不同的镜像<h3 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a>获取一个新的镜像</h3>当在本地主机上使用一个不存在的镜像时Docker就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用<code>docker pull</code>命令下载它。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker pull centos</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">Digest: sha256:4062bbdd1bb0801b0aa38e0f83dece70fb7a5e9bce223423a68de2d8b784b43b</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></table></figure>
下载完成后，我们可以直接使用这个镜像来运行容器。<h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3>可以从Docker Hub网站来搜索镜像，Docker Hub的网址为：<a href="https://hub.docker.com/">https://hub.docker.com/</a><br>可以使用<code>docker search</code>命令来搜索镜像。比如我们需要一个<code>httpd</code>的镜像来作为我们的web服务。我们可以通过<code>docker search</code>命令搜索httpd来寻找适合我们的镜像<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker search httpd</span></span><br><span class="line">NAME                                    DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">httpd                                   The Apache HTTP Server Project                  3088                [OK]                </span><br><span class="line">centos/httpd-24-centos7                 Platform <span class="keyword">for</span> running Apache httpd 2.4 or bui…   33                                      </span><br><span class="line">centos/httpd                                                                            29                                      [OK]</span><br><span class="line">arm32v7/httpd                           The Apache HTTP Server Project                  9                                       </span><br><span class="line">salim1983hoop/httpd24                   Dockerfile running apache config                2                                       [OK]</span><br><span class="line">lead4good/httpd-fpm                     httpd server <span class="built_in">which</span> connects via fcgi proxy h…   1                                       [OK]</span><br><span class="line">solsson/httpd-openidc                   mod_auth_openidc on official httpd image, ve…   1                                       [OK]</span><br><span class="line">jonathanheilmann/httpd-alpine-rewrite   httpd:alpine with enabled mod_rewrite           1                                       [OK]</span><br><span class="line">publici/httpd                           httpd:latest                                    1                                       [OK]</span><br><span class="line">clearlinux/httpd                        httpd HyperText Transfer Protocol (HTTP) ser…   1                                       </span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li>NAME：镜像仓库源的名称</li>
<li>DESCRIPTION：镜像的描述</li>
<li>OFFICIAL：是否docker官方发布</li>
<li>STARS:类似github里面的star，表示点赞、喜欢的意思</li>
<li>AUTOMATED：自动构建</li>
</ul>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>使用上面的httpd官方版本的镜像，使用docker pull来下载镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxxx ~]<span class="comment"># docker pull httpd</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/httpd</span><br><span class="line">8559a31e96f4: Downloading [============&gt;                                      ]  6.716MB/27.1MB</span><br><span class="line">bd517d441028: Download complete</span><br><span class="line">f67007e59c3c: Downloading [===&gt;                                               ]  772.6kB/10.37MB</span><br><span class="line">83c578481926: Waiting</span><br><span class="line">f3cbcb88690d: Waiting</span><br></pre></td></tr></table></figure>
<p>下载完成后，我们就可以运行这个镜像了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run httpd</span></span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>镜像删除使用<code>docker rmi</code>命令，比如我们删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker rmi hello-world</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9</span><br><span class="line">Deleted: sha256:bf756fb1ae65adf866bd8c456593cd24beb6a0a061dedf42b26a993176745f6b</span><br><span class="line">Deleted: sha256:9c27e219663c25e0f28493790cc0b88bc973ba3b1686355f221c38a36978ac63</span><br></pre></td></tr></table></figure>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>当从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改</p>
<ul>
<li>从已经创建的容器中更新镜像，并且提交这个镜像</li>
<li>使用Dockerfile指令来创建一个新的镜像</li>
</ul>
<h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><p>更新镜像之前，需要使用镜像来创建一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -it ubuntu:15.10 /bin/bash</span></span><br><span class="line">root@79b87b167653:/<span class="comment"># apt-get update</span></span><br></pre></td></tr></table></figure>
<p>在运行的容器内使用 <code>apt-get update</code> 命令进行更新<br>在完成操作之后，输入<code>exit</code>命令退出容器<br>此时刚刚运行的容器就是我们更改后的容器，可以通过docker commit提交容器副本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker commit -m=&quot;Test commit&quot; -a=&quot;daniel&quot;  a39b5e9c2b8c smartcore/ubuntu:v2</span></span><br><span class="line">sha256:179f46c4f9063855e8685f899fcxxxxxb3763124684a9a126c79e4d136988</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-m:提交说明</li>
<li>-a:镜像作者</li>
<li>a39b5e9c2b8c:容器ID</li>
<li>smartcore/ubuntu:v2：指定要创建的目标镜像名<br>使用<code>docker images</code>命令查看我们的新镜像<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">smartcore/ubuntu    v2                  179f46c4f906        50 minutes ago      349MB</span><br></pre></td></tr></table></figure>
使用新镜像启动一个容器<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">smartcore/ubuntu    v2                  179f46c4f906        50 minutes ago      349MB</span><br><span class="line">[root@hecs-x-medium-2-linux-xxxx ~]<span class="comment"># docker run -it smartcore/ubuntu:v2 /bin/bash</span></span><br><span class="line">root@a98626036409:/opt/webapp<span class="comment">#   </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用命令<code>docker build</code>，从零开始创建一个新的镜像。为此，我们需要创建一个Dockerfile文件，其中包含一卒之令来告诉Docker如何构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx docker]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos:7.2.1511</span><br><span class="line">MAINTAINER Fisher <span class="string">&quot;Daniel&quot;</span></span><br><span class="line">RUN /bin/<span class="built_in">echo</span> <span class="string">&#x27;root:xydtech123&#x27;</span>|chpasswd</span><br><span class="line">RUN useradd sem</span><br><span class="line">RUN /bin/<span class="built_in">echo</span> <span class="string">&#x27;sem:xydtech123&#x27;</span>|chpasswd</span><br><span class="line">RUN /bin/<span class="built_in">echo</span> -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/<span class="built_in">local</span></span><br><span class="line">EXPOSE 22</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>
<p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的<br>第一条FROM，指定使用哪个镜像源<br>RUN指令告诉docker 在镜像内执行命令，安装了什么<br>然后，我们使用Dockerfile文件，通过<code>docker build</code>(注意最后还有个点，是指定Dockerfile的目录)命令来构建一个镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx docker]# docker build -t sem&#x2F;centos:7.2.1511 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1&#x2F;9 : FROM centos:7.2.1511</span><br><span class="line"> ---&gt; 9aec5c5fe4ba</span><br><span class="line">Step 2&#x2F;9 : MAINTAINER Fisher &quot;Daniel&quot;</span><br><span class="line"> ---&gt; Running in 8445c6f27d59</span><br><span class="line">Removing intermediate container 8445c6f27d59</span><br><span class="line"> ---&gt; 95e03a3fd461</span><br><span class="line">Step 3&#x2F;9 : RUN &#x2F;bin&#x2F;echo &#39;root:xydtech123&#39;|chpasswd</span><br><span class="line"> ---&gt; Running in 43fbc2461433</span><br><span class="line">Removing intermediate container 43fbc2461433</span><br><span class="line"> ---&gt; 87c6207f2280</span><br><span class="line">Step 4&#x2F;9 : RUN useradd sem</span><br><span class="line"> ---&gt; Running in 80a7d1c778b5</span><br><span class="line">Removing intermediate container 80a7d1c778b5</span><br><span class="line"> ---&gt; a407d4394f54</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
<p>参数说明:</p>
<ul>
<li>-t:指定要创建的目标镜像名<br>.:Dockerfile文件所在目录，可以指定Dockerfile的绝对路径<br>使用docker images查看创建的镜像已经在列表中存在，镜像ID为：9a52aadd3648<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-xxxx docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sem/centos          7.2.1511            9a52aadd3648        47 seconds ago      195MB</span><br><span class="line">smartcore/ubuntu    v2                  179f46c4f906        About an hour ago   349MB</span><br></pre></td></tr></table></figure>
使用新的镜像创建容器<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker run -it sem/centos:7.2.1511 /bin/bash</span></span><br><span class="line">[root@5393673efc17 /]<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">[root@5393673efc17 /]<span class="comment"># id sem</span></span><br><span class="line">uid=1000(sem) gid=1000(sem) groups=1000(sem)</span><br></pre></td></tr></table></figure>
从上面的新镜像已经包含了上面创建的用户sem<h3 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h3>可以通过docker tag命令，为镜像添加一个新的标签</li>
</ul>
<ol>
<li>首先使用docker images 查看目前已有的镜像<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sem/centos          7.2.1511            9a52aadd3648        13 minutes ago      195MB</span><br></pre></td></tr></table></figure></li>
<li>把IMAGE ID为9a52aadd3648的TAG修改为7.2<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker tag 9a52aadd3648 daniel/centos:v3</span></span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sem/centos          7.2                 9a52aadd3648        3 hours ago         195MB</span><br><span class="line">sem/centos          7.2.1511            9a52aadd3648        3 hours ago         195MB</span><br><span class="line">daniel/centos       v3                  9a52aadd3648        3 hours ago         195MB</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Docker容器连接"><a href="#Docker容器连接" class="headerlink" title="Docker容器连接"></a>Docker容器连接</h2><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><p>首先使用命令<code>docker network create</code>创建一个新的Docker网络，然后使用命令<code>docker network ls</code>查看建立的网络</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]# docker network create -d bridge test-net</span><br><span class="line">786b44147e9e885c65e6ee5597832027acd2d48daf49074a495e8f5502a91a13</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">fc82f80ad8ea        bridge              bridge              local</span><br><span class="line">663856490eac        host                host                local</span><br><span class="line">6bf6dea57a12        none                null                local</span><br><span class="line">786b44147e9e        test-net            bridge              local</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-d：参数指定Docker网络类型，有bridge，overlay<h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3>运行两个新的容器并连接到新建的<code>test-net</code>网络：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]# docker run -itd --name&#x3D;&quot;test1&quot; --network test-net centos:7 &#x2F;bin&#x2F;bash</span><br><span class="line">Unable to find image &#39;centos:7&#39; locally</span><br><span class="line">7: Pulling from library&#x2F;centos</span><br><span class="line">524b0c1e57f8: Pull complete</span><br><span class="line">Digest: sha256:e9ce0b76f29f942502facd849f3e468232492b259b9d9f076f71b392293f1582</span><br><span class="line">Status: Downloaded newer image for centos:7</span><br><span class="line">ed51b979348a00dcce6f0147bff04a5685f39625f4620dd2d11527385ec523e6</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">ed51b979348a        centos:7            &quot;&#x2F;bin&#x2F;bash&quot;         5 seconds ago       Up 5 seconds                            test1</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]# docker run -itd --name&#x3D;&quot;test2&quot; --network test-net centos:7 &#x2F;bin&#x2F;bash</span><br><span class="line">78846bd75ddb85801af29423d9d153f533e7595e6bcf687e50bf1f95cc948dd6</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">78846bd75ddb        centos:7            &quot;&#x2F;bin&#x2F;bash&quot;         3 seconds ago       Up 2 seconds                            test2</span><br><span class="line">ed51b979348a        centos:7            &quot;&#x2F;bin&#x2F;bash&quot;         17 seconds ago      Up 16 seconds                           test1</span><br></pre></td></tr></table></figure>
测试两个容器之间的网络<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@78846bd75ddb /]<span class="comment"># ping test1</span></span><br><span class="line">PING test1 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from test1.test-net (172.18.0.2): icmp_seq=1 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from test1.test-net (172.18.0.2): icmp_seq=2 ttl=64 time=0.050 ms</span><br><span class="line">--- test1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.050/0.051/0.052/0.001 ms</span><br><span class="line">[root@78846bd75ddb /]<span class="comment"># ping test2</span></span><br><span class="line">PING test2 (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 78846bd75ddb (172.18.0.3): icmp_seq=1 ttl=64 time=0.015 ms</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h3><ol>
<li>统一设置DNS配置信息<br>可以在宿主机的/etc/docker/daemon.json文件中增加以下内容来设置全部容器的DNS<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;dns&quot;</span>:[</span><br><span class="line">		<span class="string">&quot;144.144.144.144&quot;</span>,</span><br><span class="line">		<span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
设置后，启动容器的DNS会自动配置为144.144.144.144和8.8.8.8<br>配置完，需要重启docker才能生效<code>service docker restart</code><br>查看容器的DNS是否生效可以使用一下命令，它会输出容器的DNS信息：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># service docker restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart  docker.service</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># service  docker status</span></span><br><span class="line">Redirecting to /bin/systemctl status  docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue 2020-07-07 15:54:12 CST; 16s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 9989 (dockerd)</span><br><span class="line">    Tasks: 9</span><br><span class="line">   Memory: 42.8M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─9989 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">......</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                            PORTS               NAMES</span><br><span class="line">78846bd75ddb        centos:7            <span class="string">&quot;/bin/bash&quot;</span>         24 minutes ago      Exited (137) About a minute ago                       test2</span><br><span class="line">ed51b979348a        centos:7            <span class="string">&quot;/bin/bash&quot;</span>         25 minutes ago      Exited (137) About a minute ago                       test1</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker start 78846bd75ddb ed51b979348a</span></span><br><span class="line">78846bd75ddb</span><br><span class="line">ed51b979348a</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker run -it --rm ubuntu  cat etc/resolv.conf</span></span><br><span class="line">search openstacklocal</span><br><span class="line">nameserver 144.144.144.144</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">options single-request-reopen</span><br><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li>手动指定容器配置<br>如果指向在指定的容器设置DNS，则可以使用一下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 docker]<span class="comment"># docker run -it --rm -h host_ubuntu --dns=114.114.114.114 --dns-search=test.com ubuntu</span></span><br><span class="line">root@host_ubuntu:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>
参数说明：</li>
</ol>
<ul>
<li>-h HOSTNAME或者–hostname=HOSTNAME :设定容器的主机名，他会被卸载容器的/etc/hostname和/etc/hosts</li>
<li>–dns=IP_ADDRESS:添加DNS服务器到容器的/etc/resolv.cnf中，让容器用这个服务器来解析所有不在/etc/hosts中的主机名</li>
<li>–dns-search=DOMAIN：设定容器的搜索域，当设定搜索域为example.com时，在搜索一个名为host的主机时，DNS不仅搜索host，还会搜索host.example.com</li>
</ul>
<p>如果在容器启动时没有指定–dns和–dns-search，Docker会默认用宿主主机上的/etc/resolv.conf来配置容器的DNS</p>
<h2 id="Docker仓库管理"><a href="#Docker仓库管理" class="headerlink" title="Docker仓库管理"></a>Docker仓库管理</h2><p>仓库是集中存放镜像的地方，下面简单介绍下<code>Docker Hub</code>。目前仓库的服务商有很多，但操作都是一样的</p>
<h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p>目前Docker官方维护的一个公共仓库<a href="https://hub.docker.com/">Docker Hub</a><br>大部分需求都可以通过在Docker Hub上直接下载镜像来实现</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>在Docker hub上免费注册一个Docker账号</p>
<h4 id="登录和退出"><a href="#登录和退出" class="headerlink" title="登录和退出"></a>登录和退出</h4><p>登录需要输入用户名和密码，登录成功后，我们可以从docker hub上拉去自己账号下面的全部镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hecs-x-medium-2-linux-20200701102124 ~]<span class="comment"># docker login</span></span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username: donkeyzp</span></span><br><span class="line"><span class="string">Password:</span></span><br><span class="line"><span class="string">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span></span><br><span class="line"><span class="string">Configure a credential helper to remove this warning. See</span></span><br><span class="line"><span class="string">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Login Succeeded</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>容器</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>webuploader同一页面多实例上传图片及回显</title>
    <url>/2019/01/25/webuploader%E5%90%8C%E4%B8%80%E9%A1%B5%E9%9D%A2%E5%A4%9A%E5%AE%9E%E4%BE%8B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%8F%8A%E5%9B%9E%E6%98%BE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_9.jpg"></p>
<h3 id="1-业务页面JSP-goods-detail-edit-jsp"><a href="#1-业务页面JSP-goods-detail-edit-jsp" class="headerlink" title="1. 业务页面JSP(goods_detail_edit.jsp)"></a>1. 业务页面JSP(goods_detail_edit.jsp)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;fmt&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;fmt&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	String path &#x3D; request.getContextPath();</span><br><span class="line">    String basePath &#x3D; request.getScheme() + &quot;:&#x2F;&#x2F;&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + path + &quot;&#x2F;&quot;;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href&#x3D;&quot;&lt;%&#x3D;basePath%&gt;&quot;&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;overview &amp; stats&quot; &#x2F;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">&lt;link href&#x3D;&quot;static&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;</span><br><span class="line">&lt;link href&#x3D;&quot;static&#x2F;css&#x2F;bootstrap-responsive.min.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;static&#x2F;css&#x2F;font-awesome.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- 下拉框 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;static&#x2F;css&#x2F;chosen.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;static&#x2F;css&#x2F;ace.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;static&#x2F;css&#x2F;ace-responsive.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;static&#x2F;css&#x2F;ace-skins.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;static&#x2F;js&#x2F;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!--提示框--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;static&#x2F;js&#x2F;jquery.tips.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 上传图片 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;plugins&#x2F;webuploader&#x2F;webuploader.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;plugins&#x2F;webuploader&#x2F;style.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">td input &#123;</span><br><span class="line">	width: 97%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tr th &#123;</span><br><span class="line">	font-size: 13px;</span><br><span class="line">	font-weight: bold;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#wrapper &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#uploader .placeholder &#123;</span><br><span class="line">	background: url(plugins&#x2F;webuploader&#x2F;image.png) center 23px no-repeat;</span><br><span class="line">	padding-top: 88px;</span><br><span class="line">	min-height: 110px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form action&#x3D;&quot;goodsDetail&#x2F;$&#123;msg &#125;.do&quot; name&#x3D;&quot;goodsForm&quot; id&#x3D;&quot;goodsForm&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">		&lt;div id&#x3D;&quot;zhongxin&quot;&gt;</span><br><span class="line">			&lt;table id&#x3D;&quot;table_report&quot; class&#x3D;&quot;table table-striped table-bordered table-hover&quot;&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;商品编码:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td&gt;&lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;checkGoodsCode&quot; value&#x3D;&quot;$&#123;pd.goods_code&#125;&quot; &#x2F;&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;GOODS_CODE&quot; id&#x3D;&quot;GOODS_CODE&quot; value&#x3D;&quot;$&#123;pd.goods_code&#125;&quot; maxlength&#x3D;&quot;6&quot; placeholder&#x3D;&quot;请输入商品编码&quot;</span><br><span class="line">						title&#x3D;&quot;商品编码&quot; onblur&#x3D;&quot;checkHasCode()&quot; &#x2F;&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;商品类型:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td&gt;&lt;select class&#x3D;&quot;chzn-select&quot; name&#x3D;&quot;GOODS_TYPE&quot; id&#x3D;&quot;GOODS_TYPE&quot; data-placeholder&#x3D;&quot;请选择商品类型&quot; style&#x3D;&quot;vertical-align:top;width: 42%&quot;&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">							&lt;c:forEach items&#x3D;&quot;$&#123;cateGoryList&#125;&quot; var&#x3D;&quot;cateGory&quot;&gt;</span><br><span class="line">								&lt;option value&#x3D;&quot;$&#123;cateGory.GOODS_TYPE&#125;&quot;</span><br><span class="line">									&lt;c:if test&#x3D;&quot;$&#123;pd.goods_type&#x3D;&#x3D;cateGory.GOODS_TYPE&#125;&quot;&gt;selected&lt;&#x2F;c:if&gt;&gt;$&#123;cateGory.DESCRIPTION &#125;</span><br><span class="line">								&lt;&#x2F;option&gt;</span><br><span class="line">							&lt;&#x2F;c:forEach&gt;</span><br><span class="line">					&lt;&#x2F;select&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;商品名称:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;GOODS_NAME&quot; id&#x3D;&quot;GOODS_NAME&quot; value&#x3D;&quot;$&#123;pd.goods_name &#125;&quot; maxlength&#x3D;&quot;6&quot; placeholder&#x3D;&quot;请输入商品名称&quot; title&#x3D;&quot;商品名称&quot; &#x2F;&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;商品别名:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;GOODS_ABBR_NAME&quot; id&#x3D;&quot;GOODS_ABBR_NAME&quot; value&#x3D;&quot;$&#123;pd.goods_abbr_name &#125;&quot; maxlength&#x3D;&quot;64&quot; placeholder&#x3D;&quot;请输入商品别名&quot; title&#x3D;&quot;商品别名&quot; &#x2F;&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;特殊商品:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td style&#x3D;&quot;vertical-align:top;&quot;&gt;&lt;select class&#x3D;&quot;chzn-select&quot; name&#x3D;&quot;IS_SPECIAL&quot; id&#x3D;&quot;IS_SPECIAL&quot; data-placeholder&#x3D;&quot;是否特殊商品&quot; style&#x3D;&quot;vertical-align:top;width: 42%&quot;&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;Y&quot; &lt;c:if test&#x3D;&quot;$&#123;pd.is_special&#x3D;&#x3D;&#39;Y&#39;&#125;&quot;&gt;selected&lt;&#x2F;c:if&gt;&gt;特殊商品&lt;&#x2F;option&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;N&quot; &lt;c:if test&#x3D;&quot;$&#123;pd.is_special&#x3D;&#x3D;&#39;N&#39;&#125;&quot;&gt;selected&lt;&#x2F;c:if&gt;&gt;非特殊商品&lt;&#x2F;option&gt;</span><br><span class="line">					&lt;&#x2F;select&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;是否有效:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td style&#x3D;&quot;vertical-align:top;&quot;&gt;&lt;select class&#x3D;&quot;chzn-select&quot; name&#x3D;&quot;IS_VALID&quot; id&#x3D;&quot;IS_VALID&quot; data-placeholder&#x3D;&quot;是否有效&quot; style&#x3D;&quot;width: 42%&quot;&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;Y&quot; &lt;c:if test&#x3D;&quot;$&#123;pd.is_valid&#x3D;&#x3D;&#39;Y&#39;&#125;&quot;&gt;selected&lt;&#x2F;c:if&gt;&gt;有效&lt;&#x2F;option&gt;</span><br><span class="line">							&lt;option value&#x3D;&quot;N&quot; &lt;c:if test&#x3D;&quot;$&#123;pd.is_valid&#x3D;&#x3D;&#39;N&#39;&#125;&quot;&gt;selected&lt;&#x2F;c:if&gt;&gt;无效&lt;&#x2F;option&gt;</span><br><span class="line">					&lt;&#x2F;select&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;th style&#x3D;&quot;vertical-align: middle&quot;&gt;菜单编码:&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;MENU_CODE&quot; id&#x3D;&quot;MENU_CODE&quot; value&#x3D;&quot;$&#123;pd.menu_code &#125;&quot; maxlength&#x3D;&quot;6&quot; placeholder&#x3D;&quot;请输入菜单编码&quot; title&#x3D;&quot;菜单编码&quot; &#x2F;&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;td colspan&#x3D;&quot;4&quot;&gt;&lt;textarea name&#x3D;&quot;GOODS_DESC&quot; id&#x3D;&quot;GOODS_DESC&quot; rows&#x3D;&quot;5&quot; cols&#x3D;&quot;50&quot; style&#x3D;&quot;width:99%;&quot; placeholder&#x3D;&quot;请选输入商品描述&quot; title&#x3D;&quot;请选输入商品描述&quot;&gt;$&#123;pd.goods_desc&#125;&lt;&#x2F;textarea&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;td colspan&#x3D;&quot;4&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;FILE_PATH&quot; id&#x3D;&quot;FILE_PATH&quot; value&#x3D;&quot;$&#123;pd.FILE_PATH&#125;&quot; &#x2F;&gt;</span><br><span class="line">						&lt;div id&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">							&lt;div id&#x3D;&quot;container&quot;  class&#x3D;&quot;uploadFile&quot;&gt;</span><br><span class="line">								&lt;!--头部，相册选择和格式选择--&gt;</span><br><span class="line">									&lt;div id&#x3D;&quot;uploader&quot;&gt;</span><br><span class="line">										&lt;div class&#x3D;&quot;queueList&quot;&gt;</span><br><span class="line">											&lt;div id&#x3D;&quot;dndArea&quot; class&#x3D;&quot;placeholder&quot;&gt;</span><br><span class="line">												&lt;div id&#x3D;&quot;filePicker&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">												&lt;p&gt;或将照片拖到这里，单次最多可选5张&lt;&#x2F;p&gt;</span><br><span class="line">											&lt;&#x2F;div&gt;</span><br><span class="line">										&lt;&#x2F;div&gt;</span><br><span class="line">										&lt;div class&#x3D;&quot;statusBar&quot; style&#x3D;&quot;display:none;&quot;&gt;</span><br><span class="line">											&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">												&lt;span class&#x3D;&quot;text&quot;&gt;0%&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">											&lt;&#x2F;div&gt;</span><br><span class="line">											&lt;div class&#x3D;&quot;info&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">											&lt;div class&#x3D;&quot;btns&quot;&gt;</span><br><span class="line">												&lt;div id&#x3D;&quot;filePicker2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">												&lt;div class&#x3D;&quot;uploadBtn&quot;&gt;开始上传&lt;&#x2F;div&gt;</span><br><span class="line">											&lt;&#x2F;div&gt;</span><br><span class="line">										&lt;&#x2F;div&gt;</span><br><span class="line">									&lt;&#x2F;div&gt;</span><br><span class="line">							&lt;&#x2F;div&gt;</span><br><span class="line">						&lt;&#x2F;div&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;td colspan&#x3D;&quot;4&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;detail_image_url&quot; id&#x3D;&quot;detail_image_url&quot; value&#x3D;&quot;$&#123;pd.detail_image_url&#125;&quot; &#x2F;&gt;</span><br><span class="line">						&lt;div id&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">							&lt;div id&#x3D;&quot;container&quot; class&#x3D;&quot;uploadFile&quot;&gt;</span><br><span class="line">								&lt;!--头部，相册选择和格式选择--&gt;</span><br><span class="line">									&lt;div id&#x3D;&quot;uploader&quot;&gt;</span><br><span class="line">										&lt;div class&#x3D;&quot;queueList&quot;&gt;</span><br><span class="line">											&lt;div id&#x3D;&quot;dndArea&quot; class&#x3D;&quot;placeholder&quot;&gt;</span><br><span class="line">												&lt;div id&#x3D;&quot;filePickerDetail&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">												&lt;p&gt;或将照片拖到这里，单次最多可选5张&lt;&#x2F;p&gt;</span><br><span class="line">											&lt;&#x2F;div&gt;</span><br><span class="line">										&lt;&#x2F;div&gt;</span><br><span class="line">										&lt;div class&#x3D;&quot;statusBar&quot; style&#x3D;&quot;display:none;&quot;&gt;</span><br><span class="line">											&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">												&lt;span class&#x3D;&quot;text&quot;&gt;0%&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">											&lt;&#x2F;div&gt;</span><br><span class="line">											&lt;div class&#x3D;&quot;info&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">											&lt;div class&#x3D;&quot;btns&quot;&gt;</span><br><span class="line">												&lt;div id&#x3D;&quot;filePicker2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">												&lt;div class&#x3D;&quot;uploadBtn&quot;&gt;开始上传&lt;&#x2F;div&gt;</span><br><span class="line">											&lt;&#x2F;div&gt;</span><br><span class="line">										&lt;&#x2F;div&gt;</span><br><span class="line">									&lt;&#x2F;div&gt;</span><br><span class="line">							&lt;&#x2F;div&gt;</span><br><span class="line">						&lt;&#x2F;div&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;td style&#x3D;&quot;text-align: center;&quot; colspan&#x3D;&quot;4&quot;&gt;</span><br><span class="line">						&lt;a class&#x3D;&quot;btn btn-mini btn-primary&quot; onclick&#x3D;&quot;save();&quot;&gt;保存&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;btn btn-mini btn-danger&quot; onclick&#x3D;&quot;top.Dialog.close();&quot;&gt;取消&lt;&#x2F;a&gt;</span><br><span class="line">					&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">			&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;div id&#x3D;&quot;zhongxin2&quot; class&#x3D;&quot;center&quot; style&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">			&lt;br &#x2F;&gt; &lt;br &#x2F;&gt; &lt;br &#x2F;&gt; &lt;br &#x2F;&gt; &lt;img src&#x3D;&quot;static&#x2F;images&#x2F;jiazai.gif&quot; &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">			&lt;h4 class&#x3D;&quot;lighter block green&quot;&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 引入 --&gt;</span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;window.jQuery || document.write(&quot;&lt;script src&#x3D;&#39;static&#x2F;js&#x2F;jquery-1.9.1.min.js&#39;&gt;\x3C&#x2F;script&gt;&quot;);&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;script src&#x3D;&quot;static&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;script src&#x3D;&quot;static&#x2F;js&#x2F;ace-elements.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;script src&#x3D;&quot;static&#x2F;js&#x2F;ace.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;static&#x2F;js&#x2F;chosen.jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;!-- 下拉框 --&gt;</span><br><span class="line"></span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;plugins&#x2F;webuploader&#x2F;webuploader.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;script src&#x3D;&quot;static&#x2F;js&#x2F;goods&#x2F;goods_detail_edit.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">		$(function() &#123;</span><br><span class="line">			&#x2F;&#x2F;单选框</span><br><span class="line">			$(&quot;.chzn-select&quot;).chosen();</span><br><span class="line">			$(&quot;.chzn-select-deselect&quot;).chosen(&#123;allow_single_deselect:true&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">	$(top.hangge());</span><br><span class="line">	$(document).ready(function()&#123;</span><br><span class="line">		if($(&quot;#user_id&quot;).val()!&#x3D;&quot;&quot;)&#123;</span><br><span class="line">			$(&quot;#loginname&quot;).attr(&quot;readonly&quot;,&quot;readonly&quot;);</span><br><span class="line">			$(&quot;#loginname&quot;).css(&quot;color&quot;,&quot;gray&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;保存</span><br><span class="line">	function save()&#123;</span><br><span class="line">		&#x2F;&#x2F;验证商品编码是否为空</span><br><span class="line">		if($(&quot;#GOODS_CODE&quot;).val()&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">			$(&quot;#GOODS_CODE&quot;).tips(&#123;</span><br><span class="line">				side:3,</span><br><span class="line">	            msg:&#39;请输入商品编码&#39;,</span><br><span class="line">	            bg:&#39;#AE81FF&#39;,</span><br><span class="line">	            time:2</span><br><span class="line">	        &#125;);</span><br><span class="line"></span><br><span class="line">			$(&quot;#GOODS_CODE&quot;).focus();</span><br><span class="line">			return false;</span><br><span class="line">		&#125;</span><br><span class="line">		if($(&quot;#GOODS_NAME&quot;).val()&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">			$(&quot;#GOODS_NAME&quot;).tips(&#123;</span><br><span class="line">				side:3,</span><br><span class="line">	            msg:&#39;请输入商品名称&#39;,</span><br><span class="line">	            bg:&#39;#AE81FF&#39;,</span><br><span class="line">	            time:2</span><br><span class="line">	        &#125;);</span><br><span class="line"></span><br><span class="line">			$(&quot;#GOODS_NAME&quot;).focus();</span><br><span class="line">			return false;</span><br><span class="line">		&#125;</span><br><span class="line">		if($(&quot;#GOODS_ABBR_NAME&quot;).val()&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">			$(&quot;#GOODS_ABBR_NAME&quot;).tips(&#123;</span><br><span class="line">				side:3,</span><br><span class="line">	            msg:&#39;请输入商品别名&#39;,</span><br><span class="line">	            bg:&#39;#AE81FF&#39;,</span><br><span class="line">	            time:2</span><br><span class="line">	        &#125;);</span><br><span class="line"></span><br><span class="line">			$(&quot;#GOODS_ABBR_NAME&quot;).focus();</span><br><span class="line">			return false;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;保存之前处理图片数据</span><br><span class="line">		var lbfiles &#x3D; uploader[0].getFiles(&quot;complete&quot;);&#x2F;&#x2F;轮播图</span><br><span class="line">		var lbFilesUrl&#x3D;&quot;&quot;;</span><br><span class="line">		$(lbfiles).each(function(index,item)&#123;</span><br><span class="line">			lbFilesUrl &#x3D; lbFilesUrl+&quot;;&quot;+item.url;</span><br><span class="line">		&#125;);</span><br><span class="line">		$(&quot;#FILE_PATH&quot;)[0].value &#x3D; lbFilesUrl;</span><br><span class="line">		&#x2F;&#x2F;保存之前处理图片数据</span><br><span class="line">		var detailfiles &#x3D; uploader[1].getFiles(&quot;complete&quot;);&#x2F;&#x2F;商品详情图</span><br><span class="line">		var detailFilesUrl&#x3D;&quot;&quot;;</span><br><span class="line">		$(detailfiles).each(function(index,item)&#123;</span><br><span class="line">			detailFilesUrl &#x3D; detailFilesUrl+&quot;;&quot;+item.url;</span><br><span class="line">		&#125;);</span><br><span class="line">		$(&quot;#detail_image_url&quot;)[0].value &#x3D; detailFilesUrl;</span><br><span class="line"></span><br><span class="line">		$(&quot;#goodsForm&quot;).submit();</span><br><span class="line">		$(&quot;#zhongxin&quot;).hide();</span><br><span class="line">		$(&quot;#zhongxin2&quot;).show();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;校验编码是否存在</span><br><span class="line">	function checkHasCode()&#123;</span><br><span class="line">		var goodsCode &#x3D; $(&quot;#GOODS_CODE&quot;)[0].value;</span><br><span class="line">		var checkGoodsCode &#x3D; $(&quot;#checkGoodsCode&quot;)[0].value;</span><br><span class="line"></span><br><span class="line">		if(goodsCode &#x3D;&#x3D; checkGoodsCode)return;</span><br><span class="line"></span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">			type: &quot;GET&quot;,</span><br><span class="line">			url: &#39;&lt;%&#x3D;basePath%&gt;goodsDetail&#x2F;hasCode.do?tm&#x3D;&#39;+new Date().getTime() + &#39;&amp;GOODS_CODE&#x3D;&#39; + goodsCode,</span><br><span class="line">				data : &#39;&#39;,</span><br><span class="line">				dataType : &#39;json&#39;,</span><br><span class="line">				cache : false,</span><br><span class="line">				success : function(data) &#123;</span><br><span class="line">					if (data.result &#x3D;&#x3D; &quot;error&quot;) &#123;</span><br><span class="line">						alert(&quot;编码重复，请重新输入&quot;);</span><br><span class="line">						$(&quot;#GOODS_CODE&quot;)[0].value &#x3D; checkGoodsCode;</span><br><span class="line">					&#125;;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;;</span><br><span class="line">	&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-对应上传的js-goods-detail-edit-js"><a href="#1-1-对应上传的js-goods-detail-edit-js" class="headerlink" title="1.1 对应上传的js(goods_detail_edit.js)"></a>1.1 对应上传的js(goods_detail_edit.js)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function($)&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当domReady的时候开始初始化</span><br><span class="line">    $(function() &#123;</span><br><span class="line">    	uploader &#x3D; new Array();&#x2F;&#x2F;创建 uploader数组</span><br><span class="line">    	&#x2F;&#x2F; 判断浏览器是否支持图片的base64</span><br><span class="line">        var isSupportBase64 &#x3D; ( function() &#123;</span><br><span class="line">            var data &#x3D; new Image();</span><br><span class="line">            var support &#x3D; true;</span><br><span class="line">            data.onload &#x3D; data.onerror &#x3D; function() &#123;</span><br><span class="line">                if( this.width !&#x3D; 1 || this.height !&#x3D; 1 ) &#123;</span><br><span class="line">                    support &#x3D; false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            data.src &#x3D; &quot;data:image&#x2F;gif;base64,R0lGODlhAQABAIAAAAAAAP&#x2F;&#x2F;&#x2F;ywAAAAAAQABAAACAUwAOw&#x3D;&#x3D;&quot;;</span><br><span class="line">            return support;</span><br><span class="line">        &#125; )(),</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 检测是否已经安装flash，检测flash的版本</span><br><span class="line">        flashVersion &#x3D; ( function() &#123;</span><br><span class="line">            var version;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                version &#x3D; navigator.plugins[ &#39;Shockwave Flash&#39; ];</span><br><span class="line">                version &#x3D; version.description;</span><br><span class="line">            &#125; catch ( ex ) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    version &#x3D; new ActiveXObject(&#39;ShockwaveFlash.ShockwaveFlash&#39;)</span><br><span class="line">                            .GetVariable(&#39;$version&#39;);</span><br><span class="line">                &#125; catch ( ex2 ) &#123;</span><br><span class="line">                    version &#x3D; &#39;0.0&#39;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            version &#x3D; version.match( &#x2F;\d+&#x2F;g );</span><br><span class="line">            return parseFloat( version[ 0 ] + &#39;.&#39; + version[ 1 ], 10 );</span><br><span class="line">        &#125; )(),</span><br><span class="line"></span><br><span class="line">        supportTransition &#x3D; (function()&#123;</span><br><span class="line">            var s &#x3D; document.createElement(&#39;p&#39;).style,</span><br><span class="line">                r &#x3D; &#39;transition&#39; in s ||</span><br><span class="line">                        &#39;WebkitTransition&#39; in s ||</span><br><span class="line">                        &#39;MozTransition&#39; in s ||</span><br><span class="line">                        &#39;msTransition&#39; in s ||</span><br><span class="line">                        &#39;OTransition&#39; in s;</span><br><span class="line">            s &#x3D; null;</span><br><span class="line">            return r;</span><br><span class="line">        &#125;)();</span><br><span class="line">        if ( !WebUploader.Uploader.support(&#39;flash&#39;) &amp;&amp; WebUploader.browser.ie ) &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; flash 安装了但是版本过低。</span><br><span class="line">            if (flashVersion) &#123;</span><br><span class="line">                (function(container) &#123;</span><br><span class="line">                    window[&#39;expressinstallcallback&#39;] &#x3D; function( state ) &#123;</span><br><span class="line">                        switch(state) &#123;</span><br><span class="line">                            case &#39;Download.Cancelled&#39;:</span><br><span class="line">                                alert(&#39;您取消了更新！&#39;);</span><br><span class="line">                                break;</span><br><span class="line"></span><br><span class="line">                            case &#39;Download.Failed&#39;:</span><br><span class="line">                                alert(&#39;安装失败&#39;);</span><br><span class="line">                                break;</span><br><span class="line"></span><br><span class="line">                            default:</span><br><span class="line">                                alert(&#39;安装已成功，请刷新！&#39;);</span><br><span class="line">                                break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        delete window[&#39;expressinstallcallback&#39;];</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    var swf &#x3D; &#39;.&#x2F;expressInstall.swf&#39;;</span><br><span class="line">                    &#x2F;&#x2F; insert flash object</span><br><span class="line">                    var html &#x3D; &#39;&lt;object type&#x3D;&quot;application&#x2F;&#39; +</span><br><span class="line">                            &#39;x-shockwave-flash&quot; data&#x3D;&quot;&#39; +  swf + &#39;&quot; &#39;;</span><br><span class="line"></span><br><span class="line">                    if (WebUploader.browser.ie) &#123;</span><br><span class="line">                        html +&#x3D; &#39;classid&#x3D;&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; &#39;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    html +&#x3D; &#39;width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; style&#x3D;&quot;outline:0&quot;&gt;&#39;  +</span><br><span class="line">                        &#39;&lt;param name&#x3D;&quot;movie&quot; value&#x3D;&quot;&#39; + swf + &#39;&quot; &#x2F;&gt;&#39; +</span><br><span class="line">                        &#39;&lt;param name&#x3D;&quot;wmode&quot; value&#x3D;&quot;transparent&quot; &#x2F;&gt;&#39; +</span><br><span class="line">                        &#39;&lt;param name&#x3D;&quot;allowscriptaccess&quot; value&#x3D;&quot;always&quot; &#x2F;&gt;&#39; +</span><br><span class="line">                    &#39;&lt;&#x2F;object&gt;&#39;;</span><br><span class="line"></span><br><span class="line">                    container.html(html);</span><br><span class="line"></span><br><span class="line">                &#125;)($wrap);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 压根就没有安转。</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $wrap.html(&#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.adobe.com&#x2F;go&#x2F;getflashplayer&quot; target&#x3D;&quot;_blank&quot; border&#x3D;&quot;0&quot;&gt;&lt;img alt&#x3D;&quot;get flash player&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.adobe.com&#x2F;macromedia&#x2F;style_guide&#x2F;images&#x2F;160x41_Get_Flash_Player.jpg&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&#39;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return;</span><br><span class="line">        &#125; else if (!WebUploader.Uploader.support()) &#123;</span><br><span class="line">            alert( &#39;Web Uploader 不支持您的浏览器！&#39;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    	$(&#39;.uploadFile&#39;).each(function(index)&#123;</span><br><span class="line">    		var $wrap &#x3D; $(&#39;#uploader&#39;)[index],</span><br><span class="line">            &#x2F;&#x2F; 图片容器</span><br><span class="line">            $queue &#x3D; $( &#39;&lt;ul class&#x3D;&quot;filelist&quot;&gt;&lt;&#x2F;ul&gt;&#39; ).appendTo( $(this).find( &#39;.queueList&#39; ) ),</span><br><span class="line">            &#x2F;&#x2F; 状态栏，包括进度和控制按钮</span><br><span class="line">            $statusBar &#x3D; $(this).find( &#39;.statusBar&#39; ),</span><br><span class="line">            &#x2F;&#x2F; 文件总体选择信息。</span><br><span class="line">            $info &#x3D; $statusBar.find( &#39;.info&#39; ),</span><br><span class="line">            &#x2F;&#x2F; 上传按钮</span><br><span class="line">            $upload &#x3D;  $(this).find( &#39;.uploadBtn&#39; ),</span><br><span class="line">            &#x2F;&#x2F; 没选择文件之前的内容。</span><br><span class="line">            $placeHolder &#x3D;  $(this).find( &#39;.placeholder&#39; ),</span><br><span class="line">            $progress &#x3D; $statusBar.find( &#39;.progress&#39; ).hide(),</span><br><span class="line">            &#x2F;&#x2F; 添加的文件数量</span><br><span class="line">            fileCount &#x3D; 0,</span><br><span class="line">            &#x2F;&#x2F; 添加的文件总大小</span><br><span class="line">            fileSize &#x3D; 0,</span><br><span class="line">            &#x2F;&#x2F; 优化retina, 在retina下这个值是2</span><br><span class="line">            ratio &#x3D; window.devicePixelRatio || 1,</span><br><span class="line">            &#x2F;&#x2F; 缩略图大小</span><br><span class="line">            thumbnailWidth &#x3D; 110 * ratio,</span><br><span class="line">            thumbnailHeight &#x3D; 110 * ratio,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 可能有pedding, ready, uploading, confirm, done.</span><br><span class="line">            state &#x3D; &#39;pedding&#39;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 所有文件的进度信息，key为file id</span><br><span class="line">            percentages &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var locat &#x3D; (window.location+&#39;&#39;).split(&#39;&#x2F;&#39;);</span><br><span class="line">    	if(&#39;pictures&#39;&#x3D;&#x3D; locat[3])&#123;locat &#x3D;  locat[0]+&#39;&#x2F;&#x2F;&#39;+locat[2];&#125;else&#123;locat &#x3D;  locat[0]+&#39;&#x2F;&#x2F;&#39;+locat[2]+&#39;&#x2F;&#39;+locat[3];&#125;;</span><br><span class="line">    	uploader[index] &#x3D; WebUploader.create(&#123;</span><br><span class="line">            pick: &#123;</span><br><span class="line">                id: index&#x3D;&#x3D;0?&#39;#filePicker&#39;:&#39;#filePickerDetail&#39;,</span><br><span class="line">                label: &#39;点击选择图片&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            dnd: &#39;#dndArea&#39;,</span><br><span class="line">            swf: &#39;.&#x2F;Uploader.swf&#39;,</span><br><span class="line">            chunked: false,</span><br><span class="line">            chunkSize: 512 * 1024,</span><br><span class="line">            &#x2F;&#x2F;server: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;pictures&#x2F;save.do&#39;,</span><br><span class="line">            server: &#39;goodsDetail&#x2F;uploadImg.do?&#39;,</span><br><span class="line">            &#x2F;&#x2F;runtimeOrder: &#39;flash&#39;,</span><br><span class="line"></span><br><span class="line">            accept: &#123;</span><br><span class="line">                 title: &#39;Images&#39;,</span><br><span class="line">                 extensions: &#39;gif,jpg,jpeg,bmp,png&#39;,</span><br><span class="line">                 mimeTypes: &#39;image&#x2F;*&#39;</span><br><span class="line">             &#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 禁掉全局的拖拽功能。这样不会出现图片拖进页面的时候，把图片打开。</span><br><span class="line">            disableGlobalDnd: true,</span><br><span class="line">            fileNumLimit: index&#x3D;&#x3D;0?5:1,</span><br><span class="line">            fileSizeLimit: 200 * 1024 * 1024,    &#x2F;&#x2F; 200 M</span><br><span class="line">            fileSingleSizeLimit: 50 * 1024 * 1024    &#x2F;&#x2F; 50 M</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 拖拽时不接受 js, txt 文件。</span><br><span class="line">        uploader[index].on( &#39;dndAccept&#39;, function( items ) &#123;</span><br><span class="line">            var denied &#x3D; false,</span><br><span class="line">                len &#x3D; items.length,</span><br><span class="line">                i &#x3D; 0,</span><br><span class="line">                &#x2F;&#x2F; 修改js类型</span><br><span class="line">                unAllowed &#x3D; &#39;text&#x2F;plain;application&#x2F;javascript &#39;;</span><br><span class="line"></span><br><span class="line">            for ( ; i &lt; len; i++ ) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果在列表里面</span><br><span class="line">                if ( ~unAllowed.indexOf( items[ i ].type ) ) &#123;</span><br><span class="line">                    denied &#x3D; true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return !denied;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; uploader.on(&#39;filesQueued&#39;, function() &#123;</span><br><span class="line">        &#x2F;&#x2F;     uploader.sort(function( a, b ) &#123;</span><br><span class="line">        &#x2F;&#x2F;         if ( a.name &lt; b.name )</span><br><span class="line">        &#x2F;&#x2F;           return -1;</span><br><span class="line">        &#x2F;&#x2F;         if ( a.name &gt; b.name )</span><br><span class="line">        &#x2F;&#x2F;           return 1;</span><br><span class="line">        &#x2F;&#x2F;         return 0;</span><br><span class="line">        &#x2F;&#x2F;     &#125;);</span><br><span class="line">        &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 添加“添加文件”的按钮，</span><br><span class="line">        if(index&#x3D;&#x3D;0)&#123;</span><br><span class="line">        	uploader[index].addButton(&#123;</span><br><span class="line">        		id: &#39;#filePicker2&#39;,</span><br><span class="line">        		label: &#39;继续添加&#39;</span><br><span class="line">        	&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		 var getFileBlob &#x3D; function(url, cb) &#123;</span><br><span class="line">			var xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">			xhr.open(&quot;GET&quot;, url);</span><br><span class="line">			xhr.responseType &#x3D; &quot;blob&quot;;</span><br><span class="line">			xhr.addEventListener(&#39;load&#39;, function() &#123;</span><br><span class="line">				cb(xhr.response);</span><br><span class="line">			&#125;);</span><br><span class="line">			xhr.send();</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		var blobToFile &#x3D; function(blob, name) &#123;</span><br><span class="line">			blob.lastModifiedDate &#x3D; new Date();</span><br><span class="line">			blob.name &#x3D; name;</span><br><span class="line">			return blob;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		var getFileObject &#x3D; function(filePathOrUrl, cb) &#123;</span><br><span class="line">			getFileBlob(filePathOrUrl, function(blob) &#123;</span><br><span class="line">				cb(blobToFile(blob, &#39;test.jpg&#39;));</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;回显图片</span><br><span class="line">        uploader[index].on(&#39;ready&#39;, function() &#123;</span><br><span class="line">            window.uploader &#x3D; uploader;</span><br><span class="line">            var filePathArg &#x3D; index&#x3D;&#x3D;0?$(&quot;#FILE_PATH&quot;)[0].value.split(&#39;;&#39;):$(&quot;#detail_image_url&quot;)[0].value.split(&#39;;&#39;);</span><br><span class="line">            var files&#x3D;new Array();</span><br><span class="line">            var i&#x3D;0;</span><br><span class="line">            if(filePathArg.length&gt;0)&#123;</span><br><span class="line">			$.each(filePathArg, function(tempindex,item) &#123;</span><br><span class="line">				&#x2F;&#x2F;如果图片是空值，就直接返回</span><br><span class="line">				if(item&#x3D;&#x3D;&#39;&#39;||item&#x3D;&#x3D;&quot;undefined&quot;||item&#x3D;&#x3D;undefined)&#123;</span><br><span class="line">					return true;</span><br><span class="line">				&#125;</span><br><span class="line">				getFileObject(item, function(fileObject) &#123;</span><br><span class="line">					var wuFile &#x3D; new WebUploader.Lib.File(WebUploader.guid(&#39;rt_&#39;), fileObject);</span><br><span class="line">					var tempfile &#x3D; new WebUploader.File(wuFile);</span><br><span class="line">					tempfile.url&#x3D;item;</span><br><span class="line">					tempfile.setStatus(&#39;complete&#39;);</span><br><span class="line">					uploader[index].addFiles(tempfile);</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        uploader[index].on( &#39;uploadSuccess&#39;, function( file,response ) &#123;</span><br><span class="line">        	file.url&#x3D;response.path;</span><br><span class="line">        	if(index&#x3D;&#x3D;0)&#123;</span><br><span class="line">        		$(&quot;#FILE_PATH&quot;)[0].value &#x3D; $(&quot;#FILE_PATH&quot;)[0].value+&quot;;&quot;+response.path;</span><br><span class="line">        	&#125;else&#123;</span><br><span class="line">        		$(&quot;#detail_image_url&quot;)[0].value &#x3D; $(&quot;#detail_image_url&quot;)[0].value+&quot;;&quot;+response.path;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 当有文件添加进来时执行，负责view的创建</span><br><span class="line">        function addFile( file ) &#123;</span><br><span class="line">            var $li &#x3D; $( &#39;&lt;li id&#x3D;&quot;&#39; + file.id + &#39;&quot;&gt;&#39; +</span><br><span class="line">                    &#39;&lt;p class&#x3D;&quot;title&quot;&gt;&#39; + file.name + &#39;&lt;&#x2F;p&gt;&#39; +</span><br><span class="line">                    &#39;&lt;p class&#x3D;&quot;imgWrap&quot;&gt;&lt;&#x2F;p&gt;&#39;+</span><br><span class="line">                    &#39;&lt;p class&#x3D;&quot;progress&quot;&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&#39; +</span><br><span class="line">                    &#39;&lt;&#x2F;li&gt;&#39; ),</span><br><span class="line"></span><br><span class="line">                $btns &#x3D; $(&#39;&lt;div class&#x3D;&quot;file-panel&quot;&gt;&#39; +</span><br><span class="line">                    &#39;&lt;span class&#x3D;&quot;cancel&quot;&gt;删除&lt;&#x2F;span&gt;&#39; +</span><br><span class="line">                    &#39;&lt;span class&#x3D;&quot;rotateRight&quot;&gt;向右旋转&lt;&#x2F;span&gt;&#39; +</span><br><span class="line">                    &#39;&lt;span class&#x3D;&quot;rotateLeft&quot;&gt;向左旋转&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;).appendTo( $li ),</span><br><span class="line">                $prgress &#x3D; $li.find(&#39;p.progress span&#39;),</span><br><span class="line">                $wrap &#x3D; $li.find( &#39;p.imgWrap&#39; ),</span><br><span class="line">                $info &#x3D; $(&#39;&lt;p class&#x3D;&quot;error&quot;&gt;&lt;&#x2F;p&gt;&#39;),</span><br><span class="line"></span><br><span class="line">                showError &#x3D; function( code ) &#123;</span><br><span class="line">                    switch( code ) &#123;</span><br><span class="line">                        case &#39;exceed_size&#39;:</span><br><span class="line">                            text &#x3D; &#39;文件大小超出&#39;;</span><br><span class="line">                            break;</span><br><span class="line"></span><br><span class="line">                        case &#39;interrupt&#39;:</span><br><span class="line">                            text &#x3D; &#39;上传暂停&#39;;</span><br><span class="line">                            break;</span><br><span class="line"></span><br><span class="line">                        default:</span><br><span class="line">                            text &#x3D; &#39;上传失败，请重试&#39;;</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $info.text( text ).appendTo( $li );</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">            if ( file.getStatus() &#x3D;&#x3D;&#x3D; &#39;invalid&#39; ) &#123;</span><br><span class="line">                showError( file.statusText );</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; @todo lazyload</span><br><span class="line">                $wrap.text( &#39;预览中&#39; );</span><br><span class="line">                uploader[index].makeThumb( file, function( error, src ) &#123;</span><br><span class="line">                    var img;</span><br><span class="line"></span><br><span class="line">                    if ( error ) &#123;</span><br><span class="line">                        $wrap.text( &#39;不能预览&#39; );</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if( isSupportBase64 ) &#123;</span><br><span class="line">                        img &#x3D; $(&#39;&lt;img src&#x3D;&quot;&#39;+src+&#39;&quot;&gt;&#39;);</span><br><span class="line">                        $wrap.empty().append( img );</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        $.ajax(&#39;..&#x2F;..&#x2F;server&#x2F;preview.php&#39;, &#123;</span><br><span class="line">                            method: &#39;POST&#39;,</span><br><span class="line">                            data: src,</span><br><span class="line">                            dataType:&#39;json&#39;</span><br><span class="line">                        &#125;).done(function( response ) &#123;</span><br><span class="line">                            if (response.result) &#123;</span><br><span class="line">                                img &#x3D; $(&#39;&lt;img src&#x3D;&quot;&#39;+response.result+&#39;&quot;&gt;&#39;);</span><br><span class="line">                                $wrap.empty().append( img );</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                $wrap.text(&quot;预览出错&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, thumbnailWidth, thumbnailHeight );</span><br><span class="line"></span><br><span class="line">                percentages[ file.id ] &#x3D; [ file.size, 0 ];</span><br><span class="line">                file.rotation &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            file.on(&#39;statuschange&#39;, function( cur, prev ) &#123;</span><br><span class="line">                if ( prev &#x3D;&#x3D;&#x3D; &#39;progress&#39; ) &#123;</span><br><span class="line">                    $prgress.hide().width(0);</span><br><span class="line">                &#125; else if ( prev &#x3D;&#x3D;&#x3D; &#39;queued&#39; ) &#123;</span><br><span class="line">                    $li.off( &#39;mouseenter mouseleave&#39; );</span><br><span class="line">                    $btns.remove();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 成功</span><br><span class="line">                if ( cur &#x3D;&#x3D;&#x3D; &#39;error&#39; || cur &#x3D;&#x3D;&#x3D; &#39;invalid&#39; ) &#123;</span><br><span class="line">                    console.log( file.statusText );</span><br><span class="line">                    showError( file.statusText );</span><br><span class="line">                    percentages[ file.id ][ 1 ] &#x3D; 1;</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;interrupt&#39; ) &#123;</span><br><span class="line">                    showError( &#39;interrupt&#39; );</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;queued&#39; ) &#123;</span><br><span class="line">                    percentages[ file.id ][ 1 ] &#x3D; 0;</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;progress&#39; ) &#123;</span><br><span class="line">                    $info.remove();</span><br><span class="line">                    $prgress.css(&#39;display&#39;, &#39;block&#39;);</span><br><span class="line">                &#125; else if ( cur &#x3D;&#x3D;&#x3D; &#39;complete&#39; ) &#123;</span><br><span class="line">                    $li.append( &#39;&lt;span class&#x3D;&quot;success&quot;&gt;&lt;&#x2F;span&gt;&#39; );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $li.removeClass( &#39;state-&#39; + prev ).addClass( &#39;state-&#39; + cur );</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $li.on( &#39;mouseenter&#39;, function() &#123;</span><br><span class="line">                $btns.stop().animate(&#123;height: 30&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $li.on( &#39;mouseleave&#39;, function() &#123;</span><br><span class="line">                $btns.stop().animate(&#123;height: 0&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $btns.on( &#39;click&#39;, &#39;span&#39;, function() &#123;</span><br><span class="line">                var tempIndex &#x3D; $(this).index(),</span><br><span class="line">                    deg;</span><br><span class="line"></span><br><span class="line">                switch ( tempIndex ) &#123;</span><br><span class="line">                    case 0:</span><br><span class="line">                        uploader[index].removeFile( file );</span><br><span class="line">                        return;</span><br><span class="line"></span><br><span class="line">                    case 1:</span><br><span class="line">                        file.rotation +&#x3D; 90;</span><br><span class="line">                        break;</span><br><span class="line"></span><br><span class="line">                    case 2:</span><br><span class="line">                        file.rotation -&#x3D; 90;</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if ( supportTransition ) &#123;</span><br><span class="line">                    deg &#x3D; &#39;rotate(&#39; + file.rotation + &#39;deg)&#39;;</span><br><span class="line">                    $wrap.css(&#123;</span><br><span class="line">                        &#39;-webkit-transform&#39;: deg,</span><br><span class="line">                        &#39;-mos-transform&#39;: deg,</span><br><span class="line">                        &#39;-o-transform&#39;: deg,</span><br><span class="line">                        &#39;transform&#39;: deg</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $wrap.css( &#39;filter&#39;, &#39;progid:DXImageTransform.Microsoft.BasicImage(rotation&#x3D;&#39;+ (~~((file.rotation&#x2F;90)%4 + 4)%4) +&#39;)&#39;);</span><br><span class="line">                    &#x2F;&#x2F; use jquery animate to rotation</span><br><span class="line">                    &#x2F;&#x2F; $(&#123;</span><br><span class="line">                    &#x2F;&#x2F;     rotation: rotation</span><br><span class="line">                    &#x2F;&#x2F; &#125;).animate(&#123;</span><br><span class="line">                    &#x2F;&#x2F;     rotation: file.rotation</span><br><span class="line">                    &#x2F;&#x2F; &#125;, &#123;</span><br><span class="line">                    &#x2F;&#x2F;     easing: &#39;linear&#39;,</span><br><span class="line">                    &#x2F;&#x2F;     step: function( now ) &#123;</span><br><span class="line">                    &#x2F;&#x2F;         now &#x3D; now * Math.PI &#x2F; 180;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;         var cos &#x3D; Math.cos( now ),</span><br><span class="line">                    &#x2F;&#x2F;             sin &#x3D; Math.sin( now );</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;         $wrap.css( &#39;filter&#39;, &quot;progid:DXImageTransform.Microsoft.Matrix(M11&#x3D;&quot; + cos + &quot;,M12&#x3D;&quot; + (-sin) + &quot;,M21&#x3D;&quot; + sin + &quot;,M22&#x3D;&quot; + cos + &quot;,SizingMethod&#x3D;&#39;auto expand&#39;)&quot;);</span><br><span class="line">                    &#x2F;&#x2F;     &#125;</span><br><span class="line">                    &#x2F;&#x2F; &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $li.appendTo( $queue );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 负责view的销毁</span><br><span class="line">        function removeFile( file ) &#123;</span><br><span class="line">            var $li &#x3D; $(&#39;#&#39;+file.id);</span><br><span class="line"></span><br><span class="line">            delete percentages[ file.id ];</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">            $li.off().find(&#39;.file-panel&#39;).off().end().remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function updateTotalProgress() &#123;</span><br><span class="line">            var loaded &#x3D; 0,</span><br><span class="line">                total &#x3D; 0,</span><br><span class="line">                spans &#x3D; $progress.children(),</span><br><span class="line">                percent;</span><br><span class="line"></span><br><span class="line">            $.each( percentages, function( k, v ) &#123;</span><br><span class="line">                total +&#x3D; v[ 0 ];</span><br><span class="line">                loaded +&#x3D; v[ 0 ] * v[ 1 ];</span><br><span class="line">            &#125; );</span><br><span class="line"></span><br><span class="line">            percent &#x3D; total ? loaded &#x2F; total : 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            spans.eq( 0 ).text( Math.round( percent * 100 ) + &#39;%&#39; );</span><br><span class="line">            spans.eq( 1 ).css( &#39;width&#39;, Math.round( percent * 100 ) + &#39;%&#39; );</span><br><span class="line">            updateStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function updateStatus() &#123;</span><br><span class="line">            var text &#x3D; &#39;&#39;, stats;</span><br><span class="line"></span><br><span class="line">            if ( state &#x3D;&#x3D;&#x3D; &#39;ready&#39; ) &#123;</span><br><span class="line">                text &#x3D; &#39;选中&#39; + fileCount + &#39;张图片，共&#39; +</span><br><span class="line">                        WebUploader.formatSize( fileSize ) + &#39;。&#39;;</span><br><span class="line">            &#125; else if ( state &#x3D;&#x3D;&#x3D; &#39;confirm&#39; ) &#123;</span><br><span class="line">                stats &#x3D; uploader[index].getStats();</span><br><span class="line">                if ( stats.uploadFailNum ) &#123;</span><br><span class="line">                    text &#x3D; &#39;已成功上传&#39; + stats.successNum+ &#39;张照片至XX相册，&#39;+</span><br><span class="line">                        stats.uploadFailNum + &#39;张照片上传失败，&lt;a class&#x3D;&quot;retry&quot; href&#x3D;&quot;#&quot;&gt;重新上传&lt;&#x2F;a&gt;失败图片或&lt;a class&#x3D;&quot;ignore&quot; href&#x3D;&quot;#&quot;&gt;忽略&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                stats &#x3D; uploader[index].getStats();</span><br><span class="line">                text &#x3D; &#39;共&#39; + fileCount + &#39;张（&#39; +</span><br><span class="line">                        WebUploader.formatSize( fileSize )  +</span><br><span class="line">                        &#39;），已上传&#39; + stats.successNum + &#39;张&#39;;</span><br><span class="line"></span><br><span class="line">                if ( stats.uploadFailNum ) &#123;</span><br><span class="line">                    text +&#x3D; &#39;，失败&#39; + stats.uploadFailNum + &#39;张&#39;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $info.html( text );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function setState( val ) &#123;</span><br><span class="line">            var file, stats;</span><br><span class="line"></span><br><span class="line">            if ( val &#x3D;&#x3D;&#x3D; state ) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $upload.removeClass( &#39;state-&#39; + state );</span><br><span class="line">            $upload.addClass( &#39;state-&#39; + val );</span><br><span class="line">            state &#x3D; val;</span><br><span class="line"></span><br><span class="line">            switch ( state ) &#123;</span><br><span class="line">                case &#39;pedding&#39;:</span><br><span class="line">                    $placeHolder.removeClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $queue.hide();</span><br><span class="line">                    $statusBar.addClass( &#39;element-invisible&#39; );</span><br><span class="line">                    uploader[index].refresh();</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;ready&#39;:</span><br><span class="line">                    $placeHolder.addClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $( &#39;#filePicker2&#39; ).removeClass( &#39;element-invisible&#39;);</span><br><span class="line">                    $queue.show();</span><br><span class="line">                    $statusBar.removeClass(&#39;element-invisible&#39;);</span><br><span class="line">                    uploader[index].refresh();</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;uploading&#39;:</span><br><span class="line">                    $( &#39;#filePicker2&#39; ).addClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $progress.show();</span><br><span class="line">                    $upload.text( &#39;暂停上传&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;paused&#39;:</span><br><span class="line">                    $progress.show();</span><br><span class="line">                    $upload.text( &#39;继续上传&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;confirm&#39;:</span><br><span class="line">                    $progress.hide();</span><br><span class="line">                    $( &#39;#filePicker2&#39; ).removeClass( &#39;element-invisible&#39; );</span><br><span class="line">                    $upload.text( &#39;开始上传&#39; );</span><br><span class="line"></span><br><span class="line">                    stats &#x3D; uploader[index].getStats();</span><br><span class="line">                    if ( stats.successNum &amp;&amp; !stats.uploadFailNum ) &#123;</span><br><span class="line">                        setState( &#39;finish&#39; );</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;finish&#39;:</span><br><span class="line">                    stats &#x3D; uploader[index].getStats();</span><br><span class="line">                    if ( stats.successNum ) &#123;</span><br><span class="line">                        &#x2F;&#x2F;alert( &#39;上传成功&#39; );</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        &#x2F;&#x2F; 没有成功的图片，重设</span><br><span class="line">                        state &#x3D; &#39;done&#39;;</span><br><span class="line">                        location.reload();</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            updateStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uploader[index].onUploadProgress &#x3D; function( file, percentage ) &#123;</span><br><span class="line">            var $li &#x3D; $(&#39;#&#39;+file.id),</span><br><span class="line">                $percent &#x3D; $li.find(&#39;.progress span&#39;);</span><br><span class="line"></span><br><span class="line">            $percent.css( &#39;width&#39;, percentage * 100 + &#39;%&#39; );</span><br><span class="line">            percentages[ file.id ][ 1 ] &#x3D; percentage;</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        uploader[index].onFileQueued &#x3D; function( file ) &#123;</span><br><span class="line">            fileCount++;</span><br><span class="line">            fileSize +&#x3D; file.size;</span><br><span class="line"></span><br><span class="line">            if ( fileCount &#x3D;&#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">                $placeHolder.addClass( &#39;element-invisible&#39; );</span><br><span class="line">                $statusBar.show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addFile( file );</span><br><span class="line">            setState( &#39;ready&#39; );</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        uploader[index].onFileDequeued &#x3D; function( file ) &#123;</span><br><span class="line">            fileCount--;</span><br><span class="line">            fileSize -&#x3D; file.size;</span><br><span class="line">            debugger;</span><br><span class="line">            if ( !fileCount ) &#123;</span><br><span class="line">                setState( &#39;pedding&#39; );</span><br><span class="line">            &#125;</span><br><span class="line">            removeFile(file);</span><br><span class="line">            updateTotalProgress();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        uploader[index].on( &#39;all&#39;, function( type ) &#123;</span><br><span class="line">            var stats;</span><br><span class="line">            switch( type ) &#123;</span><br><span class="line">                case &#39;uploadFinished&#39;:</span><br><span class="line">                    setState( &#39;confirm&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;startUpload&#39;:</span><br><span class="line">                    setState( &#39;uploading&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                case &#39;stopUpload&#39;:</span><br><span class="line">                    setState( &#39;paused&#39; );</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        uploader[index].onError &#x3D; function( code ) &#123;</span><br><span class="line">        	if(code &#x3D;&#x3D; &#39;F_DUPLICATE&#39;)&#123;</span><br><span class="line">        		alert( &#39;图片重复&#39; );</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            	alert( &#39;Eroor: &#39; + code );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        $upload.on(&#39;click&#39;, function() &#123;</span><br><span class="line">            if ( $(this).hasClass( &#39;disabled&#39; ) ) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ( state &#x3D;&#x3D;&#x3D; &#39;ready&#39; ) &#123;</span><br><span class="line">                uploader[index].upload();</span><br><span class="line">            &#125; else if ( state &#x3D;&#x3D;&#x3D; &#39;paused&#39; ) &#123;</span><br><span class="line">                uploader[index].upload();</span><br><span class="line">            &#125; else if ( state &#x3D;&#x3D;&#x3D; &#39;uploading&#39; ) &#123;</span><br><span class="line">                uploader[index].stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $info.on( &#39;click&#39;, &#39;.retry&#39;, function() &#123;</span><br><span class="line">            uploader[index].retry();</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        $info.on( &#39;click&#39;, &#39;.ignore&#39;, function() &#123;</span><br><span class="line">            alert( &#39;todo&#39; );</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        $upload.addClass( &#39;state-&#39; + state );</span><br><span class="line">        updateTotalProgress();</span><br><span class="line">    	&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)( jQuery );</span><br></pre></td></tr></table></figure>

<h3 id="2-后台代码"><a href="#2-后台代码" class="headerlink" title="2.后台代码"></a>2.后台代码</h3><p>上传图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	&#x2F;**</span><br><span class="line">	 * 上传图片</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@RequestMapping(value&#x3D;&quot;&#x2F;uploadImg&quot;)</span><br><span class="line">	@ResponseBody</span><br><span class="line">	public Object save(@RequestParam(required&#x3D;false) MultipartFile file,String goodsCode) throws Exception&#123;</span><br><span class="line">		logBefore(logger, &quot;GoodsDetail上传图片&quot;);</span><br><span class="line">		Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;();</span><br><span class="line">&#x2F;&#x2F;		String  ffile &#x3D; DateUtil.getDays(), fileName &#x3D; &quot;&quot;;</span><br><span class="line">		PageData pd &#x3D; new PageData();</span><br><span class="line">		String imageUrls &#x3D; &quot;&quot;;</span><br><span class="line">		if(Jurisdiction.buttonJurisdiction(menuUrl, &quot;add&quot;))&#123;</span><br><span class="line">			if (null !&#x3D; file &amp;&amp; !file.isEmpty()) &#123;</span><br><span class="line">				&#x2F;&#x2F;上传图片到FastDFS</span><br><span class="line">				MultipartFile[] files &#x3D; new MultipartFile[1];</span><br><span class="line">				files[0] &#x3D; file;</span><br><span class="line">				imageUrls &#x3D; fastDFSService.upload(files);</span><br><span class="line">&#x2F;&#x2F;				String filePath &#x3D; PathUtil.getClasspath() + Const.FILEPATHIMG + ffile;		&#x2F;&#x2F;文件上传路径</span><br><span class="line">&#x2F;&#x2F;				fileName &#x3D; FileUpload.fileUp(file, filePath, this.get32UUID());				&#x2F;&#x2F;执行上传</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				System.out.println(&quot;上传失败&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		map.put(&quot;result&quot;, &quot;ok&quot;);</span><br><span class="line">&#x2F;&#x2F;		map.put(&quot;path&quot;, ffile + &quot;&#x2F;&quot; + fileName);</span><br><span class="line">		map.put(&quot;path&quot;, imageUrls);</span><br><span class="line">		return AppUtil.returnObject(pd, map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="保存图片路径"><a href="#保存图片路径" class="headerlink" title="保存图片路径"></a>保存图片路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">	 * 保存商品基础信息</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@RequestMapping(value&#x3D;&quot;&#x2F;save&quot;)</span><br><span class="line">	public ModelAndView save() throws Exception&#123;</span><br><span class="line">		ModelAndView mv &#x3D; this.getModelAndView();</span><br><span class="line">		PageData pd &#x3D; new PageData();</span><br><span class="line">		pd &#x3D; this.getPageData();</span><br><span class="line">		DateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">		&#x2F;&#x2F;首先判断是否有主键goods_code</span><br><span class="line">		String goodsCode &#x3D; pd.getString(&quot;GOODS_CODE&quot;);</span><br><span class="line">		if(goodsCode!&#x3D;null &amp;&amp; !&quot;&quot;.equals(goodsCode))&#123;&#x2F;&#x2F;如果不为空，走update语句</span><br><span class="line">			String filePath &#x3D; pd.getString(&quot;FILE_PATH&quot;)&#x3D;&#x3D;null?&quot;&quot;:pd.getString(&quot;FILE_PATH&quot;).toString();&#x2F;&#x2F;图片路径</span><br><span class="line">			String[] filePathArg &#x3D; filePath.split(&quot;;&quot;);</span><br><span class="line">			String imageUrl1 &#x3D; filePathArg!&#x3D;null&amp;&amp;filePathArg.length&gt;1?filePathArg[1]:&quot;&quot;;</span><br><span class="line">			String imageUrl2 &#x3D; filePathArg!&#x3D;null&amp;&amp;filePathArg.length&gt;2?filePathArg[2]:&quot;&quot;;</span><br><span class="line">			String imageUrl3 &#x3D; filePathArg!&#x3D;null&amp;&amp;filePathArg.length&gt;3?filePathArg[3]:&quot;&quot;;</span><br><span class="line">			String imageUrl4 &#x3D; filePathArg!&#x3D;null&amp;&amp;filePathArg.length&gt;4?filePathArg[4]:&quot;&quot;;</span><br><span class="line">			String imageUrl5 &#x3D; filePathArg!&#x3D;null&amp;&amp;filePathArg.length&gt;5?filePathArg[5]:&quot;&quot;;</span><br><span class="line">			String updatedTime &#x3D; df.format(new Date());</span><br><span class="line">			pd.put(&quot;imageUrl1&quot;, imageUrl1);</span><br><span class="line">			pd.put(&quot;imageUrl2&quot;, imageUrl2);</span><br><span class="line">			pd.put(&quot;imageUrl3&quot;, imageUrl3);</span><br><span class="line">			pd.put(&quot;imageUrl4&quot;, imageUrl4);</span><br><span class="line">			pd.put(&quot;imageUrl5&quot;, imageUrl5);</span><br><span class="line">			pd.put(&quot;updatedTime&quot;, updatedTime);</span><br><span class="line"></span><br><span class="line">			String detailImageUrl &#x3D; pd.getString(&quot;detail_image_url&quot;)&#x3D;&#x3D;null?&quot;&quot;:pd.getString(&quot;detail_image_url&quot;).toString();&#x2F;&#x2F;商品详情</span><br><span class="line">			String[] detailImageUrlArg &#x3D; detailImageUrl.split(&quot;;&quot;);</span><br><span class="line">			String detailImage &#x3D; detailImageUrlArg!&#x3D;null&amp;&amp;detailImageUrlArg.length&gt;1?detailImageUrlArg[1]:&quot;&quot;;</span><br><span class="line">			pd.put(&quot;detail_image_url&quot;, detailImage);</span><br><span class="line">		&#125;else&#123;&#x2F;&#x2F;如果为空，那就是新增数据</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		if(Jurisdiction.buttonJurisdiction(menuUrl, &quot;edit&quot;))&#123;goodsDetailService.save(pd);&#125;</span><br><span class="line">		mv.addObject(&quot;msg&quot;,&quot;success&quot;);</span><br><span class="line">		mv.setViewName(&quot;save_result&quot;);</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端插件</category>
        <category>Webuploader</category>
      </categories>
      <tags>
        <tag>Webuploader</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章 全注解下的Spring IoC</title>
    <url>/2019/04/23/%E7%AC%AC3%E7%AB%A0-%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84Spring-IoC/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_48.jpg"><br>Spring最成功的是提出的理念，依赖两个核心理念，一个是控制反转（IoC），另一个是面向切面编程（AOP）。IoC容器是Spring的核心，可以说Spring是一种基于IoC容器编程的框架<br>IoC是一种通过描述来生成或者获取对象的技术，Java初学者来说所熟悉的是使用new关键字创建对象，而在Spring中则不是，他是通过描述来创建对象。Spring Boot通过注解的描述生成对象。<br>一个系统可以生成各种对象，并且这些对象都需要进行管理。还值得一提的是，对象之间并不是孤立的，他们之间还可能存在依赖关系。例如一个班级是由多个老师和同学组成，那么班级就依赖于多个老师和学生。为此Spring还提供了依赖注入的功能，是的我们能够通过描述来管理各个对象之间的关系<br>为了描述上述的班级、同学和老师的这3个对象关系，我们需要一个容器。在Spring中把一个需要管理的对象成为Spring Bean（简称Bean），而Spring管理这些Bean的容器，本我们成为Spring IoC容器，其需要具备两个基本功能：</p>
<ul>
<li>通过描述管理Bean，包括发布和获取Bean</li>
<li>通过描述完成Bean之间的依赖关系  </li>
</ul>
<h2 id="IoC容器简介"><a href="#IoC容器简介" class="headerlink" title="IoC容器简介"></a>IoC容器简介</h2><p><font color='red'>Spring的定义中，要求IoC容器都需要实现接口BeanFactory</font>，他是一个顶级容器接口，<code>BeanFactory</code>的源码中有多个<code>getBean</code>方法，这是IoC容器的最重要的方法，它的意义是从IoC容器中获取Bean。而从多个getBean中可以看到有按照类型（by type）获取Bean的，也有按照名称（by name）获取Bean的，这就意味着Spring IoC容器中，允许我们按照类型或者名称获取Bean，这对理解后面讲到的Spring的依赖注入是十分重要的<br>isSingleton方法则判断Bean是否在Spring IoC中为单例。这里需要记住的是Spring IoC容器中，默认情况下，Bean都是单例存在的，也就是getBean方法返回的都是同一个对象。与isSingleton方法相反的是isPrototype方法，如果它返回的是true，那么当我们使用getBean方法获取Bean的时候，Spring IoC容器会创建一个新的Bean返回给调用者，这些与后面讨论的Bean的作用域相关。<br>由于BeanFactory的功能还不够强大，因此Spring的BeanFactory的基础上，还设计了一个更为高级的接口ApplicationContext。他是BeanFactory的子接口之一，在Spring的体系中BeanFactory和ApplicationContext是最为重要的接口设计<br>ApplicationContext接口通过集成商机接口，进而集成BeanFactory，扩展了消息国际化接口，环境可配置接口，应用事件发布接口和资源模式解析接口，所以功能会更强大。<br>在Spring Boot当中我们主要是通过注解来装配Bean到Spring IoC容器中，下面开始一个简单的例子，</p>
<ol>
<li>首先创建一个Java简单对象User.java，代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> note;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.note = note;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>然后再定义一个Java配置文件AppConfig.java，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">initUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;user_name_1&quot;</span>);</span><br><span class="line">        user.setNote(<span class="string">&quot;note_1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里需要注意<code>@Configuration</code>代表这是一个Java配置文件，Spring的容器会根据它来生成IoC容器中装配Bean；<code>@Bean</code>代表将initUser方法返回的POJO装配到IoC容器中，而其属性name定义这个Bean的名称，如果没有配置他，浙江方法名称initUser作为Bean的名称保存到Spring IoC中。  </li>
<li>使用<code>AnnotationConfigApplicationContext</code>来勾践自己的IoC容器，代码如下所示<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        User user = ctx.getBean(User.class);</span><br><span class="line">        System.out.println(user.getUserName());</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">        System.out.println(user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>代码中将Java配置文件AppConfig传递给<code>AnnotationConfigApplicationContext</code>的构造方法，这样它就能够读取配置了。然后将配置里面的Bean装配到IoC容器中，于是可以使用getBean方法获取对应的POJO，下面为打印的日志</p>
<img src="/2019/04/23/%E7%AC%AC3%E7%AB%A0-%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84Spring-IoC/screenshot_1.png" class="">
<p>显然，配置在配置文件中的名称为user的Bean已经被装配到IoC容器中，并且可以通过getBean方法获取对应的Bean，并将Bean的属性信息传输出来。    </p>
<h2 id="装配你的Bean"><a href="#装配你的Bean" class="headerlink" title="装配你的Bean"></a>装配你的Bean</h2><h3 id="通过扫描装配你的Bean"><a href="#通过扫描装配你的Bean" class="headerlink" title="通过扫描装配你的Bean"></a>通过扫描装配你的Bean</h3><p>如果有很多Bean都是用注解@Bean注入Spring IoC容器中，那将是一件很麻烦的事情。所以Spring允许进行扫描配置Bean到IoC容器中，对于扫描装配而言是用的注解是@Component和@ComponentScan。@Component是标明哪个类被扫描进入Spring IoC容器，而@ComponentScan则是标明采用何种策略去扫描装配Bean。  </p>
<ol>
<li>首先我们把User.java移动到包<code>com.example.chapter3.config</code>内，然后对其进行修改，代码如下所示<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;user_name_1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;note_1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">getter&amp;&amp;setter</span><br></pre></td></tr></table></figure>
这里的注解<code>@Component</code>表明这个类将被Spring IoC容器扫描装配，其中配置的user则是作为Bean的名称，当然你也可以不配置这个字符串，那么IoC容器就会把类名第一个字母作为小写，其他不变作为Bean名称放入IoC容器中；注解@Value则是指定具体的值，是的Spring IoC给予对应属性注入对应的值。为了让Spring IoC容器装配这个类，需要改造AppConfig，代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里加入了<code>@ComponentScan</code>，意味着他会进行扫描，但是只会扫描类Appconfig所在的当前包和自爆，之前把<code>User.java</code>移动到config就是这个远远，这样就可以删除掉之前使用@Bean标注的创建对象方法，然后进行测试，测试代码和前面的IoCTest的代码一样，不需要修改。<br>虽然这样能够运行了，但是User类迁移到了本不该防止它的配置包中，为了更加合理，@ComponentScan还允许我们自定义扫描的包，下面讲解一下@ComponentSacen</li>
</ol>
<ul>
<li>配置项basePackages定义扫描的包名，在没有定义的情况下，他会扫描当钱包和其子包下的路径</li>
<li>配置项basePackageClasses定义扫描的类</li>
<li>includeFilters定义满足过滤器（Filter）条件的Bean才去扫描</li>
<li>excludeFilters则是排除过滤条件的Bean，他俩都需要通过一个注解@Filter去定义，type定义类型，这里可以定义为注解或者正则式等类型</li>
</ul>
<ol>
<li>把AppConfig中的注解修改为<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.example.chapter3.pojo&quot;)</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.example.chapter3.pojo&quot;&#125;)</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">@ComponentScan(basePackageClasses = &#123;User.class&#125;)</span></span><br></pre></td></tr></table></figure>
无论采用何种方式都能够使得IoC容器去扫描User类，而包名可以采用正则表达式去匹配。但是有时候我们需要的是想扫描一些包，将一些Bean装配到Spring IoC容器中，而不是像加载这个包里面的某些Bean。比方式，现在我们有一个UserService类，味蕾标注他为服务类，将类标注@Service（该标准注入了@Component，所以默认的情况下它会被Spring扫描到IoC容器中），这里再假设采用了策略<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentSacn(&quot;com.example.chapter3.*&quot;)</span></span><br></pre></td></tr></table></figure>
这样对于<code>com.example.chapter3.service</code>和<code>com.example.chapter3.pojo</code>，这两个包都会被扫描到，此时我们定义<code>UserServcice</code>类代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pringUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">        System.out.println(user.getUserName());</span><br><span class="line">        System.out.println(user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
按以上的装配策略，他将会被扫描到Spring IoC容器中，为了不被装配，需要修改扫描的策略为：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(basePackages=&quot;com.example.chapter3.*&quot;,excludeFilters=&#123;@Filter(classes=&#123;Service.class&#125;)&#125;)</span></span><br></pre></td></tr></table></figure>
这样，由于加入了excludeFilters的配置，使标注了@Service的类将不被IoC容器扫描注入，这样就可以吧UserService类排除到SPring IoC容器中了。事实上，之前在SpringBoot上述实例中看到注解@SpringBootApplication也注入了@ComponentScan</li>
</ol>
<h3 id="自定义第三方Bean"><a href="#自定义第三方Bean" class="headerlink" title="自定义第三方Bean"></a>自定义第三方Bean</h3><p>Java的应用往往需要引入许多来自第三方的包，还需要放入到Spring IoC容器中，这时@Bean注解就可以发挥作用了<br>例如，要引入一个DBCP数据源，我们现在pom.xml文件上加入项目所需要DBCP包和MySQL数据库驱动相关依赖，代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样DBCP和数据库驱动就被加入到项目中了，接着使用它提供的机制来生成数据源，修改AppConfig.java，如下所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.example.chapter3.*&quot;&#125;,excludeFilters = &#123;@ComponentScan.Filter(classes = &#123;Service.class&#125;)&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://localhost:3306/chapter3&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;zhang1989&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里通过@Bean定义了其配置项name作为dataSource，那么Spring就会把她返回的对象用名称dataSource保存在IoC容器中，通过这样，就可以将第三方包的类装配到SPring IoC容器中了。</p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>Spring IoC中的Bean之间的依赖，类似于人类（Person）有时候利用一些动物（Animal）去完成一些事情，比方狗（Dog）看大门，猫（Cat）抓老鼠等等于是做一些事情就依赖于那些可爱的动物<br>为了更好地展现这个过程，首先定义两个接口，一个是人类，另外一个是动物，人类通过动物去提供一些特殊的服务  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//人类接口</span></span><br><span class="line"><span class="keyword">package</span> com.example.chapter3.definition;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用动物服务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//设置动物</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动物接口</span></span><br><span class="line"><span class="keyword">package</span> com.example.chapter3.definition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来两个实现类是人和狗的，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.definition.Animal;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.definition.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessPerson</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Animal animal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal.use();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.definition.Animal;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗【&quot;</span>+Dog.class.getSimpleName()+<span class="string">&quot;】是看门用的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里应注意@Autowired，是Spring中最常用的注解之一，他会根据属性的类型（by type）找到对应的Bean进行诸如。这里的Dog是动物的一种，所以Spring IoC容器会把Dog实例诸如到BussinessPerson中。这样通过Spring IoC容器获取BussinessPerson实例的时候就能够使用Dog实例来提供服务了，下面是测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(Appconfig.class);</span><br><span class="line">Person person = ctx.getBean(BusinessPerson.class);</span><br><span class="line">person.service();</span><br></pre></td></tr></table></figure>
<p>测试结果如下：<br>测试成功，这个时候Spring IoC容器已经通过注解@AutoWired成功的将Dog注入到了BussinessPerson实例中。</p>
<h3 id="注解-Autowired"><a href="#注解-Autowired" class="headerlink" title="注解@Autowired"></a>注解@Autowired</h3><p>它注入的基本已调试根据类型（by type），BeanFactory同时还支持按照名称（by name），回到上面的例子，我们只是创建了一个动物-狗，二十几上动物还可以有猫（Cat），猫可以用来抓老鼠，于是新建一个猫的类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter3.definition.Animal;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫【&quot;</span>+Cat.class.getSimpleName()+<span class="string">&quot;】是抓老鼠的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在测试下，会出现一个问题，定义了一个动物属性（Animal），而我们却有两个动物，一个狗，一个猫，Spring IoC如何注入呢，如果你还进行测试，很快就会抛出下面的异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type &#39;com.example.chapter3.definition.Animal&#39; available: expected single matching bean but found 2: cat,dog</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(DependencyDescriptor.java:221)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1225)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167)</span><br></pre></td></tr></table></figure>
<p>从日志可以看出，Spring IoC容器并不能知道你需要注入什么动物（是狗？是猫）给BusinessPerson类对象，从而引起错误的发生。那么使用@AutoWired能处理这个问题。假设我们目前需要狗提供服务，那么可以把属性名称改为dog，也就是原来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Animal animal = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Animal dog = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dog.use();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dog = animal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里只是将属性的名称从animal修改为了dog，那么我们再测试的时候，你可以看到采用狗来提供服务了。<font color='red'>那是因为@Autowired提供这样的规则，首先会根据类型找到对应的Bean，如果对应类型的Bean不是唯一的，那么他会根据其属性名称和Bean的名称进行匹配。如果匹配的上，就会使用该Bean；如果还是无法匹配，就会抛出异常</font></p>
<h3 id="消除歧义性-Primary和-Quelifier"><a href="#消除歧义性-Primary和-Quelifier" class="headerlink" title="消除歧义性-@Primary和@Quelifier"></a>消除歧义性-@Primary和@Quelifier</h3><p>在上面我们发现有猫和狗的时候，为了使@Autowired能够继续使用，我们做了一个决定，将BusinessPerson的属性名称从animal修改为dog。显然这种方法并不能很好的解决问题，下面讲解两种解决方案。<br>首先是一个注解@Primary，他是一个修改优先权的注解，当我们有猫和狗的时候，假设这次需要使用猫，那么只需要在猫类的定义上加入@Primary就可以了，类似于下面的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">······</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的@Primary的含义告诉Spring IoC容器，发现有多个同样类型的Bean时，请优先使用我进行注入，然后，有时候@Primary也可以使用在多个类上，也许无论是猫还是狗可能带上@Primary，其结果是IoC容器还是无法区分采用哪个Bean的实例进行注入，又或者说我们需要更加灵活机制来实现注入，那么@Quelifier可以满足。他的配置项value需要一个字符串去定义，它将于@Autowired组合在一起，通过类型和名称一起找到bean。我们知道Bean名称在Spring IoC容器中是唯一的标识，通过这个就可以小区歧义性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value=&quot;dog&quot;)</span></span><br><span class="line">Animal animal;</span><br></pre></td></tr></table></figure>
<p>一旦这样生命，Spring IoC将会以类型和名称去寻找对应的Bean进行注入。</p>
<h3 id="带有参数的构造方法类的装配"><a href="#带有参数的构造方法类的装配" class="headerlink" title="带有参数的构造方法类的装配"></a>带有参数的构造方法类的装配</h3><p>在上面，我们都基于一个默认的情况，那就是不带参数的构造方法下实现依赖注入。但是实际上，有些类是带有参数的构造方法，于是上述的方法就不能再使用了。为了满足这个功能，我们可以使用@Autowired注解对构造方法的参数进行注入，例如BusinessPerson来满足这个功能，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line">······</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessPerson</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessPerson</span><span class="params">(<span class="meta">@Autowired</span> <span class="meta">@Qualifier(value=&quot;dog&quot;)</span> Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal.use();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，代码中取消了@Autowired对属性和方法的标注。通过在参数上加入@Autowired和@Qualifier注解，使得它能够注入进来。这里使用@Qualifier为了避免歧义性。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>上面我们只是关心如何正确的将Bean装配到IoC容器中，而没有关心IoC容器如何装配和销毁Bean的过程。有时候我们也需要自定义初始化或者销毁Bean的过程，来满足一些Bean特殊初始化和销毁的要求，例如在上线数据库注入中，我们希望在其关闭的时候调用其close方法，以释放数据库的连接资源，这是在项目使用过程中很常见的要求。Bean的生命周期大概分为Bean定义、Bean初始化、Bean生存期和Bean的销毁4个部分，其中<font color='red'>Bean定义过程</font>大致如下：</p>
<ul>
<li>Spring通过我们的配置，如@ComponentScan定义的扫描路径去找到带有@Component的类，这个过程就是一个资源定位的过程。</li>
<li>一旦找到资源，那么就开始解析，并且将定义的信息保存起来，此时还没有初始化Bean，也就是没有Bean的实例，仅仅是Bean的定义</li>
<li>然后把Bean定义发布到Spring IoC容器中。此时IoC容器也只有Bean的定义，还是没有Bean的实例生成  </li>
</ul>
<p>完成上面3步知识一个资源定位并将Bean的定位发布到IoC容器的过程，还没有Bean实例生成，更没有完成依赖注入。在默认情况下，Spring会继续去完成Bean的实例化和依赖注入，这样从IoC容器中就可以得到一个依赖注入完成的Bean。但是，有些Bean会受到变化因素的影响，这是我们到希望是取出Bean的时候完成初始化和依赖注入，换句话说就是让那些Bean知识将定义发布到IoC容器中而不进行实例化和依赖注入<br>ComponentScan中海油一个配置项<code>lazyInit</code>，只可以配置Boolean值，而且默认是false，也就是默认不进行延迟初始化，因此在默认的情况下Spring会对Bean进行实例化和依赖注入对应的属性值。为了进行测试，线改造下BusinessPerson，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line">······</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessPerson</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal.use();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dog&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;延迟依赖注入&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2019/04/23/%E7%AC%AC3%E7%AB%A0-%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84Spring-IoC/screenshot_2.png" class="">
<p>然后我们在没有配置lazyInit的情况下进行断点测试，在断点出，我们并没有获取Bean的实例，而日志已经打印出来了，课件在Spring IoC容器初始化就执行了实例化和依赖注入，为了改变这种情况，我们在配置类AppConfig的@CopmonentScan中加入lazyInit配置，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line">······</span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.example.chapter3.pojo&quot;&#125;,lazyInit = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后进行测试，发现在断电出是不会打印“延迟依赖注入”的，只有运行过断点之后才会出现日志。</p>
<img src="/2019/04/23/%E7%AC%AC3%E7%AB%A0-%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84Spring-IoC/screenshot_3.png" class="">
<p>如果仅仅是实现利华和依赖注入还是比较简单的，还不能够完成自定义的要求。为了完成依赖注入的功能，Spring在完成依赖注入之后，还提供了一系列的接口和配置来完成Bean初始化的过程，具体的流程如下图所示，除此之外，还应该注意以下两点：</p>
<ul>
<li>这些接口和方法时针对什么而言的，在没有注释的情况下的流程节点都是针对单个Bean而言的，但是BeanPostProcessor是针对所有Bean而言的</li>
<li>及时你定义了ApplicationContextAware接口，但是有时候并不会调用，这样根据你IoC容器来决定。我们知道，Spring IoC容器最低的要求是实现BeanFactory接口，而不是实现ApplicationContext接口。对于那些没有实现ApplicationContext的接口容器，在生命周期对应的ApplicationContextAware定义的方法也是不会被调用的，只有实现了ApplicationContext接口的容器，才会在生命周期调用ApplicationContextAware十一度包工头的setApplicationContext方法<img src="/2019/04/23/%E7%AC%AC3%E7%AB%A0-%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84Spring-IoC/screenshot_4.png" class="">
下面开始测试生命周期，先来改造下类BussinessPerson，代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line">······</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessPerson</span> <span class="keyword">implements</span> <span class="title">Person</span>,<span class="title">BeanNameAware</span>,<span class="title">BeanFactoryAware</span>,<span class="title">ApplicationContextAware</span>,<span class="title">InitializingBean</span>,<span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal.use();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dog&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;延迟依赖注入&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】调用了BeanNameAware的setBeanName&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】调用了BeanFactoryAware的setBeanFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】调用了ApplicationContextAware的setApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】调用了InitializingBean的afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】注解@PostConstruct定义的自定义初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】注解@PreDestroy定义的自定义销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">&quot;】DisposableBean方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这个Bean就实现了生命周期中单个Bean可以实现的所有接口，并且通过注解@PostConstruct定义了初始化方法，通过注解@PreDestory定义了销毁方法。为了测试Bean的后置处理器，这里创建一个类BeanPostProcessorExample，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.life;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorExample</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanPostProcessor调用&quot;</span>+<span class="string">&quot;postProcessBeforeInitialization方法，参数【&quot;</span>+bean.getClass().getSimpleName()+<span class="string">&quot;】【&quot;</span>+beanName+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanPostProcessor调用&quot;</span>+<span class="string">&quot;postProcessBeforeInitialization方法，参数【&quot;</span>+bean.getClass().getSimpleName()+<span class="string">&quot;】【&quot;</span>+beanName+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注意，这个Bean后置处理器将对所有的Bean有效，然后我们使用下面的测试代码进行测试。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">ctx.close();</span><br></pre></td></tr></table></figure>
日志如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BeanPostProcessor调用postProcessBeforeInitialization方法，参数【AppConfig$$EnhancerBySpringCGLIB$$375c39d2】【appConfig]</span><br><span class="line">BeanPostProcessor调用postProcessAfterInitialization方法，参数【AppConfig$$EnhancerBySpringCGLIB$$375c39d2】【appConfig]</span><br><span class="line">22:48:12.697 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &#39;businessPerson&#39;</span><br><span class="line">22:48:12.799 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &#39;dog&#39;</span><br><span class="line">BeanPostProcessor调用postProcessBeforeInitialization方法，参数【Dog】【dog]</span><br><span class="line">BeanPostProcessor调用postProcessAfterInitialization方法，参数【Dog】【dog]</span><br><span class="line">延迟依赖注入</span><br><span class="line">【BusinessPerson】调用了BeanNameAware的setBeanName</span><br><span class="line">【BusinessPerson】调用了BeanFactoryAware的setBeanFactory</span><br><span class="line">【BusinessPerson】调用了ApplicationContextAware的setApplicationContext</span><br><span class="line">BeanPostProcessor调用postProcessBeforeInitialization方法，参数【BusinessPerson】【businessPerson]</span><br><span class="line">【BusinessPerson】注解@PostConstruct定义的自定义初始化方法</span><br><span class="line">【BusinessPerson】调用了InitializingBean的afterPropertiesSet</span><br><span class="line">BeanPostProcessor调用postProcessAfterInitialization方法，参数【BusinessPerson】【businessPerson]</span><br><span class="line">22:48:12.804 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &#39;cat&#39;</span><br><span class="line">BeanPostProcessor调用postProcessBeforeInitialization方法，参数【Cat】【cat]</span><br><span class="line">BeanPostProcessor调用postProcessAfterInitialization方法，参数【Cat】【cat]</span><br><span class="line">22:48:12.805 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &#39;user&#39;</span><br><span class="line">BeanPostProcessor调用postProcessBeforeInitialization方法，参数【User】【user]</span><br><span class="line">BeanPostProcessor调用postProcessAfterInitialization方法，参数【User】【user]</span><br><span class="line">22:48:12.848 [main] DEBUG org.springframework.context.annotation.AnnotationConfigApplicationContext - Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@707f7052, started on Tue Apr 30 22:48:11 CST 2019</span><br><span class="line">【BusinessPerson】注解@PreDestroy定义的自定义销毁方法</span><br><span class="line">【BusinessPerson】DisposableBean方法</span><br></pre></td></tr></table></figure>
从日志看出，对于Bean后置处理器（BeanPostProcessor）而言，他对所有的Bean都是起作用的，而其他的接口则是对单个Bean起作用。我们还可以注意到BussinessPerson执行的流程。有时候Bean的定义可能使用的是第三方的类，此时可以使用注解@Bean来配置自定义初始化和销毁方法，如下所示：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(initMethod=&quot;init&quot;,destoryMethod=&quot;destory&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用属性文件"><a href="#使用属性文件" class="headerlink" title="使用属性文件"></a>使用属性文件</h2><p>Spring Boot中可以使用默认的application.properties，也可以自定义的配置文件。应该说读取配置文件的方法很多，这里介绍最常用的方法。<br>在Spring Boot中我们现在Maven配置文件中加载依赖，代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有了依赖，就可以直接使用application.properties文件为你工作了，例如，现在为他新增代码清单所示的属性如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">database.driverName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">database.url</span>=<span class="string">jdbc:mysql://localhost:3306/chapter3</span></span><br><span class="line"><span class="meta">database.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">database.password</span>=<span class="string">zhang1989</span></span><br></pre></td></tr></table></figure>
<p>这是Spring Boot的默认文件，他会通过其机制读取到上下文中，这样可以引用它了。对于他的引用，有两种方法，首先是Spring表达式。本节仅限于读取属性而不涉及运算，创建一个新的类DataBaseProperties，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line">···<span class="keyword">import</span>···</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;database.driverName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;database.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverName</span><span class="params">(String driverName)</span> </span>&#123;</span><br><span class="line">        System.out.println(driverName);</span><br><span class="line">        <span class="keyword">this</span>.driverName = driverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;database.username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;database.password&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    ···getter···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过@Value注解，使用${……}这样的占位符读取配置在属性文件的内容。这里的@Value注解，既可以加在属性，也可以加在方法上，启动Spring Boot就可以看到下面的日志了，注意这里是启动Spring Boot而不是测试类了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BeanPostProcessor调用postProcessAfterInitialization方法，参数【Cat】【cat]</span><br><span class="line">root</span><br><span class="line">zhang1989</span><br><span class="line">BeanPostProcessor调用postProcessBeforeInitialization方法，参数【DataBaseProperties】【dataBaseProperties]</span><br></pre></td></tr></table></figure>
<p>可见读取属性成功了。有时候我们也可以使用注解@ConfigurationProperties，通过它是得配置上有所减少，例如，下面我们修改DataBaseProperties的代码，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.pojo;</span><br><span class="line">···<span class="keyword">import</span>···</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;database&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driverName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverName</span><span class="params">(String driverName)</span> </span>&#123;</span><br><span class="line">        System.out.println(driverName);</span><br><span class="line">        <span class="keyword">this</span>.driverName = driverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">···getter···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里在注解@ConfigurationProperties中配置的字符串database，将于POJO的属性名称组成属性的全限定名去配置文件里查找，这样就能够将对应的属性读入到POJO当中。<br>但是有时候我们会觉得如果所有的内容都配置到application.properties，显然这个文件将有很多内容。为了更好的配置，我们可以选择使用心得属性文件。例如，数据库属性可以配置在jdbc.properties文件中，于是把application.properties文件中的数据库信息迁移到jdbc.properties中，然后使用@PropertySource去定义对应的属性文件，把它加载到Spring的上下文中，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.example.chapter3&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:jdbc.properties&quot;&#125;,ignoreResourceNotFound = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter3Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter3Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>value可以配置多个配置文件。使用classpath前缀，意味着去类文件路径下找到属性文件ignoreResourceNotFound则是是否忽略配置文件找不到的问题，默认为false，也就是找不到会报错，这里配置为true，也就是找不到不会报错</p>
<h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><table>
<thead>
<tr>
<th>作用域类型</th>
<th>使用范围</th>
<th>作用域描述</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>所有Spring应用</td>
<td>默认值，IoC容器只存在单例</td>
</tr>
<tr>
<td>prototype</td>
<td>所有Spring应用</td>
<td>每当从IoC容器中去除一个Bean，则创建一个新的Bean</td>
</tr>
<tr>
<td>session</td>
<td>Spring Web应用</td>
<td>HTTP会话</td>
</tr>
<tr>
<td>application</td>
<td>Spring Web应用</td>
<td>Web工程生命周期</td>
</tr>
<tr>
<td>下面我们探讨下单例（Singleton）和原型（Prototype）的区别，首先定义一个类，代码如下</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.scope.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScopeBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个简单的类，实际就是单例，测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.config;</span><br><span class="line">···<span class="keyword">import</span>···</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        ScopeBean scopeBean1 = ctx.getBean(ScopeBean.class);</span><br><span class="line">        ScopeBean scopeBean2 = ctx.getBean(ScopeBean.class);</span><br><span class="line">        System.out.println(scopeBean1 == scopeBean2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试打印结果如下：，说明了两个实例是同一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00:05:06.521 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &#39;scopeBean&#39;</span><br><span class="line">true</span><br><span class="line">Disconnected from the target VM, address: &#39;127.0.0.1:5697&#39;, transport: &#39;socket&#39;</span><br></pre></td></tr></table></figure>
<p>然后取消代码清单中的注释<code>@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</code>，进行相同的测试，结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">07</span>:<span class="number">23.687</span> [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="string">&#x27;user&#x27;</span></span><br><span class="line">Disconnected from the target VM, address: <span class="string">&#x27;127.0.0.1:5733&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>打印出来是false，说明不是同一个Bean了。<br>这里的ConfigurableBeanFactory只提供单例（SCOPE_SINGLETON）和原型（SCOPE_PROTOTYPE）两种作用域供选择，如果是在Spring MVC环境中，还可以使用WebApplicationContext去定义其他作用域，如请求（SCOPE_REQUEST）、会话（SCOPE_SESSION）和应用（SCOPE_APPLICATION）。例如下面的代码就是定义请求作用域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter3.scope.pojo;</span><br><span class="line">···<span class="keyword">import</span>···</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(WebApplicationContext.SCOPE_REQUEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScopeBean</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样同一个请求范围内去获取这个Bean的时候，智慧共用同一个Bean，第二次请求就会产生新的Bean。因此两个不同的请求将会获得不同的实例Bean</p>
<h2 id="使用-Profile"><a href="#使用-Profile" class="headerlink" title="使用@Profile"></a>使用@Profile</h2><p>在企业开发的过程中，项目往往面临开发环境、测试环境、准生产环境（用于模拟真实生产环境部署所用）和生产环境的切换，这样在一个互联网企业中往往需要四套环境，而每一套环境的上下文是不一样的。例如，他们回有个字的数据库资源，这样就要求我们在不同的数据库之间切换，为了方便，Spring还提供了Profile机制，使我们可以很方便的实现各个环境之间的切换。<br>假设存在dev_spring_boot和text_spring_boot两个数据库，这样可以使用注解@Profile定义两个Bean，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name=&quot;dataSource&quot;,destroyMethod = &quot;close&quot;)</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">getDevDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://localhost:3306/dev_spring_boot&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        dataSource = BasicDataSourceFactory.createDataSource(props);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name=&quot;dataSource&quot;,destroyMethod = &quot;close&quot;)</span></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">getTestDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://localhost:3306/test_spring_boot&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        dataSource = BasicDataSourceFactory.createDataSource(props);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Spring中存在两个参数可以提供给我们配置，已修改启动Profiel机制，一个是spring.profiles.active，另一个是spring.profiles.default。这两个属性都没有配置的情况下，Spring将不会启动Profile机制，这就意味着被@Profile标注的Bean将不会被Spring装配到IoC容器中。Spring是先判定是否存在spring.profile.active配置后，再去查找spring.profiles.default配置的。所以spring.profiles.active的优先级要大于spring.profiles.default<br>在Java启动项目中，我们只需要加入下入配置就能启动Profile机制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS&#x3D;&quot;-Dspring.profiles.active&#x3D;dev&quot;</span><br></pre></td></tr></table></figure>
<p>当然在IDE中切换环境，也可以配置这个参数，对于属性配置文件而言，在Spring Boot中还存在一个约定，即允许比较方便的切换配置环境。例如，现实开发环境和测试环境的数据库是两个库，开发人员测试可能比较随意的增删改查，而测试人员则不是，测试人员需要搭建数据库的测试数据往往也需要比较多的时间和精力，因此在很多情况下，他们希望有独立的数据库，这样配置数据库连接的文件就需要分开了，而Spring Boot可以很好的支持切换配置文件的功能。首先我们在配置文件目录新增application-dev.properties文件，然后将日志配置为DEBUG级别，这样启动Spring Boot就会有很详细的日志显示。配置内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.root</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">logging.level.org.springframework</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>这个时候请注意，按照Spring Boot的规则，假设把选项<code>-Dspring.profiles.active</code>配置为{profile}，则会使用application-{profile}.properties文件去替换原来默认的application.properties文件，然后启动Spring Boot程序</p>
<h2 id="使用Spring-EL"><a href="#使用Spring-EL" class="headerlink" title="使用Spring EL"></a>使用Spring EL</h2><p>在上述代码中，我们是没有任何运算规则的情况下装配Bean的。为了跟家灵活，Spring还提供了表达式语言Spring EL。通过EL表达式进行计算装配Bean例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;T(System).currentTimeMillis()&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long initTime = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>注意，这里采用#{……}代表占位符，它将具有运算的功能；T(……)代表的是引入类；System是java.lang.*包的类，这是Java的默认加载的包，因此可以不必写全，如果是其他的包，则需要写出全限定名才能引入类，currentTimeMillis是静态方法，也就是给属性赋值当前时间戳，此外还有直接给属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;使用EL表单时赋值字符串&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String str = <span class="keyword">null</span>；</span><br><span class="line"></span><br><span class="line"><span class="comment">//科学计数法赋值</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;9.3E3&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值浮点数</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;3.14&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> pi;</span><br></pre></td></tr></table></figure>
<p>显然这比较灵活，有时候我们还可以获取其他Spring Bean的属性来给当前Bean属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;beanName.str&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String otherBeanProp = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>注意，这里的beanName是Spring IoC容器Bean的名称，str是其属性，代表引用对应的Bean的属性给当前属性赋值。有时候，我们还希望这个属性的字母全部变为大写，这个时候就可以写成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;beanName.str?.toUpperCase()&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String otherBeanProp = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>再次注意这里的Spring EL。这里应用str属性后跟着一个?，这个符号的含义是判断这个属性是否为空，如果不为空才会执行toUpperCase方法，进而把引用到的属性转换为大写，赋值给当前属性，除此之外，还可以使用Spring EL进行一定的运算，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 数学运算</span><br><span class="line"><span class="meta">@Value(&quot;#&#123;1+2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sum;</span><br><span class="line"></span><br><span class="line"># 浮点数比较运算</span><br><span class="line"><span class="meta">@Value(&quot;#&#123;beanName.pi== 3.14f&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> piFlag;</span><br><span class="line"></span><br><span class="line"># 字符串比较运算</span><br><span class="line"><span class="meta">@Value(&quot;#&#123;beanName.str eq &#x27;Spring Boot&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> strFlag;</span><br><span class="line"></span><br><span class="line"># 字符串连接</span><br><span class="line"><span class="meta">@Value(&quot;#&#123;beanName.str + &#x27;连接的字符串&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String strApp = byll;</span><br><span class="line"></span><br><span class="line"># 三元运算</span><br><span class="line"><span class="meta">@Value(&quot;#&#123;beanName.d &gt; 10000?&#x27;大于&#x27;:&#x27;小于&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String resultDesc  =<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看出，EL表达式支持的运算还是蛮多的</p>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第4章 Spring AOP</title>
    <url>/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_49.jpg"></p>
<h2 id="约定编程"><a href="#约定编程" class="headerlink" title="约定编程"></a>约定编程</h2><p>为了便于理解AOP的概念，先来看一个约定编程实例，如果这个实例能弄明白，Spring AOP的概念也很容易理解</p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>首先创建一个简单的接口，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口很简单，定义了一个sayHello方法，然后一个变量name，接着创建接口实现类，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.service.HelloService;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(name.trim()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;paramter is null!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面创建一个拦截器，十分简单，只存在几个方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.intercept;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.invoke.Invocation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//事前方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">before</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//事后方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取代原有的事件方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原有事件返回对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">around</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> InvocationTargetException,IllegalAccessException</span>;</span><br><span class="line">    <span class="comment">//是否返回方法。事件没有发生异常执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//事后异常方法，当事件发生异常后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//是否使用around方法取代原有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">userAround</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面给出约定，将这些方法织入到流程中。这里首先给出around方法中的参数Invocation对象源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.invoke;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invocation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invocation</span><span class="params">(Object target, Method method,Object[] params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException,IllegalAccessException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target,params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object[] getParams() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的proceed方法，它会以反射的形式去调用原有的方法。接着，你可以根据拦截器（Interceptor）接口的定义开发一个属于自己的拦截器MyInterceptor，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.intercept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.invoke.Invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before.....&quot;</span>);</span><br><span class="line">        Object object = invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">userAround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>约定是本节的核心，也是Spring AOP的本质，接下来时ProxyBean的实现代码，该类的作用是实现将服务类和拦截方法织入对应的流程。首先需要理解动态代理模式。其实代理很简单，例如，当你需要采访一个儿童时，首先需要经过他父母的统一，在一些问题上父母也许会替他回答，而对于另一些问题，也许父母觉得不太适合小孩会拒绝掉，显然这时父母就是这名儿童的代理（proxy）。通过代理可以增强或者控制对儿童这个真实对象（target）的访问</p>
<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_1.png" class="">
<p>也就是需要一个代理对象，在JDK中，提供了类Proxy的静态方法<code>newProxyInstance</code>，其内容具体如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader classLoader, Class&lt;?&gt;[] interfaces,InvocationHandler invocationHandler)</span> <span class="keyword">throws</span> IllegaArgumentException</span></span><br></pre></td></tr></table></figure>
<p>给与我们来生成一个代理对象（proxy）的方法，她有三个参数</p>
<ul>
<li>classLoader：类加载器</li>
<li>interfaces：绑定的接口，也就是把代理对象绑定到哪些接口下，可以使多个</li>
<li>invocationHandler：绑定代理对象逻辑实现<br>这里的invocationHandler是一个接口InvocationHandler对象，他定义了一个invoke方法<br>然后通过目标对象（target）、方法（method）和参数（args）就能够你反射方法运行了，于是我们就可以实现ProxyBean的代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.intercept.Interceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.invoke.Invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBean</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Interceptor interceptor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 被代理的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interceptor 拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyBean</span><span class="params">(Object target,Interceptor interceptor)</span></span>&#123;</span><br><span class="line">        ProxyBean proxyBean = <span class="keyword">new</span> ProxyBean();</span><br><span class="line">        <span class="comment">//保存被代理对象</span></span><br><span class="line">        proxyBean.target = target;</span><br><span class="line">        <span class="comment">//保存拦截器</span></span><br><span class="line">        proxyBean.interceptor = interceptor;</span><br><span class="line">        <span class="comment">//生成代理对象</span></span><br><span class="line">        Object proxy = Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),proxyBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//异常标识</span></span><br><span class="line">        <span class="keyword">boolean</span> exceptFlag = <span class="keyword">false</span>;</span><br><span class="line">        Invocation invocation = <span class="keyword">new</span> Invocation(target,method,args);</span><br><span class="line">        Object retObj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.interceptor.before())&#123;</span><br><span class="line">                retObj = <span class="keyword">this</span>.interceptor.around(invocation);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                retObj = method.invoke(target,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            exceptFlag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.interceptor.after();</span><br><span class="line">        <span class="keyword">if</span>(exceptFlag)&#123;</span><br><span class="line">            <span class="keyword">this</span>.interceptor.afterThrowing();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.interceptor.afterReturning();;</span><br><span class="line">            <span class="keyword">return</span> retObj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
首先，这个ProxyBean实现了InvocationHandler，因此可以定义invoke方法。其中在getBean方法中，我让其生成一个代理对象，并且创建了一个ProxyBean实例保存目标对象（target）和拦截器，为后面调用做好准备。其次，生成一个代理对象，而这个代理对象挂在target实现的接口之下，所以你可以用target对象实现的接口对这个代理对象实现强制转换，并且将这个代理对象的逻辑挂在ProxyBean实例下，这样就完成了目标对象（target）和代理对象（proxy）的绑定。最后，将代理对象返回给调用者。于是测试代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.intercept.MyInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.proxy.ProxyBean;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.service.impl.HelloServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter4ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照约定获取proxy</span></span><br><span class="line">        HelloService proxy = (HelloService) ProxyBean.getProxyBean(helloService,<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">        proxy.sayHello(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n###############name is null###############&quot;</span>);</span><br><span class="line">        proxy.sayHello(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试代码直接执行，会打印如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before......</span><br><span class="line">around before......</span><br><span class="line">hellozhangsan</span><br><span class="line">around after......</span><br><span class="line">after......</span><br><span class="line">afterReturning......</span><br><span class="line"></span><br><span class="line">###############name is null###############</span><br><span class="line">before......</span><br><span class="line">around before......</span><br><span class="line">after......</span><br><span class="line">afterThrowing......</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h2><p>通过上面约定编程的例子，可以看到，只要按照一定的规则，就可以将代码织入到事先约定的流程中。实际上Spring AOP也是一种约定流程的编程。在Spring中可以使用多种方式配置AOP，因为Spring Boot采用注解方式，所以为了保持一致，这里就只介绍使用@AspectJ注解的方式</p>
<h3 id="为什么使用AOP"><a href="#为什么使用AOP" class="headerlink" title="为什么使用AOP"></a>为什么使用AOP</h3><p>AOP最为典型的应用实际就是数据库事务的管控。例如，当我们需要保存一个用户时，可能要连同它的角色信息一并保存到数据库中。于是流程图如下：</p>
<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_2.png" class="">
<p>这里的用户信息和用户角色信息，我们都可以使用面向对象编程（OOP）进行设计，但是它们在数据库事务中的要求是，要么一起成功，要么一起失败，这样OOP就无能为力了。数据库事务毫无疑问是企业级应用关注的核心问题之一，而是用AOP可以很好的解决这些问题。<br>AOP还可以减少大量重复的工作。在Spring流星之前，我们可以使用JDBC代码实现很多的数据库操作，例如，插入一个用户的信息，我们可以用JDBC代码来实现，代码如下<br><code>UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;user_name_1&quot;</span>);</span><br><span class="line">        user.setNote(<span class="string">&quot;note_1&quot;</span>);</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取数据库事务连接</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/chapter3&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            <span class="comment">//非自动提交事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            result = userDao.insertUser(conn,user);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//回滚事务</span></span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放数据连接资源</span></span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>UserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(Connection conn, User user)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ps = conn.prepareStatement(<span class="string">&quot;insert into t_user(user_name,note) values(?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,user.getUsername());</span><br><span class="line">            ps.setString(<span class="number">2</span>,user.getNote());</span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以注意到，我们获取数据库事务连接、事务操作和关闭数据库连接的过程，都需要使用大量的try…catch…finally…语句去操作，这显然存在大量重复的工作。是否可以替换这些没有必要的重复工作呢，答案是肯定的，因为这里存在这一个默认的流程，流程的顺序如下</p>
<ul>
<li>打开数据库连接，然后对其属性进行设置</li>
<li>执行SQL语句</li>
<li>如果没有异常，则提交事务</li>
<li>如果发生异常，则回滚事务</li>
<li>关闭数据库事务连接<br>如果上面的流程通过约定流程编程设计成如下，会更加方便操作<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_3.png" class="">
从上图可以看出，关于数据库的打开和关闭以及事务的提交和回滚都有流程默认给实现，换句话说，你都不需要完成他们，你需要完成的任务是编写SQL这一步而已，然后织入流程中。于是你就可以看到大量在工作中类似基于Spring开发的代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao = <span class="keyword">null</span>;</span><br><span class="line">······</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> userDao.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
当然，这里只是为了让读者知道约定编程的好处，AOP也是一种约定编程，这里可以看到仅仅使用了一个注解@Transactional，表明该方法需要事务运行，没有任何数据库打开和关闭的代码，也没有事务回滚和提交的代码，却实现了数据库资源的打开和关闭、事务回滚和提交。那么Spring是怎么做到的，大志的流程是：Spring帮你把insertUser方法织入到上面图中的流程中，而数据库连接的打开和关闭以及事务管理都由它给你默认实现，也就是它可以大量重复的流程通过约定的方式抽取出来，然后给与默认实现。例如，这里的数据连接失败的打开和释放、事务的处理。  </li>
</ul>
<h3 id="AOP术语和流程"><a href="#AOP术语和流程" class="headerlink" title="AOP术语和流程"></a>AOP术语和流程</h3><p><font color='red'>Spring AOP是一种基于方法的AOP，他只能应用于方法上。</font><br>下面是AOP的术语：</p>
<ul>
<li>连接点（join point）：对应的是具体被拦截的对象，因为Spring只支持方法，所以被拦截的对象往往是指特定的方法，例如上面HelloServiceImpl的sayHello方法就是一个连接点，AOP将通过动态代理技术把它植入对应的流程中。</li>
<li>切点（point cut）：切面不单单应用于单个方法，也可能是多个类的不同方法，这时，可以通过正则式和指示器的规则去定义，从而适配连接点。</li>
<li>通知（advice）：按照约定的刘成霞的方法，分为前置通知（before）、后置通知（after）、环绕通知（around）、事后返回通知（afterReturning）和异常通知（afterThrowing），他会根据约定植入流程</li>
<li>目标对象（traget）：被代理对象，例如约定编程中的HelloServiceImpl实例就是一个目标对象</li>
<li>引入：是指引入新的类和其方法，增强现有Bean的功能</li>
<li>织入：动态的代理技术，为原有服务对象生成代理对象，然后将与切点定义匹配的连接点拦截，并按照约定将各类通知织入约定流程的过程</li>
<li>切面（aspect）：是一个可以定义切点、各类通知和引入的内容，Spring AOP将通过它的信息来增强Bean的功能或者将对应的方法织入流程。<br>上面的描述还是相对抽象，具体见下图：<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_4.png" class=""></li>
</ul>
<h2 id="AOP开发详解"><a href="#AOP开发详解" class="headerlink" title="AOP开发详解"></a>AOP开发详解</h2><p>这里我们采用@AspectJ的注解方式讨论AOP的开发。首先需要确定拦截什么方法，让它织入约定的流程中。</p>
<h3 id="确定连接点"><a href="#确定连接点" class="headerlink" title="确定连接点"></a>确定连接点</h3><p>设计一个UserService接口，她有一个printUser方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.service;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着实现一个实现类，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;检查用户参数是否为空!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span>+user.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;username=&quot;</span>+user.getUsername());</span><br><span class="line">        System.out.println(<span class="string">&quot;note=&quot;</span>+user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一个普通的服务的接口和实现类就是先了。下面我们将以printUser方法作为连接点，进行AOP编程</p>
<h3 id="开发切面"><a href="#开发切面" class="headerlink" title="开发切面"></a>开发切面</h3><p>有了连接点，我们还需要一个切面，通过它可以描述AOP其他的信息，用以描述流程的织入，下面创建一个切面类，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.printUser(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.printUser(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.printUser(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.printUser(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要注意@Aspect作为切面声明，当以@Aspect作为注解时，Spring就会知道这是一个切面，然后我们就可以通过各类注解来定义各类的通知了。折辱代码当中的@Before、@After、@AfterReturning等，通过之前的介绍，应该知道他们就是定义流程中的方法，然后即将由AOP将其织入约定的流程中</p>
<h3 id="切点定义"><a href="#切点定义" class="headerlink" title="切点定义"></a>切点定义</h3><p>在上面切面的定义中，我们看到了@Before、@After等注解，这个正则表达式的作用是定义什么时候启动AOP，毕竟不是所有功能都需要启用AOP的，也就是SPring会通过正则去匹配，确定对应的连接点开启切面编程，但是上面的代码重复写了同一个正则式，这显然比较冗余，为了克服这个问题，Spring定义了切点（PointCut）的概念，切点的作用就是向Spring描述哪些类的那些方法需要开启AOP编程，上面的代码可以修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.printUser(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码中，使用注解@Point来定义切点，他标注在方法pointCut上，则在后面的通知注解中就可以使用<font color='red'>方法名称</font>来定义。<br>下面我们对正则进行分析，首先看下正则式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.printUser(..))</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>execution：表示在执行的时候，拦截里面正则匹配的方法；</li>
<li>*：表示任意返回类型的方法</li>
<li>com.example.chapter4.aspect.service.impl.UserServiceImpl：制定目标对象的全限定名称</li>
<li>printUser：指定目标对象的方法</li>
<li>(..)：表示任意参数进行匹配</li>
</ul>
<p>这样Spring就可以通过正则表达式知道你需要对类UserServiceImpl的printUser方法进行AOP增强，她就会将匹配的方法织入到约定流程中，完成AOP编程。<br>对于这个正则表达式而言，他还可以使用AspectJ的指示器，下面是AspectJ关于Spring AOP切点的指示器  </p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>arg()</td>
<td>限定连接点方法参数</td>
</tr>
<tr>
<td>@args()</td>
<td>通过连接点方法参数上的注解进行限定</td>
</tr>
<tr>
<td>execution()</td>
<td>用于匹配是连接点的执行方法</td>
</tr>
<tr>
<td>this()</td>
<td>限定连接点匹配AOP代理Bean引用为指定的类型</td>
</tr>
<tr>
<td>target</td>
<td>目标对象（即被代理对象）</td>
</tr>
<tr>
<td>@target()</td>
<td>限定目标对象的配置了指定的注解</td>
</tr>
<tr>
<td>within</td>
<td>限制连接点匹配指定的类型</td>
</tr>
<tr>
<td>@within()</td>
<td>限定连接点带有匹配注解类型</td>
</tr>
<tr>
<td>@annotation()</td>
<td>限定带有指定注解的连接点</td>
</tr>
</tbody></table>
<p>例如上述服务类对象在Spring IoC容器的名称为userServiceImpl，而我们只想让这个类的pringUser方法织入AOP流程，那么久可以做如下限定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* com.example.chapter4.*.*.*.*.printUser(..) &amp;&amp; bean(<span class="string">&#x27;UserServiceImpl&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>表达式中&amp;&amp;代表并且的意思，而bean中定义的字符串代表对SpringBean名称的限定，这样就限定了具体的类</p>
<h3 id="测试AOP"><a href="#测试AOP" class="headerlink" title="测试AOP"></a>测试AOP</h3><p>上面完成了连接点、切面和切点的定义，下面要测试AOP，为此需要先搭建一个Web开发环境，开发一个用户控制器（UserController），代码如下  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/print&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">printUser</span><span class="params">(Long id, String userName, String note)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setUsername(userName);</span><br><span class="line">        user.setNote(note);</span><br><span class="line">        userService.printUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里通过自动注入UserService服务接口，然后使用它进行用户信息打印，这个方法满足了切点的定义，因此Spring AOP会将其织入到对应的流程中，然后下面配置Spring Boot的配置文件，使其能够运行，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.MyAspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter4Application</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义切面</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;myAspect&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyAspect <span class="title">initMyAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAspect();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动切面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter4Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调试运行这段代码，打开浏览器，等待服务启动完成后，输入地址<code>http://localhost:8080/user/print?id=1&amp;userName=user_name_1&amp;note=2323</code>，查看后台的日志，显示的内容如下</p>
<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_5.png" class="">
<p>如果将Controller中的user设置为null，然后传递进去之后，控制台会打印如下内容：</p>
<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_6.png" class="">
<p><font color='red'>可以看到，无论是否发生异常，后置通知after都会被运行</font></p>
<h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p>环绕通知（Around）是所有通知中最为强大的通知，强大也意味着难以控制。一般而言，使用它的场景是在你需要大幅度修改原有目标对象的服务逻辑时，否则都尽量使用其他的通知。环绕通知是一个取代原有目标对象方法的通知。当然它也提供了回调原有目标对象方法的能力，我们现在MyAspect中加入环绕通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;around before......&quot;</span>);</span><br><span class="line">    <span class="comment">//回调目标对象的原有方法</span></span><br><span class="line">    jp.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;around after......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就加入了一个环绕通知，并且在它之前和之后都加入了打印内容，而它拥有一个ProceedingJoinPoint类型的参数。这个参数的对象有一个proceed方法，通过这个方法可以回调原有目标对象的方法，在<code>jp.proceed();</code>上添加断点调试，发现他是一个被Spring封装过的对象，但是我们可以明显看出他是包含原有目标对象的信息，这样就可以通过它的proceed方法回调原有目标对象的方法，测试发现，打印的顺序是不一样的，所以推荐尽量使用其他同志的方式，避免使用环绕通知</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>在测试AOP的时候，我们打印了用户信息，如果用户信息为空，则会抛出异常。事实上，我们可以检测用户信息是否为空，如果为空，不再打印，这样就不会产生异常了。但现有UserService接口没有提供这样的功能，这里假定UserService这个服务并不是自己提供的，而是别人提供的，我们不能修改他，这是Spring还允许增强这个接口的功能，我们可以为这个接口引入新的接口，例如，要引入一个用户检测的接口UserValidator，其定义代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.validator;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserValidator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检测用户对象是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着编写下实现类UserValidatorImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.validator.impl;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.validator.UserValidator;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidatorImpl</span> <span class="keyword">implements</span> <span class="title">UserValidator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;引入新的接口：&quot;</span>+UserValidator.class.getSimpleName());</span><br><span class="line">        <span class="keyword">return</span> user!=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们通过Spring AOP引入的定义就能够增强UserService接口的功能，这个时候在代码MyAspect中添加如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeclareParents(value=&quot;com.example.chapter4.aspect.service.impl.UserServiceImpl+&quot;,defaultImpl = UserValidatorImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> UserValidator userValidator;</span><br></pre></td></tr></table></figure>
<p>这里我们看到了一个注解<code>@DeclareParents</code>，他的作用是引入新的类来增强服务，它有两个必须配置的属性<code>value</code>和<code>defaultImpl</code></p>
<ul>
<li>value:指向你要增强功能的目标对象，这里是要增强UserServiceImpl对象，因此可以看到配置为<code>com.example.chapter4.aspect.service.impl.UserServiceImpl+</code></li>
<li>defaultImpl:引入增强功能的类，这里配置为UserValidatorImpl，用来提供校验用户是否为空的功能。<br>为了验证它，我们在Controller中加入一个新的方法，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/vp&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">validateAndPring</span><span class="params">(Long id, String userName, String note)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(id);</span><br><span class="line">    user.setUsername(userName);</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    <span class="comment">//强制转换</span></span><br><span class="line">    UserValidator userValidator = (UserValidator)userService;</span><br><span class="line">    <span class="comment">//验证用户是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(userValidator.validate(user))&#123;</span><br><span class="line">        userService.printUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
先把原来的userService对象强制转换成了UserValidator对象，然后就可以使用验证方法去验证用户对象是否为空。使用浏览器打开<code>http://localhost:8080/user/vp?id=1&amp;userName=user_name_1&amp;note=2323</code>，打印日志如下：</li>
</ul>
<h3 id="通知获取参数"><a href="#通知获取参数" class="headerlink" title="通知获取参数"></a>通知获取参数</h3><p>在上述通知中，大部分我们没有给通知传递参数。有时候我们希望能够传递参数给通知，我们只需要在切点出加入对应的正则就可以了。当然对于非环绕通知我们还可以使用一个连接点（JoinPoint）类型的参数，通过它也可以获取参数。在MyAspect中加入如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut() &amp;&amp; args(user)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeParam</span><span class="params">(JoinPoint point,User user)</span></span>&#123;</span><br><span class="line">    Object[] args = point.getArgs();</span><br><span class="line">    System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正则pointCut()&amp;&amp;args(user)中，在pointCut()表示启用原来定义切点的规则，并且约定将连接点（目标对象方法）名称为user的参数传递进来。这里要注意，JoinPoint类型的参数对于非环绕通知而言，Spring AOP会自动把它传递到通知中；对于环绕通知而言，可以使用ProceedingJoinPoint类型的参数。之前我们讨论过它的结构，使用它将允许目标对象的回调，这里不妨在这个方法上加入断电来看看获取的参数是什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut() &amp;&amp; args(user)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeParam</span><span class="params">(JoinPoint point,User user)</span></span>&#123;</span><br><span class="line">    Object[] args = point.getArgs();</span><br><span class="line">    System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_7.png" class="">
<p>从监控中，我们看到参数user的信息传递成功了。通过连接点参数的getArgs方法获取所有参数，而对于连接点参数还可以获取目标对象的信息，从而完成需要的工作。</p>
<h3 id="织入"><a href="#织入" class="headerlink" title="织入"></a>织入</h3><p>织入是一个生成工台代理对象并且将切面和目标对象方法编织成为约定流程的过程，对于流程上的通知，上面已经有了比较完善的说明，而上面我们都是采用接口+实现类的模式，这是Spring推荐的方式。但是对于是否拥有接口则不是Spring AOP的强制要求，对于动态代理也有很多实现方式，我们之前谈到的JDK知识其中一种。Spring采用了JDK和CGLIB，当你需要使用AOP的类拥有接口时，它会自动JDK动态代理运行，否则以CGLIB运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;检查用户参数是否为空!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span>+user.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;username=&quot;</span>+user.getUsername());</span><br><span class="line">        System.out.println(<span class="string">&quot;note=&quot;</span>+user.getNote());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改控制器的依赖注入，直接依赖于不存在的接口的实现类，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/print&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">printUser</span><span class="params">(Long id, String userName, String note)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(id);</span><br><span class="line">    user.setUsername(userName);</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    userService.printUser(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们在注释的地方加入断点，可以看到如下信息，此时已经说明Spring已经使用了CGLIB为我们生成代理对象，从而将切面内容织入对应的流程</p>
<img src="/2019/04/23/%E7%AC%AC4%E7%AB%A0-Spring-AOP/screenshot_8.png" class="">

<h2 id="多个切面"><a href="#多个切面" class="headerlink" title="多个切面"></a>多个切面</h2><p>之前是一个切面的运行，而实际上Spring还可以支持多个切面的运行。在组织多个切面时，我们需要知道其运行的吮吸，首先创建3个切面类，代码如下<br><code>MyAspect1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.manyAspects(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manayAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect1 before......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect1 after......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect1 afterReturning......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyAspect2</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.manyAspects(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manayAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect2 before......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect2 after......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect2 afterReturning......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyAspect3</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.chapter4.aspect.service.impl.UserServiceImpl.manyAspects(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manayAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect3 before......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect3 after......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;manayAspects()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect3 afterReturning......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就存在了3个切面，他们同事拦截UserServiceImpl的manyAspects方法，所以我们来实现这个新的方法，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4.aspect.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">······</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manyAspects</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试多个切面的顺序!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同事需要改造UserService接口提供manayAspects方法。这个过程比较简单，不再展示。接着我们在UserController这个控制器中加入新的方法，对多个切面进行测试，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/manyAspects&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">manyAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userService.manyAspects();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;manayAspects&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就调用了UserServiceImpl的manyAspects方法，然后在配置文件中加入这3个切面的Bean，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chapter4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.MyAspect1;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.MyAspect2;</span><br><span class="line"><span class="keyword">import</span> com.example.chapter4.aspect.MyAspect3;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定扫描包</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.example.chapter4.aspect&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter4Application</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义切面</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;myAspect1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyAspect1 <span class="title">initMyAspect1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAspect1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义切面2</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;myAspect2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyAspect2 <span class="title">initMyAspect2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAspect2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义切面3</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;myAspect3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyAspect3 <span class="title">initMyAspect3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAspect3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动切面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter4Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行这个文件，就可以看到Tomcat的运行日志，待启动好之后，浏览器中输入<code>http://localhost:8080/user/manyAspects</code>，在日志中可以看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyAspect1 before......</span><br><span class="line">MyAspect2 before......</span><br><span class="line">MyAspect3 before......</span><br><span class="line">测试多个切面的顺序!</span><br><span class="line">MyAspect3 after......</span><br><span class="line">MyAspect3 afterReturning......</span><br><span class="line">MyAspect2 after......</span><br><span class="line">MyAspect2 afterReturning......</span><br><span class="line">MyAspect1 after......</span><br><span class="line">MyAspect1 afterReturning......</span><br></pre></td></tr></table></figure>
<p>从日志中可以看出，切面的执行顺序是混乱的，而在我做的测试中没有找到多个切面执行的顺序规律。但是在很多时候，开发者需要确定切面的执行顺序，来决定哪些切面先执行，哪些切面后执行。为此，Spring提供了@Order，例如，我们指定MyAspect1的执行顺序为1，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义切面</span></span><br><span class="line"><span class="meta">@Bean(name=&quot;myAspect1&quot;)</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyAspect1 <span class="title">initMyAspect1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyAspect1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的日志内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyAspect1 before......</span><br><span class="line">MyAspect2 before......</span><br><span class="line">MyAspect3 before......</span><br><span class="line">测试多个切面的顺序!</span><br><span class="line">MyAspect3 after......</span><br><span class="line">MyAspect3 afterReturning......</span><br><span class="line">MyAspect2 after......</span><br><span class="line">MyAspect2 afterReturning......</span><br><span class="line">MyAspect1 after......</span><br><span class="line">MyAspect1 afterReturning......</span><br></pre></td></tr></table></figure>
<p>我们可以看到，对于前置通知before都是从小到大执行的，而对于后置通知和返回通知都是从大到小运行的，这就是一个典型的责任链模式的顺序。同样的使用Ordered接口也可以指定顺序，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect1</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的，MyAspect2和MyAspect3都可以做类似的操作，这样就可以指定切面的顺序，这样不如使用@Order注解方便。</p>
<p>-</p>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>第7章 使用性能利器Redis</title>
    <url>/2019/05/25/%E7%AC%AC7%E7%AB%A0-%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%A9%E5%99%A8Redis/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_53.jpg"></p>
<h1 id="使用性能利器Redis"><a href="#使用性能利器Redis" class="headerlink" title="使用性能利器Redis"></a>使用性能利器Redis</h1><p>要使用Redis，需要先加入Redis依赖，代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入Redis的客户端驱动jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样我们就引入了Spring对Redis的starter，只是在默认的情况下，spring-boot-starter-data-redis会依赖Lettuce的Redis客户端驱动，一般项目中我们会使用Jedis，所以代码中使用<exliusions>元素将依赖排除，然后再引入Jedis的依赖</p>
<h2 id="在Spring-Boot中配置和使用Redis"><a href="#在Spring-Boot中配置和使用Redis" class="headerlink" title="在Spring Boot中配置和使用Redis"></a>在Spring Boot中配置和使用Redis</h2><h3 id="在Spring-Boot中配置Redis"><a href="#在Spring-Boot中配置Redis" class="headerlink" title="在Spring Boot中配置Redis"></a>在Spring Boot中配置Redis</h3><p>只需要在配置文件application.properties中加入如下代码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Redis</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.min-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-wait</span>=<span class="string">2000ms</span></span><br><span class="line"><span class="comment">#配置Redis服务器属性</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#Redis连接超时时间，单位毫秒</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">1000ms</span></span><br></pre></td></tr></table></figure>
<p>RedisTemplate会默认使用JdkSerializationRedisSerializer进行序列化键值，这样便能够存储在Redis服务器中。如果这样Redis服务器存入的便是一个经过序列化后的特殊字符串，有时候对于我们跟踪并不是很友好。如果我们在Redis只是支持字符串，并不能支持Java对象存储。为了克服这个问题，可以通过设置RedisTemplate的序列化来处理。下面我们在Spring Boot中配置Redis的启动文件中修改RedisTemplate的序列化器，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入RedisTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义自定义后初始化方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        initRedisTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置RedisTemplate的序列化器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRedisTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisSerializer stringSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(McApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先通过@Autowired注入由Spring Boot根据配置生成的RedisTemplate对象，然后利用Spring Bean生命周期的特性使用注解@PostConstruct自定义后初始化方法。在这个方法里，把RedisTemplate的键序列化器修改为StringRedisSerializer。RedisTemplate中默认的定义了一个StringRedisSerializer对象，所以不需要创建新的，直接从中取，然后把RedisTemplate关于键和散列数据类型的field都修改为使用StringRedisSerializer进行序列化，这样我们在Redis服务器上得到的键和散列的field就都可以字符串存储了</p>
<h3 id="操作Redis数据类型"><a href="#操作Redis数据类型" class="headerlink" title="操作Redis数据类型"></a>操作Redis数据类型</h3><p>首先简单介绍下RedisTemplate的使用</p>
<ol>
<li>操作字符串和hash数据<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.redis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.BoundHashOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/stringAndHash&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">stringAndHash</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里使用了JDK的序列化，所以Redis保存时不是整数，不能运算</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;int_key&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;int&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用运算</span></span><br><span class="line">        stringRedisTemplate.opsForValue().increment(<span class="string">&quot;int&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//对int减一（书上说的可能比较早了，现在是支持减一操作的）</span></span><br><span class="line">        stringRedisTemplate.opsForValue().decrement(<span class="string">&quot;int&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取底层Hedis连接</span></span><br><span class="line">        Jedis jedis = (Jedis) stringRedisTemplate.getConnectionFactory().getConnection().getNativeConnection();</span><br><span class="line">        <span class="comment">//减1操作，这个命令RedisTemplate不支持，所以我们先获取底层的连接再操作</span></span><br><span class="line">        jedis.decr(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; hash = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hash.put(<span class="string">&quot;field1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        hash.put(<span class="string">&quot;field2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        <span class="comment">//存入一个散列数据类型</span></span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(<span class="string">&quot;hash&quot;</span>,hash);</span><br><span class="line">        <span class="comment">//新增一个字段</span></span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;field3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定散列操作的key，这样可以连续对同一个散列数据类型进行操作</span></span><br><span class="line">        BoundHashOperations hashOps = stringRedisTemplate.boundHashOps(<span class="string">&quot;hash&quot;</span>);</span><br><span class="line">        <span class="comment">//输出两个字段</span></span><br><span class="line">        hashOps.delete(<span class="string">&quot;field1&quot;</span>,<span class="string">&quot;field2&quot;</span>);</span><br><span class="line">        <span class="comment">//新增一个字段</span></span><br><span class="line">        hashOps.put(<span class="string">&quot;field4&quot;</span>,<span class="string">&quot;value4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
这里@Autowired注入了Spring Boot为我们自动初始化的RediTemplate和StringRedisTemplate对象。看到testStringAndHash方法，首先存入一个key1的数据，然后是init_key，但是int_key存入Redis服务器中，因为采用了JDK序列化，所以Redis服务器中她不是证书，而是一个被JDK序列化器序列化后的二进制字符串，是没有办法使用Redis命令进行运算的。为了解决这个问题，这里使用StringRedisTemplate对象保存一个int的证书，这样就能够运算了，接着进行加一运算，但是因为RedisTemplate并不支持底层所有的Redis命令，所以这里现货区了原始的Redis连接的Jedis对象，用它来做减一操作。然后是操作散列数据类型，在插入多个散列的field时，可采用Map，然后为了方便对同一个数据操作，这里代码还获取了BoundHashOperations对象进行操作，这样对同一个数据操作就方便许多了。</li>
<li>操作列表数据<br>列表数据也是常用的数据类型，在Redis中列表是一种链表结构，这就意味着查询性能不高，而增删节点的性能高。在Redis中存在从左到右的操作，为了方便测试，我们在上面的代码中加入如下代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: stringRedisTemplate操作链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入两个列表，注意他们在链表的顺序</span></span><br><span class="line">    <span class="comment">//链表从左到右顺序为V10,V8,V6,V4,V2</span></span><br><span class="line">    stringRedisTemplate.opsForList().leftPushAll(<span class="string">&quot;list1&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;v4&quot;</span>,<span class="string">&quot;v6&quot;</span>,<span class="string">&quot;v8&quot;</span>,<span class="string">&quot;v10&quot;</span>);</span><br><span class="line">    <span class="comment">//链表从左到右的顺序为v1,v2,v3,v4,v5,v6</span></span><br><span class="line">    stringRedisTemplate.opsForList().rightPushAll(<span class="string">&quot;list2&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;v3&quot;</span>,<span class="string">&quot;v4&quot;</span>,<span class="string">&quot;v5&quot;</span>,<span class="string">&quot;v6&quot;</span>);</span><br><span class="line">    <span class="comment">//绑定list2链表操作</span></span><br><span class="line">    BoundListOperations boundListOperations = stringRedisTemplate.boundListOps(<span class="string">&quot;list2&quot;</span>);</span><br><span class="line">    <span class="comment">//从右边弹出一个成员</span></span><br><span class="line">    Object result1 = boundListOperations.rightPop();</span><br><span class="line">    <span class="comment">//获取定位元素，Redis从0开始计算，这里值为v2</span></span><br><span class="line">    Object result2 = boundListOperations.index(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//从左边插入链表</span></span><br><span class="line">    boundListOperations.leftPush(<span class="string">&quot;v0&quot;</span>);</span><br><span class="line">    <span class="comment">//求链表长度</span></span><br><span class="line">    Long size = boundListOperations.size();</span><br><span class="line">    <span class="comment">//求链表下标区间成员，整个链表下标范围为0到size-1，这里不取最后一个元素</span></span><br><span class="line">    List elements = boundListOperations.range(<span class="number">0</span>,size-<span class="number">2</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上述操作是基于StringRedisTemplate的，所以保存到Redis服务器都是字符串类型，这里有两点需要注意。首先是列表元素的顺序问题，是从左到右还是从右到左，这是容易弄糊涂的问题，其次是下标，在Redis中是以0开始的，这与Java数组类似。</li>
<li>操作集合数据<br>在Redis中是不允许成员重复的，她在数据结构上是一个散列表的结构，所以对于它而言是无序的，对于两个或者以上的集合，Redis还提供了交集、并集和差集的运算。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: stringRedisTemplate操作集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/set&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意：这里v1重复两次，因为集合不允许重复，所以只是插入5个成员到集合中</span></span><br><span class="line">    stringRedisTemplate.opsForSet().add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;v3&quot;</span>,<span class="string">&quot;v4&quot;</span>,<span class="string">&quot;v5&quot;</span>);</span><br><span class="line">    stringRedisTemplate.opsForSet().add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;v4&quot;</span>,<span class="string">&quot;v6&quot;</span>,<span class="string">&quot;v8&quot;</span>);</span><br><span class="line">    <span class="comment">//绑定set1集合操作</span></span><br><span class="line">    BoundSetOperations boundSetOperations = stringRedisTemplate.boundSetOps(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">    <span class="comment">//增加两个元素</span></span><br><span class="line">    boundSetOperations.add(<span class="string">&quot;v6&quot;</span>,<span class="string">&quot;v7&quot;</span>);</span><br><span class="line">    <span class="comment">//删除两个元素</span></span><br><span class="line">    boundSetOperations.remove(<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;v7&quot;</span>);</span><br><span class="line">    <span class="comment">//返回所有元素</span></span><br><span class="line">    Set set1 = boundSetOperations.members();</span><br><span class="line">    <span class="comment">//求成员数</span></span><br><span class="line">    Long size = boundSetOperations.size();</span><br><span class="line">    <span class="comment">//求set1和set2交集</span></span><br><span class="line">    Set inter = boundSetOperations.intersect(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line">    <span class="comment">//求交集，并且用新集合inter保存</span></span><br><span class="line">    boundSetOperations.intersectAndStore(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;inter&quot;</span>);</span><br><span class="line">    <span class="comment">//求差集</span></span><br><span class="line">    Set diff = boundSetOperations.diff(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line">    <span class="comment">//求差集，并且用新集合diff保存</span></span><br><span class="line">    boundSetOperations.diffAndStore(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;diff&quot;</span>);</span><br><span class="line">    <span class="comment">//求并集</span></span><br><span class="line">    Set union = boundSetOperations.union(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line">    <span class="comment">//求并集，并且用新集合union保存</span></span><br><span class="line">    boundSetOperations.unionAndStore(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;union&quot;</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里在添加几个set1的时候，存在两个V1一样的元素，因为集合不允许重复，所以实际上再集合只算是一个元素。然后可以看到对集合各种操作，在最后还有交集、差集和并集的操作，这些是集合最常用的操作。</li>
<li>操作有序集合<br>有序集合常用作网站排名，有序集合和无序集合差异往往不大，也是一种散列表存储的方式，同时它的有序性只是靠她在数据结构中增加一个属性——score（分数）得以支持，为了支持这个变化，Spring提供TypeTuple接口，定义了两个方法，并且还提供了默认的实现类DefaultTypedTuple，在TypedTupl的接口设计中，value是保存有序集合的值，score是保存分数，Redis是使用分数来完成集合的排序<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作有序集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/zset&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">zset</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//分数</span></span><br><span class="line">        <span class="keyword">double</span> score = i*<span class="number">0.1</span>;</span><br><span class="line">        <span class="comment">//创建一个TypedTuple对象，存入值和分数</span></span><br><span class="line">        ZSetOperations.TypedTuple&lt;String&gt; typedTuple = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;value&quot;</span>+i,score);</span><br><span class="line">        typedTuples.add(typedTuple);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往有序集合插入元素</span></span><br><span class="line">    stringRedisTemplate.opsForZSet().add(<span class="string">&quot;zset1&quot;</span>,typedTuples);</span><br><span class="line">    <span class="comment">//绑定zset1有序集合操作</span></span><br><span class="line">    BoundZSetOperations&lt;String,String&gt; zSetOperations = stringRedisTemplate.boundZSetOps(<span class="string">&quot;zset1&quot;</span>);</span><br><span class="line">    <span class="comment">//增加一个元素</span></span><br><span class="line">    zSetOperations.add(<span class="string">&quot;value10&quot;</span>,<span class="number">0.26</span>);</span><br><span class="line">    Set&lt;String&gt; setRange = zSetOperations.range(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="comment">//按分数排序获取有序集合</span></span><br><span class="line">    Set&lt;String&gt; setScore = zSetOperations.rangeByScore(<span class="number">0.2</span>,<span class="number">0.6</span>);</span><br><span class="line">    <span class="comment">//定义值范围</span></span><br><span class="line">    RedisZSetCommands.Range range = <span class="keyword">new</span> RedisZSetCommands.Range();</span><br><span class="line">    range.gt(<span class="string">&quot;value3&quot;</span>);<span class="comment">//大于value3</span></span><br><span class="line">    <span class="comment">//range.gte(&quot;value3&quot;);//大于等于value3</span></span><br><span class="line">    <span class="comment">//range.lt(&quot;value8&quot;);//小于value8</span></span><br><span class="line">    range.lte(<span class="string">&quot;value8&quot;</span>);<span class="comment">//小于等于value8</span></span><br><span class="line">    <span class="comment">//按值排序，请注意这个排序是按字符串排序</span></span><br><span class="line">    Set&lt;String&gt; setLex = zSetOperations.rangeByLex(range);</span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line">    zSetOperations.remove(<span class="string">&quot;value9&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">    <span class="comment">//求分数</span></span><br><span class="line">    Double score = zSetOperations.score(<span class="string">&quot;value8&quot;</span>);</span><br><span class="line">    <span class="comment">//在下标区间下，按分数排序，同时返回value和score</span></span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; rangeSet = zSetOperations.rangeWithScores(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="comment">//在分数区间下，按分数排序，同时返回value和score</span></span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; scoreSet = zSetOperations.rangeByScoreWithScores(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="comment">//按从大到小排序</span></span><br><span class="line">    Set&lt;String&gt; reverseSet = zSetOperations.reverseRange(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
代码中使用TypedTuple保存有序集合的元素，在默认的情况下，有序集合是从小到大地排序的，按下表、分数和值进行排序获取有序集合的元素，或者联通分数一期返回，有时候还可以进行从大到小的排序，只是在使用值排序时，我们可以使用Spring为我们创建的Range类，他可以定义值的范围</li>
</ol>
<h2 id="Redis的一些特殊用法"><a href="#Redis的一些特殊用法" class="headerlink" title="Redis的一些特殊用法"></a>Redis的一些特殊用法</h2><p>Redis支持事务、流水线、发布订阅和Lua语言等功能，<font color='red'>这些也是Redis常用的功能</font>。<font color='red'>在高并发的场景下，往往我们需要保证数据的一致性，这时考虑使用Redis事务或者利用Redis执行的原子性来达到数据一致性的目的，在需要大批量执行Redis命令的时候，我们可以使用流水线来执行命令，这样可以极大的提升Redis执行速度。</font></p>
<h3 id="使用Redis事务"><a href="#使用Redis事务" class="headerlink" title="使用Redis事务"></a>使用Redis事务</h3><p>在Redis中使用事务，通常的命令组合是watch…multi…exec，也就是要在一个Redis连接中执行多个命令，这时我们考虑使用SessionCallback接口达到这个目的。</p>
<ul>
<li>watch：监控Redis的一些键</li>
<li>multi：开始事务，开始后不会马上执行，而是放在一个队列里，所以此时调用Redis的命令，结果都是返回null</li>
<li>exec：执行事务，只是在执行前会判断被watch监控的Redis的键的数据是否发生变化，如果他认为发生了变化，那么Redis就会取消事务，否则就会执行事务，Redis在执行事务时，要么全部执行，要么全部不执行，而且不会被其他客户端打断<img src="/2019/05/25/%E7%AC%AC7%E7%AB%A0-%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%A9%E5%99%A8Redis/screenshot_1.png" class="">
下面测试这样的一个过程，只是这里需要保证RedisTemplate的键和散列结构的field使用字符串序列化器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用Redis事务机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/multi&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">multi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List list = (List) redisTemplate.execute((RedisOperations operations) -&gt; &#123;</span><br><span class="line">        <span class="comment">//设置要监控key1</span></span><br><span class="line">        operations.watch(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="comment">//开启事务，在exec命令执行前，全部都只是进入队列</span></span><br><span class="line">        operations.multi();</span><br><span class="line">        operations.opsForValue().set(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        <span class="comment">//operations.opsForValue().increment(&quot;key&quot;,1);//①</span></span><br><span class="line">        <span class="comment">//获取值降为null，因为redis只是把命令放入到队列</span></span><br><span class="line">        Object value2 = operations.opsForValue().get(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;命令在队列，所以value为null【&quot;</span>+value2+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        operations.opsForValue().set(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        Object value3 = operations.opsForValue().get(<span class="string">&quot;key3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;命令在队列，所以value为null【&quot;</span>+value3+<span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行exec命令，将先判断key1是否在监控后被修改过，如果是则不执行事务，否则执行事务</span></span><br><span class="line">        <span class="keyword">return</span> operations.exec();<span class="comment">//②</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
为了揭示Redis事务的特性，我们对这段代码做一下两种测试</li>
<li>现在Redis客户端情况key2和key3两个键的数据，然后在②处设置断点，在调试的环境下让请求到断点，此时在Redis修改key1的值，然后跳过断点，在请求完成后再Redis上查询key2和key3的值，可以发现key2、key3返回的都是空（nil），因为程序中先使得Redis的watch命令监控了key1的值，而后的multi让之后的命令进入队列，而在exec方法运行前我们修改了key1，根据Redis事务的规则，她在exec方法后会探测key1是否被修改过，如果没有则会执行事务，否则就取消事务，所以key2和key3没有被保存到Redis服务器中</li>
<li>继续把key2和key3两个值清空，把①处的注释取消，让代码可以运行，因为key1是一个字符串，所以这里代码是对字符串加一，这显然是不能运算的。同样的，我们运行这段代码后，可以看到服务器抛出了异常，然后我们去Redis服务查询key2和key3，<font color='red'>我们可以看到它们已经有值了。这是Redis事务和数据库事务不一样，对于Redis事务是先让命令进入队列，所以一开始他并没有检测这个加一命令是否能够成功，只是exec命令执行的时候，才发现错误，对于出错的命令Redis只是报出错误，而错误后面的命令已久被执行，所以key2和key3都存在数据</font>。为了克服这个问题，一般我们要在执行Redis事务前，要严格地检查数据，以避免这样的情况发生。</li>
</ul>
<h3 id="使用Redis流水线"><a href="#使用Redis流水线" class="headerlink" title="使用Redis流水线"></a>使用Redis流水线</h3><p>在系统的默认情况，Redis客户端是一条条发送给Redis服务器，这样显然性能不高。早关系数据库我们可以使用批量，这也是只有需要执行SQL时，才一次性地发送所有SQL去执行，这样性能就提高了许多。对于Redis也是可以的，这边事流水线（pipeline）技术，使用流水线后就可以大幅度的在需要执行很多命令时提升Redis的性能<br>下面我们使用Redis流水线技术测试10万次读取的功能，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用Redis流水线测试性能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pipeline&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">pipeline</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Long start = System.currentTimeMillis();</span><br><span class="line">    List list = (List)redisTemplate.executePipelined((RedisOperations operations)-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100000</span>; i++)&#123;</span><br><span class="line">            operations.opsForValue().set(<span class="string">&quot;pipeline_&quot;</span>+i,<span class="string">&quot;value_&quot;</span>+i);</span><br><span class="line">            String value = (String)operations.opsForValue().get(<span class="string">&quot;pipeline_&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">100000</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;命令指示进入队列，所以值为空【&quot;</span>+value+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Long end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时:&quot;</span>+(end-start)+<span class="string">&quot;毫秒。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里沿用SessionCallback接口执行写入和读出各10万次Redis，只是修改为了Lamdba表达式而已。测试中，10万次读写基本保持200-600ms，速度十分快。在使用非流水线的情况下，美妙大概执行2-3万条命令，流水线可以提升10倍速度，十分适合大数据量的执行。<br>这里需要注意的是以下两点</p>
<ul>
<li>这里只是测试，常规情况下一定要考虑内存控件的消耗，他最终返回一个List对象，如果过多的命令执行返回结果保存在List中，显然会内存小号过大，尤其在高并发的网站中就很容易JVM移除异常，这个时候考虑使用迭代的方法执行Redis命令</li>
<li>与实务一样，使用流水线的过程中，所有的命令也只是进入队列而没有执行，所以执行的命令返回也是空</li>
</ul>
<h3 id="使用Redis发布订阅"><a href="#使用Redis发布订阅" class="headerlink" title="使用Redis发布订阅"></a>使用Redis发布订阅</h3><ol>
<li>Redis消息监听器<br><font color='red'>发布订阅是消息的一种常用模式</font> 。例如，在企业分配任务之后，可以通过邮件、短信或者微信通知到相关的责任人，这就是一种典型的发布订阅模式。首先是Redis提供一个渠道，让消息能够发送到这个渠道上，而多个系统可以监听这个渠道，如短信、微信或者邮件系统都可以监听这个渠道，当一条消息发送到渠道，渠道就会通知它的坚挺着，这样短信、微信和右键系统就能够得到这个渠道给他们的消息了，这些坚挺着会根据自己的需要去处理这个消息，于是我们就可以得到各种各样的通知了。原理如下图所示<img src="/2019/05/25/%E7%AC%AC7%E7%AB%A0-%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%A9%E5%99%A8Redis/screenshot_2.png" class="">
为了接收Redis渠道发送过来的消息，我们先定义一个消息监听器（MessageListener）,代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.redis.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: mc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Redis监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-08-10 18:35</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//消息体</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        <span class="comment">//渠道名称</span></span><br><span class="line">        String topic = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        System.out.println(body);</span><br><span class="line">        System.out.println(topic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里的onMessage方法是得到消息后的处理方法，其中message参数代表Redis发送过来的消息，pattern是渠道名称，onMessage方法是打印了他们的内容。这里因为标注了@Component注解，所以Spring Boot扫描后，会把它自动装配到IoC容器中<br>接着我们在Spring Boot的启动文件中配置其他信息，让系统能够监听Redis的消息，代码如下</li>
<li>监听Redis发布的消息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Redis连接工厂</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis消息监听器</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MessageListener redisMsgListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务池</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolTaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建任务池，运行线程等待处理Redis的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title">initTaskScheduler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(taskScheduler != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">    taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">    taskScheduler.setPoolSize(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> taskScheduler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Redis的监听容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 监听容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">initRedisContainer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">    <span class="comment">//Redis 连接工厂</span></span><br><span class="line">    container.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//设置运行任务池</span></span><br><span class="line">    container.setTaskExecutor(initTaskScheduler());</span><br><span class="line">    <span class="comment">//定义监听渠道，名称为topic1</span></span><br><span class="line">    Topic topic = <span class="keyword">new</span> ChannelTopic(<span class="string">&quot;topic1&quot;</span>);</span><br><span class="line">    <span class="comment">//使用监听器监听Redis的消息</span></span><br><span class="line">    container.addMessageListener(redisMsgListener,topic);</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里RedisTemplate和RedisConnectionFactory对象都是Spring Boot自动创建的，所以这里只是把他们注入进来。然后定义了一个任务池，并设置了任务池的大小为20，这样它将可以运行线程，并进行阻塞，等待Redis消息的传入。接着定义了一个Redis消息，监听的容器RedisMessageListenerContainer，并且网容器设置了Redis连接工厂和指定运行消息的线程池，定义了接收“topic1”渠道的消息，这样系统就可以监听Redis关于topic1渠道的消息了。<br>启动项目后，在Redis的客户端输入命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">publish topic1 msg</span><br></pre></td></tr></table></figure>
在Spring中，我们也可以使用RedisTemplate来发送消息，例如：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.convertAndSend(channel,messgae);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用Lua脚本"><a href="#使用Lua脚本" class="headerlink" title="使用Lua脚本"></a>使用Lua脚本</h3><p>Redis中Lua脚本执行的方式有两种：</p>
<ul>
<li>直接发送Lua到Redis服务器执行</li>
<li>先把Lua发送给Redis，Redis对Lua脚本缓存，然后返回一个SHA1的32位编码回来，之后需要发送SHA1和相关参数给Redis便可以执行。（这是因为如果Lua脚本比较长的时候，网络会成为瓶颈，但是如果只发32位编码和参数就轻松的多）</li>
</ul>
<ol>
<li>RedisScript接口定义</li>
</ol>
<ul>
<li>getSha1：方法可以得到Redis返回的32位编码</li>
<li>getResultType：获取Lua脚本返回的Java类型</li>
<li>getScriptAsString：返回脚本的字符串，便于观看脚本</li>
</ul>
<ol start="2">
<li><p>执行简单的Lua</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 执行简易Lua</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/lua&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">lua</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    DefaultRedisScript&lt;String&gt; rs = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">    <span class="comment">//设置脚本</span></span><br><span class="line">    rs.setScriptText(<span class="string">&quot;return &#x27;Hello Redis&#x27;&quot;</span>);</span><br><span class="line">    <span class="comment">//定义返回类型。注意：如果没有这个定义，Spring不会反悔结果</span></span><br><span class="line">    rs.setResultType(String.class);</span><br><span class="line"></span><br><span class="line">    RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">    <span class="comment">//执行Lua脚本</span></span><br><span class="line">    String str = (String)redisTemplate.execute(rs,stringRedisSerializer,stringRedisSerializer,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先Lua只是定义了一个简单的字符串，然后就返回了，而返回类型则定义为字符串。这里必须定义返回类型，否则对于Spring不会把脚本执行的结果返回。接着获取了由RedisTemplate自动创建的字符串序列化器，然后使用RedisTemplate的execute方法执行了脚本</p>
</li>
<li><p>执行复杂的Lua脚本<br>下面考虑存在参数的情况，Lua脚本代码如下</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>,KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>])</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>,KEYS[<span class="number">2</span>], ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">local</span> str1 = redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> str1 = redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> str1 == str2 <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>这里的脚本中使用了两个键去保存两个参数，然后对这两个参数进行比较，如果相等返回1，否则返回0.注意脚本中<code>KEY[1]</code>和<code>KEY[2]</code>的写法，它代表客户端传递的第一个键和第二个键。而<code>ARGV[1]</code>和<code>ARGV[2]</code>则表示客户端传递的第一个和第二个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 执行复杂Lua</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/luaComplexScript&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">luaComplexScript</span><span class="params">(String key1,String key2,String value1,String value2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Lua脚本</span></span><br><span class="line">    StringBuffer luaScript = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    luaScript.append(<span class="string">&quot; redis.call(&#x27;set&#x27;,KEYS[1], ARGV[1]) &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; redis.call(&#x27;set&#x27;,KEYS[2], ARGV[2]) &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; local str1 = redis.call(&#x27;get&#x27;,KEYS[1]) &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; local str1 = redis.call(&#x27;get&#x27;,KEYS[2]) &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; if str1 == str2 then &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; return 1 &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; end &quot;</span>);</span><br><span class="line">    luaScript.append(<span class="string">&quot; return 0 &quot;</span>);</span><br><span class="line">    System.out.println(luaScript.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果返回Long</span></span><br><span class="line">    DefaultRedisScript&lt;Long&gt; rs = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">    rs.setScriptText(luaScript.toString());</span><br><span class="line">    rs.setResultType(Long.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用字符串序列表</span></span><br><span class="line">    RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">    <span class="comment">//定义key参数</span></span><br><span class="line">    List&lt;String&gt; keyList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    keyList.add(key1);</span><br><span class="line">    keyList.add(key2);</span><br><span class="line">    <span class="comment">//传递两个参数值，其中第一个序列化器是key的序列化器，第二个序列化器是参数的序列化器</span></span><br><span class="line">    Long result = (Long)redisTemplate.execute(rs,stringRedisSerializer,stringRedisSerializer,keyList,value1,value2);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用keyList保存了各个键，然后通过Redis的execute方法传递，参数则可以使用可变化的方式传递，切设置了给键和参数的序列化器都是字符串序列化器，这样便能够运行这段脚本了，我们的脚本返回一个数字，这里值得注意的是，因为Java会把证书当做长整型（Long），所以这里返回值设置为Long</p>
</li>
</ol>
<h2 id="使用Spring缓存注解操作Redis"><a href="#使用Spring缓存注解操作Redis" class="headerlink" title="使用Spring缓存注解操作Redis"></a>使用Spring缓存注解操作Redis</h2><p>为了简化Redis使用，Spring提供了缓存注解，简化了编程过程</p>
<h3 id="缓存管理器和缓存的启用"><a href="#缓存管理器和缓存的启用" class="headerlink" title="缓存管理器和缓存的启用"></a>缓存管理器和缓存的启用</h3><p>Spring的支持多种缓存管理机制，咱们这里只需设置Redis相关的使用方式，以下列出Spring缓存的配置内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cache.cache-name</span>=<span class="string">#如果由底层的缓存管理器支持创建，以逗号分割的列表来缓存名称</span></span><br><span class="line"><span class="meta">spring.cache.caffeine.spec</span>=<span class="string">#caffeine缓存配置细节</span></span><br><span class="line"><span class="meta">spring.cache.couchbase.expiration</span>=<span class="string">0ms # couchbase缓存超时时间，默认是用不超时</span></span><br><span class="line"><span class="meta">spring.cache.ehcache.config</span>= <span class="string">#配置ehcache缓存初始化文件路径</span></span><br><span class="line"><span class="meta">spring.cache.infinispan.config</span>=<span class="string">#infinispan缓存配置文件</span></span><br><span class="line"><span class="meta">spring.cache.jcache.config</span>= <span class="string">#jcache缓存配置文件</span></span><br><span class="line"><span class="meta">spring.cache.jcache.provider</span>= <span class="string"># jcache缓存提供者配置</span></span><br><span class="line"><span class="meta">spring.cache.redis.cache-null-values</span>=<span class="string">true#是否允许Redis缓存空值</span></span><br><span class="line"><span class="meta">spring.cache.redis.key-prefix</span>= <span class="string">#Redis的键前缀</span></span><br><span class="line"><span class="meta">spring.cache.redis.time-to-live</span>=<span class="string">0ms #缓存超时时间戳，配置为0则不设置超时时间</span></span><br><span class="line"><span class="meta">spring.cache.redis.user-key-prefix</span>=<span class="string">true #是否启用Redis的键前缀</span></span><br><span class="line"><span class="meta">spring.cache,type</span>= <span class="string">#缓存类型，在默认的情况下，Spring会自动根据上下文探测,多个名称可以使用逗号分割</span></span><br></pre></td></tr></table></figure>
<p>因为知识使用Redis，所以其他的缓存不关注，只是关注和Redis相关的配置，下面在application.properties配置Redis的缓存管理器，代码如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br><span class="line"><span class="meta">spring.cache.cache-names</span>=<span class="string">redisCache</span></span><br></pre></td></tr></table></figure>
<p>这样就完成了缓存管理器的配置，这里的spring.cache.type配置的是缓存类型为Redis，Spring Boot会自动生成RedisCacheManager对象，而spring.cache.cache-names则是配置缓存名称，<br>为了使用缓存管理器，需要在Spring Boot的配置文件中加入驱动缓存的注解@EnableCacheig，这样就可以驱动Spring缓存机制工作了，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.xyd.mc&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EntityScan(basePackages = &quot;com.xyd.mc.*.*.pojo&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">    basePackages = &quot;com.xyd.mc.*&quot;,</span></span><br><span class="line"><span class="meta">    sqlSessionTemplateRef = &quot;sqlSessionTemplate&quot;,</span></span><br><span class="line"><span class="meta">    annotationClass = Repository.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McApplication</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开发缓存注解"><a href="#开发缓存注解" class="headerlink" title="开发缓存注解"></a>开发缓存注解</h3><ol>
<li>首先配置文件，主要配置数据库、MyBatis、Redis、缓存和日志信息，代码如下<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_boot_chapter5?serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zhang1989</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定数据源</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">org.apache.commons.dbcp2.BasicDataSource</span></span><br><span class="line"><span class="comment">#最大等待连接中的数量，设0没有限制</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#最大连接活动数</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.max-total</span>=<span class="string">50</span></span><br><span class="line"><span class="comment">#最大等待毫秒数</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.max-wait-millis</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment">#数据库连接池初始化连接数</span></span><br><span class="line"><span class="meta">spring.datasource.dbcp2.initial-size</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Mybatis映射文件通配</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">mapper/*/*/*Mapper.xml</span></span><br><span class="line"><span class="comment">#MyBatis扫描别名包和注解Alias连用</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.xyd.mc.*.*.pojo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.min-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-wait</span>=<span class="string">2000ms</span></span><br><span class="line"><span class="comment">#配置Redis服务器属性</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#Redis连接超时时间，单位毫秒</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">1000ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存配置</span></span><br><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br><span class="line"><span class="meta">spring.cache.cache-names</span>=<span class="string">redisCache</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志配置</span></span><br><span class="line"><span class="comment">#logging.level.root=debug</span></span><br><span class="line"><span class="comment">#logging.level.org.springframework=debug</span></span><br><span class="line"><span class="comment">#logging.level.org.org.mybatis=debug</span></span><br></pre></td></tr></table></figure></li>
<li>创建一个POJO-User来对应数据库的表，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7760614561073458247L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">    <span class="comment">/***setter and getter*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这个类实现了Serializable接口，说明它是可以进行序列化</li>
<li>为了提供操作，需要设计一个接口来实现MyBatis，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户，执行MyBatis的参数名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">(<span class="meta">@Param(&quot;userName&quot;)</span> String userName, <span class="meta">@Param(&quot;note&quot;)</span> String note)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>为了配合这个接口一期使用，我们需要使用一个XML来定义SQL、映射关系、参数和返回等信息，代码如下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xyd.mc.demo.database.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select id, user_name as userName,note from t_user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user(user_name,note) value(#&#123;userName&#125;,#&#123;note&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update t_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span> user_name = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;note != null&quot;</span>&gt;</span> note = #&#123;note&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select id, user_name as UserName,note from t_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">                and user_name = #&#123;userName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;note != null&quot;</span>&gt;</span></span><br><span class="line">                and note = #&#123;note&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        delete from t_user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>为了整合它，我们还需要使用Spring的机制，为此定义一个Spring的服务接口UserService，代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户，指定MyBatis的参数名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">updateUserName</span><span class="params">(Long id,String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName, String note)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>这样就定义了Spring服务接口的方法，接着需要实现这个接口，<font color='red'>这里我们使用缓存注解，因为UserService的实现类是本节的重要代码</font><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取id，取参数id缓存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,timeout = 1)</span></span><br><span class="line">    <span class="comment">//如果能在缓存中通过定义键查询到，直接将缓存中查询到的数据返回，否则执行方法，并将结果保存到缓存</span></span><br><span class="line">    <span class="meta">@Cacheable(value=&quot;redisCache&quot;, key = &quot;&#x27;redis_user_&#x27;+#id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户，最后MyBatis会回填id，取结果id缓存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRES_NEW,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@CachePut(value=&quot;redisCache&quot;, key = &quot;&#x27;redis_user_&#x27;+#user.id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据后，更新缓存，如果condition配置项使结果返回nul，不缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@CachePut(value=&quot;redisCache&quot;,condition = &quot;#result != &#x27;null&#x27;&quot;,key = &quot;&#x27;redis_user_&#x27;+#id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">updateUserName</span><span class="params">(Long id, String userName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处调用getUser方法，该方法缓存注解失效</span></span><br><span class="line">        <span class="comment">//所以这里还会执行SQL，将查询到数据库最新数据</span></span><br><span class="line">        User user = <span class="keyword">this</span>.getUser(id);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 命中率低，所以不采用缓存机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findUsers(userName,note);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;redisCache&quot;,key = &quot;&#x27;redis_user_&#x27;+#id&quot;,beforeInvocation = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注解@CachePut、@Cacheable、@CacheEvict</li>
</ol>
<ul>
<li>CachePut：将方法结果返回存放到缓存中</li>
<li>Cacheable：从缓存中通过定义的键查询，如果可以查询到数据，则返回，否则执行该方法，返回数据，并且将结果保存到缓存中</li>
<li>CacheEvict：通过定义的键移除缓存，她有一个Boolean类型的配置项beforeInvocation，表示在方法之前或者之后移除缓存，因为默认值为false，所以默认为方法之后将缓存移除<br>其次，读者可以看到三个缓存中都配置了value=”redisCache”，因为在Spring Boot中配置了对应的缓存名称为redisCache，这样它能够引用到对应的缓存，而配置项则是一个Spring EL，很多时候可以看到配置为’redis_user_’+#id，其中#id代表参数，他是通过参数名称来匹配，所以这样配置要求方法存在一个参数且名称为id；在updateUser方法里面我们先调用了getUser方法，因为是更新数据，所以需要慎重。<font color='red'>一般我们不轻易相信缓存，因为缓存存在脏读的可能性，这是需要注意得，在需要更新数据时我们往往考虑先从数据库查询出来新数据，然后再进行操作，因此，这里会存在一个误区，认为geUser方法因为存在了注解Cacheable，所以惠存缓存中读取数据，耳聪缓存中读取去更新数据，是一个比较危险的行为，因为、、然后这里的事实是@Cacheable失效了，也就是说updateUserName方法调用getUser方法的逻辑，并不存在读取缓存的可能，每次都会执行SQL查询数据。</font>最后，我们看到findUser，这个方法并没有使用缓存，因为查询结果随着用户给出的查询条件变化而变化，导致命中率很低。对于命中很低的场景，使用缓存并不能有效的提高系统的性能，所以不推荐缓存机制，此外，对于数据量很小号的数据，使用缓存也应该慎重。</li>
</ul>
<ol start="7">
<li>接下来创建一个Controller，进行缓存注解的测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc.demo.database.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.service.UserBatchService;</span><br><span class="line"><span class="keyword">import</span> com.xyd.mc.demo.database.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserBatchService userBatchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/insertUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(String userName,String note)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        user.setNote(note);</span><br><span class="line">        <span class="comment">//结果回填主键，返回插入条数</span></span><br><span class="line">        userService.insertUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findUsers&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName,String note)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUsers(userName,note);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUserName&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">updateUserName</span><span class="params">(Long id, String userName)</span></span>&#123;</span><br><span class="line">        User user = userService.updateUserName(id,userName);</span><br><span class="line">        <span class="keyword">boolean</span> flag = user != <span class="keyword">null</span>;</span><br><span class="line">        String msg = flag?<span class="string">&quot;更新成功&quot;</span>:<span class="string">&quot;更新失败&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> resultMap(flag,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">deleteUser</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = userService.deleteUser(id);</span><br><span class="line">        <span class="keyword">boolean</span> flag = result == <span class="number">1</span>;</span><br><span class="line">        String msg = flag?<span class="string">&quot;删除成功&quot;</span>:<span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> resultMap(flag,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/insertUsers&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">insertUsers</span><span class="params">(String userName1,String note1,String userName2,String note2)</span></span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setUserName(userName1);</span><br><span class="line">        user1.setNote(note1);</span><br><span class="line"></span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setUserName(userName2);</span><br><span class="line">        user2.setNote(note2);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(user1);</span><br><span class="line">        users.add(user2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> insertCount = userBatchService.insertUsers(users);</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>,insertCount&gt;<span class="number">0</span>);</span><br><span class="line">        result.put(<span class="string">&quot;user&quot;</span>,users);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String,Object&gt; <span class="title">resultMap</span><span class="params">(<span class="keyword">boolean</span> success,String msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>,success);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接下来需要修改Spring Boot的启动文件驱动缓存机制的运行<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyd.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.ChannelTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.Topic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.xyd.mc&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EntityScan(basePackages = &quot;com.xyd.mc.*.*.pojo&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">    basePackages = &quot;com.xyd.mc.*&quot;,</span></span><br><span class="line"><span class="meta">    sqlSessionTemplateRef = &quot;sqlSessionTemplate&quot;,</span></span><br><span class="line"><span class="meta">    annotationClass = Repository.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入RedisTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Redis连接工厂</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Redis消息监听器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageListener redisMsgListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//任务池</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务池，运行线程等待处理Redis的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title">initTaskScheduler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(taskScheduler != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> taskScheduler;</span><br><span class="line">        &#125;</span><br><span class="line">        taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Redis的监听容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 监听容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">initRedisContainer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        <span class="comment">//Redis 连接工厂</span></span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//设置运行任务池</span></span><br><span class="line">        container.setTaskExecutor(initTaskScheduler());</span><br><span class="line">        <span class="comment">//定义监听渠道，名称为topic1</span></span><br><span class="line">        Topic topic = <span class="keyword">new</span> ChannelTopic(<span class="string">&quot;topic1&quot;</span>);</span><br><span class="line">        <span class="comment">//使用监听器监听Redis的消息</span></span><br><span class="line">        container.addMessageListener(redisMsgListener,topic);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义自定义后初始化方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        initRedisTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置RedisTemplate的序列化器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRedisTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisSerializer stringSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(McApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这里定义了MyBatis Mapper的扫描包，并限定了在标注有@Repository的接口才会被扫描，同时使用@EnableCaching驱动Spring的缓存机制运行，并且通过@PostConstruct定义自定义初始化方法去定义RedisTemplate的一些特性<br>运行Spring Boot的启动文件后，通过球球COntroller中的方法，就能够测试缓存注解了。在使用编号1作为参数测试getUser方法后，打开Redis客户端，然后可以查看到对应的缓存信息。<br>Redis机制会使用#{cacheName}:#{key}的形式作为键保存数据，其次对于这个缓存是永远不超时的，这样会带来缓存不会被刷新的问题，这在某些时候会存在刷新不及时的问题，未来我们需要克服这些问题。</li>
</ol>
<h3 id="缓存注解自调用失效问题"><a href="#缓存注解自调用失效问题" class="headerlink" title="缓存注解自调用失效问题"></a>缓存注解自调用失效问题</h3><p>Redis注解自调用的时候跟数据库的事务自调用基本一致，都会失效，是因为Spring中AOP是通过动态代理技术实现的</p>
<h3 id="缓存脏数据说明"><a href="#缓存脏数据说明" class="headerlink" title="缓存脏数据说明"></a>缓存脏数据说明</h3><p>缓存可以使得系统性能大幅度提高，但是也引发了很多问题，其中最为严重的问题时脏数据问题</p>
<table>
<thead>
<tr>
<th align="center">时刻</th>
<th align="left">动作1</th>
<th align="left">动作2</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">T1</td>
<td align="left">修改id为1的用户</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">T2</td>
<td align="left">更新数据库数据</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">T3</td>
<td align="left">使用key_1为键保存数据</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">T4</td>
<td align="left"></td>
<td align="left">修改id为1的用户</td>
<td align="left">与动作1操作同一数据</td>
</tr>
<tr>
<td align="center">T5</td>
<td align="left"></td>
<td align="left">更新数据库数据</td>
<td align="left">此时修改数据库数据</td>
</tr>
<tr>
<td align="center">T6</td>
<td align="left"></td>
<td align="left">使用key_2为键保存数据</td>
<td align="left">这样key1位键的缓存就已经是脏数据</td>
</tr>
<tr>
<td align="center">从上表中可以看到T6时刻，因为使用了key_2为键缓存数据，所以会致使动作1以key_1为键的缓存数据为脏数据。这样使用key_1为键读取时，就只能获取脏数据，这只是存在脏数据的可能性之一，还可能存在别的可能，如Redis事务问题，或者其他系统操作而没有刷新Redis缓存等诸多问题。</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">对于数据的读操作，一般而言是允许不是实时数据，如电商网站还存在一些排名榜单，而这个排名往往都不是实时的，会存在延迟，其实对于查询是可以存在延迟的，也就是存在脏数据是允许的。但是如果一个脏数据失踪存在就说不通了，这样会造成数据失真比较痰中。一般对于查询而言，我们可以规定一个时间，让缓存失效，在Redis中可以设置超时时间，当缓存超过超时时间后，则应用不在能够从缓存中获取数据，而只是从数据库中重新获取最新数据，以保证数据失真不至于太大。对于那些要求实时性比较高的数据，我们可以把缓存时间设置的更好一些，这样就会更加频繁的刷新缓存，而不利就是会增加数据的压力，对于那些要求不是很高，则可以使超市时间长一些，这样就可以降低数据库的压力。</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">对于数据的写操作，往往采取的策略就完全不一样，需要谨慎，一般会认为缓存不可信，所以考虑从数据库中先读取最新数据，然后再更新数据，避免将缓存中的脏数据写入数据库，导致出现业务问题。</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="自定义缓存管理器"><a href="#自定义缓存管理器" class="headerlink" title="自定义缓存管理器"></a>自定义缓存管理器</h3><p>我们不希望Spring Boot机制带来的键命名方式，也不希望缓存永不超时，这时我们可以自定义缓存管理器。在Spring中，我们有两种方法定制缓存管理器，一种是通过配置消除缓存键的前缀和自定义超时时间的属性来定制生成RedisCacheManager；另一种方法是不采用Spring Boot为我们生成的方式，而是通过自己的代码创建缓存管理器，尤其是当需要比较多自定义的时候，更加推荐采用自定义的代码</p>
]]></content>
      <categories>
        <category>后端开发框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java编码规范</title>
    <url>/2019/01/24/Java%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_1.jpg"></p>
<blockquote>
<p>版权说明：本文档摘抄自《阿里巴巴Java开发手册（详尽版）》<br>摘抄不意味着单纯的Copy，而是对别人知识汲取和吸收的同时添加自己的个人理解</p>
</blockquote>
<h1 id="Java-编码规则手册"><a href="#Java-编码规则手册" class="headerlink" title="Java 编码规则手册"></a>Java 编码规则手册</h1><table>
<thead>
<tr>
<th align="center">版本号</th>
<th align="center">更新时间</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">V1.0</td>
<td align="center">2018-11-22</td>
<td align="center">初始化版本</td>
</tr>
</tbody></table>
<h1 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h1><h2 id="（一）命名风格"><a href="#（一）命名风格" class="headerlink" title="（一）命名风格"></a>（一）命名风格</h2><ol>
<li><p><font color='red'>【强制】</font>代码中的命名不能以<code>下划线或美元符号</code>开始，也不能以<code>下划线或美元符号</code>结束。</p>
<p><font color='orange'>反例：</font><code>_name/__name/$name/name_/name$/name__</code></p>
</li>
<li><p><font color='red'>【强制】</font>代码中命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式</p>
<p><font color='sienna'>说明：</font>正确的英文拼写和语法可以让阅读者易于理解，便面歧义</p>
<p><font color='orange'>反例：</font><code>DaZhePromotion()[打折]/getPingFenByName()[获取评分]/int 某变量=3</code></p>
</li>
<li><p><font color='red'>【强制】</font>类名使用<code>UpperCameCase</code>风格，但以下情况例外<code>DO/BO/DTO/VO/AO/PO/UID</code>等</p>
<p><font color='green'>正例：</font><code>MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</code></p>
<p><font color='orange'>反例：</font><code>macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</code></p>
</li>
<li><p><font color='red'>【强制】</font>方法名、参数名、成员变量、局部变量都统一使用<code>lowerCameCase</code>风格，必须遵从驼峰形式。</p>
<p><font color='green'>正例：</font><code>localValue / getHttpMessage() / inputUserId</code></p>
</li>
<li><p><font color='red'>【强制】</font>常量命名全部大写，单词间用下划线隔开，尽量将语义表达清楚，不要害怕变量长度太长。</p>
<p><font color='green'>正例：</font><code>MAX_STOCK_COUNT</code></p>
<p><font color='orange'>反例：</font><code>MAX_COUNT</code></p>
</li>
<li><p><font color='red'>【强制】</font>抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾</p>
</li>
<li><p><font color='red'>【强制】</font>类型与中括号紧挨相连来表示数组</p>
<p><font color='green'>正例：</font>定义整形数组 <code>int[] arrayDemo</code></p>
<p><font color='orange'>反例：</font>在 main 参数中，使用 <code>String args[]</code>来定义</p>
</li>
<li><p><font color='red'>【强制】</font><code>POJO</code> 类中布尔类型的变量，都不要加 <code>is </code>前缀，否则部分框架解析会引起序列化错误</p>
<p><font color='orange'>反例：</font>定义为基本数据类型 <code>Boolean isDeleted</code> 的属性，它的方法也是 <code>isDeleted()</code>，<code>RPC</code>框架在反向解析的时候，“误以为”对应的属性名称是 <code>deleted</code>，导致属性获取不到，进而抛出异常</p>
</li>
<li><p><font color='red'>【强制】</font>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式</p>
<p><font color='green'>正例：</font>应用工具类包名为 <code>com.alibaba.ai.util</code>、类名为 <code>MessageUtils</code></p>
</li>
<li><p><font color='red'>【强制】</font>杜绝完全不规范的缩写，避免望文不知义</p>
<p><font color='orange'>反例：</font><code>AbstractClass</code>“缩写”命名成 <code>AbsClass</code>；<code>condition</code>“缩写”命名成 <code>condi</code>，此类随意缩写严重降低了代码的可阅读性。</p>
</li>
<li><p><font color='red'>【强制】</font>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意</p>
<p><font color='green'>正例：</font>在<code>JDK</code>中，表达原子更新的类名为：<code>AtomicReferenceFieldUpdater</code></p>
<p><font color='orange'>反例：</font>变量 <code>int a</code> 的随意命名方式</p>
</li>
<li><p><font color='green'>【推荐】</font>如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式</p>
<p><font color='sienna'>说明：</font>将设计模式体现在名字中，有利于阅读者快速理解架构设计理念</p>
<p><font color='green'>正例：</font><code>public class OrderFactory;</code>,<code> public class LoginProxy;</code>,<code>public class ResourceObserver;</code></p>
</li>
<li><p><font color='green'>【推荐】</font>接口类中的方法和属性不要加任何修饰符号（<code>public</code> 也不要加），保持代码的简洁性，并加上有效的 <code>Javadoc </code>注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量</p>
<p><font color='green'>正例：</font>接口方法签名<code> void commit()</code>;接口基础常量 <code>String COMPANY = &quot;alibaba&quot;</code>;</p>
<p><font color='orange'>反例：</font>接口方法定义 <code>public abstract void f()</code>;</p>
<p><font color='sienna'>说明：</font><code>JDK8</code> 中接口允许有默认实现，那么这个 <code>default</code> 方法，是对所有实现类都有价值的默认实现</p>
</li>
<li><p>接口和实现类的命名有两套规则</p>
<p>1）<font color='red'>【强制】</font>对于 <code>Service </code>和<code>DAO</code>类，基于 <code>SOA </code>的理念，暴露出来的服务一定是接口，内部的实现类用<code>Impl</code>的后缀与接口区别</p>
<p><font color='green'>正例：</font><code>CacheServiceImpl</code> 实现 <code>CacheService</code>接口</p>
<p>2）<font color='green'>【推荐】</font>如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able 的形式）</p>
<p><font color='green'>正例：</font><code>AbstractTranslator</code> 实现 <code>Translatable </code>接口</p>
</li>
<li><p>【参考】枚举类名建议带上 <code>Enum</code>后缀，枚举成员名称需要全大写，单词间用下划线隔开</p>
<p><font color='sienna'>说明：</font>枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有</p>
<p><font color='green'>正例：</font>枚举名字为 <code>ProcessStatusEnum</code> 的成员名称：<code>SUCCESS / UNKNOWN_REASON</code></p>
</li>
<li><p>【参考】</p>
<ul>
<li><code>Service/DAO</code>层方法命名规则<ul>
<li>获取单个对象的方法用 <code>get </code>做前缀</li>
<li>获取多个对象的方法用 <code>list</code> 做前缀，复数形式结尾如：<code>listObjects</code></li>
<li>获取统计值的方法用 <code>count</code> 做前缀</li>
<li>插入的方法用 <code>save/insert </code>做前缀</li>
<li>删除的方法用 <code>remove/delete</code> 做前缀</li>
<li>修改的方法用 <code>update </code>做前缀</li>
</ul>
</li>
<li>领域模型命名规约<ul>
<li>数据对象：<code>xxxDO</code>，<code>xxx</code> 即为数据表名</li>
<li>数据传输对象：<code>xxxDTO</code>，<code>xxx </code>为业务领域相关的名称</li>
<li>展示对象：<code>xxxVO</code>，<code>xxx </code>一般为网页名称</li>
<li><code>POJO</code>是 <code>DO/DTO/BO/VO</code>的统称，禁止命名成 <code>xxxPOJO</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="（二）常量定义"><a href="#（二）常量定义" class="headerlink" title="（二）常量定义"></a>（二）常量定义</h2><ol>
<li><p><font color='red'>【强制】</font>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Magic values, except for predefined, are forbidden in coding.</span></span><br><span class="line"><span class="keyword">if</span> (key.equals(<span class="string">&quot;Id#taobao_1&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String KEY_PRE = <span class="string">&quot;Id#taobao_1&quot;</span>;  </span><br><span class="line"><span class="keyword">if</span> (KEY_PRE.equals(key)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字1 混淆，造成误解</p>
<p><font color='sienna'>说明：</font><code>Long a = 2l;</code> 写的是数字的 21，还是 <code>Long</code> 型的 2?</p>
</li>
<li><p><font color='green'>【推荐】</font>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护</p>
<p><font color='sienna'>说明：</font>大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护</p>
<p><font color='green'>正例：</font>缓存相关常量放在类 <code>CacheConsts</code> 下；系统配置相关常量放在类 <code>ConfigConsts</code> 下</p>
</li>
<li><p><font color='green'>【推荐】</font>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量</p>
<ul>
<li>跨应用共享常量：放置在二方库中，通常是 <code>client.jar</code> 中的 <code>constant</code> 目录下</li>
<li>应用内共享常量：放置在一方库中，通常是子模块中的 <code>constant</code> 目录下</li>
</ul>
<p><font color='orange'>反例：</font>易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量</p>
<p>​    类 A 中：<code>public static final String YES = &quot;yes&quot;;</code></p>
<p>​    类 B 中：<code>public static final String YES = &quot;y&quot;;</code></p>
<p>​    <code>A.YES.equals(B.YES)</code>，预期是 <code>true</code>，但实际返回为 <code>false</code>，导致线上问题</p>
<ul>
<li>子工程内部共享常量：即在当前子工程的 <code>constant</code> 目录下</li>
<li>包内共享常量：即在当前包下单独的<code> constant</code>目录下</li>
<li>类内共享常量：直接在类内部 <code>private static final</code> 定义</li>
</ul>
</li>
<li><p><font color='green'>【推荐】</font>如果变量值仅在一个固定范围内变化用 <code>enum</code> 类型来定义（<a href="https://www.cnblogs.com/liaojie970/p/6474733.html">扩展<code>enmu</code>的使用方法</a>）</p>
<p><font color='sienna'>说明：</font>如果存在名称之外的延伸属性应使用 <code>enum</code> 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SeasonEnum</span> </span>&#123;</span><br><span class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seq;</span><br><span class="line"></span><br><span class="line">    SeasonEnum(<span class="keyword">int</span> seq) &#123;</span><br><span class="line">        <span class="keyword">this</span>.seq = seq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="（三）代码格式"><a href="#（三）代码格式" class="headerlink" title="（三）代码格式"></a>（三）代码格式</h2><ol>
<li><p><font color='red'>【强制】</font>大括号的使用约定。如果是大括号内为空，则简洁地写成<code>&#123;&#125;</code>即可，不需要换行；如果是非空代码块则</p>
<ul>
<li>左大括号前不换行</li>
<li>左大括号后换行</li>
<li>右大括号前换行</li>
<li>右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大括号前需要空格。详见第 5 条下方正例提示</p>
<p><font color='orange'>反例：</font><code>if (空格 a == b 空格)</code></p>
</li>
<li><p><font color='red'>【强制】</font><code>if/for/while/switch/do</code> 等保留字与括号之间都必须加空格</p>
</li>
<li><p><font color='red'>【强制】</font>任何二目、三目运算符的左右两边都需要加一个空格</p>
<p><font color='sienna'>说明：</font>运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等</p>
</li>
<li><p><font color='red'>【强制】</font>采用 4 个空格缩进，禁止使用 tab 字符</p>
<p><font color='sienna'>说明：</font>如果使用<code> tab</code> 缩进，必须设置 1 个 <code>tab</code> 为 4 个空格。<code>IDEA</code> 设置 tab 为 4 个空格时，请勿勾选 <code>Use tab character</code>（<a href="https://jingyan.baidu.com/article/148a1921cbaaf04d71c3b1ee.html">扩展IDEA设置按TAB时输入四个空格的方法</a>）；而在 <code>eclipse</code> 中，必须勾选 <code>insert spaces for tabs</code></p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缩进 4 个空格</span></span><br><span class="line">    String say = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">// 运算符的左右必须有一个空格</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(say);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        <span class="comment">// 在右大括号后直接结束，则必须换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>注释的双斜线与注释内容之间有且仅有一个空格</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是示例注释，请注意在双斜线之后有一个空格</span></span><br><span class="line">String ygb = <span class="keyword">new</span> String();</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则</p>
<ul>
<li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例</li>
<li>运算符与下文一起换行</li>
<li>方法调用的点符号与下文一起换行</li>
<li>方法调用中的多个参数需要换行时，在逗号后进行</li>
<li>在括号前不要换行，见反例</li>
</ul>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></span><br><span class="line">sb.append(<span class="string">&quot;zi&quot;</span>).append(<span class="string">&quot;xin&quot;</span>)</span><br><span class="line">    .append(<span class="string">&quot;huang&quot;</span>)</span><br><span class="line">    .append(<span class="string">&quot;huang&quot;</span>)</span><br><span class="line">    .append(<span class="string">&quot;huang&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">// 超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class="line">sb.append(<span class="string">&quot;zi&quot;</span>).append(<span class="string">&quot;xin&quot;</span>)...append</span><br><span class="line">(<span class="string">&quot;huang&quot;</span>);</span><br><span class="line"><span class="comment">// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span><br><span class="line">method(args1, args2, args3, ...</span><br><span class="line">, argsX);</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>方法参数在定义和传入时，多个参数逗号后边必须加空格</p>
<p><font color='green'>正例：</font>下例中实参的<code>args1</code>，后边必须要有一个空格</p>
<p><code>method(args1, args2, args3);</code></p>
</li>
<li><p><font color='red'>【强制】</font><code>IDE</code> 的 <code>text file encoding</code> 设置为 <code>UTF-8</code>; <code>IDE</code> 中文件的换行符使用 <code>Unix</code> 格式，不要使用 <code>Windows</code>格式</p>
</li>
<li><p><font color='green'>【推荐】</font>单个方法的总行数不超过 80 行</p>
<p><font color='sienna'>说明：</font>包括方法签名、结束右大括号、方法内代码、注释、空行、回车及任何不可见字符的总行数不超过 80 行</p>
<p><font color='green'>正例：</font>代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护</p>
</li>
<li><p><font color='green'>【推荐】</font>没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> two = <span class="number">2L</span>;</span><br><span class="line"><span class="keyword">float</span> three = <span class="number">3F</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br></pre></td></tr></table></figure>

<p><font color='sienna'>说明：</font>增加 <code>sb</code> 这个变量，如果需要对齐，则给 <code>a、b、c</code> 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情</p>
</li>
<li><p><font color='green'>【推荐】</font>不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性</p>
<p><font color='sienna'>说明：</font>任何情形，没有必要插入多个空行进行隔开</p>
</li>
</ol>
<h2 id="（四）OOP规约"><a href="#（四）OOP规约" class="headerlink" title="（四）OOP规约"></a>（四）OOP规约</h2><ol>
<li><p><font color='red'>【强制】</font>避免通过一个类的对象引用访问此类的<font color='red'>静态变量或静态方法</font>，无谓增加编译器解析成本，直接用<font color='blue'>类名</font>来访问即可</p>
</li>
<li><p><font color='red'>【强制】</font>所有的覆写方法，必须加<code>@Override</code> 注解</p>
<p><font color='sienna'>说明：</font><code>getObject()</code>与 <code>get0bject()</code>的问题。一个是字母的 O，一个是数字的 0，加<code>@Override</code>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错</p>
</li>
<li><p><font color='red'>【强制】</font>相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 <code>Object</code></p>
<p><font color='sienna'>说明：</font>可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">listUsers</span><span class="params">(String type, Long... ids)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加<code>@Deprecated</code> 注解，并清晰地说明采用的新接口或者新服务是什么</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJson</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> toJson(getAttributes(obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>不能使用过时的类或方法</p>
<p><font color='sienna'>说明：</font><code>java.net.URLDecoder</code> 中的方法 <code>decode(String encodeStr)</code> 这个方法已经过时，应该使用双参数 <code>decode(String source, String encode)</code>。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么</p>
</li>
<li><p><font color='red'>【强制】</font><code>Object</code> 的 <code>equals</code>方法容易抛空指针异常，应使用常量或确定有值的对象来调用<code>equals</code></p>
<p><font color='green'>正例：</font><code>&quot;test&quot;.equals(object);</code></p>
<p><font color='orange'>反例：</font><code>object.equals(&quot;test&quot;)</code></p>
<p><font color='sienna'>说明：</font>推荐使用 <code>java.util.Objects#equals</code>（<code>JDK7</code> 引入的工具类）</p>
</li>
<li><p><font color='red'>【强制】</font>所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较</p>
<p><font color='sienna'>说明：</font>对于 <code>Integer var = ?</code> 在-128 至 127 范围内的赋值，<code>Integer</code> 对象是在<code>IntegerCache.cache</code> 产生，会复用已有对象，这个区间内的 <code>Integer</code> 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 <code>equals</code> 方法进行判断</p>
</li>
<li><p>关于基本数据类型与包装数据类型的使用标准如下</p>
<ul>
<li><font color='red'>【强制】</font>所有的 <code>POJO</code> 类属性必须使用包装数据类型</li>
<li><font color='red'>【强制】</font><code>RPC</code> 方法的返回值和参数必须使用包装数据类型</li>
<li><font color='green'>【推荐】</font>所有的局部变量使用基本数据类型</li>
</ul>
<p><font color='sienna'>说明：</font><code>POJO</code> 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何<code>NPE</code>(空指针异常)问题，或者入库检查，都由使用者来保证</p>
<p><font color='green'>正例：</font>数据库的查询结果可能是 <code>null</code>，因为自动拆箱，用基本数据类型接收有 <code>NPE</code> 风险</p>
<p><font color='orange'>反例：</font>比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 <code>RPC</code> 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出</p>
</li>
<li><p><font color='red'>【强制】</font>定义 <code>DO/DTO/VO</code> 等 <code>POJO </code>类时，不要设定任何属性默认值</p>
<p><font color='orange'>反例：</font><code>POJO</code> 类的 <code>gmtCreate</code> 默认值为 <code>new Date()</code>，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间</p>
</li>
<li><p><font color='red'>【强制】</font>序列化类新增属性时，请不要修改 <code>serialVersionUID</code> 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 <code>serialVersionUID</code> 值</p>
<p><font color='sienna'>说明：</font>注意 <code>serialVersionUID</code> 不一致会抛出序列化运行时异常</p>
</li>
<li><p><font color='red'>【强制】</font>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中</p>
</li>
<li><p><font color='red'>【强制】</font><code>POJO</code> 类必须写<code> toString</code> 方法。使用 <code>IDE</code> 中的工具：<code>source&gt; generate toString</code>时，如果继承了另一个 <code>POJO</code> 类，注意在前面加一下 <code>super.toString</code></p>
<p><font color='sienna'>说明：</font>在方法执行抛出异常时，可以直接调用 <code>POJO</code> 的 <code>toString()</code>方法打印其属性值，便于排查问题</p>
</li>
<li><p><font color='red'>【强制】</font>禁止在 <code>POJO</code> 类中，同时存在对应属性 <code>xxx</code> 的 <code>isXxx()</code>和<code> getXxx()</code>方法</p>
<p><font color='sienna'>说明：</font>框架在调用属性 <code>xxx </code>的提取方法时，并不能确定哪个方法一定是被优先调用到</p>
</li>
<li><p><font color='green'>【推荐】</font>使用索引访问用 <code>String</code> 的 <code>split</code> 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 <code>IndexOutOfBoundsException</code> 的风险</p>
<p><font color='sienna'>说明：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;a,b,c,,&quot;</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// 预期大于 3，结果是 3</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 16 条规则</p>
</li>
<li><p><font color='green'>【推荐】</font>类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; <code>getter/setter</code>方法</p>
<p><font color='sienna'>说明：</font>公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 <code>Service</code> 和 <code>DAO</code> 的 <code>getter/setter</code> 方法放在类体最后</p>
</li>
<li><p><font color='green'>【推荐】</font><code>setter</code> 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在<code>getter/setter</code> 方法中，不要增加业务逻辑，增加排查问题的难度</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data + <span class="number">100</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data - <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>循环体内，字符串的连接方式，使用 <code>StringBuilder</code> 的 <code>append</code> 方法进行扩展</p>
<p><font color='sienna'>说明：</font>下例中，反编译出的字节码文件显示每次循环都会 new 出一个 <code>StringBuilder</code> 对象，然后进行 <code>append </code>操作，最后通过 <code>toString</code> 方法返回 <code>String</code> 对象，造成内存资源浪费(<a href="https://www.cnblogs.com/su-feng/p/6659064.html">扩展<code>Java</code>中的<code>String，StringBuilder，StringBuffer</code>三者的区别</a>)</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    str = str + <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字</p>
<ul>
<li>不允许被继承的类，如：<code>String</code> 类</li>
<li>不允许修改引用的域对象</li>
<li>不允许被重写的方法，如：<code>POJO</code> 类的 <code>setter</code> 方法</li>
<li>不允许运行过程中重新赋值的局部变量</li>
<li>避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构</li>
</ul>
</li>
<li><p><font color='green'>【推荐】</font>慎用 <code>Object</code> 的 <code>clone</code>方法来拷贝对象</p>
<p><font color='sienna'>说明：</font>对象的 <code>clone</code> 方法默认是浅拷贝，若想实现深拷贝需要重写 <code>clone</code> 方法实现域对象的深度遍历式拷贝</p>
</li>
<li><p><font color='green'>【推荐】</font>类成员与方法访问控制从严</p>
<ul>
<li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private</li>
<li>工具类不允许有 <code>public</code> 或 <code>default</code> 构造方法</li>
<li>类非 <code>static</code> 成员变量并且与子类共享，必须是 <code>protected</code></li>
<li>类非 <code>static </code>成员变量并且仅在本类使用，必须是 <code>private</code></li>
<li>类 <code>static</code> 成员变量如果仅在本类使用，必须是 <code>private</code></li>
<li>若是 <code>static </code>成员变量，考虑是否为 <code>final</code></li>
<li>类成员方法只供类内部调用，必须是 <code>private</code></li>
<li>类成员方法只对继承类公开，那么限制为 <code>protected</code></li>
</ul>
<p><font color='sienna'>说明：</font>任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个 <code>private</code> 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的</p>
</li>
</ol>
<h2 id="（五）集合处理"><a href="#（五）集合处理" class="headerlink" title="（五）集合处理"></a>（五）集合处理</h2><ol>
<li><p><font color='red'>【强制】</font>关于 <code>hashCode</code> 和 <code>equals </code>的处理，遵循如下规则</p>
<ul>
<li>只要重写 equals，就必须重写 <code>hashCode</code></li>
<li>因为 <code>Set</code> 存储的是不重复的对象，依据 <code>hashCode</code> 和 <code>equals</code> 进行判断，所以 <code>Set</code> 存储的对象必须重写这两个方法</li>
<li>如果自定义对象作为 Map 的键，那么必须重写 <code>hashCode</code> 和 <code>equals</code></li>
</ul>
<p><font color='sienna'>说明：</font><code>String </code>重写了 <code>hashCode</code> 和 <code>equals</code> 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用</p>
</li>
<li><p><font color='red'>【强制】</font><code>ArrayList</code>的<code>subList</code>结果不可强转成<code>ArrayList</code>，否则会抛出<code>ClassCastException</code>异常，即 <code>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList</code></p>
<p><font color='sienna'>说明：</font><code>subList</code> 返回的是<code> ArrayList</code> 的内部类<code> SubList</code>，并不是 <code>ArrayList</code> 而是<code> ArrayList</code>的一个视图，对于 <code>SubList </code>子列表的所有操作最终会反映到原列表上</p>
</li>
<li><p><font color='red'>【强制】</font>在 <code>subList</code> 场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 <code>ConcurrentModificationException</code> 异常</p>
</li>
<li><p><font color='red'>【强制】</font>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一样的数组，大小就是 <code>list.size()</code></p>
<p><font color='sienna'>说明：</font>使用<code> toArray</code> 带参方法，入参分配的数组空间不够大时，<code>toArray</code> 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="string">&quot;guan&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bao&quot;</span>);</span><br><span class="line">String[] array = <span class="keyword">new</span> String[list.size()];</span><br><span class="line">array = list.toArray(array);</span><br></pre></td></tr></table></figure>

<p><font color='orange'>反例：</font>直接使用 <code>toArray</code> 无参方法存在问题，此方法返回值只能是 <code>Object[]</code>类，若强转其它类型数组将出现 <code>ClassCastException</code> 错误</p>
</li>
<li><p><font color='red'>【强制】</font>使用工具类 <code>Arrays.asList()</code>把数组转换成集合时，不能使用其修改集合相关的方法，它的 <code>add/remove/clear</code> 方法会抛出 <code>UnsupportedOperationException</code> 异常</p>
<p><font color='sienna'>说明：</font><code>asList</code> 的返回对象是一个 <code>Arrays</code> 内部类，并没有实现集合的修改方法。<code>Arrays.asList</code>体现的是适配器模式，只是转换接口，后台的数据仍是数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] str = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;you&quot;</span>, <span class="string">&quot;wu&quot;</span> &#125;;</span><br><span class="line">List list = Arrays.asList(str)</span><br></pre></td></tr></table></figure>

<p>第一种情况：<code>list.add(&quot;yangguanbao&quot;);</code> 运行时异常</p>
<p>第二种情况：<code>str[0] = &quot;gujin&quot;;</code> 那么 <code>list.get(0)</code>也会随之修改</p>
</li>
<li><p><font color='red'>【强制】</font>泛型通配符<code>&lt;? extends T&gt;</code>来接收返回的数据，此写法的泛型集合不能使用 <code>add</code> 方法，而<code>&lt;? super T&gt;</code>不能使用 <code>get</code> 方法，作为接口调用赋值时易出错</p>
<p><font color='sienna'>说明：</font>扩展说一下 <code>PECS(Producer Extends Consumer Super)</code>原则：第一、频繁往外读取内容的，适合用<code>&lt;? extends T&gt;</code>。第二、经常往里插入的，适合用<code>&lt;? super T&gt;</code></p>
</li>
<li><p><font color='red'>【强制】</font>不要在 <code>foreach</code> 循环里进行元素的 <code>remove/add</code> 操作。<code>remove</code> 元素请使用 <code>Iterator</code>方式，如果并发操作，需要对 Iterator 对象加锁</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String item = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(item)) &#123;</span><br><span class="line">        list.remove(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='sienna'>说明：</font>以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗</p>
</li>
<li><p><font color='red'>【强制】</font>在 <code>JDK7</code> 版本及以上，<code>Comparator</code>（<a href="https://www.cnblogs.com/rossoneri/p/4549529.html">扩展Java] 用 Comparator 实现排序</a>） 实现类要满足如下三个条件，不然<code> Arrays.sort</code>，<code>Collections.sort</code> 会报 <code>IllegalArgumentException</code> 异常</p>
<p><font color='sienna'>说明：</font>三个条件如下</p>
<ul>
<li>x，y 的比较结果和 y，x 的比较结果相反</li>
<li>x&gt;y，y&gt;z，则 x&gt;z</li>
<li>x=y，则 x，z 比较结果和 y，z 比较结果相同</li>
</ul>
<p><font color='orange'>反例：</font>下例中没有处理相等的情况，实际使用中可能会出现异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>集合泛型定义时，在 <code>JDK7</code> 及以上，使用 <code>diamond</code> 语法或全省略</p>
<p><font color='sienna'>说明：</font>菱形泛型，即 <code>diamond</code>，直接使用&lt;&gt;来指代前边已经指定的类型</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;&gt; diamond 方式</span></span><br><span class="line">HashMap&lt;String, String&gt; userCache = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">// 全省略方式</span></span><br><span class="line">ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>集合初始化时，指定集合初始值大小</p>
<p><font color='sienna'>说明：</font><code>HashMap </code>使用 <code>HashMap(int initialCapacity) </code>初始化</p>
<p><font color='green'>正例：</font><code>initialCapacity</code> = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 <code>loader factor</code>）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。反例：<code>HashMap</code> 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，<code>resize</code> 需要重建 <code>hash</code> 表，严重影响性能</p>
</li>
<li><p><font color='green'>【推荐】</font>使用 <code>entrySet</code> 遍历 <code>Map</code> 类集合 <code>KV</code>，而不是 <code>keySet</code> 方式进行遍历</p>
<p><font color='sienna'>说明：</font><code>keySet</code> 其实是遍历了 2 次，一次是转为 <code>Iterator</code> 对象，另一次是从 <code>hashMap </code>中取出<code>key</code> 所对应的 <code>value</code>。而 <code>entrySet</code> 只是遍历了一次就把 <code>key</code> 和 <code>value</code> 都放到了 <code>entry</code> 中，效率更高。如果是 <code>JDK8</code>，使用 <code>Map.foreach</code> 方法</p>
<p><font color='green'>正例：</font><code>values()</code>返回的是 V 值集合，是一个 <code>list</code> 集合对象；<code>keySet()</code>返回的是 K 值集合，是一个 Set 集合对象；<code>entrySet()</code>返回的是 K-V 值组合集合</p>
</li>
<li><p><font color='green'>【推荐】</font>高度注意 <code>Map</code> 类集合<code>K/V</code>能不能存储<code> null</code> 值的情况，如下表格</p>
<table>
<thead>
<tr>
<th>集合类</th>
<th>Key</th>
<th>Value</th>
<th>Super</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Hashtable</td>
<td><font color='red'>不允许为 null</font></td>
<td><font color='red'>不允许为 null</font></td>
<td>Dictionary</td>
<td>线程安全</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td><font color='red'>不允许为 null</font></td>
<td><font color='red'>不允许为 null</font></td>
<td>AbstractMap</td>
<td>锁分段技术（JDK8:CAS）</td>
</tr>
<tr>
<td>TreeMap</td>
<td><font color='red'>不允许为 null</font></td>
<td><font color='blue'>允许为 null</font></td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
<tr>
<td>HashMap</td>
<td><font color='blue'>允许为 null</font></td>
<td><font color='blue'>允许为 null</font></td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
</tbody></table>
<p><font color='orange'>反例：</font>由于 <code>HashMap</code> 的干扰，很多人认为 <code>ConcurrentHashMap</code> 是可以置入 <code>null</code> 值，而事实上，存储 <code>null</code> 值时会抛出 <code>NPE</code> 异常</p>
</li>
<li><p><font color='green'>【推荐】</font>合理利用好集合的有序性(<code>sort</code>)和稳定性(<code>order</code>)，避免集合的无序性(<code>unsort</code>)和不稳定性(<code>unorder</code>)带来的负面影响</p>
<p><font color='sienna'>说明：</font>有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：<code>ArrayList</code> 是 <code>order/unsort</code>；<code>HashMap</code> 是 <code>unorder/unsort</code>；<code>TreeSet</code> 是<code>order/sort</code></p>
</li>
<li><p><font color='green'>【推荐】</font>利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 <code>List </code>的<code>contains</code> 方法进行遍历、对比、去重操作</p>
</li>
</ol>
<h2 id="（六）并发处理"><a href="#（六）并发处理" class="headerlink" title="（六）并发处理"></a>（六）并发处理</h2><ol>
<li><p><font color='red'>【强制】</font>获取单例对象需要保证线程安全，其中的方法也要保证线程安全</p>
<p><font color='sienna'>说明：</font>资源驱动类、工具类、单例工厂类都需要注意</p>
</li>
<li><p><font color='red'>【强制】</font>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">&quot;TimerTaskThread&quot;</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程（<a href="https://www.cnblogs.com/dolphin0520/p/3932921.html">扩展Java并发编程：线程池的使用</a>）</p>
<p><font color='sienna'>说明：</font>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题</p>
</li>
<li><p><font color='red'>【强制】</font>线程池不允许使用 Executors 去创建，而是通过 <code>ThreadPoolExecutor</code> 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p>
<p><font color='sienna'>说明：</font><code>Executors </code>返回的线程池对象的弊端如下</p>
<ul>
<li><code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>:允许的请求队列长度为 <code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致 <code>OOM</code></li>
<li><code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>:允许的创建线程数量为 <code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致 <code>OOM</code></li>
</ul>
</li>
<li><p><font color='red'>【强制】</font><code>SimpleDateFormat</code> 是线程不安全的类，一般不要定义为 <code>static</code> 变量，如果定义为<code>static</code>，必须加锁，或者使用 <code>DateUtils</code> 工具类</p>
<p><font color='green'>正例：</font>注意线程安全，使用 <code>DateUtils</code>。亦推荐如下处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font color='sienna'>说明：</font>如果是 <code>JDK8</code> 的应用，可以使用 <code>Instant</code> 代替 <code>Date</code>，<code>LocalDateTime</code> 代替 <code>Calendar</code>，<code>DateTimeFormatter</code> 代替 <code>SimpleDateFormat</code>，官方给出的解释：<code>simple beautiful strong immutable thread-safe</code></p>
</li>
<li><p><font color='red'>【强制】</font>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁</p>
<p><font color='sienna'>说明：</font>尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 <code>RPC</code> 方法</p>
</li>
<li><p><font color='red'>【强制】</font>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁</p>
<p><font color='sienna'>说明：</font>线程一需要对表 <code>A、B、C</code> 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 <code>A、B、C</code>，否则可能出现死锁</p>
</li>
<li><p><font color='red'>【强制】</font>并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 <code>version</code> 作为更新依据</p>
<p><font color='sienna'>说明：</font>如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次</p>
</li>
<li><p><font color='red'>【强制】</font>多线程并行处理定时任务时，<code>Timer </code>运行多个 <code>TimeTask</code> 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 <code>ScheduledExecutorService</code>则没有这个问题</p>
</li>
<li><p><font color='red'>【强制】</font>禁止在循环中调用<code>synchronized</code>（同步）方法</p>
<p><font color='sienna'>说明：</font>方法的同步需要消耗相当大的资源，不要在循环中调用同步方法</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SYN</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">            method (vector.elementAt(i));    <span class="comment">// violation</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Vector vector = <span class="keyword">new</span> Vector (<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SYN</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>&#123;<span class="comment">//在一个同步块中执行非同步方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                method (vector.elementAt(i));   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Vector vector = <span class="keyword">new</span> Vector (<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>禁止在循环中使用表达式</p>
<p><font color='sienna'>说明：</font>在不做编译优化的情况下，在循环中，循环条件会被反复计算，如果不使用复杂表达式，而使循环条件值不变的话，程序将会运行的更快</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span> <span class="params">(Vector vector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size (); i++)  <span class="comment">// Violation</span></span><br><span class="line">            ; <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEL_fixed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span> <span class="params">(Vector vector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = vector.size ()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            ; <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>使用 <code>CountDownLatch</code> 进行异步转同步操作，每个线程退出前必须调用 <code>countDown</code>方法，线程执行代码注意 <code>catch</code> 异常，确保<code> countDown</code> 方法被执行到，避免主线程无法执行至 <code>await</code> 方法，直到超时才返回结果</p>
<p><font color='sienna'>说明：</font>注意，子线程抛出异常堆栈，不能在主线程 try-catch 到</p>
</li>
<li><p><font color='green'>【推荐】</font>避免 <code>Random</code> 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一<code>seed</code> 导致的性能下降（<a href="http://www.importnew.com/12460.html">扩展多线程下生成随机数</a>）</p>
<p><font color='sienna'>说明：</font><code>Random</code> 实例包括 <code>java.util.Random</code> 的实例或者 <code>Math.random()</code>的方式</p>
<p><font color='green'>正例：</font>在 <code>JDK7</code> 之后，可以直接使用<code> API ThreadLocalRandom</code>，而在 <code>JDK7 </code>之前，需要编码保证每个线程持有一个实例</p>
</li>
<li><p><font color='green'>【推荐】</font>在并发场景下，通过双重检查锁（<code>double-checked locking</code>）实现延迟初始化的优化问题隐患(可参考 The “<code>Double-Checked Locking is Broken&quot; Declaration</code>)，推荐解决方案中较为简单一种（适用于 <code>JDK5</code> 及以上版本），将目标属性声明为 <code>volatile</code> 型</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyInitDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (helper == <span class="keyword">null</span>) <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">                helper = <span class="keyword">new</span> Helper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// other methods and fields...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="（七）控制语句"><a href="#（七）控制语句" class="headerlink" title="（七）控制语句"></a>（七）控制语句</h2><ol>
<li><p><font color='red'>【强制】</font>在一个 <code>switch</code> 块内，每个 <code>case</code> 要么通过 <code>break/return</code> 等来终止，要么注释说明程序将继续执行到哪一个 <code>case</code> 为止；在一个 <code>switch</code> 块内，都必须包含一个 <code>default</code> 语句并且放在最后，即使空代码</p>
</li>
<li><p><font color='red'>【强制】</font>在高并发场景中，避免使用”等于”判断作为中断或退出的条件</p>
<p><font color='sienna'>说明：</font>如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替</p>
<p><font color='orange'>反例：</font>判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止</p>
</li>
<li><p><font color='red'>【强制】</font>在 <code>if/else/for/while/do</code>语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：<code>if (condition) statements</code></p>
</li>
<li><p><font color='green'>【推荐】</font>表达异常的分支时，少用 if-else 方式，这种方式可以改写成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line"> ...</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 接着写 else 的业务逻辑代码;</span></span><br></pre></td></tr></table></figure>

<p><font color='sienna'>说明：</font>如果非得使用 <code>if()...else if()...else...</code>方式表达逻辑，<font color='red'>【强制】</font>避免后续代码维护困难，请勿超过 3 层</p>
<p><font color='green'>正例：</font>超过 3 层的 <code>if-else</code> 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isBusy()) &#123;</span><br><span class="line">        System.out.println(“change time.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFree()) &#123;</span><br><span class="line">        System.out.println(“go to travel.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>除常用方法（如<code>getXxx/isXxx</code>等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性</p>
<p><font color='sienna'>说明：</font>很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> existed = (file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...);</span><br><span class="line"><span class="keyword">if</span> (existed) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...)) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 <code>try-catch</code> 操作（这个 <code>try-catch</code> 是否可以移至循环体外）</p>
</li>
<li><p><font color='green'>【推荐】</font>避免采用取反逻辑运算符</p>
<p><font color='sienna'>说明：</font>取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法</p>
<p><font color='green'>正例：</font>使用<code>if (x &lt; 628)</code>来表达 <code>x</code> 小于 628</p>
<p><font color='orange'>反例：</font>使用 if (!(x &gt;= 628)) 来表达 x 小于 628</p>
</li>
<li><p><font color='green'>【推荐】</font>接口入参保护，这种场景常见的是用作批量操作的接口</p>
</li>
<li><p><font color='green'>【推荐】</font>下列情形，需要进行参数校验：</p>
<ul>
<li>调用频次低的方法</li>
<li>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失</li>
<li>需要极高稳定性和可用性的方法</li>
<li>对外提供的开放接口，不管是 <code>RPC/API/HTTP</code> 接口</li>
<li>敏感权限入口</li>
</ul>
</li>
<li><p><font color='green'>【推荐】</font>下列情形，不需要进行参数校验</p>
<ul>
<li>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求</li>
<li>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般<code>DAO</code>层与 <code>Service</code> 层都在同一个应用中，部署在同一台服务器中，所以 <code>DAO </code>的参数校验，可以省略</li>
<li>被声明成 <code>private</code> 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数</li>
</ul>
</li>
</ol>
<h2 id="（八）注释规约"><a href="#（八）注释规约" class="headerlink" title="（八）注释规约"></a>（八）注释规约</h2><ol>
<li><p><font color='red'>【强制】</font>类、类属性、类方法的注释必须使用 <code>Javadoc</code> 规范，使用/**内容*/格式，不得使用// xxx 方式</p>
<p><font color='sienna'>说明：</font>在 <code>IDE</code> 编辑窗口中，<code>Javadoc</code> 方式会提示相关注释，生成 <code>Javadoc</code> 可以正确输出相应注释；在 <code>IDE</code> 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率</p>
</li>
<li><p><font color='red'>【强制】</font>所有的抽象方法（包括接口中的方法）必须要用 <code>Javadoc</code> 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>
<p><font color='sienna'>说明：</font>对子类的实现要求，或者调用注意事项，请一并说明</p>
</li>
<li><p><font color='red'>【强制】</font>所有的类都必须添加创建者和创建日期</p>
</li>
<li><p><font color='red'>【强制】</font>方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐</p>
</li>
<li><p><font color='red'>【强制】</font>所有的枚举类型字段必须要有注释，说明每个数据项的用途</p>
</li>
<li><p><font color='green'>【推荐】</font>与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可</p>
<p><font color='orange'>反例：</font>“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋</p>
</li>
<li><p><font color='green'>【推荐】</font>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改</p>
<p><font color='sienna'>说明：</font>代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义</p>
</li>
<li><p><font color='green'>【推荐】</font>谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除</p>
<p><font color='sienna'>说明：</font>代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）</p>
</li>
<li><p><font color='green'>【推荐】</font>特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码</p>
<ul>
<li><p>待办事宜（<code>TODO</code>）:（ 标记人，标记时间，[预计处理时间]）</p>
<p>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc<br>还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）</p>
</li>
<li><p>错误，不能工作（<code>FIXME</code>）:（标记人，标记时间，[预计处理时间]）</p>
<p>在注释中用 <code>FIXME</code> 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p>
</li>
</ul>
</li>
<li><p><font color='green'>【推荐】</font>核心代码注释量不得低于文件总行数的30%，非核心代码注释量不得低于文件总行数的20%</p>
</li>
</ol>
<h2 id="（九）其他"><a href="#（九）其他" class="headerlink" title="（九）其他"></a>（九）其他</h2><ol>
<li><p><font color='red'>【强制】</font>在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度</p>
<p><font color='sienna'>说明：</font>不要在方法体内定义：Pattern pattern = Pattern.compile(“规则”)</p>
</li>
<li><p><font color='red'>【强制】</font><code>velocity</code> 调用 <code>POJO</code> 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 <code>POJO</code> 的 <code>getXxx()</code>，如果是<code> boolean</code> 基本数据类型变量（<code>boolean</code> 命名不需要加 <code>is</code>前缀），会自动调用 <code>isXxx()</code>方法</p>
<p><font color='sienna'>说明：</font>注意如果是 <code>Boolean</code> 包装类对象，优先调用 <code>getXxx()</code>的方法</p>
</li>
<li><p><font color='red'>【强制】</font>注意 <code>Math.random()</code> 这个方法返回是 <code>double</code> 类型，注意取值的范围 <code>0≤x&lt;1</code>（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 <code>Random</code> 对象的 <code>nextInt</code> 或者 <code>nextLong</code> 方法</p>
</li>
<li><p><font color='red'>【强制】</font>获取当前毫秒数 <code>System.currentTimeMillis()</code>; 而不是 <code>new Date().getTime()</code></p>
<p><font color='sienna'>说明：</font>如果想获取更加精确的纳秒级时间值，使用 <code>System.nanoTime()</code>的方式。在 <code>JDK8</code> 中，针对统计时间等场景，推荐使用 Instant 类</p>
</li>
<li><p><font color='red'>【强制】</font>删除未引用类，避免使用以”.*”结尾的引用，引用的顺序如下：</p>
<ul>
<li><code>JDK</code>标准包（例如：<code>import java.io.IOException</code>等）</li>
<li>第三方的包（例如：<code>import org.dom4j.Node</code>等）</li>
<li>项目的公共包</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>禁止在循环体中生命并实例化变量</p>
<p><font color='sienna'>说明：</font>在循环体中声明并实例化临时变量将会增加内存消耗，增加垃圾回收的次数；尤其是大对象，严格禁止在循环体内声明并实例化对象</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LOOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span> <span class="params">(Vector v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; v.size();i++) &#123;</span><br><span class="line">            Object o = <span class="keyword">new</span> Object(); <span class="comment">// 不建议</span></span><br><span class="line">            o = v.elementAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='green'>正例：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LOOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span> <span class="params">(Vector v)</span> </span>&#123;</span><br><span class="line">        Object o;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++) &#123;</span><br><span class="line">            o = v.elementAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>不要在视图模板中加入任何复杂的逻辑</p>
<p><font color='sienna'>说明：</font>根据 <code>MVC </code>理论，视图的职责是展示，不要抢模型和控制器的活</p>
</li>
<li><p><font color='green'>【推荐】</font>任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存</p>
</li>
<li><p><font color='green'>【推荐】</font>及时清理不再使用的代码段或配置信息</p>
<p><font color='sienna'>说明：</font>对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余</p>
<p><font color='green'>正例：</font>对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由</p>
</li>
</ol>
<h1 id="二、异常日志"><a href="#二、异常日志" class="headerlink" title="二、异常日志"></a>二、异常日志</h1><h2 id="（一）异常处理"><a href="#（一）异常处理" class="headerlink" title="（一）异常处理"></a>（一）异常处理</h2><ol>
<li><p><font color='red'>【强制】</font><code>Java</code> 类库中定义的可以通过预检查方式规避的 <code>RuntimeException</code>异常不应该通过<br><code>catch</code> 的方式来处理，比如：<code>NullPointerException</code>，<code>IndexOutOfBoundsException</code> 等等</p>
<p><font color='sienna'>说明：</font>无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 <code>catch NumberFormatException</code> 来实现</p>
<p><font color='green'>正例：</font><code>if (obj != null) &#123;...&#125;</code></p>
<p><font color='orange'>反例：</font><code>try &#123; obj.method(); &#125; catch (NullPointerException e) &#123;…&#125;</code></p>
</li>
<li><p><font color='red'>【强制】</font>异常不要用来做流程控制，条件控制</p>
<p><font color='sienna'>说明：</font>异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多</p>
</li>
<li><p><font color='red'>【强制】</font>catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理</p>
<p><font color='sienna'>说明：</font>对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现</p>
<p><font color='green'>正例：</font>用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户</p>
</li>
<li><p><font color='red'>【强制】</font>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容</p>
</li>
<li><p><font color='red'>【强制】</font>有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务</p>
</li>
<li><p><font color='red'>【强制】</font>finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch</p>
<p><font color='sienna'>说明：</font>如果 <code>JDK7</code> 及以上，可以使用 <code>try-with-resources</code> 方式（<a href="https://www.cnblogs.com/itZhy/p/7636615.html">扩展Java进阶知识点3：更优雅地关闭资源 - try-with-resource及其异常抑制</a>）</p>
</li>
<li><p><font color='red'>【强制】</font>不要在 finally 块中使用 return</p>
<p><font color='sienna'>说明：</font>finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句</p>
</li>
<li><p><font color='red'>【强制】</font>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类</p>
<p><font color='sienna'>说明：</font>如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况</p>
</li>
<li><p><font color='green'>【推荐】</font>方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值</p>
<p><font color='sienna'>说明：</font>本手册明确防止 <code>NPE</code> 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况</p>
</li>
<li><p><font color='red'>【强制】</font>防止 <code>NPE</code>，是程序员的基本修养，注意 <code>NPE</code> 产生的场景</p>
<ul>
<li><p>返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 <code>NPE</code></p>
<p><font color='orange'>反例：</font><code>public int f() &#123; return Integer 对象&#125;</code>， 如果为 null，自动解箱抛 <code>NPE</code></p>
</li>
<li><p>数据库的查询结果可能为 null</p>
</li>
<li><p>集合里的元素即使 <code>isNotEmpty</code>，取出的数据元素也可能为 null</p>
</li>
<li><p>远程调用返回对象时，一律要求进行空指针判断，防止 <code>NPE</code></p>
</li>
<li><p>对于 Session 中获取的数据，建议 <code>NPE</code> 检查，避免空指针</p>
</li>
<li><p>级联调用 <code>obj.getA().getB().getC()</code>；一连串调用，易产生 <code>NPE</code></p>
<p><font color='green'>正例：</font>使用<code> JDK8</code> 的 <code>Optional</code> 类来防止 <code>NPE</code> 问题。（<a href="http://www.importnew.com/26066.html">扩展Java8 如何正确使用 Optional</a>）</p>
</li>
</ul>
</li>
<li><p><font color='green'>【推荐】</font>定义时区分 unchecked / checked 异常，避免直接抛出 <code>new RuntimeException()</code>，更不允许抛出 <code>Exception</code> 或者 <code>Throwable</code>，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：<code>DAOException / ServiceException</code> 等</p>
</li>
<li><p><font color='green'>【推荐】</font>对于公司外的 <code>http/api </code>开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess()</code>方法、“错误码”、“错误简短信息”</p>
<p><font color='sienna'>说明：</font>关于 <code>RPC</code> 方法返回方式使用 Result 方式的理由</p>
<ul>
<li>使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误</li>
<li>如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题</li>
</ul>
</li>
<li><p><font color='green'>【推荐】</font>避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则</p>
<p><font color='sienna'>说明：</font>随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化</p>
<p><font color='green'>正例：</font>一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<br><code>private boolean checkParam(DTO dto) &#123;...&#125; </code></p>
</li>
</ol>
<h2 id="（二）日志规约"><a href="#（二）日志规约" class="headerlink" title="（二）日志规约"></a>（二）日志规约</h2><ol>
<li><p><font color='red'>【强制】</font>应用中不可直接使用日志系统（<code>Log4j、Logback</code>）中的 <code>API</code>，而应依赖使用日志框架<code>SLF4J</code> 中的<code> API</code>，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点</p>
</li>
<li><p><font color='red'>【强制】</font>应用中的扩展日志（如打点、临时监控、访问日志等）命名方式</p>
<p><code>appName_logType_logName.log</code></p>
<p><code>logType:</code>日志类型，如 <code>stats/monitor/access</code> 等；<code>logName:</code>日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找</p>
<p><font color='green'>正例：</font><code>mppserver</code> 应用中单独监控时区转换异常，如：</p>
<p><code>mppserver_monitor_timeZoneConvert.log</code></p>
<p><font color='sienna'>说明：</font>推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控</p>
</li>
<li><p><font color='red'>【强制】</font>对 <code>trace/debug/info</code> 级别的日志输出，必须使用条件输出形式或者使用占位符的方式</p>
<p><font color='sienna'>说明：</font><code>logger.debug(&quot;Processing trade with id: &quot; + id + &quot; and symbol: &quot; + symbol);</code>如果日志级别是 <code>warn</code>，上述日志不会打印，但是会执行字符串拼接操作，如果 <code>symbol</code> 是对象，会执行 <code>toString()</code>方法，浪费了系统资源，执行了上述操作，最终日志却没有打印</p>
<p><font color='green'>正例：</font>（条件）建设采用如下方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">	logger.debug(<span class="string">&quot;Processing trade with id: &quot;</span> + id + <span class="string">&quot; and symbol: &quot;</span> + symbol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='green'>正例：</font>（占位符）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Processing trade with id: &#123;&#125; and symbol : &#123;&#125; &quot;</span>, id, symbol);</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>避免重复打印日志，浪费磁盘空间，务必在 <code>log4j.xml </code>中设置 <code>additivity=false</code>。</p>
<p><font color='green'>正例：</font><code>&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</code></p>
</li>
<li><p><font color='red'>【强制】</font>异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 <code>throws</code> 往上抛出</p>
<p><font color='green'>正例：</font><code>logger.error(各类参数或者对象 toString() + &quot;_&quot; + e.getMessage(), e);</code></p>
</li>
<li><p><font color='green'>【推荐】</font>可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从</p>
</li>
</ol>
<h1 id="三、安全规约"><a href="#三、安全规约" class="headerlink" title="三、安全规约"></a>三、安全规约</h1><ol>
<li><p><font color='red'>【强制】</font>用户输入的 <code>SQL</code> 参数严格使用参数绑定或者 <code>METADATA</code> 字段值限定，防止 <code>SQL</code> 注入，禁止字符串拼接 <code>SQL</code> 访问数据库</p>
</li>
<li><p><font color='red'>【强制】</font>用户请求传入的任何参数必须做有效性验证</p>
<p><font color='sienna'>说明：</font>忽略参数校验可能导致</p>
<ul>
<li>page size 过大导致内存溢出</li>
<li>恶意 order by 导致数据库慢查询</li>
<li>任意重定向</li>
<li><code>SQL</code> 注入</li>
<li>反序列化注入</li>
<li>正则输入源串拒绝服务 <code>ReDoS</code></li>
</ul>
<p><font color='sienna'>说明：</font>Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果</p>
</li>
<li><p><font color='red'>【强制】</font>禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据</p>
</li>
<li><p><font color='red'>【强制】</font>表单、AJAX 提交必须执行 <code>CSRF</code> 安全验证</p>
</li>
<li><p><font color='red'>【强制】</font>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机<br>制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。</p>
</li>
</ol>
<h1 id="四、MySQL数据库"><a href="#四、MySQL数据库" class="headerlink" title="四、MySQL数据库"></a>四、MySQL数据库</h1><h2 id="（一）建表规约"><a href="#（一）建表规约" class="headerlink" title="（一）建表规约"></a>（一）建表规约</h2><ol>
<li><p><font color='red'>【强制】</font>表达是与否概念的字段，必须使用<code>is_xxx</code>的方式命名，数据类型是<code>unsigned tinyint</code>（1表示是，0表示否）</p>
<p><font color='sienna'>说明：</font>任何字段如果是非负数，必须是<code>unsigned</code></p>
<p><font color='red'>注意：</font><code>POJO</code>类中任何布尔类型的变量，都不要加is前缀，所以，需要在<resultMap>设置从<code>is_xxx</code>到<code>Xxx</code>的映射关系。数据库表示是与否的值，使用<code>tinyint</code>类型，坚持<code>is_xxx</code>的命名方式是为了明确其取之含义与取值范围</p>
<p><font color='green'>正例：</font>表达逻辑删除的字段名<code>is_deleted</code>，1表示删除，0表示未删除</p>
</li>
<li><p><font color='red'>【强制】</font>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>
<p><font color='sienna'>说明：</font><code>MySQL</code>在<code>Windows</code>下不区分大小写，单在<code>Linux</code>下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</p>
<p><font color='green'>正例：</font><code>aliyun_admin</code>，<code>rdc_config</code>，<code>level3_name</code></p>
<p><font color='orange'>反例：</font><code>AliyunAdmin</code>，<code>rdConfig</code>，<code>level_3_name</code></p>
</li>
<li><p><font color='red'>【强制】</font>表名不适用复数名词</p>
<p><font color='sienna'>说明：</font>表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于DO类名也是单数形式，符合表达习惯。</p>
</li>
<li><p><font color='red'>【强制】</font>禁用保留字，如<code>desc</code>、<code>range</code>、<code>match</code>、<code>delayed</code>等，请参照<code>MySQL</code>官方保留字</p>
</li>
<li><p><font color='red'>【强制】</font>主键索引名为<code>pk_字段名</code>；唯一索引名为<code>uk_字段名</code>；普通索引名为<code>idx_字段名</code>。</p>
<p><font color='sienna'>说明：</font><code>pk_</code>即<code>primary key</code>；<code>uk_</code>即<code>unique key</code>;<code>idx_</code>即<code>index</code>的简称。</p>
</li>
<li><p><font color='red'>【强制】</font>小数类型为<code>decimal</code>，禁止使用<code>float</code>和<code>double</code></p>
<p><font color='sienna'>说明：</font><code>float</code>和<code>double</code>在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过decimal的范围，建议将数据拆成证书和小数部分分开存储。</p>
</li>
<li><p><font color='red'>【强制】</font>如果存储的字符串长度几乎相等，使用<code>char</code>定长字符串类型</p>
</li>
<li><p><font color='red'>【强制】</font><code>varchar</code>是可变长字符串，不预先分配存储空间，长度不要超过5000，如果存储长度大于此值，定义字段类型为text，独立出一张表，用主键来对应，避免影响其他字段索引效率。</p>
</li>
<li><p><font color='red'>【强制】</font>表必备三个字段：<code>id</code>，<code>gmt_create</code>，<code>gmt_modified</code></p>
<p><font color='sienna'>说明：</font>其中<code>id</code>必为主键，类型为<code>bigint unsigned</code>、表单时自增，步长为1。<code>gmt_create</code>，<code>gmt_modified</code>的类型均为<code>datetime</code>类型，前者现在时表示主动创建，后者过去分词表示被动更新</p>
</li>
<li><p><font color='green'>【推荐】</font>表的命名最好是“业务名称_表的作用”</p>
<p><font color='green'>正例：</font><code>alipay_task/force_project/trade_config</code></p>
</li>
<li><p><font color='green'>【推荐】</font>库名尽量与应用名保持一致</p>
</li>
<li><p><font color='green'>【推荐】</font>字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</p>
<ul>
<li>不是频繁修改的字段</li>
<li>不是<code>varchar</code>超长字段，更不能是<code>text</code>字段</li>
</ul>
<p><font color='green'>正例：</font>商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</p>
</li>
<li><p><font color='green'>【推荐】</font>单表行数超过500万行或者单表容量超过<code>2GB</code>，才推荐进行分库分表</p>
<p><font color='sienna'>说明：</font>如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
</li>
<li><p><font color='green'>【参考】</font>合适的字符存储长度，不但节约数据库表空间，节约索引存储，更重要的是提升检索速度</p>
<p><font color='green'>正例：</font>如下表，其中无符号值可以避免误存负数，且扩大了表示范围</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>年龄区间</th>
<th>类型</th>
<th>字节</th>
<th>表示范围</th>
</tr>
</thead>
<tbody><tr>
<td>人</td>
<td>150岁之内</td>
<td><code>tinyint unsigned</code></td>
<td>1</td>
<td>无符号：0~255</td>
</tr>
<tr>
<td>龟</td>
<td>数百岁</td>
<td><code>smallint unsigned</code></td>
<td>2</td>
<td>无符号：0~65535</td>
</tr>
<tr>
<td>恐龙化石</td>
<td>数千万年</td>
<td><code>int unsigned</code></td>
<td>4</td>
<td>无符号：0~约42.9亿</td>
</tr>
<tr>
<td>太阳</td>
<td>约50亿年</td>
<td><code>bigint unsigned</code></td>
<td>8</td>
<td>无符号：0~10的19次方</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="（二）索引规约"><a href="#（二）索引规约" class="headerlink" title="（二）索引规约"></a>（二）索引规约</h2><ol>
<li><p><font color='red'>【强制】</font>业务上具有唯一特性的字段，及时是多个字段的组合，也必须建成唯一索引</p>
<p><font color='sienna'>说明：</font>不要以为唯一索引影响了<code>insert</code>速度，这个速度损耗可以忽略，但提高了查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生</p>
</li>
<li><p><font color='red'>【强制】</font>超过三个表禁止join。需要join的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p>
<p><font color='sienna'>说明：</font>即使双标join也要注意表索引和SQL性能</p>
</li>
<li><p><font color='red'>【强制】</font>在<code>varchar</code>字段上建立索引时，必须制定索引长度，没必要对全字段建立索引，根据实际文本区分度决定长度即可。</p>
<p><font color='sienna'>说明：</font>索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为20的索引，区分度会打到90%以上，可以使用<code>count(distinct left(列名，索引长度))/count(*)</code>的区分度来确定.</p>
</li>
<li><p><font color='red'>【强制】</font>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决</p>
<p><font color='sienna'>说明：</font>索引文件具有B-Tree的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>
</li>
<li><p><font color='green'>【推荐】</font>如果有order by的场景，请注意利用索引的有序性。order by最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。</p>
<p><font color='green'>正例：</font><code>where a=? and b=? order by c;</code> 索引：<code>a_b_c</code></p>
<p><font color='orange'>反例：</font>索引中有范围查找，那么索引有序性无法利用，如：<code>WHERE a&gt;10 ORDER BY b;</code>索引a_b无法排序</p>
</li>
<li><p><font color='green'>【推荐】</font>利用覆盖索引来进行查询操作，避免全表。</p>
<p><font color='sienna'>说明：</font>如果一本书需要知道第11章是什么标题，会翻开第11章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p>
<p><font color='green'>正例：</font>能够建立索引的中类分别为朱建索引、唯一索引、普通索引三种，而覆盖索引知识一种查询的一种效果，用<code>explain</code>的结果，<code>extra</code>列会出现<code>using index</code></p>
</li>
<li><p><font color='green'>【推荐】</font>利用延迟关联或者子查询优化超多分页场景</p>
<p><font color='sienna'>说明：</font><code>MySQL</code>并不是跳过<code>offset</code>行，而是取<code>offset+N</code>行，然后返回放弃前<code>offset</code>行，返回N行，那当<code>offset</code>特别大的时候，效率就非常的地下，要么控制返回的总页数，要么对超过特定阈值的页数进行<code>SQL</code>改写。</p>
<p><font color='green'>正例：</font>先快速定位需要获取的<code>id</code>段，然后再关联</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span> <span class="keyword">FROM</span> 表 <span class="number">1</span> a, (<span class="keyword">select</span> id <span class="keyword">from</span> 表 <span class="number">1</span> <span class="keyword">where</span> 条件 LIMIT <span class="number">100000</span>,<span class="number">20</span> ) b <span class="keyword">where</span> a.id<span class="operator">=</span>b.id</span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【推荐】</font>防止因字段类型不同造成隐式转换，导致索引失效</p>
</li>
<li><p><font color='green'>【参考】</font>创建索引避免有如下极端误解</p>
<ul>
<li>宁滥勿缺：任务一个查询就需要建一个索引</li>
<li>宁缺毋滥：认为索引会小号控件、严重拖慢更新和新增速度</li>
<li>地址唯一索引：任务业务的唯一性一律需要在应用层通过“先查后插”方式解决</li>
</ul>
</li>
</ol>
<h2 id="（三）SQL语句"><a href="#（三）SQL语句" class="headerlink" title="（三）SQL语句"></a>（三）SQL语句</h2><ol>
<li><p><font color='red'>【强制】</font>不要使用<code>count(列名)</code>或者<code>count(常量)</code>来代替<code>count(\*)</code>,<code>count(*)</code>是<code>SQL92</code>定义的标准统计行数的语法，跟数据库无关，跟<code>NULL</code>或非<code>NULL</code>无关。</p>
<p><font color='sienna'>说明：</font><code>count(*)</code>会统计值为<code>NULL</code>的行，而<code>count(列名)</code>不会统计此列为NULL值的行。</p>
</li>
<li><p><font color='red'>【强制】</font><code>count(distinct col)</code>计算该列除<code>NULL</code>之外的不重复行数，注意<code>count(distinct col1,col2)</code>如果其中一列全为<code>NULL</code>，那么及时另一列有不同的值，也返回0</p>
</li>
<li><p><font color='red'>【强制】</font>当某一列的值全是<code>NULL</code>时，<code>count(col)</code>的返回结果为0，但是<code>sum(col)</code>的返回结果为<code>NULL</code>，因此使用<code>sum()</code>时需注意<code>NPE</code>问题</p>
<p><font color='green'>正例：</font>可以使用如下方式来避免sum的NPE问题：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(ISNULL(<span class="built_in">SUM</span>(g)),<span class="number">0</span>,<span class="built_in">SUM</span>(g))<span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><font color='red'>【强制】</font>使用<code>ISNULL()</code>来判断是否为<code>NULL</code>值。</p>
<p><font color='sienna'>说明：</font><code>NULL</code>与任何值的直接比较都为<code>NULL</code></p>
<ul>
<li><code>NULL&lt;&gt;NULL</code>的返回结果是<code>NULL</code>，而不是<code>false</code></li>
<li><code>NULL=NULL</code>的结果返回值是<code>NULL</code>，而不是<code>true</code></li>
<li><code>NULL&lt;&gt;1</code>的返回结果是<code>NULL</code>，而不是<code>true</code></li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>在代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句</p>
</li>
<li><p><font color='red'>【强制】</font>不得使用外检或级联，一切外键概念必须在应用层解决</p>
<p><font color='sienna'>说明：</font>以学生和成绩的关系为例，学生表中的student_id是主键，那么成绩表中的student_id则为外键。如果更新学生表中的student_id，同时触发成绩表中student_id更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p>
</li>
<li><p><font color='red'>【强制】</font>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p>
</li>
<li><p><font color='red'>【强制】</font>数据订正（特别是删除、修改记录操作）时，要先select，避免出现误删除，确认无误后才能执行更新语句</p>
</li>
<li><p><font color='green'>【推荐】</font><code>in</code>操作能避免则避免，是在避免不了，需要仔细评估<code>in</code>后边集合元素数量，控制在1000个内。</p>
</li>
<li><p><font color='green'>【参考】</font>注意字符串统计函数的区别</p>
<p><font color='sienna'>说明：</font></p>
<ul>
<li><font color='red'>SELECT LENGTH(“轻松工作”);返回12</font></li>
<li>SELECT CHARACTER_LENGTH(“轻松工作”)； 返回为 4</li>
<li>如果需要存储表情，那么选择<code>utf8mb4</code>来进行存储，注意它与<code>utf-8</code>编码区别</li>
</ul>
</li>
<li><p><font color='green'>【参考】</font>TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE<br>无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句</p>
<p><font color='sienna'>说明：</font>TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同</p>
</li>
</ol>
<h2 id="（四）ORM映射"><a href="#（四）ORM映射" class="headerlink" title="（四）ORM映射"></a>（四）ORM映射</h2><ol>
<li><p><font color='red'>【强制】</font>在表查询中，一律不要使用*作为查询的字段列表，需要哪些字段必须明确写明</p>
<p><font color='sienna'>说明：</font></p>
<ul>
<li>增加查询分析器解析成本</li>
<li>增减字段容易与<code>resultMap</code>配置不一致</li>
<li>无用字段增加网络小号，尤其是<code>text</code>类型字段</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>不要用<code>resultClass</code>当返回参数，及时所有的类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必须有一个<code>POJO</code>类与之对应</p>
<p><font color='sienna'>说明：</font>配置映射关系，是字段与DO类解耦，方便维护</p>
</li>
<li><p><font color='red'>【强制】</font><code>sql.xml</code> 配置参数使用：<code>#&#123;&#125;，#param#</code> 不要使用${} 此种方式容易出现<code> SQL</code> 注入</p>
</li>
<li><p><font color='red'>【强制】</font>不允许直接拿<code>HashMap</code>与<code>Hashtable</code>作为查询结果集的输出。</p>
<p><font color='sienna'>说明：</font><code>resultClass=”Hashtable”</code>，会置入字段名和属性值，但是值的类型不可控</p>
</li>
<li><p><font color='red'>【强制】</font>不要写一个大而全的数据更新接口。传入为 <code>POJO</code> 类，不管是不是自己的目标更新字段，都进行 <code>update table set c1=value1,c2=value2,c3=value3;</code> 这是不对的。执行 <code>SQL</code>时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 <code>binlog</code> 存储</p>
</li>
<li><p><font color='green'>【参考】</font>@Transactional 事务不要滥用。事务会影响数据库的 <code>QPS</code>，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等</p>
</li>
</ol>
<h1 id="五、Oracle数据库"><a href="#五、Oracle数据库" class="headerlink" title="五、Oracle数据库"></a>五、Oracle数据库</h1><h2 id="（一）对象命名规范"><a href="#（一）对象命名规范" class="headerlink" title="（一）对象命名规范"></a>（一）对象命名规范</h2><ol>
<li><p><font color='red'>【强制】</font>数据库名称定义为系统名+模块名</p>
<p><font color='sienna'>说明：</font></p>
<ul>
<li>全局数据库名和SID名要求一致</li>
<li>因SID名只能包含字符和数字，所以全局数据库和SID名中不能含有“_”等字符</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>表空间命名规范</p>
<ul>
<li>面向用户的专用数据表空间以<code>用户名+_+data</code>命名 ，如<code>Aud</code> 用户专用数据表空间可命名为<code>Aud_data</code></li>
<li>面向用户的专用索引表空间以<code>用户名+_+idx</code>命名</li>
<li>面向用户的专用临时表空间以<code>用户名+_+tmp</code>命名</li>
<li>面向用户的专用回滚段表空间以<code>用户名+_+rbs</code>命名</li>
<li>面向应用的表空间以<code>应用名+_data/应用名+_idx/应用名+_tmp/应用名+_rbs</code> 命名</li>
<li>LOB 段数据专用表空间以其<code>数据表空间+_+lobs</code> 命名，如上例中数据表空间为<code>Aud_data</code>，则LOB 段表空间可命名为<code>Aud_data_lobs</code></li>
<li>表空间文件命名以表空间名+两位数序号(序号从01开始)组成，如Aud_data01 等</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>表名的命名规范</p>
<ul>
<li><p>一般表采用<code>系统名+t_+模块名+_+表义名</code> 格式构成</p>
</li>
<li><p>若数据库中只含有单个模块，命名可采用<code>系统名+t_+表义名</code>格式构成</p>
</li>
<li><p>模块名或表义名均以其汉语拼音的首字符命名，表义名中汉语拼音均采用小写，且字符间不加分割符</p>
</li>
<li><p>表别名命名规则：取表义名的前3 个字符加最后一个字符。如果存在冲突，适当增加字符（如取表义名的前4 个字符加最后一个字符等）</p>
</li>
<li><p>临时表采用<code>系统名+t_tmp_+表义名</code> 格式构成</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dft_gy_cbap：系统名（电费 df）<span class="operator">+</span>t_<span class="operator">+</span>模块名（高压 gy）<span class="operator">+</span>_<span class="operator">+</span>表义名（抄表安排 cbap）</span><br><span class="line">dft_cbbj: 系统名（电费 df）<span class="operator">+</span>t_<span class="operator">+</span>表义名（抄表标记 cbbj）</span><br><span class="line">dft_tmp_hj: 系统名（电费 df）<span class="operator">+</span>tmp<span class="operator">+</span>表义名（合计hj）(此处为临时表)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>属性（列或字段）命名规则</p>
<ul>
<li>采用有意义的列名，为实际含义的汉语拼音的首字符，且字符间不加任何分割符</li>
<li>属性名前不要加表名等作为前缀</li>
<li>属性后不加任何类型标识作为后缀</li>
<li>不要使用“ID”作为列名</li>
<li>关联字段命名以 <code>cd+_+关联表的表义名（或缩写）+_+字段名</code>进行</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>主键命名规则</p>
<ul>
<li>任何表都必须定义主键</li>
<li>表主键命名为：<code>pk+_+表名(或缩写)+_+主键标识</code>如<code>pk_YHXX_IDKH</code>等</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>外键命名规则</p>
<ul>
<li>表外键命名为： <code>fk+_+表名(或缩写)+_主表名(或缩写)+_+主键标识</code>如<code>fk_YHLX_YHXX_SFZH</code>等</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>CHECK约束命名规则</p>
<ul>
<li>CHECK 约束命名为： <code>chk+_+CHECK约束的列名</code>（或缩写）</li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>UNIQUE约束命名规则</p>
<ul>
<li>UNIQUE 约束命名为： <code>unq+_+UNIQUE约束的列名（或缩写）</code></li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>索引命名规则</p>
<ul>
<li>索引的命名为：<code>表名（或缩写）+_+列名+_idx</code>，其中多单词组成的属性列列名取前几个单词首字符再加末单词首字符组成如<code>yd_kh</code> 表<code>khid</code>上的<code>index: yd_kh_khid_idx</code></li>
</ul>
</li>
<li><p><font color='red'>【强制】</font>视图命名规则</p>
<p>视图命名以<code>系统名v_+模块名</code>作为前缀，其他命名规则和表的命名类似</p>
</li>
</ol>
<h2 id="（二）SQL编写规范"><a href="#（二）SQL编写规范" class="headerlink" title="（二）SQL编写规范"></a>（二）SQL编写规范</h2><ol>
<li><p><font color='red'>【强制】</font>表面使用数据库类型的自动转换功能</p>
<p><font color='orange'>反例：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>; <span class="comment">-- id如果是数字类型的，在这就需要内置转换，所以尽量保持数据类型一致</span></span><br></pre></td></tr></table></figure></li>
<li><p><font color='green'>【参考】</font>SELECT语句编写规范</p>
<ul>
<li>关键字大写，列表名表名小写</li>
<li>由SELECT 开头，后跟一个显示查询结果的列表</li>
<li>由FROM 开头，后跟一个或多个获取数据所涉及的表</li>
<li>由WHERE 开头，后跟一个或多个确定所需值的条件</li>
<li>由GROUP BY开头，后跟一个或多个表列名，通过这些列以对查询结果进行汇总</li>
<li>由ORDER BY开头，后跟一个或多个表列名，通过这些列以对查询结果进行排序</li>
</ul>
</li>
<li><p><font color='green'>【参考】</font>尽量避免在循环中使用<code>SQL</code>语句</p>
</li>
<li><p><font color='green'>【参考】</font>避免在<code>WHERE</code>子句中对列施以函数；</p>
<p><font color='green'>正例：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> service_promotion</span><br><span class="line"><span class="keyword">WHERE</span> gmt_modified</span><br><span class="line"><span class="operator">&gt;=</span> TO_DATE(<span class="string">&#x27;2001-9-01&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> gmt_modified</span><br><span class="line"><span class="operator">&lt;</span> TO_DATE(<span class="string">&#x27;2001-9-02&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><font color='orange'>反例：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>　service_promotion</span><br><span class="line"><span class="keyword">WHERE</span> TO_CHAR(gmt_modified,’yyyy<span class="operator">-</span>mm<span class="operator">-</span>dd’)</span><br><span class="line"><span class="operator">=</span> <span class="string">&#x27;20001-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="（三）类型选择"><a href="#（三）类型选择" class="headerlink" title="（三）类型选择"></a>（三）类型选择</h2><ol>
<li><font color='red'>【强制】</font>不同的数据类型选择不同的数据存储类型，不要什么都用<code>varchar2</code><ul>
<li>用<code>char(1)</code>代表布尔值</li>
<li>应尽量使用<code>varchar2</code>代替<code>char</code>类型</li>
<li><code>varchar2</code>最多4000字符</li>
<li><code>date</code>精确到微秒，而非天</li>
<li>使用<code>clob</code>代替<code>long</code>,<code>blob</code>代替<code>long</code> <code>raw</code></li>
<li>oracle只有number一种数据类型，使用时请给定长度</li>
</ul>
</li>
</ol>
<h1 id="附件：专有名词解释"><a href="#附件：专有名词解释" class="headerlink" title="附件：专有名词解释"></a>附件：专有名词解释</h1><ol>
<li><strong>POJO</strong>（<code>Plain Ordinary Java Object</code>）：在本手册中，<code>POJO</code>专指只有<code>setter/getter/toString</code>的简单类，包括<code>DO/DTO/BO/VO</code>等</li>
<li><strong>OOP</strong>（<code>Object Oriented Programming</code>）：本手册泛指类、对象的变成处理方式</li>
<li><strong>ORM</strong>（<code>Object Relation Mapping</code>）：对象关系映射，对象领域模型与底层数据之间的转换，本文繁殖<code>iBATIS</code>，<code>mybatis</code>等框架</li>
<li><strong>NPE</strong>（<code>java.lang.NullPointterException</code>）：空指针异常</li>
<li><strong>IDE</strong>（<code>Integrated Development Environment</code>）：用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具，本手册泛指<code>IDEA</code>和<code>Eclipse</code></li>
<li><strong>OOM</strong>（<code>Out of Memory</code>）：源于<code>java.lang.OutOfMemoryError</code>，当<code>JVM</code>没有足够的内存来为对象分配空间并且垃圾回收无法回收空间时，系统出现的严重状况</li>
</ol>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Twitter开源的雪花算法原理及Java实现</title>
    <url>/2021/09/09/Twitter%E5%BC%80%E6%BA%90%E7%9A%84%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_104.jpg"></p>
<h2 id="逻辑原理"><a href="#逻辑原理" class="headerlink" title="逻辑原理"></a>逻辑原理</h2><p>SnowFlake实现的核心思想：使用一个64Bit的Long型的数字作为全局唯一ID。分布式系统中应用广泛</p>
<img src="/2021/09/09/Twitter%E5%BC%80%E6%BA%90%E7%9A%84%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/screenshot_1.png" class="">
<ul>
<li>第一部分：1个bit，默认都是0，因为二进制中第一个bit如果是1，那么都是负数，但是实际使用中，生成的ID都是要求整数的，所以这里默认0</li>
<li>第二部分：41bit，表示时间戳，可以表达2^41-1个数字，也就是可以标识2^41-1个毫秒，换算成年是69年的时间</li>
<li>第三部分：10bit，记录工作机器id，代表的是这个服务最多能部署在2^10台机器上，也就是1024台机器，其中前5个bit代表机房id，后5个bit代表机器id，意思也就是最多代表2^5个机房（32个机房），每个机房可以代表2^5个机器（32台机器），也可以根据自己的实际情况确定机器的数量</li>
<li>第四部分：12bit，表示用来记录同一毫秒内产生的不同的id，12个bit代表最大正整数是2^12-1=4096，也就是说可以用这个12bit的数字来区分同一个毫秒内的4096个不同的id</li>
</ul>
<p>用人话说就是：某个服务假设要生成一个全局唯一id，那么就可以发送一个请求给部署了SnowFlake算法的系统，有系统生成唯一的id</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol>
<li>上面说的SnowFlake算法系统首先需要知道自己所在的机房和机器的id，比如机房id=17， 机器id=12</li>
<li>接着SnowFlake算法系统接收到这个请求后，首先会用二进制位运算的方式生成一个64Bit的Long型ID</li>
<li>接着41个bit，就可以用当前时间戳，然后5个bit设置上这个机房的id，还有5个bit设置上机器id</li>
<li>最后判断下，当前这台机房的这台机器上这一毫秒内，这是第几个请求，给这次请求生成的id累加一个序号，作为最后的12个bit</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//机器ID  2进制5位  32位减掉1位 31个</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"> <span class="comment">//机房ID 2进制5位  32位减掉1位 31个</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"> <span class="comment">//代表一毫秒内生成的多个id的最新序号  12位 4096 -1 = 4095 个</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> sequence;</span><br><span class="line"> <span class="comment">//设置一个时间初始值    2^41 - 1   差不多可以用69年</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> twepoch = <span class="number">1585644268888L</span>;</span><br><span class="line"> <span class="comment">//5位的机器id</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"> <span class="comment">//5位的机房id</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"> <span class="comment">//每毫秒内产生的id数 2 的 12次方</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"> <span class="comment">// 这个是二进制运算，就是5 bit最多只能有31个数字，也就是说机器id最多只能是32以内</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"> <span class="comment">// 这个是一个意思，就是5 bit最多只能有31个数字，机房id最多只能是32以内</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"> <span class="comment">//记录产生时间毫秒数，判断是否是同1毫秒</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getWorkerId</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> workerId;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDatacenterId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> datacenterId;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId, <span class="keyword">long</span> sequence)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查机房id和机器id是否超过31 不能小于0</span></span><br><span class="line">  <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">     String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>,maxWorkerId));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">     String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>,maxDatacenterId));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">  <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">  <span class="keyword">this</span>.sequence = sequence;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 这个是核心方法，通过调用nextId()方法，让当前这台机器上的snowflake算法程序生成一个全局唯一的id</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这儿就是获取当前时间戳，单位是毫秒</span></span><br><span class="line">  <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">  <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line"></span><br><span class="line">   System.err.printf(</span><br><span class="line">     <span class="string">&quot;clock is moving backwards. Rejecting requests until %d.&quot;</span>, lastTimestamp);</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">     String.format(<span class="string">&quot;Clock moved backwards. Refusing to generate id for %d milliseconds&quot;</span>,</span><br><span class="line">       lastTimestamp - timestamp));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面是说假设在同一个毫秒内，又发送了一个请求生成一个id</span></span><br><span class="line">  <span class="comment">// 这个时候就得把seqence序号给递增1，最多就是4096</span></span><br><span class="line">  <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这个意思是说一个毫秒内最多只能有4096个数字，无论你传递多少进来，</span></span><br><span class="line">   <span class="comment">//这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span></span><br><span class="line">   sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">   <span class="comment">//当某一毫秒的时间，产生的id数 超过4095，系统会进入等待，直到下一毫秒，系统继续产生ID</span></span><br><span class="line">   <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">    timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   sequence = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这儿记录一下最近一次生成id的时间戳，单位是毫秒</span></span><br><span class="line">  lastTimestamp = timestamp;</span><br><span class="line">  <span class="comment">// 这儿就是最核心的二进制位运算操作，生成一个64bit的id</span></span><br><span class="line">  <span class="comment">// 先将当前时间戳左移，放到41 bit那儿；将机房id左移放到5 bit那儿；将机器id左移放到5 bit那儿；将序号放最后12 bit</span></span><br><span class="line">  <span class="comment">// 最后拼接起来成一个64 bit的二进制数字，转换成10进制就是个long型</span></span><br><span class="line">  <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">    (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class="line">    (workerId &lt;&lt; workerIdShift) | sequence;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当某一毫秒的时间，产生的id数 超过4095，系统会进入等待，直到下一毫秒，系统继续产生ID</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lastTimestamp</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">   timestamp = timeGen();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> timestamp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//获取当前时间戳</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  main 测试类</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="number">1</span>&amp;<span class="number">4596</span>);</span><br><span class="line">  System.out.println(<span class="number">2</span>&amp;<span class="number">4596</span>);</span><br><span class="line">  System.out.println(<span class="number">6</span>&amp;<span class="number">4596</span>);</span><br><span class="line">  System.out.println(<span class="number">6</span>&amp;<span class="number">4596</span>);</span><br><span class="line">  System.out.println(<span class="number">6</span>&amp;<span class="number">4596</span>);</span><br><span class="line">  System.out.println(<span class="number">6</span>&amp;<span class="number">4596</span>);</span><br><span class="line"><span class="comment">//  IdWorker worker = new IdWorker(1,1,1);</span></span><br><span class="line"><span class="comment">//  for (int i = 0; i &lt; 22; i++) &#123;</span></span><br><span class="line"><span class="comment">//   System.out.println(worker.nextId());</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul>
<li><p>优点</p>
<ul>
<li>高性能高可用：生成时不依赖数据库，可在内存中生成</li>
<li>容量大：每秒钟生成数百万的自增ID</li>
<li>ID自增：存入数据库中，索引效率高</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>依赖系统时间，假设系统时间被回调或者改变，可能会生成重复的id</li>
</ul>
</li>
</ul>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>实际业务中机房并没有那么多的时候，可以改进算法，将10bit的机器id优化成业务表或者我们系统相关的业务id</p>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>雪花算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现PDF模板数据输出-票据类数据PDF生成</title>
    <url>/2021/09/09/Java%E5%AE%9E%E7%8E%B0PDF%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA-%E7%A5%A8%E6%8D%AE%E7%B1%BB%E6%95%B0%E6%8D%AEPDF%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_105.jpg"></p>
<h2 id="模板制作"><a href="#模板制作" class="headerlink" title="模板制作"></a>模板制作</h2><ol>
<li>首先是制作模板，也就是用Word画表单，画完之后转成PDF文件即可，当然这次是做贷款票据相关的业务，因此是由对方提供的的模板，没有再制作<img src="/2021/09/09/Java%E5%AE%9E%E7%8E%B0PDF%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA-%E7%A5%A8%E6%8D%AE%E7%B1%BB%E6%95%B0%E6%8D%AEPDF%E7%94%9F%E6%88%90/screenshot_1.png" class=""></li>
<li>安装<code>Adobe Acrobat pro</code>，<a href="https://www.adobe.com/cn/acrobat/acrobat-pro.html">Adobe Acrobat pro官网地址是</a>，这个软件是收费的，好像是30天，不过30天也基本上能干完活了</li>
<li>点击右边的“准备表单”按钮，进入到编辑页面，然后可以拖拽右侧的表单控件到PDF中，然后就是重命名对应的表单控件和你的Java实体类中变量名保持一直，最后保存PDF即可，PS：这个地方没有图了，只能找一张凑合凑合了<img src="/2021/09/09/Java%E5%AE%9E%E7%8E%B0PDF%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA-%E7%A5%A8%E6%8D%AE%E7%B1%BB%E6%95%B0%E6%8D%AEPDF%E7%94%9F%E6%88%90/screenshot_2.png" class=""></li>
<li>制作完成的模板  <a href="/2021/09/09/Java%E5%AE%9E%E7%8E%B0PDF%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA-%E7%A5%A8%E6%8D%AE%E7%B1%BB%E6%95%B0%E6%8D%AEPDF%E7%94%9F%E6%88%90/bill-template.pdf" title="bill-template.pdf">bill-template.pdf</a></li>
</ol>
<h2 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h2><ol>
<li><p>项目是个Maven项目，添加依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--PDF填写表单插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itextpdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载填完数据的票据PDF文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> downloadBillPDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> billDataId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/downloadBillPDF/&#123;billDataId&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadBillPDF</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@PathVariable(&quot;billDataId&quot;)</span> String billDataId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        LoanBillData loanBillData = loanBillDataService.selectLoanBillDataById(billDataId);</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span>+<span class="keyword">new</span> String( loanBillData.getJkrmc().getBytes(<span class="string">&quot;gb2312&quot;</span>), <span class="string">&quot;ISO8859-1&quot;</span> )+<span class="string">&quot;.pdf&quot;</span>);</span><br><span class="line">        PdfReader reader = <span class="keyword">new</span> PdfReader(<span class="string">&quot;pdftemplates/billmanage/bill-template.pdf&quot;</span>);</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="comment">/* 将要生成的目标PDF文件名称 */</span></span><br><span class="line">        PdfStamper ps = <span class="keyword">new</span> PdfStamper(reader, bos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 使用中文字体 */</span></span><br><span class="line">        BaseFont bf = BaseFont.createFont(<span class="string">&quot;fonts/STSONG.TTF&quot;</span>, BaseFont.IDENTITY_H,BaseFont.NOT_EMBEDDED);</span><br><span class="line">        ArrayList&lt;BaseFont&gt; fontList = <span class="keyword">new</span> ArrayList&lt;BaseFont&gt;();</span><br><span class="line">        fontList.add(bf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 取出报表模板中的所有字段 */</span></span><br><span class="line">        AcroFields fields = ps.getAcroFields();</span><br><span class="line">        fields.setSubstitutionFonts(fontList);</span><br><span class="line">        fillData(fields, data(loanBillData));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 必须要调用这个，否则文档不会生成的 */</span></span><br><span class="line">        ps.setFormFlattening(<span class="keyword">true</span>);</span><br><span class="line">        ps.close();</span><br><span class="line"></span><br><span class="line">        OutputStream fos = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        fos.write(bos.toByteArray());</span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line">        bos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将表单数据填写进入pdf写入的fields中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fields</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillData</span><span class="params">(AcroFields fields, Map&lt;String, String&gt; data)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, DocumentException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String key : data.keySet()) &#123;</span><br><span class="line">        String value = data.get(key);</span><br><span class="line">        <span class="comment">// 为字段赋值,注意字段名称是区分大小写的</span></span><br><span class="line">        fields.setField(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组装下载票据的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loanBillData</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String,java.lang.String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">data</span><span class="params">(LoanBillData loanBillData)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">//小贷公司名称</span></span><br><span class="line">    data.put(<span class="string">&quot;xdgsmc&quot;</span>, loanBillData.getXdgsmc());</span><br><span class="line">    <span class="comment">//小贷公司电话</span></span><br><span class="line">    data.put(<span class="string">&quot;xdgsdh&quot;</span>, loanBillData.getXdgsdh());</span><br><span class="line">    <span class="comment">//小贷公司地址</span></span><br><span class="line">    data.put(<span class="string">&quot;xdgsdz&quot;</span>, loanBillData.getXdgsdz());</span><br><span class="line">    <span class="comment">//经营许可证编号</span></span><br><span class="line">    data.put(<span class="string">&quot;xdgsjyxkzbh&quot;</span>, loanBillData.getXdgsjyxkzbh());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借款人</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrmc&quot;</span>, loanBillData.getJkrmc());</span><br><span class="line">    <span class="comment">//借款人电话</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrdh&quot;</span>, loanBillData.getJkrdh());</span><br><span class="line">    <span class="comment">//借款人地址</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrdz&quot;</span>, loanBillData.getJkrdz());</span><br><span class="line">    <span class="comment">//借款联系人</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrlxr&quot;</span>, loanBillData.getJkrlxr());</span><br><span class="line">    <span class="comment">//借款人证件</span></span><br><span class="line">    String jkrzjmc = loanBillData.getJkrzjmc();</span><br><span class="line">    <span class="keyword">switch</span> (jkrzjmc)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;01&quot;</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkrzjmchz&quot;</span>,<span class="string">&quot;身份证&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;02&quot;</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkrzjmchz&quot;</span>,<span class="string">&quot;军官证&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;03&quot;</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkrzjmchz&quot;</span>,<span class="string">&quot;护照&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;04&quot;</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkrzjmchz&quot;</span>,<span class="string">&quot;统一社会信用代码&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkrzjmchz&quot;</span>,<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//借款人证件号码</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrzjhm&quot;</span>, loanBillData.getJkrzjhm());</span><br><span class="line">    <span class="comment">//借款人账户</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrzh&quot;</span>, loanBillData.getJkrzh());</span><br><span class="line">    <span class="comment">//借款人开户行</span></span><br><span class="line">    data.put(<span class="string">&quot;jkrkhh&quot;</span>, loanBillData.getJkrkhh());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借款金额(大写)人民币</span></span><br><span class="line">    data.put(<span class="string">&quot;jkjedx&quot;</span>, loanBillData.getJkjedx());</span><br><span class="line">    <span class="comment">//借款金额(小写)</span></span><br><span class="line">    data.put(<span class="string">&quot;jkjexx&quot;</span>, MoneyUtil.getAccountantMoney(loanBillData.getJkjexx(),<span class="number">2</span>,<span class="number">1.00d</span>)+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借款方式 01：信用，02：保证，03：抵质押，04：其他</span></span><br><span class="line">    String jkfs = loanBillData.getJkfs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (jkfs)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;01&quot;</span>:</span><br><span class="line">            <span class="comment">//信用</span></span><br><span class="line">            data.put(<span class="string">&quot;jkfsxy&quot;</span>, <span class="string">&quot;√&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;02&quot;</span>:</span><br><span class="line">            <span class="comment">//借款方式--保证</span></span><br><span class="line">            data.put(<span class="string">&quot;jkfsbz&quot;</span>, <span class="string">&quot;√&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;03&quot;</span>:</span><br><span class="line">            <span class="comment">//借款方式--抵质押</span></span><br><span class="line">            data.put(<span class="string">&quot;jkfsdzy&quot;</span>, <span class="string">&quot;√&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">//结款方式说明：借款方式选【其他】时填写</span></span><br><span class="line">            data.put(<span class="string">&quot;jkfssm&quot;</span>, loanBillData.getJkfssm());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借款用途 01：生产经营，02：个人消费，03：其他</span></span><br><span class="line">    String jkyt = loanBillData.getJkyt();</span><br><span class="line">    <span class="keyword">switch</span> (jkyt)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;01&quot;</span>:</span><br><span class="line">            <span class="comment">//借款用途-生产经营</span></span><br><span class="line">            data.put(<span class="string">&quot;jkytscjy&quot;</span>, <span class="string">&quot;√&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;02&quot;</span>:</span><br><span class="line">            <span class="comment">//借款用途-个人消费</span></span><br><span class="line">            data.put(<span class="string">&quot;jkytgrxf&quot;</span>, <span class="string">&quot;√&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">//借款用途说明：借款用途选【其他】时填写</span></span><br><span class="line">            data.put(<span class="string">&quot;jkytsm&quot;</span>, loanBillData.getJkytsm());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 借款利率：年利率:7.60000%</span></span><br><span class="line"><span class="comment">     * 这个地方需要组装借款利率类型+借款利率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//借款利率类型 01：年利率，02月利率，03其他</span></span><br><span class="line">    String jklllx = loanBillData.getJklllx();</span><br><span class="line">    DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;#.000&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (jklllx)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;01&quot;</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkll&quot;</span>, <span class="string">&quot;年利率:&quot;</span>+decimalFormat.format(loanBillData.getJkll())+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;02&quot;</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkll&quot;</span>, <span class="string">&quot;月利率:&quot;</span>+decimalFormat.format(loanBillData.getJkll())+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            data.put(<span class="string">&quot;jkll&quot;</span>, <span class="string">&quot;其他:&quot;</span>+decimalFormat.format(loanBillData.getJkll())+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借款起始日</span></span><br><span class="line">    String jkqsr = DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD,loanBillData.getJkqsr());</span><br><span class="line">    <span class="comment">//借款起始日-年</span></span><br><span class="line">    data.put(<span class="string">&quot;jkqsry&quot;</span>, jkqsr.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="comment">//借款起始日-月</span></span><br><span class="line">    data.put(<span class="string">&quot;jkqsrm&quot;</span>, jkqsr.substring(<span class="number">5</span>,<span class="number">7</span>));</span><br><span class="line">    <span class="comment">//借款起始日-日</span></span><br><span class="line">    data.put(<span class="string">&quot;jkqsrd&quot;</span>, jkqsr.substring(<span class="number">8</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借款结束日</span></span><br><span class="line">    String jkjsr = DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD,loanBillData.getJkjsr());</span><br><span class="line">    <span class="comment">//借款结束日-年</span></span><br><span class="line">    data.put(<span class="string">&quot;jkjsry&quot;</span>, jkjsr.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="comment">//借款结束日-月</span></span><br><span class="line">    data.put(<span class="string">&quot;jkjsrm&quot;</span>, jkjsr.substring(<span class="number">5</span>,<span class="number">7</span>));</span><br><span class="line">    <span class="comment">//借款结束日-日</span></span><br><span class="line">    data.put(<span class="string">&quot;jkjsrd&quot;</span>, jkjsr.substring(<span class="number">8</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合同编号</span></span><br><span class="line">    data.put(<span class="string">&quot;htbh&quot;</span>, loanBillData.getHtbh());</span><br><span class="line">    <span class="comment">//业务流水号</span></span><br><span class="line">    data.put(<span class="string">&quot;ywlsh&quot;</span>, loanBillData.getYwlsh());</span><br><span class="line">    <span class="comment">//备注(不超过50字)</span></span><br><span class="line">    data.put(<span class="string">&quot;bz&quot;</span>, loanBillData.getBz());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//制单时间-当前日期</span></span><br><span class="line">    String zdsj =  DateUtils.getDate();</span><br><span class="line">    <span class="comment">//制单时间-年</span></span><br><span class="line">    data.put(<span class="string">&quot;zdsjy&quot;</span>, zdsj.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="comment">//制单时间-月</span></span><br><span class="line">    data.put(<span class="string">&quot;zdsjm&quot;</span>, zdsj.substring(<span class="number">5</span>,<span class="number">7</span>));</span><br><span class="line">    <span class="comment">//制单时间-日</span></span><br><span class="line">    data.put(<span class="string">&quot;zdsjd&quot;</span>, zdsj.substring(<span class="number">8</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Server2012忘记密码</title>
    <url>/2021/09/17/Windows-Server2012%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_107.jpg"></p>
<blockquote>
<p>引自<a href="https://jingyan.baidu.com/article/e9fb46e144ad4e7521f766df.html">Windows Server 2012 忘记登录密码怎么办？</a></p>
</blockquote>
<p>不知道哪位仙人板板（不知道这个词用的对不对）使用公司的工作站安装了一个Windows Server，现在要用这台工作站了，但是没人知道密码，所以只能查询资料看下处理的方案，目前找到一个可执行的且有效果的方案，在这里记录一下</p>
<h2 id="PE启动盘制作"><a href="#PE启动盘制作" class="headerlink" title="PE启动盘制作"></a>PE启动盘制作</h2><ol>
<li>制作PE，也就是启动盘，这里就不再赘述，很简单，各种大白菜、老毛桃、雨林木风之类的</li>
</ol>
<h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><ol start="2">
<li>插入U盘启动盘（上面制作的PE系统），打开电脑，通过<code>Del</code>/<code>F2</code>/<code>F12</code>/<code>Enter</code>进入BIOS，选择从U盘启动<img src="/2021/09/17/Windows-Server2012%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/screenshot_1.jpg" class=""></li>
<li>找到系统盘，进入<code>windows\system32</code>目录，找到<code>osk.exe</code>，将其重命名，同样在此目录下找到cmd.exe，将其复制一份，并重命名为<code>osk.exe</code></li>
<li>拔掉U盘，重启电脑，在图示登录界面右下角红框处，右键点选“屏幕键盘”，此时会出现命令窗口<img src="/2021/09/17/Windows-Server2012%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/screenshot_2.jpg" class=""></li>
<li>在命令窗口输入命令行，即可重设任何用户的密码，比如要重设Administrator密码，则输入”net user administrator 123456”，到此密码重置完成，即可使用新密码登录系统</li>
<li>登录成功后，最后记得把系统盘中的<code>windows\system32</code>目录下的改动恢复回去</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>由于Server系统对于安全性的要求，重设的密码不能过于简单</li>
<li>重新登陆后，记得把系统盘<code>windows\system32</code>目录下的改动恢复正常</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Windows</tag>
        <tag>忘记密码</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7获取系统信息</title>
    <url>/2021/09/17/CentOS7%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_106.jpg"></p>
<blockquote>
<p>引自 <a href="https://blog.csdn.net/Loiterer_Y/article/details/105723624">CentOS7通过指令获取系统信息</a></p>
</blockquote>
<h2 id="获取服务器硬件信息"><a href="#获取服务器硬件信息" class="headerlink" title="获取服务器硬件信息"></a>获取服务器硬件信息</h2><h3 id="获取服务器型号、序列号"><a href="#获取服务器型号、序列号" class="headerlink" title="获取服务器型号、序列号"></a>获取服务器型号、序列号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode | grep &quot;System Information&quot; -A9 | egrep &quot;Manufacturer|Product|Serial&quot;</span></span><br><span class="line">	Manufacturer: LENOVO</span><br><span class="line">	Product Name: YANGTIANS710-10</span><br><span class="line">	Version: Lenovo Product</span><br><span class="line">	Serial Number: WS90924120</span><br></pre></td></tr></table></figure>

<h3 id="获取主板信息"><a href="#获取主板信息" class="headerlink" title="获取主板信息"></a>获取主板信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode | grep -A16 &quot;System Information$&quot;</span></span><br><span class="line">System Information</span><br><span class="line">	Manufacturer: LENOVO</span><br><span class="line">	Product Name: YANGTIANS710-10</span><br><span class="line">	Version: Lenovo Product</span><br><span class="line">	Serial Number: WS90924120</span><br><span class="line">	UUID: 19dbe8ae-1ddf-11e3-b463-3e257dbb2200</span><br><span class="line">	Wake-up Type: Power Switch</span><br><span class="line">	SKU Number: LENOVO_PN_YANGTIANS710-10</span><br><span class="line">	Family: To be filled by O.E.M.</span><br><span class="line"></span><br><span class="line">Handle 0x0002, DMI <span class="built_in">type</span> 2, 15 bytes</span><br><span class="line">Base Board Information</span><br><span class="line">	Manufacturer: LENOVO</span><br><span class="line">	Product Name: MAHOBAY</span><br><span class="line">	Version: No DPK</span><br><span class="line">	Serial Number: WS90924120</span><br><span class="line">	Asset Tag:</span><br></pre></td></tr></table></figure>

<h3 id="获取BIOS信息"><a href="#获取BIOS信息" class="headerlink" title="获取BIOS信息"></a>获取BIOS信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode -t bios</span></span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 2.7 present.</span><br><span class="line"></span><br><span class="line">Handle 0x0000, DMI <span class="built_in">type</span> 0, 24 bytes</span><br><span class="line">BIOS Information</span><br><span class="line">	Vendor: LENOVO</span><br><span class="line">	Version: FJKT18AUS</span><br><span class="line">	Release Date: 07/10/2013</span><br><span class="line">	Address: 0xF0000</span><br><span class="line">	Runtime Size: 64 kB</span><br><span class="line">	ROM Size: 4608 kB</span><br><span class="line">	Characteristics:</span><br><span class="line">		PCI is supported</span><br><span class="line">		BIOS is upgradeable</span><br><span class="line">		BIOS shadowing is allowed</span><br><span class="line">		Boot from CD is supported</span><br><span class="line">		Selectable boot is supported</span><br><span class="line">		BIOS ROM is socketed</span><br><span class="line">		EDD is supported</span><br><span class="line">		5.25<span class="string">&quot;/1.2 MB floppy services are supported (int 13h)</span></span><br><span class="line"><span class="string">		3.5&quot;</span>/720 kB floppy services are supported (int 13h)</span><br><span class="line">		3.5<span class="string">&quot;/2.88 MB floppy services are supported (int 13h)</span></span><br><span class="line"><span class="string">		Print screen service is supported (int 5h)</span></span><br><span class="line"><span class="string">		8042 keyboard services are supported (int 9h)</span></span><br><span class="line"><span class="string">		Serial services are supported (int 14h)</span></span><br><span class="line"><span class="string">		Printer services are supported (int 17h)</span></span><br><span class="line"><span class="string">		ACPI is supported</span></span><br><span class="line"><span class="string">		USB legacy is supported</span></span><br><span class="line"><span class="string">		BIOS boot specification is supported</span></span><br><span class="line"><span class="string">		Targeted content distribution is supported</span></span><br><span class="line"><span class="string">		UEFI is supported</span></span><br><span class="line"><span class="string">	BIOS Revision: 0.18</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Handle 0x001D, DMI type 13, 22 bytes</span></span><br><span class="line"><span class="string">BIOS Language Information</span></span><br><span class="line"><span class="string">	Language Description Format: Long</span></span><br><span class="line"><span class="string">	Installable Languages: 1</span></span><br><span class="line"><span class="string">		en|US|iso8859-1</span></span><br><span class="line"><span class="string">	Currently Installed Language: en|US|iso8859-1</span></span><br></pre></td></tr></table></figure>

<h3 id="获取内存信息"><a href="#获取内存信息" class="headerlink" title="获取内存信息"></a>获取内存信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode -t memory</span></span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 2.7 present.</span><br><span class="line"></span><br><span class="line">Handle 0x000D, DMI <span class="built_in">type</span> 16, 23 bytes</span><br><span class="line">Physical Memory Array</span><br><span class="line">	Location: System Board Or Motherboard</span><br><span class="line">	Use: System Memory</span><br><span class="line">	Error Correction Type: None</span><br><span class="line">	Maximum Capacity: 16 GB</span><br><span class="line">	Error Information Handle: Not Provided</span><br><span class="line">	Number Of Devices: 2</span><br><span class="line"></span><br><span class="line">Handle 0x0010, DMI <span class="built_in">type</span> 17, 34 bytes</span><br><span class="line">Memory Device</span><br><span class="line">	Array Handle: 0x000D</span><br><span class="line">	Error Information Handle: Not Provided</span><br><span class="line">	Total Width: 64 bits</span><br><span class="line">	Data Width: 64 bits</span><br><span class="line">	Size: 2048 MB</span><br><span class="line">	Form Factor: SODIMM</span><br><span class="line">	Set: None</span><br><span class="line">	Locator: ChannelA-DIMM0</span><br><span class="line">	Bank Locator: BANK 0</span><br><span class="line">	Type: DDR3</span><br><span class="line">	Type Detail: Synchronous</span><br><span class="line">	Speed: 1333 MT/s</span><br><span class="line">	Manufacturer: Hynix/Hyundai</span><br><span class="line">	Serial Number: 0936D455</span><br><span class="line">	Asset Tag: 9876543210</span><br><span class="line">	Part Number: HMT325S6CFR8C-PB  </span><br><span class="line">	Rank: 1</span><br><span class="line">	Configured Memory Speed: 1333 MT/s</span><br><span class="line"></span><br><span class="line">Handle 0x0012, DMI <span class="built_in">type</span> 17, 34 bytes</span><br><span class="line">Memory Device</span><br><span class="line">	Array Handle: 0x000D</span><br><span class="line">	Error Information Handle: Not Provided</span><br><span class="line">	Total Width: 64 bits</span><br><span class="line">	Data Width: 64 bits</span><br><span class="line">	Size: 2048 MB</span><br><span class="line">	Form Factor: SODIMM</span><br><span class="line">	Set: None</span><br><span class="line">	Locator: ChannelB-DIMM0</span><br><span class="line">	Bank Locator: BANK 2</span><br><span class="line">	Type: DDR3</span><br><span class="line">	Type Detail: Synchronous</span><br><span class="line">	Speed: 1333 MT/s</span><br><span class="line">	Manufacturer: Ramaxel</span><br><span class="line">	Serial Number: 435EA739</span><br><span class="line">	Asset Tag: 9876543210</span><br><span class="line">	Part Number: RMT3170ED58F8W1600</span><br><span class="line">	Rank: 1</span><br><span class="line">	Configured Memory Speed: 1333 MT/s</span><br></pre></td></tr></table></figure>

<h2 id="获取CPU信息"><a href="#获取CPU信息" class="headerlink" title="获取CPU信息"></a>获取CPU信息</h2><h3 id="获取CPU型号"><a href="#获取CPU型号" class="headerlink" title="获取CPU型号"></a>获取CPU型号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span></span><br><span class="line">      2  Intel(R) Celeron(R) CPU G1610 @ 2.60GHz</span><br></pre></td></tr></table></figure>

<h3 id="获取物理CPU个数"><a href="#获取物理CPU个数" class="headerlink" title="获取物理CPU个数"></a>获取物理CPU个数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep &quot;physical id&quot; /proc/cpuinfo | sort | uniq | wc -l</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="获取物理核心数"><a href="#获取物理核心数" class="headerlink" title="获取物理核心数"></a>获取物理核心数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="获取单个物理CPU核心数"><a href="#获取单个物理CPU核心数" class="headerlink" title="获取单个物理CPU核心数"></a>获取单个物理CPU核心数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo | grep &quot;cores&quot; | uniq</span></span><br><span class="line">cpu cores	: 2</span><br></pre></td></tr></table></figure>

<h3 id="获取CPU主频"><a href="#获取CPU主频" class="headerlink" title="获取CPU主频"></a>获取CPU主频</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo | grep MHz | uniq</span></span><br><span class="line">cpu MHz		: 1769.250</span><br><span class="line">cpu MHz		: 1631.823</span><br></pre></td></tr></table></figure>

<h3 id="获取CPU详细信息"><a href="#获取CPU详细信息" class="headerlink" title="获取CPU详细信息"></a>获取CPU详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                2</span><br><span class="line">On-line CPU(s) list:   0,1</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    2</span><br><span class="line">座：                 1</span><br><span class="line">NUMA 节点：         1</span><br><span class="line">厂商 ID：           GenuineIntel</span><br><span class="line">CPU 系列：          6</span><br><span class="line">型号：              58</span><br><span class="line">型号名称：        Intel(R) Celeron(R) CPU G1610 @ 2.60GHz</span><br><span class="line">步进：              9</span><br><span class="line">CPU MHz：             1691.174</span><br><span class="line">CPU max MHz:           2600.0000</span><br><span class="line">CPU min MHz:           1600.0000</span><br><span class="line">BogoMIPS：            5188.42</span><br><span class="line">虚拟化：           VT-x</span><br><span class="line">L1d 缓存：          32K</span><br><span class="line">L1i 缓存：          32K</span><br><span class="line">L2 缓存：           256K</span><br><span class="line">L3 缓存：           2048K</span><br><span class="line">NUMA 节点0 CPU：    0,1</span><br><span class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 popcnt tsc_deadline_timer xsave lahf_lm epb ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms xsaveopt dtherm arat pln pts md_clear spec_ctrl intel_stibp flush_l1d</span><br></pre></td></tr></table></figure>

<h3 id="获取CPU运行模式"><a href="#获取CPU运行模式" class="headerlink" title="获取CPU运行模式"></a>获取CPU运行模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># getconf LONG_BIT</span></span><br><span class="line">64</span><br></pre></td></tr></table></figure>

<h2 id="获取内存信息-1"><a href="#获取内存信息-1" class="headerlink" title="获取内存信息"></a>获取内存信息</h2><h3 id="获取系统最大支持内存"><a href="#获取系统最大支持内存" class="headerlink" title="获取系统最大支持内存"></a>获取系统最大支持内存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode|grep -P &#x27;Maximum\s+Capacity&#x27;</span></span><br><span class="line">	Maximum Capacity: 16 GB</span><br></pre></td></tr></table></figure>

<h3 id="获取服务器内存槽使用情况"><a href="#获取服务器内存槽使用情况" class="headerlink" title="获取服务器内存槽使用情况"></a>获取服务器内存槽使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode | grep -A5 &quot;Memory Device&quot; | grep Size | grep -v Range</span></span><br><span class="line">	Size: 2048 MB</span><br><span class="line">	Size: 2048 MB</span><br></pre></td></tr></table></figure>

<h3 id="获取内存条频率"><a href="#获取内存条频率" class="headerlink" title="获取内存条频率"></a>获取内存条频率</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dmidecode | grep -A16 &quot;Memory Device&quot; | grep &quot;Speed&quot;</span></span><br><span class="line">	Speed: 1333 MT/s</span><br><span class="line">	Speed: 1333 MT/s</span><br></pre></td></tr></table></figure>

<h3 id="获取内存详细信息"><a href="#获取内存详细信息" class="headerlink" title="获取内存详细信息"></a>获取内存详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:        3699292 kB</span><br><span class="line">MemFree:          173796 kB</span><br><span class="line">MemAvailable:     439640 kB</span><br><span class="line">Buffers:               0 kB</span><br><span class="line">Cached:           463900 kB</span><br><span class="line">SwapCached:         9624 kB</span><br><span class="line">Active:          2187052 kB</span><br><span class="line">Inactive:         886896 kB</span><br><span class="line">Active(anon):    2003696 kB</span><br><span class="line">Inactive(anon):   675632 kB</span><br><span class="line">Active(file):     183356 kB</span><br><span class="line">Inactive(file):   211264 kB</span><br><span class="line">Unevictable:          16 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       3932156 kB</span><br><span class="line">SwapFree:        3856892 kB</span><br><span class="line">Dirty:               220 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:       2603852 kB</span><br><span class="line">Mapped:           139548 kB</span><br><span class="line">Shmem:             69280 kB</span><br><span class="line">Slab:             227604 kB</span><br><span class="line">SReclaimable:     146356 kB</span><br><span class="line">SUnreclaim:        81248 kB</span><br><span class="line">KernelStack:        8832 kB</span><br><span class="line">PageTables:        22296 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     5781800 kB</span><br><span class="line">Committed_AS:    4261684 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:      346472 kB</span><br><span class="line">VmallocChunk:   34358947836 kB</span><br><span class="line">Percpu:              520 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:    163840 kB</span><br><span class="line">CmaTotal:              0 kB</span><br><span class="line">CmaFree:               0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:       88996 kB</span><br><span class="line">DirectMap2M:     3921920 kB</span><br></pre></td></tr></table></figure>

<h3 id="获取内存使用情况"><a href="#获取内存使用情况" class="headerlink" title="获取内存使用情况"></a>获取内存使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.5G        2.8G        170M         67M        596M        430M</span><br><span class="line">Swap:          3.7G         73M        3.7G</span><br></pre></td></tr></table></figure>

<h2 id="获取硬盘信息"><a href="#获取硬盘信息" class="headerlink" title="获取硬盘信息"></a>获取硬盘信息</h2><h3 id="获取磁盘分区状态"><a href="#获取磁盘分区状态" class="headerlink" title="获取磁盘分区状态"></a>获取磁盘分区状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#  fdisk -l | grep Disk</span></span><br><span class="line">Disk /dev/vda: 32.2 GB, 32212254720 bytes, 62914560 sectors</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000ae09f</span><br><span class="line">Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk /dev/vdc: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0xa7343e4f</span><br></pre></td></tr></table></figure>

<h3 id="获取磁盘和分区分部"><a href="#获取磁盘和分区分部" class="headerlink" title="获取磁盘和分区分部"></a>获取磁盘和分区分部</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0 931.5G  0 disk</span><br><span class="line">├─sda1            8:1    0     1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0 930.5G  0 part</span><br><span class="line">  ├─centos-root 253:0    0    50G  0 lvm  /</span><br><span class="line">  ├─centos-swap 253:1    0   3.8G  0 lvm  [SWAP]</span><br><span class="line">  └─centos-home 253:2    0 876.8G  0 lvm  /home</span><br><span class="line">sr0              11:0    1  1024M  0 rom</span><br></pre></td></tr></table></figure>

<h3 id="获取磁盘详细信息"><a href="#获取磁盘详细信息" class="headerlink" title="获取磁盘详细信息"></a>获取磁盘详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：1000.2 GB, 1000204886016 字节，1953525168 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x0009cb6f</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200  1953523711   975712256   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos-root：53.7 GB, 53687091200 字节，104857600 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos-swap：4026 MB, 4026531840 字节，7864320 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos-home：941.4 GB, 941407338496 字节，1838686208 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br></pre></td></tr></table></figure>

<h3 id="获取磁盘挂载详情"><a href="#获取磁盘挂载详情" class="headerlink" title="获取磁盘挂载详情"></a>获取磁盘挂载详情</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mount | column -t</span></span><br><span class="line">sysfs                    on  /sys                             <span class="built_in">type</span>  sysfs       (rw,nosuid,nodev,noexec,relatime,seclabel)</span><br><span class="line">proc                     on  /proc                            <span class="built_in">type</span>  proc        (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">devtmpfs                 on  /dev                             <span class="built_in">type</span>  devtmpfs    (rw,nosuid,seclabel,size=1837372k,nr_inodes=459343,mode=755)</span><br><span class="line">securityfs               on  /sys/kernel/security             <span class="built_in">type</span>  securityfs  (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">tmpfs                    on  /dev/shm                         <span class="built_in">type</span>  tmpfs       (rw,nosuid,nodev,seclabel)</span><br><span class="line">devpts                   on  /dev/pts                         <span class="built_in">type</span>  devpts      (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000)</span><br><span class="line">tmpfs                    on  /run                             <span class="built_in">type</span>  tmpfs       (rw,nosuid,nodev,seclabel,mode=755)</span><br><span class="line">tmpfs                    on  /sys/fs/cgroup                   <span class="built_in">type</span>  tmpfs       (ro,nosuid,nodev,noexec,seclabel,mode=755)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/systemd           <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)</span><br><span class="line">pstore                   on  /sys/fs/pstore                   <span class="built_in">type</span>  pstore      (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/net_cls,net_prio  <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/hugetlb           <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/perf_event        <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,perf_event)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/cpu,cpuacct       <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/memory            <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,memory)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/devices           <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,devices)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/cpuset            <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,cpuset)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/blkio             <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,blkio)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/freezer           <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,freezer)</span><br><span class="line">cgroup                   on  /sys/fs/cgroup/pids              <span class="built_in">type</span>  cgroup      (rw,nosuid,nodev,noexec,relatime,seclabel,pids)</span><br><span class="line">configfs                 on  /sys/kernel/config               <span class="built_in">type</span>  configfs    (rw,relatime)</span><br><span class="line">/dev/mapper/centos-root  on  /                                <span class="built_in">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class="line">selinuxfs                on  /sys/fs/selinux                  <span class="built_in">type</span>  selinuxfs   (rw,relatime)</span><br><span class="line">systemd-1                on  /proc/sys/fs/binfmt_misc         <span class="built_in">type</span>  autofs      (rw,relatime,fd=36,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=13364)</span><br><span class="line">debugfs                  on  /sys/kernel/debug                <span class="built_in">type</span>  debugfs     (rw,relatime)</span><br><span class="line">mqueue                   on  /dev/mqueue                      <span class="built_in">type</span>  mqueue      (rw,relatime,seclabel)</span><br><span class="line">hugetlbfs                on  /dev/hugepages                   <span class="built_in">type</span>  hugetlbfs   (rw,relatime,seclabel)</span><br><span class="line">/dev/sda1                on  /boot                            <span class="built_in">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class="line">/dev/mapper/centos-home  on  /home                            <span class="built_in">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class="line">tmpfs                    on  /run/user/0                      <span class="built_in">type</span>  tmpfs       (rw,nosuid,nodev,relatime,seclabel,size=369932k,mode=700)</span><br></pre></td></tr></table></figure>

<h3 id="获取挂载使用详情"><a href="#获取挂载使用详情" class="headerlink" title="获取挂载使用详情"></a>获取挂载使用详情</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># swapon -s</span></span><br><span class="line">文件名				类型		大小	已用	权限</span><br><span class="line">/dev/dm-1                              	partition	3932156	75264	-2</span><br></pre></td></tr></table></figure>

<h3 id="获取磁盘使用详情"><a href="#获取磁盘使用详情" class="headerlink" title="获取磁盘使用详情"></a>获取磁盘使用详情</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># df -hl</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                 1.8G     0  1.8G    0% /dev</span><br><span class="line">tmpfs                    1.8G   12K  1.8G    1% /dev/shm</span><br><span class="line">tmpfs                    1.8G   11M  1.8G    1% /run</span><br><span class="line">tmpfs                    1.8G     0  1.8G    0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   50G  5.7G   45G   12% /</span><br><span class="line">/dev/sda1               1014M  189M  826M   19% /boot</span><br><span class="line">/dev/mapper/centos-home  877G   44M  877G    1% /home</span><br><span class="line">tmpfs                    362M     0  362M    0% /run/user/0</span><br></pre></td></tr></table></figure>

<h2 id="获取网卡信息"><a href="#获取网卡信息" class="headerlink" title="获取网卡信息"></a>获取网卡信息</h2><h3 id="查看所有网络接口信息"><a href="#查看所有网络接口信息" class="headerlink" title="查看所有网络接口信息"></a>查看所有网络接口信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ifconfig -a</span></span><br><span class="line">enp0s25: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.2.163  netmask 255.255.255.0  broadcast 192.168.2.255</span><br><span class="line">        inet6 xxxx::xxxx:xxxx:xxxx:xxxx  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether xx:xx:xx:xx:xx:xx  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 6903319  bytes 781968252 (745.7 MiB)</span><br><span class="line">        RX errors 0  dropped 70  overruns 0  frame 0</span><br><span class="line">        TX packets 174085  bytes 16237487 (15.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 20  memory 0xf7c00000-f7c20000  </span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 6886023  bytes 35557152848 (33.1 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 6886023  bytes 35557152848 (33.1 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ip link show</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: enp0s25: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>

<h3 id="获取具体某个网络接口信息"><a href="#获取具体某个网络接口信息" class="headerlink" title="获取具体某个网络接口信息"></a>获取具体某个网络接口信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ethtool enp0s25</span></span><br><span class="line">Settings <span class="keyword">for</span> enp0s25:</span><br><span class="line">	Supported ports: [ TP ]</span><br><span class="line">	Supported link modes:   10baseT/Half 10baseT/Full</span><br><span class="line">	                        100baseT/Half 100baseT/Full</span><br><span class="line">	                        1000baseT/Full</span><br><span class="line">	Supported pause frame use: No</span><br><span class="line">	Supports auto-negotiation: Yes</span><br><span class="line">	Supported FEC modes: Not reported</span><br><span class="line">	Advertised link modes:  10baseT/Half 10baseT/Full</span><br><span class="line">	                        100baseT/Half 100baseT/Full</span><br><span class="line">	                        1000baseT/Full</span><br><span class="line">	Advertised pause frame use: No</span><br><span class="line">	Advertised auto-negotiation: Yes</span><br><span class="line">	Advertised FEC modes: Not reported</span><br><span class="line">	Speed: 100Mb/s</span><br><span class="line">	Duplex: Full</span><br><span class="line">	Port: Twisted Pair</span><br><span class="line">	PHYAD: 1</span><br><span class="line">	Transceiver: internal</span><br><span class="line">	Auto-negotiation: on</span><br><span class="line">	MDI-X: on (auto)</span><br><span class="line">	Supports Wake-on: pumbg</span><br><span class="line">	Wake-on: g</span><br><span class="line">	Current message level: 0x00000007 (7)</span><br><span class="line">			       drv probe link</span><br><span class="line">	Link detected: yes</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java必会工具库</title>
    <url>/2021/09/22/Java%E5%BF%85%E4%BC%9A%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_108.jpg"><br>今天看了篇公众号的文章：业内的很多标准类库，在大公司内部都在使用，自己却还不知道，深感羞愧，都不好意思成自己为Java程序员了</p>
<h2 id="Java自带工具方法"><a href="#Java自带工具方法" class="headerlink" title="Java自带工具方法"></a>Java自带工具方法</h2><h3 id="List集合拼接成以逗号隔开的字符串"><a href="#List集合拼接成以逗号隔开的字符串" class="headerlink" title="List集合拼接成以逗号隔开的字符串"></a>List集合拼接成以逗号隔开的字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先创建一个List</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种方法：使用stream流</span></span><br><span class="line">String join = list.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(join);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法，使用String的join方法</span></span><br><span class="line">join = String.join(<span class="string">&quot;,&quot;</span>, list);</span><br><span class="line">System.out.println(join);</span><br></pre></td></tr></table></figure>

<h3 id="比较两个字符串是否相等，忽略大小写"><a href="#比较两个字符串是否相等，忽略大小写" class="headerlink" title="比较两个字符串是否相等，忽略大小写"></a>比较两个字符串是否相等，忽略大小写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String strA = <span class="string">&quot;AbcdDEFGH&quot;</span>;</span><br><span class="line">String strB = <span class="string">&quot;aBCDdefgh&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(strA.equalsIgnoreCase(strB))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;strA等于strB&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="比较两个对象是否相等"><a href="#比较两个对象是否相等" class="headerlink" title="比较两个对象是否相等"></a>比较两个对象是否相等</h3><p>当使用<code>equals</code>比较两个对象是否相等的时候，还需要判断左边的对象是否为空，不然会报空指针异常，java.util包下的Objects封装好的比较是否相等的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Objects.equals(objA, objB);</span><br></pre></td></tr></table></figure>

<h3 id="两个List集合取交集"><a href="#两个List集合取交集" class="headerlink" title="两个List集合取交集"></a>两个List集合取交集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">list1.retainAll(list2);</span><br><span class="line">System.out.println(list1);</span><br></pre></td></tr></table></figure>

<h2 id="apache-commons工具类库"><a href="#apache-commons工具类库" class="headerlink" title="apache commons工具类库"></a>apache commons工具类库</h2><h3 id="commons-lang-java-lang的增强版"><a href="#commons-lang-java-lang的增强版" class="headerlink" title="commons-lang java.lang的增强版"></a>commons-lang java.lang的增强版</h3><p>建议使用commons-lang3，优化了一些api，之前的commons-lang已停止更新<br>首先是Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串判空"><a href="#字符串判空" class="headerlink" title="字符串判空"></a>字符串判空</h4><p>刚刚看源码才发现String implements了<code>java.io.Serializable, Comparable&lt;String&gt;, CharSequence</code>三个接口，因此下面的方法可以直接调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> cs == <span class="keyword">null</span> || cs.length() == <span class="number">0</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> !isEmpty(cs);  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判空的时候，会去除字符串中的空白字符，比如空格、换行、制表符  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> strLen = length(cs);  </span><br><span class="line">      <span class="keyword">if</span> (strLen == <span class="number">0</span>) &#123;  </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLen; i++) &#123;  </span><br><span class="line">          <span class="keyword">if</span> (!Character.isWhitespace(cs.charAt(i))) &#123;  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotBlank</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> !isBlank(cs);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="首字母转成大写"><a href="#首字母转成大写" class="headerlink" title="首字母转成大写"></a>首字母转成大写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;this is a page&quot;</span>;</span><br><span class="line">System.out.println(StringUtils.capitalize(str));</span><br></pre></td></tr></table></figure>
<p>输出内容如下，所以只是将第一个单词的首字母大写了，不是每个词都会变成大写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is a page</span><br></pre></td></tr></table></figure>

<h4 id="重复拼接字符串"><a href="#重复拼接字符串" class="headerlink" title="重复拼接字符串"></a>重复拼接字符串</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;this is a word &quot;</span>;</span><br><span class="line">System.out.println(StringUtils.repeat(str, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p>输出内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this is a word this is a word this is a word this is a word this is a word this is a word this is a word this is a word this is a word this is a word</span><br></pre></td></tr></table></figure>

<h4 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Date类型转String类型</span></span><br><span class="line">String date1 = DateFormatUtils.format(<span class="keyword">new</span> Date(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">System.out.println(date1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//String类型转Date类型</span></span><br><span class="line">    Date date2 = DateUtils.parseDate(<span class="string">&quot;2021-09-22 16:37:18&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算一个小时后的日期</span></span><br><span class="line">Date date3 = DateUtils.addHours(<span class="keyword">new</span> Date(), <span class="number">1</span>);</span><br><span class="line">System.out.println(DateFormatUtils.format(date3,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="包装临时对象"><a href="#包装临时对象" class="headerlink" title="包装临时对象"></a>包装临时对象</h4><p>当一个方法需要返回两个及以上字段时，我们一般会封装成一个临时对象返回，现在有了Pair和Triple就不需要了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回两个字段</span></span><br><span class="line">ImmutablePair&lt;Integer, String&gt; pair = ImmutablePair.of(<span class="number">1</span>, <span class="string">&quot;yifeng&quot;</span>);</span><br><span class="line">System.out.println(pair.getLeft()+<span class="string">&quot;,&quot;</span>+ pair.getRight());</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回三个字段</span></span><br><span class="line">ImmutableTriple&lt;Integer, String, Date&gt; triple = ImmutableTriple.of(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">System.out.println(triple.getLeft()+<span class="string">&quot;,&quot;</span>+ triple.getMiddle()+<span class="string">&quot;,&quot;</span>+triple.getRight());</span><br></pre></td></tr></table></figure>
<p>打印内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,yifeng</span><br><span class="line">1,测试,Thu Sep 23 09:30:27 CST 2021</span><br></pre></td></tr></table></figure>

<h3 id="commons-collections集合工具类"><a href="#commons-collections集合工具类" class="headerlink" title="commons-collections集合工具类"></a>commons-collections集合工具类</h3><p>Maven依赖信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="集合判空"><a href="#集合判空" class="headerlink" title="集合判空"></a>集合判空</h4><p>使用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个集合取交集  </span></span><br><span class="line">Collection&lt;String&gt; collection = CollectionUtils.retainAll(listA, listB);  </span><br><span class="line"><span class="comment">// 两个集合取并集  </span></span><br><span class="line">Collection&lt;String&gt; collection = CollectionUtils.union(listA, listB);  </span><br><span class="line"><span class="comment">// 两个集合取差集  </span></span><br><span class="line">Collection&lt;String&gt; collection = CollectionUtils.subtract(listA, listB);</span><br></pre></td></tr></table></figure>

<h4 id="common-beanutils"><a href="#common-beanutils" class="headerlink" title="common-beanutils"></a>common-beanutils</h4><p>Maven依赖信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h5><p>使用方法：<font color='red'>没搞懂为什么要这么搞呢，GET和SET他不香吗？</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();  </span><br><span class="line">BeanUtils.setProperty(user, <span class="string">&quot;id&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">BeanUtils.setProperty(user, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;yideng&quot;</span>);  </span><br><span class="line">System.out.println(BeanUtils.getProperty(user, <span class="string">&quot;name&quot;</span>)); <span class="comment">// 输出 yideng  </span></span><br><span class="line">System.out.println(user); <span class="comment">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;yideng&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="对象和Map互转"><a href="#对象和Map互转" class="headerlink" title="对象和Map互转"></a>对象和Map互转</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    BeanUtils.setProperty(user, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    BeanUtils.setProperty(user, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象转map</span></span><br><span class="line">    Map&lt;String, String&gt; map = BeanUtils.describe(user);</span><br><span class="line">    System.out.println(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map转对象</span></span><br><span class="line">    User newUser = <span class="keyword">new</span> User();</span><br><span class="line">    BeanUtils.populate(newUser, map);</span><br><span class="line">    System.out.println(newUser);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;name&#x3D;zhangsan, id&#x3D;1&#125;</span><br><span class="line">User&#123;id&#x3D;1, name&#x3D;&#39;zhangsan&#39;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="commons-io文件流处理"><a href="#commons-io文件流处理" class="headerlink" title="commons-io文件流处理"></a>commons-io文件流处理</h3><p>Maven依赖信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Daniel\\Desktop\\测试文件夹.txt&quot;</span>);</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">List&lt;String&gt; lines = FileUtils.readLines(file, Charset.defaultCharset());</span><br><span class="line"><span class="comment">//写入文件（会把之前的内容完全覆盖，不会保留）</span></span><br><span class="line">FileUtils.writeLines(file, lines);</span><br><span class="line"><span class="comment">//加上append为true，则是在内容中添加，而不是覆盖</span></span><br><span class="line">FileUtils.writeLines(file, lines, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制文件</span></span><br><span class="line">FileUtils.copyFile(file, <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Daniel\\Desktop\\测试文件夹1.txt&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="Google-Guava工具类库"><a href="#Google-Guava工具类库" class="headerlink" title="Google Guava工具类库"></a>Google Guava工具类库</h2><p>Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList();  </span><br><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="comment">// 反转list  </span></span><br><span class="line">List&lt;Integer&gt; reverse = Lists.reverse(list);  </span><br><span class="line">System.out.println(reverse); <span class="comment">// 输出 [3, 2, 1]  </span></span><br><span class="line"><span class="comment">// list集合元素太多，可以分成若干个集合，每个集合10个元素  </span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; partition = Lists.partition(list, <span class="number">10</span>);  </span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; map = Maps.newHashMap();  </span><br><span class="line">Set&lt;String&gt; set = Sets.newHashSet();  </span><br></pre></td></tr></table></figure>

<h3 id="黑科技集合"><a href="#黑科技集合" class="headerlink" title="黑科技集合"></a>黑科技集合</h3><h4 id="Multimap一个key可以映射多个value的HashMap"><a href="#Multimap一个key可以映射多个value的HashMap" class="headerlink" title="Multimap一个key可以映射多个value的HashMap"></a>Multimap一个key可以映射多个value的HashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Multimap&lt;String, Integer&gt; map = ArrayListMultimap.create();  </span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">Collection&lt;Integer&gt; values = map.get(<span class="string">&quot;key&quot;</span>);  </span><br><span class="line">System.out.println(map); <span class="comment">// 输出 &#123;&quot;key&quot;:[1,2]&#125;  </span></span><br><span class="line"><span class="comment">// 还能返回你以前使用的臃肿的Map  </span></span><br><span class="line">Map&lt;String, Collection&lt;Integer&gt;&gt; collectionMap = map.asMap();</span><br></pre></td></tr></table></figure>


<h4 id="BitMap一种连value也不能重复的HashMap"><a href="#BitMap一种连value也不能重复的HashMap" class="headerlink" title="BitMap一种连value也不能重复的HashMap"></a>BitMap一种连value也不能重复的HashMap</h4><p>双向映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiMap&lt;String, String&gt; biMap = HashBiMap.create();  </span><br><span class="line"><span class="comment">// 如果value重复，put方法会抛异常，除非用forcePut方法  </span></span><br><span class="line">biMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);  </span><br><span class="line">System.out.println(biMap); <span class="comment">// 输出 &#123;&quot;key&quot;:&quot;value&quot;&#125;  </span></span><br><span class="line"><span class="comment">// 既然value不能重复，何不实现个翻转key/value的方法，已经有了  </span></span><br><span class="line">BiMap&lt;String, String&gt; inverse = biMap.inverse();  </span><br><span class="line">System.out.println(inverse); <span class="comment">// 输出 &#123;&quot;value&quot;:&quot;key&quot;&#125;  </span></span><br></pre></td></tr></table></figure>

<h4 id="Table一种有两个key的HashMap"><a href="#Table一种有两个key的HashMap" class="headerlink" title="Table一种有两个key的HashMap"></a>Table一种有两个key的HashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一批用户，同时按年龄和性别分组  </span></span><br><span class="line">Table&lt;Integer, String, String&gt; table = HashBasedTable.create();  </span><br><span class="line">table.put(<span class="number">18</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;yideng&quot;</span>);  </span><br><span class="line">table.put(<span class="number">18</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;Lily&quot;</span>);  </span><br><span class="line">System.out.println(table.get(<span class="number">18</span>, <span class="string">&quot;男&quot;</span>)); <span class="comment">// 输出 yideng  </span></span><br><span class="line"><span class="comment">// 这其实是一个二维的Map，可以查看行数据  </span></span><br><span class="line">Map&lt;String, String&gt; row = table.row(<span class="number">18</span>);  </span><br><span class="line">System.out.println(row); <span class="comment">// 输出 &#123;&quot;男&quot;:&quot;yideng&quot;,&quot;女&quot;:&quot;Lily&quot;&#125;  </span></span><br><span class="line"><span class="comment">// 查看列数据  </span></span><br><span class="line">Map&lt;Integer, String&gt; column = table.column(<span class="string">&quot;男&quot;</span>);  </span><br><span class="line">System.out.println(column); <span class="comment">// 输出 &#123;18:&quot;yideng&quot;&#125;  </span></span><br></pre></td></tr></table></figure>

<h4 id="Multiset一种用来计数的Set"><a href="#Multiset一种用来计数的Set" class="headerlink" title="Multiset一种用来计数的Set"></a>Multiset一种用来计数的Set</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Multiset&lt;String&gt; multiset = HashMultiset.create();  </span><br><span class="line">multiset.add(<span class="string">&quot;apple&quot;</span>);  </span><br><span class="line">multiset.add(<span class="string">&quot;apple&quot;</span>);  </span><br><span class="line">multiset.add(<span class="string">&quot;orange&quot;</span>);  </span><br><span class="line">System.out.println(multiset.count(<span class="string">&quot;apple&quot;</span>)); <span class="comment">// 输出 2  </span></span><br><span class="line"><span class="comment">// 查看去重的元素  </span></span><br><span class="line">Set&lt;String&gt; set = multiset.elementSet();  </span><br><span class="line">System.out.println(set); <span class="comment">// 输出 [&quot;orange&quot;,&quot;apple&quot;]  </span></span><br><span class="line"><span class="comment">// 还能查看没有去重的元素  </span></span><br><span class="line">Iterator&lt;String&gt; iterator = multiset.iterator();  </span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;  </span><br><span class="line">    System.out.println(iterator.next());  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 还能手动设置某个元素出现的次数  </span></span><br><span class="line">multiset.setCount(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7搭建代理服务器上网</title>
    <url>/2021/09/24/CentOS7%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_109.jpg"><br>最近在做一个项目，出现客户的两台服务器中只有一台是可以上网的，另一台不允许上网（但这两台服务器之间可以互相通信），但是在初期服务器部署的阶段，很多软件安装都需要网络的支持（懒得离线安装，坑比较多），所以想到一个方法，就是能够上网的服务器作为代理服务器，然后让另一台通过这台代理服务器上网。通过各种百度，发现<code>squid</code>是一个很好的选择。支持正向代理、反向代理和透明代理。</p>
<h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install squid -y</span><br><span class="line">yum install httpd-tools -y</span><br></pre></td></tr></table></figure>

<h3 id="生成密码文件"><a href="#生成密码文件" class="headerlink" title="生成密码文件"></a>生成密码文件</h3><h4 id="生成密码文件-1"><a href="#生成密码文件-1" class="headerlink" title="生成密码文件"></a>生成密码文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /etc/squid3</span><br><span class="line">htpasswd -<span class="built_in">cd</span> /etc/squid3/passwords mybai</span><br><span class="line"><span class="comment">## 提示输入密码，这里输入123456，注意密码不要超过8位</span></span><br></pre></td></tr></table></figure>

<h4 id="校验密码"><a href="#校验密码" class="headerlink" title="校验密码"></a>校验密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib64/squid/basic_ncsa_auth /etc/squid3/passwords</span><br><span class="line"><span class="comment"># 输入 用户名 密码</span></span><br><span class="line">mybai 123456</span><br><span class="line"><span class="comment"># 提示OK说明成功，ERR是有问题，请检查一下之前步骤</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 测试完成，crtl + c 打断</span></span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在最后添加</span></span><br><span class="line">vim /etc/squid/squid.conf</span><br><span class="line">auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid3/passwords</span><br><span class="line">auth_param basic realm proxy</span><br><span class="line">acl authenticated proxy_auth REQUIRED</span><br><span class="line">http_access allow authenticated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是端口号，可以按需修改</span></span><br><span class="line"><span class="comment"># http_port 3128 这样写会同时监听ipv6和ipv4的端口，推荐适应下面的配置方法。</span></span><br><span class="line">http_port 0.0.0.0:3128</span><br></pre></td></tr></table></figure>

<p><a href="http://www.squid-cache.org/Doc/config/acl/">Squid官方配置文档</a></p>
<h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><p>Squid的日志默认是打开的，位于目录/var/log/squid/，当然这个地址还有日志的格式都是可以完全自定义的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@controller161 ~]<span class="comment"># ll /var/log/squid/</span></span><br><span class="line">total 496</span><br><span class="line">-rw-r----- 1 squid squid 355208 May 6 12:17 access.log</span><br><span class="line">-rw-r----- 1 squid squid 1846 Jul 10 2016 access.log-20160710.gz</span><br><span class="line">-rw-r----- 1 squid squid 3710 Jul 15 2016 access.log-20160718.gz</span><br><span class="line">-rw-r----- 1 squid squid 125341 May 4 15:19 cache.log</span><br><span class="line">-rw-r----- 1 squid squid 1325 Jul 9 2016 cache.log-20160710.gz</span><br><span class="line">-rw-r----- 1 squid squid 1110 Jul 14 2016 cache.log-20160718.gz</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> squid.service</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start squid.service</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop squid.service</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart squid.service</span><br></pre></td></tr></table></figure>

<h2 id="Client设置"><a href="#Client设置" class="headerlink" title="Client设置"></a>Client设置</h2><p>在需要上网的那台电脑上配置</p>
<h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在profile最后添加如下内容</span></span><br><span class="line"><span class="built_in">export</span> http_proxy= <span class="string">&quot;http://username:password@proxy_ip:port&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy= <span class="string">&quot;http://username:password@proxy_ip:port&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="yum代理设置"><a href="#yum代理设置" class="headerlink" title="yum代理设置"></a>yum代理设置</h3><p>编辑/etc/yum.conf，在最后加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy</span></span><br><span class="line">proxy=http://username:password@proxy_ip:port/</span><br></pre></td></tr></table></figure>

<h3 id="wget的代理设置"><a href="#wget的代理设置" class="headerlink" title="wget的代理设置"></a>wget的代理设置</h3><p>编辑/etc/wgetrc，在最后加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy</span></span><br><span class="line">http_proxy=http://username:password@proxy_ip:port/</span><br><span class="line">https_proxy=http://username:password@proxy_ip:port/</span><br><span class="line">ftp_proxy=http://username:password@proxy_ip:port/</span><br></pre></td></tr></table></figure>

<h3 id="curl的代理设置"><a href="#curl的代理设置" class="headerlink" title="curl的代理设置"></a>curl的代理设置</h3><p>在~/.bashrc里面增加一个别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> curl= <span class="string">&quot;curl -x http://username:password@proxy_ip:port&quot;</span></span><br></pre></td></tr></table></figure>
<p>另外一种方法是编辑~/.curlrc文件（没有就创建一个）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxy = http://username:password@proxy_ip:port</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
        <category>代理</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>CentOS7</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Ehcache参数配置解析</title>
    <url>/2021/09/27/Ehcache%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_3.jpg"></p>
<h2 id="ehcache配置文件内容"><a href="#ehcache配置文件内容" class="headerlink" title="ehcache配置文件内容"></a>ehcache配置文件内容</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;java.io.tmpdir&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;defaultCache</span><br><span class="line">            maxEntriesLocalHeap=&quot;1000&quot;</span><br><span class="line">            eternal=&quot;false&quot;</span><br><span class="line">            timeToIdleSeconds=&quot;1200&quot;</span><br><span class="line">            timeToLiveSeconds=&quot;3000&quot;</span><br><span class="line">            maxEntriesLocalDisk=&quot;10000&quot;</span><br><span class="line">            diskExpiryThreadIntervalSeconds=&quot;1200&quot; # 磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="line">            memoryStoreEvictionPolicy=&quot;LRU&quot; # 当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="line">            overflowToDisk=&quot;true&quot; # 当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。</span><br><span class="line">            diskSpoolBufferSizeMB=&quot;30&quot; # 这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="line">            diskPersistent=&quot;false&quot; # 是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false</span><br><span class="line">            maxElementsOnDisk=&quot;200&quot; # 硬盘最大缓存个数\</span><br><span class="line">            clearOnFlush = &quot;true&quot; #内存数量最大时是否清除</span><br><span class="line">            statistics=&quot;false&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">&quot;localTempSwap&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;harryBootCache&quot;</span> #缓存名称</span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span> # 对象是否永久有效，一但设置了，<span class="attr">timeout</span>将不起作用。</span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1200&quot;</span> # 设置对象在失效前的允许闲置时间（单位：秒）。仅当<span class="attr">eternal</span>=<span class="string">false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;3000&quot;</span> # 设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当<span class="attr">eternal</span>=<span class="string">false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span> #缓存最大个数</span></span><br><span class="line"><span class="tag">           <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;FIFO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>关于ehcache配置中的timeToLiveSeconds和timeToIdleSeconds的区别<br>假设现在配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">timeToIdleSeconds=600</span><br><span class="line">timeToLiveSeconds=1800</span><br></pre></td></tr></table></figure>
<p>缓存有效时间为1800秒（自缓存建立起半小时内有效），在有效的半小时内，如果连续600S中未访问缓存，则缓存失效，特别说明的是，就算缓存访问从未间断，到半小时后，缓存还是会失效。当然timeToLiveSeconds必须大于timeToIdleSecond才有意义并且只有在eternal为false，这两个属性才生效</p>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>缓存</tag>
        <tag>Ehcache</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机安装CentOS系统忘记登录密码处理方案</title>
    <url>/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_2.jpg"></p>
<blockquote>
<p>引自《vmware虚拟机安装了linux(redhat)系统忘记登录密码怎么办》<a href="https://www.cnblogs.com/lsr-mark/p/7661842.html%EF%BC%8C%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8">https://www.cnblogs.com/lsr-mark/p/7661842.html，亲测可用</a></p>
</blockquote>
<p>最近从公司拿到了一台撞了VMware服务器，但是都把密码给忘了，所以只能通过一些非常规的渠道进行处理</p>
<ol>
<li>重新启动虚拟机，在启动出现下面的界面的时候，按下<code>e</code>键<img src="/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/screenshot_1.png" class=""></li>
<li>进入洁面后，通过上下键选择第二项，再按下<code>e</code>键<img src="/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/screenshot_2.png" class=""></li>
<li>进入下面的界面后，在最后输入空格和s，然后键入回车键<img src="/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/screenshot_3.png" class=""></li>
<li>进入下面界面后，按下<code>b</code>键（boot启动）<img src="/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/screenshot_4.png" class=""></li>
<li>进入下面的界面后，输入passwd make（make代表要充值登录用户名），按下回车键<img src="/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/screenshot_5.png" class=""></li>
<li>进入下面的洁面后，输入新的密码和确认密码后，输入<code>reboot</code>（重新启动）<img src="/2021/09/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/screenshot_6.png" class=""></li>
<li>重新启动后，输入你的新密码，就可以登录成功了</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>重置密码</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Oracle报Could not execute auto check for display colors using command /usr/bin/xdpyinfo</title>
    <url>/2021/09/27/%E5%AE%89%E8%A3%85Oracle%E6%8A%A5Could-not-execute-auto-check-for-display-colors-using-command-usr-bin-xdpyinfo/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_110.jpg"><br>需要安装xhost，如果执行xhost显示找不到该命令，则执行下面的命令</p>
<ol>
<li><p>查找该命令是由哪个包提供的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum whatprovides &quot;*/xhost&quot;</span></span><br><span class="line">xorg-x11-server-utils-7.7-20.el7.x86_64 : X.Org X11 X server utilities</span><br></pre></td></tr></table></figure></li>
<li><p>根据返回的结果，安装对应的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install xorg-x11-server-utils-7.7-20.el7.x86_64</span></span><br></pre></td></tr></table></figure></li>
<li><p>只有xhost还不行，运行xhost+还是会报错，运行下面的命令安装vnc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install tigervnc tigervnc-server</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动并配置vnc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vncserver</span></span><br></pre></td></tr></table></figure></li>
<li><p>切换到oracle用户下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$export</span>  DISPLAY=127.0.0.1:1 <span class="comment">#1是vnc启动时给的标识,表示在哪个tty上连接</span></span><br><span class="line"><span class="variable">$xhost</span> +</span><br><span class="line">access control disabled,clients can connect from any host</span><br></pre></td></tr></table></figure></li>
<li><p>如果执行./runInstaller还是报错，则安装xdpyinfo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Could not execute auto check <span class="keyword">for</span> display colors using <span class="built_in">command</span> /usr/bin/xdpyinfo &lt;&lt;<span class="string">failed</span></span><br><span class="line"><span class="string">.....</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装xdpyinfo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install xdpyinfo</span><br></pre></td></tr></table></figure></li>
<li><p>安装完成后执行./runInstaller就可以在Xshell下显示出安装页面了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>通过yum源安装MySQL5.7(官方文档翻译版)</title>
    <url>/2021/09/27/%E9%80%9A%E8%BF%87yum%E6%BA%90%E5%AE%89%E8%A3%85MySQL5-7-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E7%89%88/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_1.jpg"><br>该文翻自MySQL的<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html">官方文档</a>，并根据实际的安装情况进行了一些简化</p>
<h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><h3 id="添加MySQL的Yum仓库"><a href="#添加MySQL的Yum仓库" class="headerlink" title="添加MySQL的Yum仓库"></a>添加MySQL的Yum仓库</h3><ol>
<li><p>打开这个链接<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a>下载RPM包，下载的时候需要根据系统版本进行选择，这里选择CentOS7，当前最新版本的MySQL是8.0，因此下载下来的rpm包的名字为<code>mysql80-community-release-el7-3.noarch.rpm</code>，不过不需要担心，后面可以修改子仓库地址，设置默认为5.7即可</p>
<img src="/2021/09/27/%E9%80%9A%E8%BF%87yum%E6%BA%90%E5%AE%89%E8%A3%85MySQL5-7-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E7%89%88/screenshot_1.png" class=""></li>
<li><p>安装rpm仓库地址<br>执行下面的命令，进行仓库的安装，这里需要注意，把下面命令中的<code>version-number</code>修改成自己下载的对应版本的rpm包的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$&gt; yum localinstall mysql80-community-release-el7-&#123;version-number&#125;.noarch.rpm</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="选择仓库对应默认版本"><a href="#选择仓库对应默认版本" class="headerlink" title="选择仓库对应默认版本"></a>选择仓库对应默认版本</h3><p>因为下载的rpm包，默认的是安装8.0，因此需要更换yum包的默认版本</p>
<ol>
<li><p>首先打印出来目前仓库的支持的所有可安装的版本，从下面的内容可以看出状态处于<code>enabled</code>的是<code>mysql80-community/x86_64</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxxxx Download]<span class="comment"># yum repolist all | grep mysql</span></span><br><span class="line">[root@VM-0-12-centos Download]<span class="comment"># yum repolist all | grep mysql</span></span><br><span class="line">mysql-cluster-7.5-community/x86_64  MySQL Cluster 7.5 Community  disabled</span><br><span class="line">mysql-cluster-7.5-community-source  MySQL Cluster 7.5 Community  disabled</span><br><span class="line">mysql-cluster-7.6-community/x86_64  MySQL Cluster 7.6 Community  disabled</span><br><span class="line">mysql-cluster-7.6-community-source  MySQL Cluster 7.6 Community  disabled</span><br><span class="line">mysql-cluster-8.0-community/x86_64  MySQL Cluster 8.0 Community  disabled</span><br><span class="line">mysql-cluster-8.0-community-source  MySQL Cluster 8.0 Community  disabled</span><br><span class="line">mysql-connectors-community/x86_64   MySQL Connectors Community   enabled:    212</span><br><span class="line">mysql-connectors-community-source   MySQL Connectors Community - disabled</span><br><span class="line">mysql-tools-community/x86_64        MySQL Tools Community        enabled:    132</span><br><span class="line">mysql-tools-community-source        MySQL Tools Community - Sour disabled</span><br><span class="line">mysql-tools-preview/x86_64          MySQL Tools Preview          disabled</span><br><span class="line">mysql-tools-preview-source          MySQL Tools Preview - Source disabled</span><br><span class="line">mysql55-community/x86_64            MySQL 5.5 Community Server   disabled</span><br><span class="line">mysql55-community-source            MySQL 5.5 Community Server - disabled</span><br><span class="line">mysql56-community/x86_64            MySQL 5.6 Community Server   disabled</span><br><span class="line">mysql56-community-source            MySQL 5.6 Community Server - disabled</span><br><span class="line">mysql57-community/x86_64            MySQL 5.7 Community Server   disabled</span><br><span class="line">mysql57-community-source            MySQL 5.7 Community Server - disabled</span><br><span class="line">mysql80-community/x86_64            MySQL 8.0 Community Server   enabled:    283</span><br><span class="line">mysql80-community-source            MySQL 8.0 Community Server - disabled</span><br></pre></td></tr></table></figure></li>
<li><p>将yum默认的安装版本修改为5.7<br>首先diabled掉8.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxxx Download]<span class="comment"># yum-config-manager --disable mysql80-community</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">============================================================================ repo: mysql80-community =============================================================================</span><br><span class="line">[mysql80-community]</span><br><span class="line">async = True</span><br><span class="line">bandwidth = 0</span><br><span class="line">base_persistdir = /var/lib/yum/repos/x86_64/7</span><br><span class="line">baseurl = http://repo.mysql.com/yum/mysql-8.0-community/el/7/x86_64/</span><br><span class="line">cache = 0</span><br><span class="line">cachedir = /var/cache/yum/x86_64/7/mysql80-community</span><br><span class="line">check_config_file_age = True</span><br><span class="line">compare_providers_priority = 80</span><br><span class="line">cost = 1000</span><br><span class="line">deltarpm_metadata_percentage = 100</span><br><span class="line">deltarpm_percentage =</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>然后使5.7生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-12-centos Download]<span class="comment"># yum-config-manager --enable mysql57-community</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">============================================================================ repo: mysql57-community =============================================================================</span><br><span class="line">[mysql57-community]</span><br><span class="line">async = True</span><br><span class="line">bandwidth = 0</span><br><span class="line">base_persistdir = /var/lib/yum/repos/x86_64/7</span><br><span class="line">baseurl = http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/</span><br><span class="line">cache = 0</span><br><span class="line">cachedir = /var/cache/yum/x86_64/7/mysql57-community</span><br><span class="line">check_config_file_age = True</span><br><span class="line">compare_providers_priority = 80</span><br><span class="line">cost = 1000</span><br><span class="line">deltarpm_metadata_percentage = 100</span><br><span class="line">deltarpm_percentage =</span><br><span class="line">enabled = 1</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></li>
<li><p>再次使用命令查看目前生效的仓库地址<br>可以看到目前生效的仓库地址是<code>mysql57-community/x86_64</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-12-centos Download]<span class="comment"># yum repolist all | grep mysql</span></span><br><span class="line">mysql-cluster-7.5-community/x86_64  MySQL Cluster 7.5 Community  disabled</span><br><span class="line">mysql-cluster-7.5-community-source  MySQL Cluster 7.5 Community  disabled</span><br><span class="line">mysql-cluster-7.6-community/x86_64  MySQL Cluster 7.6 Community  disabled</span><br><span class="line">mysql-cluster-7.6-community-source  MySQL Cluster 7.6 Community  disabled</span><br><span class="line">mysql-cluster-8.0-community/x86_64  MySQL Cluster 8.0 Community  disabled</span><br><span class="line">mysql-cluster-8.0-community-source  MySQL Cluster 8.0 Community  disabled</span><br><span class="line">mysql-connectors-community/x86_64   MySQL Connectors Community   enabled:    212</span><br><span class="line">mysql-connectors-community-source   MySQL Connectors Community - disabled</span><br><span class="line">mysql-tools-community/x86_64        MySQL Tools Community        enabled:    132</span><br><span class="line">mysql-tools-community-source        MySQL Tools Community - Sour disabled</span><br><span class="line">mysql-tools-preview/x86_64          MySQL Tools Preview          disabled</span><br><span class="line">mysql-tools-preview-source          MySQL Tools Preview - Source disabled</span><br><span class="line">mysql55-community/x86_64            MySQL 5.5 Community Server   disabled</span><br><span class="line">mysql55-community-source            MySQL 5.5 Community Server - disabled</span><br><span class="line">mysql56-community/x86_64            MySQL 5.6 Community Server   disabled</span><br><span class="line">mysql56-community-source            MySQL 5.6 Community Server - disabled</span><br><span class="line">mysql57-community/x86_64            MySQL 5.7 Community Server   enabled:    524</span><br><span class="line">mysql57-community-source            MySQL 5.7 Community Server - disabled</span><br><span class="line">mysql80-community/x86_64            MySQL 8.0 Community Server   disabled</span><br><span class="line">mysql80-community-source            MySQL 8.0 Community Server - disabled</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ol>
<li>安装MySQL的命令如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxxx Download]<span class="comment"># yum install mysql-community-server</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h2><ol>
<li><p>执行下面的启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxxxxxx Download]<span class="comment"># service mysqld start</span></span><br><span class="line">Redirecting to /bin/systemctl start mysqld.service</span><br></pre></td></tr></table></figure></li>
<li><p>查看mysql的运行状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-12-centos Download]<span class="comment"># service mysqld status</span></span><br><span class="line">Redirecting to /bin/systemctl status mysqld.service</span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2021-09-27 11:25:50 CST; 9s ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">  Process: 7822 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid <span class="variable">$MYSQLD_OPTS</span> (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 7761 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 7825 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─7825 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">Sep 27 11:25:45 VM-0-12-centos systemd[1]: Starting MySQL Server...</span><br><span class="line">Sep 27 11:25:50 VM-0-12-centos systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="启动后处理"><a href="#启动后处理" class="headerlink" title="启动后处理"></a>启动后处理</h2><ol>
<li><p>安装完不是就算完了，因为你还不知道MySQL的密码，之前版本的MySQL安装完成后，MySQL的默认密码为空，但好像（仅仅是好像）从5.7开始，MySQL的临时密码不再为空，而是输出到日志中，默认的日志路径为<code>/var/log/mysqld.log</code>，可通过下面的命令查看对应的密码。经过打印发现这里的默认密码是<code>t5e2JEzztS</code>，当然这个默认密码也仅仅是<code>localhost</code>域下能够正常登录，远程登录是不可能的，需要远程登录可看后续。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx-xxxx-xxxx Download]<span class="comment"># grep &#x27;temporary password&#x27; /var/log/mysqld.log</span></span><br><span class="line">2021-09-27T03:25:47.581201Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: t5e2JEzztS/l</span><br></pre></td></tr></table></figure></li>
<li><p>修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用上面找到的临时密码登录mysql</span></span><br><span class="line">[root@VM-0-12-centos Download]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.35</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改mysql的密码</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;you password&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置文件。相关的查表、字段大小写忽略、字符集、日志的输出位置、数据的存储位置之类的配置还需要进入配置文件修改才可以，命令为<code>vi /etc/my.cnf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储的位置</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略表名和字段大小写</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置错误日志的位置</span></span><br><span class="line">log-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"><span class="comment"># 进程文件对应的位置</span></span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></li>
<li><p>重启数据库。修改完配置文件之后，还需要重启MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx-xxxxx0-xxxxx-centos Download]<span class="comment"># service mysqld restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart mysqld.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><ol>
<li><p>创建远程域账户。完成上述的配置之后，你会发现还是没法远程登录MySQL进行数据数据库查询，还需要进行创建远程账户。下面的方法比较粗暴，具体生产环境还需要按照实际情况进行处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;create user <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span>;  //创建用户</span><br><span class="line">mysql&gt; grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span>identified by <span class="string">&#x27;password&#x27;</span>;//把在所有数据库的所</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"><span class="comment"># 有表的所有权限赋值给位于所有IP地址的root用户。</span></span><br><span class="line"><span class="comment"># 查看mysql授权用户列表  </span></span><br><span class="line">select distinct contact(<span class="string">&#x27;user:&#x27;</span>,user,<span class="string">&#x27;host:&#x27;</span>,host) from mysql.user;</span><br></pre></td></tr></table></figure></li>
<li><p>如果到了现在了你还是无法连接到数据库，那么问题可能出现在了防火墙了。MySQL服务的默认端口号为3306，因此需要在防火墙上开放3306端口，这里介绍的是firewall，有些服务器上可能使用的iptables，或者物理防护墙，可根据实际情况进行调整</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=3306/tcp --permanent //添加端口号</span><br><span class="line">firewall-cmd --reload //重新加载端口</span><br></pre></td></tr></table></figure></li>
</ol>
<p>打完收工</p>
]]></content>
      <categories>
        <category>软件安装</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性</title>
    <url>/2021/10/13/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_4.jpg"></p>
<h2 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h2><p>干了若干年的Java了，感觉一直在用Java6在干活，但是JDK又是用的1.8，心中略显有些对不起程序员这个行业，所以更新下自己的技术，争取不会落伍。</p>
<h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><p>Java8版本更新很大，新增了很多的特性，主要包含以下几个：</p>
<ul>
<li><strong>Lambda表达式：</strong>Lamdba允许把函数作为一个方法的参数（函数作为参数传递到方法中）</li>
<li><strong>方法引用：</strong>方法引用提供了非常有用的语法，可以直接引用已有Java类或对象的方法或构造器。与lambda联合使用，方法饮用可以使语言的构造更紧凑简洁，减少冗余代码。</li>
<li><strong>默认方法：</strong>默认方法就是一个在接口里面有了一个实现的方法</li>
<li><strong>新工具：</strong>新的编译工具，如Nashorn引擎jjs、类依赖分析器jdeps。</li>
<li><strong>Stream Api：</strong>新添加的Stream Api把真正的函数式编程风格引入到Java中</li>
<li>**Date Time Api:**加强对日期与时间的处理</li>
<li><strong>Optional类：</strong>Optional类已经成为Java8类库的一部分，用来解决空指针异常</li>
<li><strong>Nashorn，Javascript引擎：</strong>Java8提供了一个新的Nashorn Javascript引擎，它允许我们在JVM上运行特定的javascript应用</li>
</ul>
<h3 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; names1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        names1.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        names1.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        names1.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        names1.add(<span class="string">&quot;Baidu&quot;</span>);</span><br><span class="line">        names1.add(<span class="string">&quot;Sina&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; names2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        names2.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        names2.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        names2.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        names2.add(<span class="string">&quot;Baidu&quot;</span>);</span><br><span class="line">        names2.add(<span class="string">&quot;Sina&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Java8Tester tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Java7语法：&quot;</span>);</span><br><span class="line">        tester.sortUsingJava7(names1);</span><br><span class="line">        System.out.println(names1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用Java8语法&quot;</span>);</span><br><span class="line">        tester.sortUsingJava8(names2);</span><br><span class="line">        System.out.println(names2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Java7进行排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava7</span><span class="params">(List&lt;String&gt; names)</span></span>&#123;</span><br><span class="line">        Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Java8排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> names</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava8</span><span class="params">(List&lt;String&gt; names)</span></span>&#123;</span><br><span class="line">        Collections.sort(names, (s1,s2) -&gt; s1.compareTo(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行上面的代码，输出的内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用Java7语法：</span><br><span class="line">[Baidu, Google, Runoob, Sina, Taobao]</span><br><span class="line">使用Java8语法</span><br><span class="line">[Baidu, Google, Runoob, Sina, Taobao]</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式，也可称为闭包，他是推送Java8发布的最重要新特性。<br>Lambda允许函数作为一个方法的参数（函数作为参数传递进方法中）<br>使用Lambda表达式可以使代码变得更加简洁紧凑</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>lambda表达式的语法格式如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt; &#123;statements;&#125;</span><br></pre></td></tr></table></figure>
<p>以下是lambda表达式的重要特征</p>
<ul>
<li>可选类型生命：不需要声明参数类型，编译器可以统一识别参数值</li>
<li>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号</li>
<li>可选大括号：如果主题包含了一个语句，就不需要使用大括号</li>
<li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值</li>
</ul>
<h3 id="Lambda表达式实例"><a href="#Lambda表达式实例" class="headerlink" title="Lambda表达式实例"></a>Lambda表达式实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 不需要参数，返回值为5</span></span><br><span class="line">() -&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 接收一个参数（数字类型），返回其2倍的值</span></span><br><span class="line">x -&gt; <span class="number">2</span>*x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 接收2个参数（数字），并返回他们的差值</span></span><br><span class="line">(x, y) -&gt; x-y</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 接收2个int类型的整数，返回他们的和</span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x+y</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 接收一个String对象，并在控制台打印，不返回任何值（看起来像是返回void）</span></span><br><span class="line">(String s) -&gt; System.out.println(s)</span><br></pre></td></tr></table></figure>

<p>测试代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Java8Tester tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型声明</span></span><br><span class="line">        MathOperation addtion = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不用声明类型</span></span><br><span class="line">        MathOperation substraction = (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//大括号中的返回语句</span></span><br><span class="line">        MathOperation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123;<span class="keyword">return</span> a*b; &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有大括号及返回语句</span></span><br><span class="line">        MathOperation division = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a / b;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;10+5=&quot;</span>+tester.operate(<span class="number">10</span>, <span class="number">5</span>, addtion));</span><br><span class="line">        System.out.println(<span class="string">&quot;10-5=&quot;</span>+tester.operate(<span class="number">10</span>, <span class="number">5</span>, substraction));</span><br><span class="line">        System.out.println(<span class="string">&quot;10x5=&quot;</span>+tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">        System.out.println(<span class="string">&quot;10/5=&quot;</span>+tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不用括号</span></span><br><span class="line">        GreetingService greetingService1 = message -&gt; System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用括号</span></span><br><span class="line">        GreetingService greetingService2 = (message) -&gt; System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        greetingService1.sayMessage(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        greetingService2.sayMessage(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MathOperation</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, MathOperation mathOperation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10+5=15</span><br><span class="line">10-5=5</span><br><span class="line">10x5=50</span><br><span class="line">10/5=2</span><br><span class="line">Hello Runoob</span><br><span class="line">Hello Google</span><br></pre></td></tr></table></figure>

<h3 id="Lambda表达式注意事项"><a href="#Lambda表达式注意事项" class="headerlink" title="Lambda表达式注意事项"></a>Lambda表达式注意事项</h3><ul>
<li>Lambda表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面的例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage执行</li>
<li>Lambda表达式免去了使用匿名方法的麻烦，并且给与Java简单但是强大的函数化的编程能力</li>
</ul>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>lambda表达式只能引用标记了final的外层局部变量，这就是说不能再lambda内部修改定义在域外的局部，否则会编译错误<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String salutation = <span class="string">&quot;Hello! &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GreetingService greetingService1 = message -&gt; &#123;</span><br><span class="line">            System.out.println(salutation + message);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        greetingService1.sayMessage(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'>学到这了，还是好迷茫，这个Lambda有个鸡毛用？假设我在GreetingService 中再定义一个writeMessage接口方法，发现上面就直接报错了，报错内容是Multiple non-overriding abstract methods found in interface Java8Tester.GreetingService</font></p>
</blockquote>
<p>直接在lambda表达式中访问外层的局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String salutation = <span class="string">&quot;Hello! &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        Converter&lt;Integer, String&gt; s = (param) -&gt;&#123;</span><br><span class="line">            System.out.println(String.valueOf(param + num));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        s.convert(<span class="number">2</span>);<span class="comment">//输出结果为3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lambda表达式的局部变量可以不用声明为final，但是必须不可被后面的代码修改（隐性的具有final的语义）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Converter&lt;Integer, String&gt; s = (param) -&gt;&#123;</span><br><span class="line">        System.out.println(String.valueOf(param + num));</span><br><span class="line">    &#125;;</span><br><span class="line">    s.convert(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//如果这里使用num=5，那么上面的num那就会报错“Variable used in lambda expression should be final or effectively final”</span></span><br><span class="line">    num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在lambda表达式当中不允许声明一个与局部变量同名的参数或者局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String first = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  <span class="comment">//编译会出错</span></span><br></pre></td></tr></table></figure>

<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>通过方法的名字来指向一个方法<br>方法引用可以使语言的构造更紧凑简洁。减少冗余代码<br>方法引用使用一对冒号<code>::</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smartcore.main;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Supplier是jdk1.8的接口，这里和lamda一起使用了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">(<span class="keyword">final</span> Supplier&lt;Car&gt; supplier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//碰撞</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collide</span><span class="params">(<span class="keyword">final</span> Car car)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Collided&quot;</span> + car.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">final</span> Car another)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Follow the&quot;</span> + another.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Repaired &quot;</span>+ <span class="keyword">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>构造器引用：</strong>它的语法是Class::new，或者更一般的Class<T>::new实例如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL生成批量数据</title>
    <url>/2021/10/19/MySQL%E7%94%9F%E6%88%90%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_5.jpg"></p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>执行以下的命令，最好是在sql command下，也就是使用<code>mysql -uroot -p</code>登录终端，选择数据库，然后执行以下的命令</p>
<ol>
<li><p>创建一个临时内存表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `vote_recordss_memory`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `vote_recordss_memory` (</span><br><span class="line">    `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `user_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `vote_num` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `group_id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `status` tinyint(<span class="number">2</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1971-01-01 01:01:01&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    KEY `index_user_id` (`user_id`) <span class="keyword">USING</span> HASH</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个普通表，用作模拟大数据的测试用例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `vote_records`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `vote_records` (</span><br><span class="line">    `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `user_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户Id&#x27;</span>,</span><br><span class="line">    `vote_num` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;投票数&#x27;</span>,</span><br><span class="line">    `group_id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;用户组id 0-未激活用户 1-普通用户 2-vip用户 3-管理员用户&#x27;</span>,</span><br><span class="line">    `status` tinyint(<span class="number">2</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;状态 1-正常 2-已删除&#x27;</span>,</span><br><span class="line">    `create_time` datetime  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1971-01-01 01:01:01&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    KEY `index_user_id` (`user_id`) <span class="keyword">USING</span> HASH COMMENT <span class="string">&#x27;用户ID哈希索引&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;投票记录表&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>为了数据的随机性和真实性，我们需要创建一个可生成长度为n的随机字符串的函数。创建生成长度为n的随机字符串的函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> <span class="comment">-- 修改MySQL delimiter：&#x27;//&#x27;</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> `rand_strings` <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8 <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> `rand_strings` (n <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) CHARSET <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> char_str <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> return_str <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">        <span class="keyword">SET</span> return_str <span class="operator">=</span> concat(return_str, <span class="built_in">substring</span>(char_str, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND()<span class="operator">*</span><span class="number">62</span>), <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure></li>
<li><p>为了操作方便，我们再创建一个插入数据的存储过程。创建插入数据的存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> `insert_vote_recordss_memory` <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> `insert_vote_recordss_memory`(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> vote_num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> group_id <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> status TINYINT <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">        <span class="keyword">SET</span> vote_num <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">SET</span> group_id <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">0</span> <span class="operator">+</span> RAND()<span class="operator">*</span><span class="number">3</span>);</span><br><span class="line">        <span class="keyword">SET</span> status <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND()<span class="operator">*</span><span class="number">2</span>);</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `vote_recordss_memory` <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>, rand_strings(<span class="number">20</span>), vote_num, group_id, status, NOW());</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;  <span class="comment">-- 改回默认的 MySQL delimiter：&#x27;;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用存储过程，生成数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> insert_vote_recordss_memory(<span class="number">10000000</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>查询内存表已生成记录(为了下步测试，目前仅生成了x条)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `vote_recordss_memory`;</span><br></pre></td></tr></table></figure>
<p>然后转到普通表中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vote_records <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `vote_recordss_memory`;</span><br></pre></td></tr></table></figure></li>
<li><p>查询普通表已生成的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `vote_records`;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><ol>
<li>创建一个普通表<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_operation_log`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_data` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr1` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr2` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr3` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr4` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr5` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr6` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr7` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr8` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr9` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr10` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr11` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `attr12` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure></li>
<li>创建存储过程<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER ;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> batch_insert_log()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> userId <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">10000000</span>;</span><br><span class="line"> <span class="keyword">set</span> <span class="variable">@execSql</span> <span class="operator">=</span> <span class="string">&#x27;INSERT INTO `test`.`user_operation_log`(`user_id`, `ip`, `op_data`, `attr1`, `attr2`, `attr3`, `attr4`, `attr5`, `attr6`, `attr7`, `attr8`, `attr9`, `attr10`, `attr11`, `attr12`) VALUES&#x27;</span>;</span><br><span class="line"> <span class="keyword">set</span> <span class="variable">@execData</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  WHILE i<span class="operator">&lt;=</span><span class="number">10000000</span> DO</span><br><span class="line">   <span class="keyword">set</span> <span class="variable">@attr</span> <span class="operator">=</span> &quot;&#x27;测试很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的属性&#x27;&quot;;</span><br><span class="line">  <span class="keyword">set</span> <span class="variable">@execData</span> <span class="operator">=</span> concat(<span class="variable">@execData</span>, &quot;(&quot;, userId <span class="operator">+</span> i, &quot;, &#x27;10.0.69.175&#x27;, &#x27;用户登录操作&#x27;&quot;, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;,&quot;, <span class="variable">@attr</span>, &quot;)&quot;);</span><br><span class="line">  if i <span class="operator">%</span> <span class="number">1000</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">     <span class="keyword">set</span> <span class="variable">@stmtSql</span> <span class="operator">=</span> concat(<span class="variable">@execSql</span>, <span class="variable">@execData</span>,&quot;;&quot;);</span><br><span class="line">    <span class="keyword">prepare</span> stmt <span class="keyword">from</span> <span class="variable">@stmtSql</span>;</span><br><span class="line">    <span class="keyword">execute</span> stmt;</span><br><span class="line">    <span class="keyword">DEALLOCATE</span> <span class="keyword">prepare</span> stmt;</span><br><span class="line">    <span class="keyword">commit</span>;</span><br><span class="line">    <span class="keyword">set</span> <span class="variable">@execData</span> <span class="operator">=</span> &quot;&quot;;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">set</span> <span class="variable">@execData</span> <span class="operator">=</span> concat(<span class="variable">@execData</span>, &quot;,&quot;);</span><br><span class="line">   <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li>
<li>调用存储过程<br>直接使用navicat调用存储过程</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下Nginx升级</title>
    <url>/2021/10/26/CentOS7%E4%B8%8BNginx%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_6.jpg"></p>
<blockquote>
<p>昨晚接到任务要进行Nginx升级，版本从1.18.0升级到1.20.1，之前也弄过，但是没有记录，今天看到一篇文章写的很不多，在此记录一下，原文链接地址<a href="https://baijiahao.baidu.com/s?id=1671009660071644172&wfr=spider&for=pc">《Nginx平滑升级详细步骤》</a></p>
</blockquote>
<h2 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在不停止Nginx提供服务的时候，进行Nginx升级操作。也就是说，Nginx可动态的版本升级、添加模块</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Nginx服务接收到USR2信号后，将<code>nginx.pid</code>文件添加<code>.oldbin</code>变成<code>nginx.pid.oldbin</code>文件；然后执行新版本的Nginx服务器的二进制文件启动服务，如果新的服务启动成功，系统中将有新旧两个Nginx主进程共同提供Web服务，之后需要向旧的Nginx服务进程发送<code>WINCH</code>信号，使旧的Nginx服务平滑停止，并删除<code>nginx.pid.oldbin</code>文件</p>
<h3 id="Nginx信号简介"><a href="#Nginx信号简介" class="headerlink" title="Nginx信号简介"></a>Nginx信号简介</h3><ul>
<li>主进程支持的信号<ul>
<li>TERM, INT: 立刻退出</li>
<li>QUIT: 等待工作进程结束后再退出</li>
<li>KILL: 强制终止进程</li>
<li>HUP: 重新加载配置文件，使用新的配置启动工作进程，并逐步关闭旧进程</li>
<li>USR1: 重新打开日志文件</li>
<li>USR2: 启动新的主进程，实现热升级</li>
<li>WINCH: 逐步关闭工作进程</li>
</ul>
</li>
<li>工作进程支持的信号<ul>
<li>TERM, INT: 立刻退出</li>
<li>QUIT: 等待请求处理结束后再退出</li>
<li>USR1: 重新打开日志文件</li>
</ul>
</li>
</ul>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="打印已安装Nginx信息"><a href="#打印已安装Nginx信息" class="headerlink" title="打印已安装Nginx信息"></a>打印已安装Nginx信息</h3><p>打印信息的主要意图是为了获取首次安装时配置时执行的参数（看下面输出命令中的configure arguments）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx sbin]<span class="comment"># ./nginx -V</span></span><br><span class="line">nginx version: nginx/1.17.10</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line"><span class="comment">## 下面这部分内容就是之前安装的时候已经安装的模块，在这次configure的时候也需要跟上这些模块</span></span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx/--with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure>

<h3 id="下载-解压安装包"><a href="#下载-解压安装包" class="headerlink" title="下载/解压安装包"></a>下载/解压安装包</h3><p>去Nginx的<a href="http://nginx.org/en/download.html">官网</a>下载对应版本的Nginx，下载完成后上传到对应的目录下，这里上传到了<code>/root/Downloads/nginx/</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx nginx] tar -zxvf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xxxx nginx] <span class="built_in">cd</span> nginx-1.20.1</span><br><span class="line"><span class="comment">## 这里的configure指定的参数和模块一定要和上面打印版本信息时打印出来的一致</span></span><br><span class="line">[root@xxxx nginx-1.20.1] ./configure --prefix=/usr/<span class="built_in">local</span>/nginx/--with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"><span class="comment">## 预编译，也就是make，但是这里不要进行make install，只需要make</span></span><br><span class="line">[root@xxxx nginx-1.20.1] make</span><br></pre></td></tr></table></figure>

<h3 id="更新Nginx文件"><a href="#更新Nginx文件" class="headerlink" title="更新Nginx文件"></a>更新Nginx文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到之前安装的Nginx安装目录下</span></span><br><span class="line">[root@xxxx nginx-1.20.1] <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line"><span class="comment"># 将旧版本的Nginx执行文件改为nginx.old</span></span><br><span class="line">[root@xxxx sbin] mv nginx nginx.old.20211026</span><br><span class="line"><span class="comment"># 将新版本Nginx执行文件移到当前目录下</span></span><br><span class="line">[root@xxxx sbin] cp /root/Downloads/nginx/nginx-1.20.1/objs/nginx ./</span><br></pre></td></tr></table></figure>

<h3 id="切换当前Nginx和更新后的Nginx"><a href="#切换当前Nginx和更新后的Nginx" class="headerlink" title="切换当前Nginx和更新后的Nginx"></a>切换当前Nginx和更新后的Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测新版本Nginx是否正常，正常为successful</span></span><br><span class="line">[root@xxxx sbin] ./nginx -t</span><br><span class="line"><span class="comment"># 查看旧版本的nginx进程</span></span><br><span class="line">[root@xxxx sbin] ps -ef|grep nginx</span><br><span class="line">[root@xydtech sbin]<span class="comment"># ps -ef|grep nginx</span></span><br><span class="line">root     16489     1  0 6月15 ?       00:00:00 nginx: master process ./nginx</span><br><span class="line">root     30997 16489  0 7月28 ?       00:00:32 nginx: worker process</span><br><span class="line">root     19781 19087  0 15:07 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 向主进程发送USR2信号，Nginx会启动一个新版本的master进程和工作进程，和旧版一起处理请求</span></span><br><span class="line">[root@xydtech sbin]<span class="comment"># kill -USR2 16489</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 再次打印Nginx进程会发现有两套Nginx的进程在运行</span></span><br><span class="line">[root@xydtech sbin]<span class="comment"># ps -ef|grep nginx</span></span><br><span class="line">root     16489     1  0 6月15 ?       00:00:00 nginx: master process ./nginx</span><br><span class="line">root     30997 16489  0 7月28 ?       00:00:32 nginx: worker process</span><br><span class="line">root     25476     1  0 6月15 ?       00:00:00 nginx: master process ./nginx</span><br><span class="line">root     43259 16489  0 7月28 ?       00:00:32 nginx: worker process</span><br><span class="line">root     19781 19087  0 15:07 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 向旧版本的Nginx发送WINCH信号，它会住不惯碧旗下的工作进程（主进程不退出），这是所有的请求会由新版本的Nginx处理</span></span><br><span class="line">[root@xydtech sbin]<span class="comment"># kill -WINCH 16489</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止旧版本的Nginx的主进程，这里也可以直接使用kill -9 进程ID杀死旧版本Nginx的主进程</span></span><br><span class="line">[root@xydtech sbin]<span class="comment"># kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看目前Nginx的版本信息</span></span><br><span class="line">[root@xydtech sbin]<span class="comment"># ./nginx -V</span></span><br><span class="line">nginx version: nginx/1.20.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx/--with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>中间件</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>升级</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis菜鸟教程学习笔记</title>
    <url>/2021/11/26/Redis%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_7.jpg"></p>
<h1 id="Redis-教程"><a href="#Redis-教程" class="headerlink" title="Redis 教程"></a>Redis 教程</h1><p>REmote DIctionary Server(Redis)是一个由Salvatore Sanfilippo写的key-value存储系统，是跨平台的非关系型数据库<br>Redis 是一个快远的使用ANSI C语言编写，遵守BSD协议、支持网络、科技与内存、分布式、可选持久性键值对(Key-Value)存储数据库，并提供多种语言的API<br>Redis通常被称为数据结构服务器，因为值(value)可以使字符串、哈希(Hash)、列表(List)、集合(Set)、有序集合(Sorted Set)</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h3><p>Redis 完全开源<br>Redis与其他key-value缓存产品有以下三个特点</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list、set、zset、hash等数据结构的存储</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份</li>
</ul>
<h3 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h3><ul>
<li>性能极高- Redis读的速度是110000次/秒，写的速度81000次/秒</li>
<li>丰富的数据类型</li>
<li>原子 - Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来</li>
<li>丰富特性 - Redis还支持publish/subscribe，通知，key过期等等特性</li>
</ul>
<h3 id="Redis与其他key-value存储的不同"><a href="#Redis与其他key-value存储的不同" class="headerlink" title="Redis与其他key-value存储的不同"></a>Redis与其他key-value存储的不同</h3><ul>
<li>Redis有着更为复杂的数据结构并且提供他们的原子性操作。基于基本数据机构的同时对程序员透明，无需进行额外的抽象</li>
<li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Redis-配置"><a href="#Redis-配置" class="headerlink" title="Redis 配置"></a>Redis 配置</h3><p>Redis的配置文件位于Redis安装目录下，文件名为<code>redis.conf</code>(Windows名为redis.windows.conf)<br>你可以通过<code>CONFIG</code>命令查看或设置配置项</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>Redis CONFIG命令格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li><p>获取<code>loglevel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line">loglevel</span><br><span class="line">notice</span><br></pre></td></tr></table></figure></li>
<li><p>使用*号获取所有的配置项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET *</span><br><span class="line">rdbchecksum</span><br><span class="line">yes</span><br><span class="line">daemonize</span><br><span class="line">no</span><br><span class="line">io-threads-do-reads</span><br><span class="line">no</span><br><span class="line">lua-replicate-commands</span><br><span class="line">yes</span><br><span class="line">always-show-logo</span><br><span class="line">no</span><br><span class="line">protected-mode</span><br><span class="line">yes</span><br><span class="line">rdbcompression</span><br><span class="line">yes</span><br><span class="line">rdb-del-sync-files</span><br><span class="line">no</span><br><span class="line">activerehashing</span><br><span class="line">yes</span><br><span class="line">stop-writes-on-bgsave-error</span><br><span class="line">yes</span><br><span class="line">set-proc-title</span><br><span class="line">yes</span><br><span class="line">dynamic-hz</span><br><span class="line">yes</span><br><span class="line">lazyfree-lazy-eviction</span><br><span class="line">no</span><br><span class="line">lazyfree-lazy-expire</span><br><span class="line">no</span><br><span class="line">lazyfree-lazy-server-del</span><br><span class="line">no</span><br><span class="line">lazyfree-lazy-user-del</span><br><span class="line">no</span><br><span class="line">lazyfree-lazy-user-flush</span><br><span class="line">no</span><br><span class="line">repl-disable-tcp-nodelay</span><br><span class="line">no</span><br><span class="line">repl-diskless-sync</span><br><span class="line">no</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><p>可以通过修改<code>redis.conf</code>文件或者使用<code>CONFIG SET</code>命令来修改配置</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p><code>CONFIG SET</code>命令基本语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure>

<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG SET loglevel <span class="string">&quot;notice&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG get loglevel</span><br><span class="line">loglevel</span><br><span class="line">notice</span><br></pre></td></tr></table></figure>

<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>redis.conf配置项说明：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>daemonize no</td>
<td>Redis 默认不是以守护进程的方式运行，可以通过该配置修改，使用yes启用守护进程（Windows不支持守护线程的配置为no）</td>
</tr>
<tr>
<td>pidfile /var/run/redis.pid</td>
<td>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定位置</td>
</tr>
<tr>
<td>port 6379</td>
<td>指定Redis监听端口，默认端口为6379</td>
</tr>
<tr>
<td>bind 127.0.0.1</td>
<td>绑定的主机地址（当前主机的IP地址），原本以为是用来控制访问改Redis服务器IP地址控制的，后来发现不是，不知道这么弄的意义何在？</td>
</tr>
<tr>
<td>timeout 300</td>
<td>当客户端闲置多长时间后关闭连接，如果设置为0，表示关闭该功能</td>
</tr>
<tr>
<td>loglevel notice</td>
<td>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为notice</td>
</tr>
<tr>
<td>logfile stdout</td>
<td>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录为标准输出，则日志huifasonggei/dev/null</td>
</tr>
<tr>
<td>databases 16</td>
<td>设置数据的数量，默认数据库为0，可以使用SELECT命令连接指定的数据库ID，这个数据库id是redis默认的顺序，不能自定义数据库的名称，只能开发人员自己记录其对应存储的内容</td>
</tr>
<tr>
<td>save <seconds><changes></td>
<td>指定在多长时间内，有多少次更新操作，就将数据库同步到数据文件，<font color='red'>可以多个条件配合</font>，Redis默认配置文件中提供了三条 save 900 1  save 300 10分别表示900秒内有一条更改，300秒内有10条更改即进行文件写入</td>
</tr>
<tr>
<td>rdbcompression yes</td>
<td>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，单会导致数据库文件变得巨大</td>
</tr>
<tr>
<td>dbfilename dump.rdb</td>
<td>指定本地数据库文件名，默认为dump.rdb</td>
</tr>
<tr>
<td>dir ./</td>
<td>指定本地数据库存放目录</td>
</tr>
<tr>
<td>slaveof <masterip> <masterport></td>
<td>设置本机为slave服务时，设置master服务的IP地址及端口，在Redis启动时，他会自动从master进行数据同步</td>
</tr>
<tr>
<td>masterauth <master-password></td>
<td>当master服务设置了密码保护时，slave服务连接master的密码</td>
</tr>
<tr>
<td>requirepass foobared</td>
<td>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要使用<code>AUTH &lt;password&gt;</code>命令提供密码，默认关闭</td>
</tr>
<tr>
<td>maxclients 128</td>
<td>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置maxclient 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</td>
</tr>
<tr>
<td>maxmemory <bytes></td>
<td>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已过期或即将到期的key，当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</td>
</tr>
<tr>
<td>appendonly no</td>
<td>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失，因为Redis本身同步数据文件是按照上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中，默认为no</td>
</tr>
<tr>
<td>appendfilename appendonly.aof</td>
<td>指定更新日志文件名，默认为appendonly.aof</td>
</tr>
<tr>
<td>appendfsync everysec</td>
<td>指定更新日志条件，共有三个可选值<br> - no:表示等操作系统进行数据缓存同步到磁盘（快） <br> - always:表示每次更新操作后手动调用fsync()将数据写道磁盘（慢，安全）<br> - everysec:表示每秒同步一次（折中，默认值）</td>
</tr>
<tr>
<td>vm-enabled no</td>
<td>指定是否启用启用虚拟内存机制，默认值为no，简单的介绍一下， VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</td>
</tr>
<tr>
<td>vm-swap-file /tmp/redis.swap</td>
<td>虚拟内存文件路径，默认为/tmp/redis.swap，不可多个Redis实例共享</td>
</tr>
<tr>
<td>vm-max-memory 0</td>
<td>将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多小，所有索引数据都是内存存储的（Redis的索引数据就是keys），也就是说，当vm-max-memory 设置为0的时候，其实是所有value都存在与磁盘，默认为0</td>
</tr>
<tr>
<td>vm-page-size 32</td>
<td>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的大小来设定的，如果存储很多小的对象，page大小最好设置为32或者64bytes；如果存储很大对象，则可以使用更大的page，如果不确定，就是用默认值</td>
</tr>
<tr>
<td>vm-pages 134217728</td>
<td>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个pages将消耗1byte的内存</td>
</tr>
<tr>
<td>vm-max-threads 4</td>
<td>设置访问swap文件的线程数，最好不要超过机器的核心数，如果设置为0，那么所有对swap问价的操作都是串行的，可能造成较长时间的延迟，默认为4</td>
</tr>
<tr>
<td>glueoutputbuf yes</td>
<td>设置在向客户端应答时，是否把娇小的包合并成一个包发送，默认开启</td>
</tr>
<tr>
<td>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</td>
<td>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>
</tr>
<tr>
<td>activerehashing yes</td>
<td>指定是否激活重置哈希，默认为开启</td>
</tr>
<tr>
<td>include /path/to/local.conf</td>
<td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody></table>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><p>Redis支持五种数据类型：String、Hash、List、Set、ZSet</p>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>String是Redis最基本的类型，一个key对应一个value值<br>String类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象<br>String类型是Redis最基本的数据类型，<font color='red'>String类型最大能存储512MB</font><br><font color='red'><code>redis-cli --raw</code>在连接redis的时候，添加–raw，可以防止汉字乱码问题</font></p>
<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET runoob <span class="string">&quot;菜鸟教程&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get runoob</span><br><span class="line">菜鸟教程</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h4><p>Redis Hash是一个键值对(key=&gt;value)集合<br>Redis Hash是一个String类型的field和value的映射表，hash特别适合存储对象<br>下面的实例中将使用<code>HMSET</code>、<code>HGET</code>命令设置和获取Hash值，每个hash可以存储2^32 -1 键值对（40多亿）</p>
<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET runoob <span class="string">&quot;菜鸟教程&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get runoob</span><br><span class="line">菜鸟教程</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里需要说明下，如果要设置的key之前设置过，但新设置的对象类型和之前的类型不同就会报错，报错内容如下</span></span><br><span class="line">127.0.0.1:6379&gt; HMSET runoob field1 <span class="string">&quot;张三&quot;</span> field2 <span class="string">&quot;李四&quot;</span></span><br><span class="line">WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行删除操作，先把之前的键删除掉</span></span><br><span class="line">127.0.0.1:6379&gt; del runoob</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; HMSET runoob field1 <span class="string">&quot;张三&quot;</span> field2 <span class="string">&quot;李四&quot;</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Hash中的值</span></span><br><span class="line">127.0.0.1:6379&gt; HGET runoob field2</span><br><span class="line">李四</span><br></pre></td></tr></table></figure>

<h4 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到表的头部或者尾部<br>列表最大存储2^32-1元素，每个列表可存储40多亿</p>
<h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在头部插入</span></span><br><span class="line">127.0.0.1:6379&gt; lpush runoob redis</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 在尾部插入</span></span><br><span class="line">127.0.0.1:6379&gt; rpush runoob mongodb</span><br><span class="line">2</span><br><span class="line"><span class="comment"># 在头部插入</span></span><br><span class="line">127.0.0.1:6379&gt; lpush runoob rabbitmq</span><br><span class="line">3</span><br><span class="line"><span class="comment"># 在尾部插入</span></span><br><span class="line">127.0.0.1:6379&gt; rpush runoob nginx</span><br><span class="line">4</span><br><span class="line">127.0.0.1:6379&gt; lrange runoob 0 10</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">mongodb</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><p>Redis的Set是String类型的无序集合<br>集合是通过哈希表实现的，所以添加、删除查找的复杂度都是O(1)</p>
<h5 id="sadd命令"><a href="#sadd命令" class="headerlink" title="sadd命令"></a>sadd命令</h5><p>添加一个String元素到key对应的set集合中，成功返回1，如果元素已经在集合中返回0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sadd key member</span><br></pre></td></tr></table></figure>

<h5 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sadd runoob redis</span><br><span class="line">1</span><br><span class="line">&gt; sadd runoob mongodb</span><br><span class="line">1</span><br><span class="line">&gt; sadd runoob rabbitmq</span><br><span class="line">1</span><br><span class="line">&gt; sadd runoob rabbitmq</span><br><span class="line">0</span><br><span class="line">&gt; smembers runoob</span><br><span class="line">rabbitmq</span><br><span class="line">mongodb</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<p><font color='red'>注意：</font>以上实例中rabbitmq添加了两次，但根据集合内元素的唯一性，第二次插入的元素江北忽略。集合最大的成员数为2^32-1（每个集合可存储40多亿个成员）</p>
<h4 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h4><p>Redis zset和set一样也是String类型的集合，且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。Redis正式通过分数来为集合中的成员进行从小到大的排序<br><font color='red'>zset的成员是唯一的，但分数却可以重复</font></p>
<h5 id="zadd命令"><a href="#zadd命令" class="headerlink" title="zadd命令"></a>zadd命令</h5><p>添加元素到集合，元素在集合中存在则更新对应score</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zadd key score member</span><br></pre></td></tr></table></figure>

<h5 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; del runoob</span><br><span class="line">1</span><br><span class="line">&gt; zadd runoob 0 redis</span><br><span class="line">1</span><br><span class="line">&gt; zadd runoob 0 mongodb</span><br><span class="line">1</span><br><span class="line">&gt; zadd runoob 0 rabbitmq</span><br><span class="line">1</span><br><span class="line">&gt; zadd runoob 0 rabbitmq</span><br><span class="line">0</span><br><span class="line">&gt; zadd runoob 1 rabbitmq</span><br><span class="line">0</span><br><span class="line">&gt; zrangebyscore runoob 0 100</span><br><span class="line">mongodb</span><br><span class="line">redis</span><br><span class="line">rabbitmq</span><br></pre></td></tr></table></figure>

<h3 id="各个数据类型应用场景"><a href="#各个数据类型应用场景" class="headerlink" title="各个数据类型应用场景"></a>各个数据类型应用场景</h3><table>
<thead>
<tr>
<th>类型</th>
<th>简介</th>
<th>特性</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>String(字符串)</td>
<td>二进制安全</td>
<td>可以包含任何数据比如jpg图片或者序列化的对象，一个键最大能存储512M</td>
<td>–</td>
</tr>
<tr>
<td>Hash(字典)</td>
<td>键值对集合，即编程语言中的Map类型</td>
<td>适合存储对象，并且可以向数据库中的update一个属性一样只修改某一项属性值</td>
<td>存储、读取、修改用户属性</td>
</tr>
<tr>
<td>List(列表)</td>
<td>链表(双向链表)</td>
<td>增删快，提供了操作某一段元素的API</td>
<td>1. 最新消息排行等功能（比如朋友圈的时间线） 2. 消息队列</td>
</tr>
<tr>
<td>Set(集合)</td>
<td>哈希表实现，元素不重复</td>
<td>1. 添加、删除，查找复杂度都是O(1)，为集合提供了交集、并集、差集等操作</td>
<td>1. 共同好友 2. 利用唯一性，统计访问网站的所有独立ip 3. 好友推荐时，根据tag求交集，大于某个阈值时就可以推荐</td>
</tr>
<tr>
<td>Sorted Set(有序集合)</td>
<td>将Set中的元素增加一个权重参数score，元素按score有序排列</td>
<td>数据插入集合时，已经进行天然排序</td>
<td>1. 排行榜 2. 带权重的消息队列</td>
</tr>
</tbody></table>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>Redis支持多个数据库，并且每个数据库的数据是隔离不能共享，并且基于单机才有，<font color='red'>如果是集群就没有数据库的概念</font><br>每个数据库对外都是从0开始的递增数字明明，Redis默认支持16个数据库（可以通过配置文件配置支持更多，无上限），如果通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如果要选择1号数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">redis [1] &gt; GET foo</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<p>然而这些以数字命名的数据库又与我们理解的数据库有区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号明明，开发者必须自己记录那些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有的数据库中的数据。综上所述，这些数据库更像是一个命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产中的数据，使用1号数据库存储测试环境中的数据。但不适宜0好数据库存储A应用的数据而是用1好数据库存储B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个Redis实例占用的内存只有1M左右，所以不用担心多个Redis实例会额外占用很多的内存</p>
<h1 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h1><h2 id="Redis-命令-1"><a href="#Redis-命令-1" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><h3 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h3><p>Redis命令用于在Redis服务上执行操作<br>要在Redis服务上执行命令需要一个redis客户端。Redis客户端在我们之前下载的Redis的安装包中</p>
<h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><p>Redis客户端的基本语法为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ redis-cli</span><br></pre></td></tr></table></figure>
<h5 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h5><p>以下实例讲解了如何启动redis客户端<br>启动redis服务器，打开中断并数据<code>redis-cli</code>，该命令会连接本地的redis服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost src]<span class="comment"># ./redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"><span class="comment"># 这里是输入密码进行授权，后面的xxxx是密码</span></span><br><span class="line">127.0.0.1:6379&gt; auth xxxxx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<p>在以上实例中我们连接到本地的redis服务并执行<code>ping</code>命令，该命令用于检测redis服务是否启动</p>
<h4 id="在远程服务上执行命令"><a href="#在远程服务上执行命令" class="headerlink" title="在远程服务上执行命令"></a>在远程服务上执行命令</h4><p>如果需要在远程redis服务上执行命令，同样我们使用的也是redis-cli命令</p>
<h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli -h host -o port -a password</span></span><br></pre></td></tr></table></figure>
<h5 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h5><p>以下实例演示了如何连接到主机为192.168.2.163，端口为6379，密码为mypass的redis服务上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h 192.168.2.163 -p 6379 -a <span class="string">&quot;mypass&quot;</span></span><br><span class="line">redis 192.168.2.163:6379&gt;</span><br><span class="line">redis 192.168.2.163:6379&gt; PING</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<h2 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h2><p>Redis键命令用于管理redis的键</p>
<h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>Redis键命令的基本语法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; COMMAND KEY_NAME</span><br></pre></td></tr></table></figure>
<h5 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;  SET runoobkey redis</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; DEL runoobkey</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<h3 id="Redis-Keys命令"><a href="#Redis-Keys命令" class="headerlink" title="Redis Keys命令"></a>Redis Keys命令</h3><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>DEL key</td>
<td>该命令用于在key存在时删除key</td>
</tr>
<tr>
<td>2</td>
<td>DUMP key</td>
<td>序列化给定key，并返回被序列化的值</td>
</tr>
<tr>
<td>3</td>
<td>EXISTS key</td>
<td>检查给定key是否存在</td>
</tr>
<tr>
<td>4</td>
<td>EXPIRE key seconds</td>
<td>为给定key设置过期时间，以秒为单位</td>
</tr>
<tr>
<td>5</td>
<td>EXPIREAT key timestamp</td>
<td>EXPIREAT的作用和EXPIRE类似，都适用于key设置过期时间，不同在于EXPIREAT命令接受的时间参数是UNIX时间戳</td>
</tr>
<tr>
<td>6</td>
<td>PEXPIRE key milliseconds</td>
<td>设置key的过期时间一毫秒计</td>
</tr>
<tr>
<td>7</td>
<td>PEXPIREAT key milliseconds-timestamp</td>
<td>设置key过期时间的时间戳以毫秒计</td>
</tr>
<tr>
<td>8</td>
<td>KEYS pattern</td>
<td>查找所有符合给定模式的key</td>
</tr>
<tr>
<td>9</td>
<td>MOVE key db</td>
<td>将当前数据库的key移动到给定的数据库db中</td>
</tr>
<tr>
<td>10</td>
<td>PERSIST key</td>
<td>移除key的过期时间，key将持久保持</td>
</tr>
<tr>
<td>11</td>
<td>PTTL key</td>
<td>以毫秒为单位返回key的剩余的过期时间</td>
</tr>
<tr>
<td>12</td>
<td>TTL key</td>
<td>以秒为单位，返回给定key的剩余生存时间（TTL， time to live）</td>
</tr>
<tr>
<td>13</td>
<td>RANDOMKEY</td>
<td>从当前数据库中随机返回一个KEY</td>
</tr>
<tr>
<td>14</td>
<td>RENAME key newkey</td>
<td>修改key的名称</td>
</tr>
<tr>
<td>15</td>
<td>RENAMENX key newkey</td>
<td>仅当newkey不存在是，将key改名为newkey</td>
</tr>
<tr>
<td>16</td>
<td>SCAN coursor[MATCH pattern][COUNT count]</td>
<td>迭代数据库中的数据库键</td>
</tr>
<tr>
<td>17</td>
<td>TYPE key</td>
<td>返回key所存储的值的类型</td>
</tr>
</tbody></table>
<h2 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h2><p>Redis字符串数据类型的命令用于管理Redis字符串值，基本语法如下</p>
<h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;COMMAND KEY_NAME</span><br></pre></td></tr></table></figure>
<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> runoobkey redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get runoobkey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure>
<p>在以上实例中，我们使用了SET和GET命令，键为runoobkey</p>
<h3 id="Redis字符串命令"><a href="#Redis字符串命令" class="headerlink" title="Redis字符串命令"></a>Redis字符串命令</h3><p>下表列出了常用的Redis字符串命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SET key value</td>
<td>设置指定key的值</td>
</tr>
<tr>
<td>GET key</td>
<td>获取指定的key的值</td>
</tr>
<tr>
<td>GETRANGE key start end</td>
<td>返回key中字符串值的子字符串，相当于截取字符串中的内容</td>
</tr>
<tr>
<td>GETSET key value</td>
<td>将给定key的值设为value，并返回key的旧值</td>
</tr>
<tr>
<td>GETBIT key offset</td>
<td>对key所存储的字符串的值，获取指定偏移量上的位（bit）</td>
</tr>
<tr>
<td>MGET key1 [key2]</td>
<td>获取所有（一个或多个）给定的key的值</td>
</tr>
<tr>
<td>SETBIT key offset value</td>
<td>对key所存储的字符串值，设置或清楚指定偏移量上的位（bit）</td>
</tr>
<tr>
<td>SETEX key seconds value</td>
<td>将值value关联到key，并将key的过期时间设为seconds</td>
</tr>
<tr>
<td>SETNX key value</td>
<td>只有在key不存在时设置key的值</td>
</tr>
<tr>
<td>SETRANGE key offset value</td>
<td>用value参数覆盖给定key所存储的字符串值，从偏移量offset开始</td>
</tr>
<tr>
<td>STRLENG key</td>
<td>返回key所存储的字符串值的长度</td>
</tr>
<tr>
<td>MSET key value [key value]</td>
<td>同时设置一个或多个key-value</td>
</tr>
<tr>
<td>MSETNX key value [key value]</td>
<td>同时设置一个或多个key-value对，当且仅当所有给定key都不存在</td>
</tr>
<tr>
<td>PSETEX key milliseconds value</td>
<td>这个命令和SETEX命令想死，但它以毫秒为单位设置key的生存时间，而不是像SETEX命令那样，以秒为单位</td>
</tr>
<tr>
<td>INCR key</td>
<td>将key中存储的数字值+1</td>
</tr>
<tr>
<td>INCRBY key increment</td>
<td>将key所存储的值加上给定的增量值（increment）</td>
</tr>
<tr>
<td>INCRBYFLOAT key increment</td>
<td>将key所存储的值加上给定的负点增量值（increment）</td>
</tr>
<tr>
<td>DECR key</td>
<td>将key中存储的值-1</td>
</tr>
<tr>
<td>DECRBY key decrement</td>
<td>key所存储的值减去给定的减量值</td>
</tr>
<tr>
<td>APPEND key value</td>
<td>如果key已经存在并且是一个字符串，APPEND命令将指定value追加到该key原来值的末尾</td>
</tr>
</tbody></table>
<h2 id="Redis-哈希-Hash"><a href="#Redis-哈希-Hash" class="headerlink" title="Redis 哈希(Hash)"></a>Redis 哈希(Hash)</h2><p>Redis Hash是一个String类型的field（字段）和value（值）的映射表，Hash特别适合用于存储对象<br>Redis中每个hash可以存储2^23-1键值对</p>
<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET runoobkey name <span class="string">&quot;redis tutorial&quot;</span> description <span class="string">&quot;redis basic commands for caching&quot;</span> likes 40 visitors 23000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall runoobkey</span><br><span class="line">name</span><br><span class="line">redis tutorial</span><br><span class="line">description</span><br><span class="line">redis basic commands <span class="keyword">for</span> caching</span><br><span class="line">likes</span><br><span class="line">40</span><br><span class="line">visitors</span><br><span class="line">23000</span><br><span class="line">field</span><br></pre></td></tr></table></figure>

<h3 id="Redis-hash命令"><a href="#Redis-hash命令" class="headerlink" title="Redis hash命令"></a>Redis hash命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>HDEL key field1 [field2]</td>
<td>删除一个或多个哈希表字段</td>
</tr>
<tr>
<td>HEXISTS key fields</td>
<td>查询哈希表key中，指定的字段是否存在</td>
</tr>
<tr>
<td>HGET key field</td>
<td>获取存储在哈希表中指定字段的值</td>
</tr>
<tr>
<td>HGETALL key</td>
<td>获取在哈希表中指定key的所有字段和值</td>
</tr>
<tr>
<td>HINCRBY key field increment</td>
<td>为哈希表key中的指定字段的整数值加上增量incremenent</td>
</tr>
<tr>
<td>HINCRBYFLOAT key field increment</td>
<td>为哈希表key中的指定字段的浮点数值加上增量increment</td>
</tr>
<tr>
<td>HKEYS key</td>
<td>获取所有哈希表中的字段</td>
</tr>
<tr>
<td>HLEN key</td>
<td>获取所有哈希表中的字段的数量</td>
</tr>
<tr>
<td>HMGET key field1 [field2]</td>
<td>获取所有给定字段的值</td>
</tr>
<tr>
<td>HMSET key field1 value1 [field2 value2]</td>
<td>同时将多个field-value对设置到哈希表key中</td>
</tr>
<tr>
<td>HSET key field value</td>
<td>将哈希表key中的字段field的值设置为value</td>
</tr>
<tr>
<td>HSETNX key field value</td>
<td>只有在字段field不存在时，设置哈希表字段的值</td>
</tr>
<tr>
<td>HVALS key</td>
<td>获取哈希表中所有值</td>
</tr>
<tr>
<td>HSCAN key cursor [MATCH pattern][COUNT count]</td>
<td>迭代哈希表中的键值对</td>
</tr>
</tbody></table>
<h2 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或尾部（右边）<br>一个列表最多可以包含2^32-1个元素，大概40亿个元素</p>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush runoobkey redis</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 再塞入两个会返回3，说明list中已经有三个值了</span></span><br><span class="line">127.0.0.1:6379&gt; lpush runoobkey mongodb mysql</span><br><span class="line">3</span><br><span class="line"><span class="comment"># 列出前十一个</span></span><br><span class="line">127.0.0.1:6379&gt; lrange runoobkey 0 10</span><br><span class="line">mysql</span><br><span class="line">mongodb</span><br><span class="line">redis</span><br><span class="line"><span class="comment"># 列出前三个</span></span><br><span class="line">127.0.0.1:6379&gt; lrange runoobkey 0 2</span><br><span class="line">mysql</span><br><span class="line">mongodb</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<p>在以上实例中使用了LPUSH将三个值插入到名为runoobkey的列表中</p>
<h3 id="Redis列表命令"><a href="#Redis列表命令" class="headerlink" title="Redis列表命令"></a>Redis列表命令</h3><p>下表列出的列表相关的基本命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>BLPOP key1 [key2] timeout</td>
<td>移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td>BRPOP key1 [key2] timeout</td>
<td>移出并获取列表最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素位置</td>
</tr>
<tr>
<td>BRPOPLPUSH source destination timeout</td>
<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它；如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td>LINXDE key index</td>
<td>通过索引获取列表中的元素</td>
</tr>
<tr>
<td>LINSERT key BEFORE/AFTER pivot value</td>
<td>在列表的元素前或者后插入元素</td>
</tr>
<tr>
<td>LLEN key</td>
<td>获取列表长度</td>
</tr>
<tr>
<td>LPOP key</td>
<td>移出并获取列表的第一个元素</td>
</tr>
<tr>
<td>LPUSH key value1 [value2]</td>
<td>将一个或多个值插入到列表头部</td>
</tr>
<tr>
<td>LPUSHX key value</td>
<td>将一个值插入到已存在列表头部</td>
</tr>
<tr>
<td>LRANGE key start stop</td>
<td>获取列表指定范围内的元素</td>
</tr>
<tr>
<td>LREM key count value</td>
<td>移除列表元素（这个没搞懂是啥情况）</td>
</tr>
<tr>
<td>LSET key index value</td>
<td>通过索引设置列表元素的值</td>
</tr>
<tr>
<td>LTRIM key start stop</td>
<td>对一个列表进行修剪（trim），就是说，让列表只保留指定区间内的元素，不在指定区间内的元素将被删除</td>
</tr>
<tr>
<td>RPOP key</td>
<td>移除列表的最后一个元素，返回值为移除的元素</td>
</tr>
<tr>
<td>RPOPLPUSH source destination</td>
<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>
</tr>
<tr>
<td>RPUSH key value1[value2]</td>
<td>在列表中添加一个或多个值</td>
</tr>
<tr>
<td>RPUSHX key value</td>
<td>为已存在的列表添加值</td>
</tr>
</tbody></table>
<h2 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h2><p>Redis的Set是String类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据<br>集合对象的编码可以是intset或者hashtable<br>Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)<br>集合中最大的成员数为2^32-1，最多可存储40多亿个成员</p>
<h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先添加三个值</span></span><br><span class="line">127.0.0.1:6379&gt; sadd runoobkey <span class="string">&quot;张三&quot;</span> <span class="string">&quot;李四&quot;</span> <span class="string">&quot;王五&quot;</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次添加张三，发现返回0，说明Set不能添加重复的值</span></span><br><span class="line">127.0.0.1:6379&gt; sadd runoobkey <span class="string">&quot;张三&quot;</span></span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment"># 列出SET中的所有值</span></span><br><span class="line">127.0.0.1:6379&gt; smembers runoobkey</span><br><span class="line">王五</span><br><span class="line">张三</span><br><span class="line">李四</span><br></pre></td></tr></table></figure>
<p>在以上实例中通过SADD命令向名为runoobkey的集合中插入三个元素</p>
<h3 id="Redis集合命令"><a href="#Redis集合命令" class="headerlink" title="Redis集合命令"></a>Redis集合命令</h3><p>下表列出了Redis集合基本命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SADD key member1[member2]</td>
<td>向集合添加一个或多个成员</td>
</tr>
<tr>
<td>SCARD key</td>
<td>获取集合的成员数</td>
</tr>
<tr>
<td>SDIFF key1[key2]</td>
<td>返回第一个集合与其他几何之间的差异</td>
</tr>
<tr>
<td>SDIFFSTORE destination key1 [key2]</td>
<td>返回给定所有集合的差集并存储在destination中，这里的destination是可以自己定义名字的</td>
</tr>
<tr>
<td>SINTER key1[key2]</td>
<td>返回给定所有集合的交集</td>
</tr>
<tr>
<td>SINTERSTORE desnation key1 [key2]</td>
<td>返回给定所有几何的交集并存储在destination中，这里的destination是可以自己定义名字的</td>
</tr>
<tr>
<td>SISMEMBER key member</td>
<td>判断member元素是否是集合key的成员</td>
</tr>
<tr>
<td>SMEMBERS key</td>
<td>返回集合中的所有成员</td>
</tr>
<tr>
<td>SMOVE scource desnation member</td>
<td>将member元素从source集合移动到destination集合</td>
</tr>
<tr>
<td>SPOP key</td>
<td>移除并返回集合中的一个随机元素</td>
</tr>
<tr>
<td>SRANDMEMBER key [count]</td>
<td>返回集合中一个或多个随机数</td>
</tr>
<tr>
<td>SREM key member1 [member2]</td>
<td>移除集合中一个或多个成员</td>
</tr>
<tr>
<td>SUNION key1 [key2]</td>
<td>返回所有给定集合的并集</td>
</tr>
<tr>
<td>SUNIONSTORE desnation key1 [key2]</td>
<td>所有给定集合的并集存储在destination集合中</td>
</tr>
<tr>
<td>SSCAN key cursor[MATCH pattern][COUNT count]</td>
<td>迭代集合中的元素</td>
</tr>
</tbody></table>
<h2 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h2><p>Redis有序集合和集合一样也是一个String类型元素的集合，且不允许重复的成员<br>不同的是每个元素都会关联一个double类型的分数。Redis正式通过分数来为集合中的成员从小到大的排序<br>有序集合的成员是唯一的，但分数score却可以重复<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。集合最大成员数为2^32-1</p>
<h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初次塞入多次MySQL，发现返回值里面显示mysql只能塞入一次</span></span><br><span class="line">127.0.0.1:6379&gt; zadd runoobkey 1 redis 2 mongodb 3 mysql 3 mysql 4 mysql</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次塞入redis也是发现redis不能再次塞入，但是分值可以设进去</span></span><br><span class="line">127.0.0.1:6379&gt; zadd runoobkey 1 redis</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; zrange runoobkey 0 10 withscores</span><br><span class="line">redis</span><br><span class="line">1</span><br><span class="line">mongodb</span><br><span class="line">2</span><br><span class="line">mysql</span><br><span class="line">4</span><br><span class="line">127.0.0.1:6379&gt; zrange runoobkey 0 10</span><br><span class="line">redis</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">127.0.0.1:6379&gt; zrange runoobkey 10</span><br><span class="line">ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;zrange&#x27;</span> <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样没有输出</span></span><br><span class="line">127.0.0.1:6379&gt; zrange runoobkey 10 0</span><br></pre></td></tr></table></figure>

<h3 id="Redis有序集合命令"><a href="#Redis有序集合命令" class="headerlink" title="Redis有序集合命令"></a>Redis有序集合命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ZADD key score1 member1 [score2 member2]</td>
<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
</tr>
<tr>
<td>ZCARD key</td>
<td>获取有序集合的成员数</td>
</tr>
<tr>
<td>ZCOUNT key min max</td>
<td>计算在有序集合中指定区间分数的成员数</td>
</tr>
<tr>
<td>ZINCRBY key increment member</td>
<td>有序集合中对指定成员的分数上增加increment</td>
</tr>
<tr>
<td>ZINTERSTORE destination numkeys key[key…]</td>
<td>计算给定的一个或多个有序的交集并将结果集存储在新的有序集合destination中</td>
</tr>
<tr>
<td>ZLEXCOUNT key min max</td>
<td>在有序集合中计算指定字典区间内成员数量</td>
</tr>
<tr>
<td>ZRANGE key start stop [WITHSCORES]</td>
<td>通过索引区间返回有序集合指定区间内的成员</td>
</tr>
<tr>
<td>ZRANGEBYLEX key min max[LIMIT offset count]</td>
<td>通过字典区间返回有序集合的成员</td>
</tr>
<tr>
<td>ZRANGEBYSOCRE</td>
<td>通过分数返回有序集合指定区间内的成员</td>
</tr>
<tr>
<td>ZRANK key member</td>
<td>返回有序集合中指定成员的索引</td>
</tr>
<tr>
<td>ZREM key member[member]</td>
<td>移除有序集合中的一个或多个成员</td>
</tr>
<tr>
<td>ZREMRANGEBYLEX key min max</td>
<td>移除有序集合中给定的字典区间的所有成员</td>
</tr>
<tr>
<td>ZREMRANGEBYRANK key start stop</td>
<td>移除有序集合中给定的排名区间的所有成员</td>
</tr>
<tr>
<td>ZREMRANGEBYSCORE key min max</td>
<td>移除有序集合中给定的分数区间的所有成员</td>
</tr>
<tr>
<td>ZREVRANGE key start stop [WITHSCORES]</td>
<td>返回有序集合中指定区间内的成员，通过索引，分数从高到低</td>
</tr>
<tr>
<td>ZREVRANGEBYSOCRE key by max min [WITHSCORES]</td>
<td>返回有续集中指定区间内的成员，分数从高到低排序</td>
</tr>
<tr>
<td>ZREVRANK key member</td>
<td>返回有序集合中指定成员的排序，有序成员按分数值递减（从大到小）排序</td>
</tr>
<tr>
<td>ZSCORE key number</td>
<td>返回有序集中，成员的分数值</td>
</tr>
<tr>
<td>ZUNIONSTORE destination numkeys key[key…]</td>
<td>计算给定的一个或多个有序集合的并集，并存储在新的key中</td>
</tr>
<tr>
<td>ZSCAN key cursor[MATCH pattern][COUNT count]</td>
<td>迭代有序集合中的元素（包括元素成员和元素分值）</td>
</tr>
</tbody></table>
<h2 id="Redis-HyperLogLog-这个也是一脸蒙圈"><a href="#Redis-HyperLogLog-这个也是一脸蒙圈" class="headerlink" title="Redis HyperLogLog(这个也是一脸蒙圈)"></a>Redis HyperLogLog(这个也是一脸蒙圈)</h2><p>Redis在2.8.9版本中添加了HyperLogLog结构<br>Redis HyperLogLog是用来做基数统计的算法，HyperLogLog的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需要的空间总是固定的，并且是很小的<br>在Redis里面，每个HyperLogLog键只需要话费12KB内存，就可以计算接近2^64个不同元素的技术。这和计算基数时，元素越多越耗费内存就越多的集合形成鲜明对比<br>但是，因为HyperLogLog智慧根据输入元素来计算基数，而不会存储输入元素本身，所以HyperLogLog不像集合那样，返回输入的各个元素</p>
<h3 id="什么是基数"><a href="#什么是基数" class="headerlink" title="什么是基数"></a>什么是基数</h3><p>比如数据集{1,3,5,7,5,7,8}，那么这个数据集基数集为{1,3,5,7,8}，基数（不重复元素）为5。技术估计就是在误差科技收范围内，快速计算基数</p>
<h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>以下实例演示了HpyerLogLog的工作过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD runoobkey <span class="string">&quot;redis&quot;</span></span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFADD runoobkey <span class="string">&quot;mongodb&quot;</span></span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFADD runoobkey <span class="string">&quot;mysql&quot;</span></span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT runoobkey</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="HyperLogLog命令"><a href="#HyperLogLog命令" class="headerlink" title="HyperLogLog命令"></a>HyperLogLog命令</h3><p>下表列出了redis HyperLogLog的基本命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PFADD key element [element]</td>
<td>添加指定元素到HyperLogLog中</td>
</tr>
<tr>
<td>PFCOUNT key [key]</td>
<td>返回给定HyperLogLog的基数估算值</td>
</tr>
<tr>
<td>PFMERGE destkey sourcekey [scourekey…]</td>
<td>将多个HyperLogLog合并为一个HyperLogLog</td>
</tr>
</tbody></table>
<h2 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h2><p>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息<br>Redis客户端可以订阅任意数量的频道<br>下面展示了频道channel1，以及订阅这个频道的三个客户端——client2\client5和client1之间的关系：</p>
<img src="/2021/11/26/Redis%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/screenshot_1.png" class="">
<p>当有新消息通过PUBLISH命令发送给频道channel1时，这个消息就会被发送给订阅它的三个客户端：</p>
<img src="/2021/11/26/Redis%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/screenshot_2.png" class="">

<h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>以下实例演示了发布订阅是如何工作的，需要开启两个redis-cli客户端<br>在市里中我们创建了订阅频道名为runoobChat</p>
<ol>
<li><p>创建两个redis-cli客户端，分别执行下面的代码，也就是订阅Channel runoobChat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE runoobChat</span><br></pre></td></tr></table></figure></li>
<li><p>再创建一个redis-cli客户端，发布消息到Channel，查看前面两个客户端的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里返回打印出的2是指有几个订阅的客户端接收到了消息</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br><span class="line">2</span><br><span class="line"><span class="comment"># 使用Channel发送JSON字符串</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;&#123;\&quot;status\&quot;:0,\&quot;message\&quot;:\&quot;query ok\&quot;,\&quot;request_id\&quot;:\&quot;1470159978155424933\&quot;,\&quot;result\&quot;:&#123;\&quot;rows\&quot;:[&#123;\&quot;elements\&quot;:[&#123;\&quot;distance\&quot;:15590&#125;,&#123;\&quot;distance\&quot;:95124&#125;]&#125;]&#125;&#125;&quot;</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这块是其中一个客户端接收到消息之后打印的内容</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE runoobChat</span><br><span class="line">subscribe</span><br><span class="line">runoobChat</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">message</span><br><span class="line">runoobChat</span><br><span class="line">Learn redis by runoob.com</span><br><span class="line"></span><br><span class="line">message</span><br><span class="line">runoobChat</span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>:0,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;query ok&quot;</span>,<span class="string">&quot;request_id&quot;</span>:<span class="string">&quot;1470159978155424933&quot;</span>,<span class="string">&quot;result&quot;</span>:&#123;<span class="string">&quot;rows&quot;</span>:[&#123;<span class="string">&quot;elements&quot;</span>:[&#123;<span class="string">&quot;distance&quot;</span>:15590&#125;,&#123;<span class="string">&quot;distance&quot;</span>:95124&#125;]&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Redis命令发布订阅命令"><a href="#Redis命令发布订阅命令" class="headerlink" title="Redis命令发布订阅命令"></a>Redis命令发布订阅命令</h3><p>下表列出了redis发布订阅常用命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PSUBSCRIBE pattern[pattern…]</td>
<td>订阅一个或多个符合给定模式的频道</td>
</tr>
<tr>
<td>PUBSUB subcommand[argument[argument…]]</td>
<td>查看订阅与发布系统状态</td>
</tr>
<tr>
<td>PUBLISH channel message</td>
<td>将信息发送到指定的频道</td>
</tr>
<tr>
<td>PUNSUBSCRIBE[pattern[pattern]]</td>
<td>退订所有给定模式的频道</td>
</tr>
<tr>
<td>SUBSCRIBE channel[channel…]</td>
<td>订阅给定的一个或多个频道的信息</td>
</tr>
<tr>
<td>UNSUBSCRIBE[channel[channel…]]</td>
<td>指退订给定的频道</td>
</tr>
</tbody></table>
<h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><p>Redis事务可以一次执行多个命令，并且带有以下三个重要的保证</p>
<ul>
<li>批量操作在发送EXEC命令前被放入队列缓存</li>
<li>收到EXEC命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行</li>
<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中</li>
</ul>
<p>一个事务从开始到执行会经历以下三个阶段</p>
<ul>
<li>开始事务</li>
<li>命令入队</li>
<li>执行事务</li>
</ul>
<h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>一下是一个事务的例子，它先以MULTI开始一个事务，然后将多个命令入队到事务中，最后由EXEC命令触发事务，一并执行事务中的所有命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET book-name <span class="string">&quot;Mastering C++ in 21 Days&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; GET book-name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; SADD tag <span class="string">&quot;C++&quot;</span> <span class="string">&quot;Programing&quot;</span> <span class="string">&quot;Mastering Series&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; SMEMBERS tag</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">OK</span><br><span class="line">Mastering C++ <span class="keyword">in</span> 21 Days</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">Mastering Series</span><br><span class="line">Programing</span><br><span class="line">C++</span><br></pre></td></tr></table></figure>
<p>单个Redis命令的执行是原子性的，但Redis没有再事物上增加任何维持原子性的机制，所以Redis事务的执行并不是原子性的<br><font color='red'>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续指令不执行。</font></p>
<h3 id="Redis事务命令"><a href="#Redis事务命令" class="headerlink" title="Redis事务命令"></a>Redis事务命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DISCARD</td>
<td>取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td>EXEC</td>
<td>执行所有事务块内的命令</td>
</tr>
<tr>
<td>MULTI</td>
<td>标记一个事务块的开始</td>
</tr>
<tr>
<td>UNWATCH</td>
<td>取消WATCH命令对所有key的监视</td>
</tr>
<tr>
<td>WATCH key[key…]</td>
<td>监视一个（或多个）key，如果在事务执行之前这个（或这些）key被其他命令所改动，那么事务将被打断</td>
</tr>
</tbody></table>
<h2 id="Redis-脚本"><a href="#Redis-脚本" class="headerlink" title="Redis 脚本"></a>Redis 脚本</h2><p>Redis脚本使用Lua解释器来执行脚本。Redis2.6版本通过内嵌支持Lua环境。执行脚本的常用命令为EVAL</p>
<h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><p>Eval命令的基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure>

<h4 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h4><p>以下实例演示了redis脚本的工作过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot;</span> 2 key1 key2 first second</span><br><span class="line"></span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">2) <span class="string">&quot;key2&quot;</span></span><br><span class="line">3) <span class="string">&quot;first&quot;</span></span><br><span class="line">4) <span class="string">&quot;second&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Redis-脚本命令"><a href="#Redis-脚本命令" class="headerlink" title="Redis 脚本命令"></a>Redis 脚本命令</h3><p>下表列出了redis脚本常用命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EVAL script numkeys key[key….] arg [arg…]</td>
<td>执行Lua脚本</td>
</tr>
<tr>
<td>EVALSHA sha1 numkeys key[key…] arg [arg…]</td>
<td>执行Lua脚本</td>
</tr>
<tr>
<td>SCRIPT EXISTS script [script]</td>
<td>查看指定的脚本是否已经被保存在缓存当中</td>
</tr>
<tr>
<td>SCRIPT FLUSH</td>
<td>从脚本缓存中移除所有脚本</td>
</tr>
<tr>
<td>SCRIPT KILL</td>
<td>杀死当前正在运行Lua脚本</td>
</tr>
<tr>
<td>SCRIPT LOAD script</td>
<td>将脚本script添加到脚本缓存中，但并不立即执行这个脚本</td>
</tr>
</tbody></table>
<h2 id="Redis-连接"><a href="#Redis-连接" class="headerlink" title="Redis 连接"></a>Redis 连接</h2><p>Redis连接命令主要是用于连接redis服务</p>
<h4 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h4><p>以下实例演示了客户端如何通过密码验证连接到redis服务，并检测服务是否正常运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost src]<span class="comment"># ./redis-cli</span></span><br><span class="line"><span class="comment"># 测试服务是否正常启动，但现实没有验证</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证登录</span></span><br><span class="line">127.0.0.1:6379&gt; auth <span class="string">&quot;password&quot;</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次验证</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<h3 id="Redis连接命令"><a href="#Redis连接命令" class="headerlink" title="Redis连接命令"></a>Redis连接命令</h3><p>下表列出了Redis连接的基本命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>AUTH password</td>
<td>验证密码是否正确</td>
</tr>
<tr>
<td>ECHO message</td>
<td>打印字符串</td>
</tr>
<tr>
<td>PING</td>
<td>查看服务是否运行</td>
</tr>
<tr>
<td>QUIT</td>
<td>关闭当前连接</td>
</tr>
<tr>
<td>SELECT index</td>
<td>切换到指定的数据库</td>
</tr>
</tbody></table>
<h2 id="Redis-服务器"><a href="#Redis-服务器" class="headerlink" title="Redis 服务器"></a>Redis 服务器</h2><p>Redis服务器命令主要用于管理Redis服务</p>
<h4 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h4><p>以下实例演示了如何获取Redis服务器的统计信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INFO</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:6.2.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:5b32ed733d8318b</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1160.15.2.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.8.5</span><br><span class="line">process_id:1691</span><br><span class="line">process_supervised:no</span><br><span class="line">run_id:86182af17f53bcd42de54d6a5a3214b9f1463677</span><br><span class="line">tcp_port:6379</span><br><span class="line">server_time_usec:1638258010315791</span><br><span class="line">uptime_in_seconds:106261</span><br><span class="line">uptime_in_days:1</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:10868058</span><br><span class="line">executable:/root/Download/redis-6.2.6/src/redis-server</span><br><span class="line">config_file:/root/Download/redis-6.2.6/redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clients</span></span><br><span class="line">connected_clients:3</span><br><span class="line">cluster_connections:0</span><br><span class="line">maxclients:10000</span><br><span class="line">client_recent_max_input_buffer:32</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:929752</span><br><span class="line">used_memory_human:907.96K</span><br><span class="line">used_memory_rss:10608640</span><br><span class="line">used_memory_rss_human:10.12M</span><br><span class="line">used_memory_peak:1029640</span><br><span class="line">used_memory_peak_human:1005.51K</span><br><span class="line">used_memory_peak_perc:90.30%</span><br><span class="line">used_memory_overhead:872744</span><br><span class="line">used_memory_startup:810152</span><br><span class="line">used_memory_dataset:57008</span><br><span class="line">used_memory_dataset_perc:47.67%</span><br><span class="line">allocator_allocated:1034848</span><br><span class="line">allocator_active:1413120</span><br><span class="line">allocator_resident:3780608</span><br><span class="line">total_system_memory:3788079104</span><br><span class="line">total_system_memory_human:3.53G</span><br><span class="line">used_memory_lua:37888</span><br><span class="line">used_memory_lua_human:37.00K</span><br><span class="line">used_memory_scripts:0</span><br><span class="line">used_memory_scripts_human:0B</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.37</span><br><span class="line">allocator_frag_bytes:378272</span><br><span class="line">allocator_rss_ratio:2.68</span><br><span class="line">allocator_rss_bytes:2367488</span><br><span class="line">rss_overhead_ratio:2.81</span><br><span class="line">rss_overhead_bytes:6828032</span><br><span class="line">mem_fragmentation_ratio:11.96</span><br><span class="line">mem_fragmentation_bytes:9721656</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:61504</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.1.0</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">current_cow_size:0</span><br><span class="line">current_cow_size_age:0</span><br><span class="line">current_fork_perc:0.00</span><br><span class="line">current_save_keys_processed:0</span><br><span class="line">current_save_keys_total:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1638256678</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:1</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:4665344</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:0</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stats</span></span><br><span class="line">total_connections_received:17</span><br><span class="line">total_commands_processed:10722</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:161920</span><br><span class="line">total_net_output_bytes:23475829</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:1</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">expire_cycle_cpu_milliseconds:874</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:194</span><br><span class="line">keyspace_misses:9</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:899</span><br><span class="line">total_forks:13</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">tracking_total_keys:0</span><br><span class="line">tracking_total_items:0</span><br><span class="line">tracking_total_prefixes:0</span><br><span class="line">unexpected_error_replies:0</span><br><span class="line">total_error_replies:17</span><br><span class="line">dump_payload_sanitizations:0</span><br><span class="line">total_reads_processed:10741</span><br><span class="line">total_writes_processed:10743</span><br><span class="line">io_threaded_reads_processed:0</span><br><span class="line">io_threaded_writes_processed:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:dc011adef814ac9dc79ca81e3dcdf20b0f8f1110</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU</span></span><br><span class="line">used_cpu_sys:43.479305</span><br><span class="line">used_cpu_user:53.478205</span><br><span class="line">used_cpu_sys_children:0.051377</span><br><span class="line">used_cpu_user_children:0.013774</span><br><span class="line">used_cpu_sys_main_thread:43.106482</span><br><span class="line">used_cpu_user_main_thread:53.191999</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Errorstats</span></span><br><span class="line">errorstat_ERR:count=8</span><br><span class="line">errorstat_NOAUTH:count=5</span><br><span class="line">errorstat_WRONGTYPE:count=4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster</span></span><br><span class="line">cluster_enabled:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Keyspace</span></span><br><span class="line">db0:keys=20,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure>

<h3 id="Redis服务器命令"><a href="#Redis服务器命令" class="headerlink" title="Redis服务器命令"></a>Redis服务器命令</h3><p>下表列出了Redis服务器的相关命令</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BGREWRITEAOF</td>
<td align="left">异步执行一个AOF（appendonly File）文件重写操作</td>
</tr>
<tr>
<td align="left">BGSAVE</td>
<td align="left">在后台异步保存当前数据库的数据到磁盘</td>
</tr>
<tr>
<td align="left">CLIENT KILL [ip:port].[ID client-id]</td>
<td align="left">关闭客户端连接</td>
</tr>
<tr>
<td align="left">CLIENT LIST</td>
<td align="left">获取链接到服务器的客户端连接列表</td>
</tr>
<tr>
<td align="left">CLIENT GETNAME</td>
<td align="left">获取连接的名称</td>
</tr>
<tr>
<td align="left">CLIENT PAUSE timeout</td>
<td align="left">在指定时间内终止运行来自客户端的命令</td>
</tr>
<tr>
<td align="left">CLIENT SETNAME connection-name</td>
<td align="left">设置当前连接的名称</td>
</tr>
<tr>
<td align="left">CLUSTER SLOTS</td>
<td align="left">获取集群节点的映射数组</td>
</tr>
<tr>
<td align="left">COMMAND</td>
<td align="left">获取Redis命令详情数组</td>
</tr>
<tr>
<td align="left">COMMAND COUNT</td>
<td align="left">获取Redis命令总和</td>
</tr>
<tr>
<td align="left">COMMAND GETKEYS</td>
<td align="left">获取给定命令的所有键</td>
</tr>
<tr>
<td align="left">TIME</td>
<td align="left">返回当前服务器时间</td>
</tr>
<tr>
<td align="left">COMMAND INFO command-name[command-name]</td>
<td align="left">获取指定Redis命令描述的数组</td>
</tr>
<tr>
<td align="left">CONFIG GET parameter</td>
<td align="left">获取指定配置参数的值</td>
</tr>
<tr>
<td align="left">CONFIG REWRITE</td>
<td align="left">对启动Redis服务器时所指定的Redis.conf配置文件进行改写</td>
</tr>
<tr>
<td align="left">CONFIG SET parameter value</td>
<td align="left">修改redis配置参数，无需重启</td>
</tr>
<tr>
<td align="left">CONFIG RESETSTAT</td>
<td align="left">重置INFO命令中的某些统计数据</td>
</tr>
<tr>
<td align="left">DBSIZE</td>
<td align="left">返回当前数据库的key的数量</td>
</tr>
<tr>
<td align="left">DEBUG OBJECT key</td>
<td align="left">获取key的调试信息</td>
</tr>
<tr>
<td align="left">DEBUG SEGFAULT</td>
<td align="left">让Redis服务器崩溃，闲着没事可别执行这个，服务直接宕掉了</td>
</tr>
<tr>
<td align="left">FLUSHALL</td>
<td align="left">删除所有数据库的所有key</td>
</tr>
<tr>
<td align="left">FLUSHDB</td>
<td align="left">删除当前数据库的所有key</td>
</tr>
<tr>
<td align="left">INFO [section]</td>
<td align="left">获取Redis服务器的各种信息和统计数值</td>
</tr>
<tr>
<td align="left">LASTSAVE</td>
<td align="left">返回最近一次Redis成功将数据保存到磁盘上的时间，以UNIX时间戳格式表示</td>
</tr>
<tr>
<td align="left">MONITOR</td>
<td align="left">实时打印Redis服务器接收到的命令，调试用的</td>
</tr>
<tr>
<td align="left">ROLE</td>
<td align="left">返回主从实例所属的角色</td>
</tr>
<tr>
<td align="left">SAVE</td>
<td align="left">同步保存数据到硬盘</td>
</tr>
<tr>
<td align="left">SHUTDOWN [NOSAVE][SAVE]</td>
<td align="left">异步保存保存数据到磁盘，并关闭服务器</td>
</tr>
<tr>
<td align="left">SLAVEOF host port</td>
<td align="left">将当前服务器变为指定服务器的从属服务器（slave server）</td>
</tr>
<tr>
<td align="left">SLOWLOG subcommand[arguments]</td>
<td align="left">管理Redis的慢日志</td>
</tr>
<tr>
<td align="left">SYNC</td>
<td align="left">用于复制功能（replication）的内部命令</td>
</tr>
</tbody></table>
<h2 id="Redis-GEO"><a href="#Redis-GEO" class="headerlink" title="Redis GEO"></a>Redis GEO</h2><p>Redis GEO主要用来存储地理位置信息，并对存储的信息进行操作，该功能在Redis3.2中新增<br>Redis GEO操作的主要方法有：</p>
<ul>
<li>geoadd：添加地理位置的坐标</li>
<li>geopos：获取地理位置的坐标</li>
<li>geodist：计算两个位置之间的距离</li>
<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</li>
<li>georadiusbymembers：根据存储在位置及河里面的某个地点获取指定范围内的地理位置集合</li>
<li>geohash：返回一个或多个位置对象的geohash值</li>
</ul>
<h3 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h3><p>geoadd用于存储指定的地理空间位置，可以将一个或多个经度、维度、未知名称添加到指定的key中<br>geoadd语法格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GEOADD key longitude latitude member [longitude latitude member......]</span><br></pre></td></tr></table></figure>
<p>以下实例中key为Sicily，Parlermp和Catania为位置名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis&gt; GEOADD Sicily 13.361389 38.115556 <span class="string">&quot;Palermo&quot;</span> 15.087269 37.502669 <span class="string">&quot;Catania&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是计算距离的，（distance）</span></span><br><span class="line">redis&gt; GEODIST Sicily Palermo Catania</span><br><span class="line"><span class="string">&quot;166274.1516&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是指按照指定经纬度范围内100km内存在的地理位置</span></span><br><span class="line">redis&gt; GEORADIUS Sicily 15.00003,37.000004 100 km</span><br><span class="line">1) <span class="string">&quot;Catania&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是指按照指定经纬度范围内200km内存在的地理位置</span></span><br><span class="line">redis&gt; GEORADIUS Sicily 15.00003,37.000004 200 km</span><br><span class="line">1) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line">2) <span class="string">&quot;Catania&quot;</span></span><br><span class="line">redis&gt;</span><br></pre></td></tr></table></figure>

<h3 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h3><p>geopos用于从给定的key里返回所有指定名称（member）的位置（经度和维度），不能存在的返回nil<br>geopos语法格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GEOPOS key member [member...]</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis&gt; GEOADD Sicily 13.361389 38.115556 <span class="string">&quot;Palermo&quot;</span> 15.087269 37.502669 <span class="string">&quot;Catania&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 这里的NonExisting是指的不存在的一条数据</span></span><br><span class="line">redis&gt; GEOPOS Sicily Palermo Catania NonExisting</span><br><span class="line">1) 1) <span class="string">&quot;13.36138933897018433&quot;</span></span><br><span class="line">   2) <span class="string">&quot;38.11555639549629859&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;15.08726745843887329&quot;</span></span><br><span class="line">   2) <span class="string">&quot;37.50266842333162032&quot;</span></span><br><span class="line">3) (nil)</span><br><span class="line">redis&gt;</span><br></pre></td></tr></table></figure>

<h3 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h3><p>geodist用于返回两个给定位置之间的距离<br>geodist语法格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GEODIST key member1 member2[m|km|ft|mi]</span><br></pre></td></tr></table></figure>
<p>member1 member2为两个地理位置<br>最后一个距离单位参数说明：</p>
<ul>
<li>m:米，默认单位</li>
<li>km:千米</li>
<li>mi:英里</li>
<li>ft:英尺</li>
</ul>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis&gt; GEOADD Sicily 13.361389 38.115556 <span class="string">&quot;Palermo&quot;</span> 15.087269 37.502669 <span class="string">&quot;Catania&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 不设置，默认为米</span></span><br><span class="line">redis&gt; GEODIST Sicily Palermo Catania</span><br><span class="line"><span class="string">&quot;166274.1516&quot;</span></span><br><span class="line"><span class="comment"># 千米</span></span><br><span class="line">redis&gt; GEODIST Sicily Palermo Catania km</span><br><span class="line"><span class="string">&quot;166.2742&quot;</span></span><br><span class="line"><span class="comment"># 英里</span></span><br><span class="line">redis&gt; GEODIST Sicily Palermo Catania mi</span><br><span class="line"><span class="string">&quot;103.3182&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个没有的地址</span></span><br><span class="line">redis&gt; GEODIST Sicily Foo Bar</span><br><span class="line">(nil)</span><br><span class="line">redis&gt;</span><br></pre></td></tr></table></figure>

<h3 id="georadius-georadiusbymember"><a href="#georadius-georadiusbymember" class="headerlink" title="georadius georadiusbymember"></a>georadius georadiusbymember</h3><p>georadius以给定的经纬度为中心，返回键包含的位置元素当中，与中心距离不超过给定最大距离的所有位置元素<br>georadiusbymember和GEORADIUS命令一样，都可以找出位于指定范围内的元素，但是GEORADIUSBYMEMBER的中心店是由给定的位置元素决定的，而不是使用经度和维度来决定中心点<br>georadius和georadiusbymember语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br><span class="line">GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>m:米，默认单位</li>
<li>km:千米</li>
<li>mi:英里</li>
<li>ft:英尺</li>
<li>WITHDIST:在返回位置元素的同时，将位置元素与中心之间的距离也一并返回</li>
<li>WITHCOORD:将位置元素的精度和维度也一并返回</li>
<li>WITHHASH:以52位有符号整数的形式，返回位置元素经过原始geohash编码的有序集合分值。这个选项主要用于底层应用或者调试，实际中的作用并不大。</li>
<li>COUNT:限定返回的记录数</li>
<li>ASC:查找结果根据距离从近道远排序</li>
<li>DESC:查找结果根据从远到近排序</li>
</ul>
<p>georadius实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加地理位置坐标到Redis中</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd Sicily 13.361389 38.115556 <span class="string">&quot;Palermo&quot;</span> 15.087269 37.502669 <span class="string">&quot;Catania&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找坐标（15.1232 37.8723）附近200公里内的坐标点并携带距离</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15.1232 37.8723 200 km WITHDIST</span><br><span class="line">1) 1) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line">   2) <span class="string">&quot;156.7808&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;Catania&quot;</span></span><br><span class="line">   2) <span class="string">&quot;41.2342&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找坐标（15.1232 37.8723）附近200公里内的坐标点并携带点的坐标</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15.1232 37.8723 200 km WITHCOORD</span><br><span class="line">1) 1) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;13.36138933897018433&quot;</span></span><br><span class="line">      2) <span class="string">&quot;38.11555639549629859&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;Catania&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;15.08726745843887329&quot;</span></span><br><span class="line">      2) <span class="string">&quot;37.50266842333162032&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找坐标（15.1232 37.8723）附近200公里内的坐标点并携带点的坐标和点的距离</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15.1232 37.8723 200 km WITHCOORD WITHDIST</span><br><span class="line">1) 1) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line">   2) <span class="string">&quot;156.7808&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;13.36138933897018433&quot;</span></span><br><span class="line">      2) <span class="string">&quot;38.11555639549629859&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;Catania&quot;</span></span><br><span class="line">   2) <span class="string">&quot;41.2342&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;15.08726745843887329&quot;</span></span><br><span class="line">      2) <span class="string">&quot;37.50266842333162032&quot;</span></span><br></pre></td></tr></table></figure>

<p>georadiusbymember实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加坐标点Agrigento</span></span><br><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.583333 37.316667 <span class="string">&quot;Agrigento&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印坐标点Agrigento城市附近100公里的城市点并包含自己</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER Sicily Agrigento 100 km</span><br><span class="line">1) <span class="string">&quot;Agrigento&quot;</span></span><br><span class="line">2) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<h3 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h3><p>Redis GEO使用geohash来保存地理位置坐标，geohash用于获取一个或多个位置元素的geohash值，geohash语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GEOHASH key member</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash Sicily Agrigento Catania</span><br><span class="line">1) <span class="string">&quot;sq9sm1716e0&quot;</span></span><br><span class="line">2) <span class="string">&quot;sqdtr74hyu0&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-Stream"><a href="#Redis-Stream" class="headerlink" title="Redis Stream"></a>Redis Stream</h2><p>Redis Stream是5.0之后才新增的数据结构，主要用于消息队列(MQ)，<font color='red'>Redis本身是有一个Redis发布订阅来实现消息队列的功能，但他有个缺点就是消息无法持久化，如果出现网络断开、Redis宕机等，消息就会被丢弃。简单来说发布订阅可以分发消息，但无法记录历史消息</font>，而Redis Stream提供了消息的持久化和主备复制功能可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。<br>Redis Stream的结构如下所示，他有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的ID和对应的内容</p>
<img src="/2021/11/26/Redis%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/screenshot_3.png" class="">

<p>每个Stream都有一个唯一的名称，他就是Redis的key，在我们首次使用xadd指令追加消息时自动创建<br>解析：</p>
<ul>
<li>Consumer Group:消费组，使用XGROUP CREATE命令创建，一个消费组有多个消费者</li>
<li>last_delivered_id:游标，每个消费组会有个游标last_delivered_id，任何一个消费者读取了消息都会使游标往前移动</li>
<li>pending_ids:消费者的状态变量，作用是维护消费者的未确认的id。pending_ids记录了当前已经被客户端读取的消息，但是还没有ack（Ackhowledge character：确认字符）</li>
</ul>
<p>消息队列相关命令</p>
<ul>
<li>XADD:添加消息到末尾</li>
<li>XTERM:对流进行修剪，限制长度</li>
<li>XDEL:删除消息</li>
<li>XLEN:获取流包含的元素数量，即消息长度</li>
<li>XRANGE:获取消息列表，会自动过滤已经删除的消息</li>
<li>XREVRANGE:反向获取消息列表，ID从大到小</li>
<li>XREAD:以阻塞或非阻塞方式获取消息列表</li>
</ul>
<p>消费者组相关命令</p>
<ul>
<li>XGROUP CREATE:创建消费者组</li>
<li>XREADGROUP GROUP:读取消息者组中的消息</li>
<li>XACK:将消息标记为已处理</li>
<li>XGROUP SETID:为消费者组设置新的最后递送消息ID</li>
<li>XGROUP DELCONSUMER:删除消费者</li>
<li>XGROUP DESTROY:删除消费者组</li>
<li>XPENDING:显示待处理消息的相关信息</li>
<li>XCLAIM:转移消息的归属权</li>
<li>XINFO:查看流和消费者组的相关信息</li>
<li>XINFO GROUPS:打印消费者组的信息</li>
<li>XINFO STREAM:打印流信息</li>
</ul>
<h3 id="XADD"><a href="#XADD" class="headerlink" title="XADD"></a>XADD</h3><p>使用XADD向队列添加消息，如果指定的队列不存在，则创建一个队列，XADD语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XADD key ID field value[field value......]</span><br></pre></td></tr></table></figure>
<ul>
<li>key:队列名称，如果不存在就创建</li>
<li>ID:消息id，我们使用*表示由Redis生成，可以自定义，但是要自己保证递增型</li>
<li>field value:记录<br>实例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一条消息到mystream，如果mystream，自动创建，然后塞入消息</span></span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * name Peng surname Zhang</span><br><span class="line"><span class="string">&quot;1641266178194-0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再添加多条消息到stream中</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mystream * field1 value1 field2 value2 field3 value3</span><br><span class="line"><span class="string">&quot;1641266230242-0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印stream的长度</span></span><br><span class="line">127.0.0.1:6379&gt; XLEN mystream</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现redis是区分大小写的</span></span><br><span class="line">127.0.0.1:6379&gt; XLEN MYSTREAM</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令在这里没有看懂，看打印内容的意思是把所有的都打印出来</span></span><br><span class="line">127.0.0.1:6379&gt; XRANGE mystream - +</span><br><span class="line">1) 1) <span class="string">&quot;1641266178194-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Peng&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Zhang&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1641266230242-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;value1&quot;</span></span><br><span class="line">      3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;value2&quot;</span></span><br><span class="line">      5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;value3&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="XTRIM"><a href="#XTRIM" class="headerlink" title="XTRIM"></a>XTRIM</h3><p>使用XTRIM对流进行修剪，限制长度，语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XTRIM key MAXLEN [~] count</span><br></pre></td></tr></table></figure>
<ul>
<li>key:队列名称</li>
<li>MAXLEN:长度</li>
<li>count:数量</li>
</ul>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一个新的消息到队列中</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mystream * field1 A field2 B field3 C field4 D</span><br><span class="line"><span class="string">&quot;1641266533399-0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置队列的最大长度为2</span></span><br><span class="line">127.0.0.1:6379&gt; XTRIM mystream MAXLEN 2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现最早插入的队列已经没了，被删除掉了？</span></span><br><span class="line">127.0.0.1:6379&gt; XRANGE mystream - +</span><br><span class="line">1) 1) <span class="string">&quot;1641266230242-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;value1&quot;</span></span><br><span class="line">      3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;value2&quot;</span></span><br><span class="line">      5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;value3&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1641266533399-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;A&quot;</span></span><br><span class="line">      3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;B&quot;</span></span><br><span class="line">      5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;C&quot;</span></span><br><span class="line">      7) <span class="string">&quot;field4&quot;</span></span><br><span class="line">      8) <span class="string">&quot;D&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="XDEL"><a href="#XDEL" class="headerlink" title="XDEL"></a>XDEL</h3><p>使用XDEL删除消息，语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XDEL key ID[ID...]</span><br></pre></td></tr></table></figure>
<ul>
<li>key:队列名称</li>
<li>ID:消息ID</li>
</ul>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD mystream * a 1</span><br><span class="line"><span class="string">&quot;1641273066638-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * b 2</span><br><span class="line"><span class="string">&quot;1641273073709-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * c 3</span><br><span class="line"><span class="string">&quot;1641273077267-0&quot;</span></span><br><span class="line"><span class="comment"># 删除b2</span></span><br><span class="line">127.0.0.1:6379&gt; XDEL mystream 1641273073709-0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; XRANGE mystream - +</span><br><span class="line">1) 1) <span class="string">&quot;1641266230242-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;value1&quot;</span></span><br><span class="line">      3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;value2&quot;</span></span><br><span class="line">      5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;value3&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1641266533399-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;A&quot;</span></span><br><span class="line">      3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;B&quot;</span></span><br><span class="line">      5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;C&quot;</span></span><br><span class="line">      7) <span class="string">&quot;field4&quot;</span></span><br><span class="line">      8) <span class="string">&quot;D&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;1641273066638-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;a&quot;</span></span><br><span class="line">      2) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment"># 删除了B</span></span><br><span class="line">4) 1) <span class="string">&quot;1641273077267-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;c&quot;</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="XLEN"><a href="#XLEN" class="headerlink" title="XLEN"></a>XLEN</h3><p>使用XLEN获取流包含的元素数量，即消息长度，语法格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XLEN key</span><br></pre></td></tr></table></figure>
<ul>
<li>key:队列名称</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD mystream * item 1</span><br><span class="line"><span class="string">&quot;1641273452348-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * item 2</span><br><span class="line"><span class="string">&quot;1641273454368-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * item 3</span><br><span class="line"><span class="string">&quot;1641273456917-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XLEN mystream</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<h3 id="XRANGE"><a href="#XRANGE" class="headerlink" title="XRANGE"></a>XRANGE</h3><p>使用XRANGE获取消息列表，会自动过滤已经删除的消息，语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XRANGE key start end [COUNT count]</span><br></pre></td></tr></table></figure>
<ul>
<li>key:队列名</li>
<li>start:开始值，-表示最小值</li>
<li>end:结束值，+表示最大值</li>
<li>count:数量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD writers * name Jane surname Austen</span><br><span class="line"><span class="string">&quot;1641273704421-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Toni surname Morrison</span><br><span class="line"><span class="string">&quot;1641273710312-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Agatha surname Christie</span><br><span class="line"><span class="string">&quot;1641273716551-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Ngozi surname Adichie</span><br><span class="line"><span class="string">&quot;1641273722851-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Virginia surname Woolf</span><br><span class="line"><span class="string">&quot;1641273753450-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XLEN writers</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; XRANGE writers - + COUNT 5</span><br><span class="line">1) 1) <span class="string">&quot;1641273704421-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Jane&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Austen&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1641273710312-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Toni&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Morrison&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;1641273716551-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Agatha&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Christie&quot;</span></span><br><span class="line">4) 1) <span class="string">&quot;1641273722851-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Ngozi&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Adichie&quot;</span></span><br><span class="line">5) 1) <span class="string">&quot;1641273753450-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Virginia&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Woolf&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; XRANGE writers - + COUNT 2</span><br><span class="line">1) 1) <span class="string">&quot;1641273704421-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Jane&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Austen&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1641273710312-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;Toni&quot;</span></span><br><span class="line">      3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">      4) <span class="string">&quot;Morrison&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="XREAD"><a href="#XREAD" class="headerlink" title="XREAD"></a>XREAD</h3><p>使用XREAD以阻塞或者非阻塞方式获取消息列表，语法格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREAD [COUNT count] [BLOCK milliseconds] STREAMS key[key ...] id [id...]</span><br></pre></td></tr></table></figure>
<ul>
<li>count:数量</li>
<li>milliseconds:可选，阻塞毫秒数，没有设置就是非阻塞模式</li>
<li>key:队列名</li>
<li>id:消息ID</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XREAD count 2 STREAMS mystream writers 0-0 0-0</span><br><span class="line">1) 1) <span class="string">&quot;mystream&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1641273452348-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;item&quot;</span></span><br><span class="line">            2) <span class="string">&quot;1&quot;</span></span><br><span class="line">      2) 1) <span class="string">&quot;1641273454368-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;item&quot;</span></span><br><span class="line">            2) <span class="string">&quot;2&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;writers&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1641273704421-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;Jane&quot;</span></span><br><span class="line">            3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">            4) <span class="string">&quot;Austen&quot;</span></span><br><span class="line">      2) 1) <span class="string">&quot;1641273710312-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;Toni&quot;</span></span><br><span class="line">            3) <span class="string">&quot;surname&quot;</span></span><br><span class="line">            4) <span class="string">&quot;Morrison&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="XGROUP-CREATE"><a href="#XGROUP-CREATE" class="headerlink" title="XGROUP CREATE"></a>XGROUP CREATE</h3><p>使用XGROUP CREATE创建消费者组，语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]</span><br></pre></td></tr></table></figure>

<ul>
<li>key:队列名称，如果不存在就创建</li>
<li>groupname:组名</li>
<li>$:表示从尾部开始消费，只接受新消息，当前Stream消息会全部忽略</li>
</ul>
<p>从头开始消费：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE mystream consumer-group-name 0-0</span><br></pre></td></tr></table></figure>

<p>从尾部开始消费：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE mystream consumer-group-name $</span><br></pre></td></tr></table></figure>

<h3 id="XREADGROUP-GROUP"><a href="#XREADGROUP-GROUP" class="headerlink" title="XREADGROUP GROUP"></a>XREADGROUP GROUP</h3><p>使用XREADGROUP GROUP读取消费组中的消息，语法格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAM key [key...] ID [ID...]</span><br></pre></td></tr></table></figure>
<ul>
<li>group:消费组名</li>
<li>consumer:消费者名</li>
<li>count:读取数量</li>
<li>milliseconds:阻塞毫秒数</li>
<li>key:队列名</li>
<li>ID:消息ID</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREADGROUP GROUP consumer-group-name consumer-name COUNT 1 STREAMS mystream &gt;</span><br></pre></td></tr></table></figure>

<h1 id="Redis-高级教程"><a href="#Redis-高级教程" class="headerlink" title="Redis 高级教程"></a>Redis 高级教程</h1><h2 id="Redis-数据库备份与恢复"><a href="#Redis-数据库备份与恢复" class="headerlink" title="Redis 数据库备份与恢复"></a>Redis 数据库备份与恢复</h2><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>Redis SAVE命令用于创建当前数据库的备份</p>
<h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><p>redis SAVE命令基本语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SAVE</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p><font color='red'>该命令将在redis安装目录下创建dump.rdb文件</font></p>
<h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>如果需要恢复数据，只需要将备份文件(dump.rdb)移动到redis安装目录并启动服务即可。获取redis目录可以使用<code>CONFIG</code>命令，如下所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;root&#x2F;Download&#x2F;redis-6.2.6&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Bgsave"><a href="#Bgsave" class="headerlink" title="Bgsave"></a>Bgsave</h3><p>创建redis备份文件也可以使用命令<code>BGSAVE</code>，该命令在后台执行<br>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure>

<h2 id="Redis-安全"><a href="#Redis-安全" class="headerlink" title="Redis 安全"></a>Redis 安全</h2><p>可以通过redis的配置文件设置密码参数，这样客户端链接到redis服务就需要密码验证，这样可以让redis服务更安全<br>实例：可以通过下面的命令查看是否设置了密码验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure>
<p>默认情况下<code>requirepass</code>参数是空的，这就意味着你无需通过密码验证连接到redis服务。<br>可以通过以下命令来修改该参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG SET requirepass xxxxx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;xxxxx&quot;</span></span><br></pre></td></tr></table></figure>
<p>设置密码后，客户端连接redis服务就需要密码验证，否则无法执行命令，<font color='red'>但是这种方式不会修改配置文件中设置的密码，也就意味着，如果还是用之前的配置文件启动，密码还是配置文件中的密码</font></p>
<h3 id="授权连接"><a href="#授权连接" class="headerlink" title="授权连接"></a>授权连接</h3><p><code>AUTH</code>命令基本语法格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AUTH password</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]<span class="comment"># src/redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; auth xxxxx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<h2 id="Redis-性能测试"><a href="#Redis-性能测试" class="headerlink" title="Redis 性能测试"></a>Redis 性能测试</h2><p>Redis性能测试是通过同时执行多个命令实现的</p>
<h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>redis性能测试的基本命令如下：<br><font color='red'>该命令是在redis的目录下执行，而不是redis客户端的内部命令</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>

<h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><p>以下实例同时执行10000个请求来检测性能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]<span class="comment"># src/redis-benchmark -n 10000 -q -a xxxxx</span></span><br><span class="line">PING_INLINE: 52631.58 requests per second, p50=0.455 msec         </span><br><span class="line">PING_MBULK: 57471.27 requests per second, p50=0.447 msec                   </span><br><span class="line">SET: 56497.18 requests per second, p50=0.447 msec                   </span><br><span class="line">GET: 57471.27 requests per second, p50=0.447 msec</span><br><span class="line">INCR: 57142.86 requests per second, p50=0.447 msec                  </span><br><span class="line">LPUSH: 57471.27 requests per second, p50=0.447 msec                   </span><br><span class="line">RPUSH: 57471.27 requests per second, p50=0.447 msec                   </span><br><span class="line">LPOP: 58139.53 requests per second, p50=0.447 msec</span><br><span class="line">RPOP: 57803.47 requests per second, p50=0.447 msec                   </span><br><span class="line">SADD: 57142.86 requests per second, p50=0.447 msec                   </span><br><span class="line">HSET: 57142.86 requests per second, p50=0.447 msec</span><br><span class="line">SPOP: 57471.27 requests per second, p50=0.447 msec                  </span><br><span class="line">ZADD: 56179.77 requests per second, p50=0.455 msec                   </span><br><span class="line">ZPOPMIN: 57142.86 requests per second, p50=0.447 msec</span><br><span class="line">LPUSH (needed to benchmark LRANGE): 57471.27 requests per second, p50=0.447 msec         </span><br><span class="line">LRANGE_100 (first 100 elements): 34602.07 requests per second, p50=0.735 msec                   </span><br><span class="line">LRANGE_300 (first 300 elements): 16420.36 requests per second, p50=1.519 msec                   </span><br><span class="line">LRANGE_500 (first 500 elements): 11325.03 requests per second, p50=2.199 msec                   </span><br><span class="line">LRANGE_600 (first 600 elements): 9765.62 requests per second, p50=2.551 msec                  </span><br><span class="line">MSET (10 keys): 56818.18 requests per second, p50=0.471 msec  </span><br></pre></td></tr></table></figure>

<p>redis性能测试工具可选参数如下所示：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>选项</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>-h</td>
<td>指定服务器主机名</td>
<td>127.0.0.1</td>
</tr>
<tr>
<td>2</td>
<td>-p</td>
<td>指定服务器端口</td>
<td>6379</td>
</tr>
<tr>
<td>3</td>
<td>-s</td>
<td>指定服务器socket</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>-c</td>
<td>指定并发连接数</td>
<td>50</td>
</tr>
<tr>
<td>5</td>
<td>-n</td>
<td>指定请求数</td>
<td>10000</td>
</tr>
<tr>
<td>6</td>
<td>-d</td>
<td>以字节的形式指定SET/GET的数据大小</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>-k</td>
<td>1=keep alive 0=reconnect</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>-r</td>
<td>SET/GET/INCR使用随机key，SADD使用随机值</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>-P</td>
<td>通过管道传输<numreq></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>-q</td>
<td>强制退出redis。进现实query/sec值</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>–csv</td>
<td>以csv格式输出</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>-l（L 的小写字母）</td>
<td>生成循环，永久执行测试</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>-t</td>
<td>仅运行以逗号分隔的测试命令列表</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>-I（i 的大写字母）</td>
<td>Idle模式。金打开N个idle连接并等待</td>
<td></td>
</tr>
</tbody></table>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]<span class="comment"># src/redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q -a xxxxxx</span></span><br><span class="line">SET: 50761.42 requests per second, p50=0.463 msec         </span><br><span class="line">LPUSH: 57803.47 requests per second, p50=0.447 msec</span><br></pre></td></tr></table></figure>
<p>上面的实例中主机为127.0.0.1，端口为6379，执行的命令为set,lpush，请求数量为10000，通过-q参数让结果只显示每秒执行的请求数</p>
<h2 id="Redis-客户端连接"><a href="#Redis-客户端连接" class="headerlink" title="Redis 客户端连接"></a>Redis 客户端连接</h2><p>Redis通过监听一个TCP端口或者Unix socket的方式来接收来自客户端的连接，当一个连接建立后，Redis内部会进行如下一些操作：</p>
<ul>
<li>首先，客户端socket会被设置为非阻塞模式，因为Redis在网络时间处理上采用的非阻塞多路复用模式</li>
<li>然后为这个socket设置TCP_ONLY属性，禁用Nagle算法</li>
<li>然后创建一个可读的文件事件用于监听这个客户端socket的数据发送</li>
</ul>
<h3 id="最大连接数"><a href="#最大连接数" class="headerlink" title="最大连接数"></a>最大连接数</h3><p>maxclients默认值是10000，可以在<code>redis.conf</code>中对这个值进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get maxclients</span><br><span class="line">1) <span class="string">&quot;maxclients&quot;</span></span><br><span class="line">2) <span class="string">&quot;10000&quot;</span></span><br></pre></td></tr></table></figure>

<p>实例<br>以下实例在服务启动时设置最大连接数为：100000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server --maxclients 100000</span><br></pre></td></tr></table></figure>

<h3 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h3><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>CLIENT LIST</td>
<td>返回链接到redis服务的客户端列表</td>
</tr>
<tr>
<td>2</td>
<td>CLIENT SETNAME</td>
<td>设置当前连接的名称</td>
</tr>
<tr>
<td>3</td>
<td>CLIENT GETNAME</td>
<td>获取通过CLIENT SETNAME命令设置的服务名称</td>
</tr>
<tr>
<td>4</td>
<td>CLIENT PAUSE</td>
<td>挂起客户端连接，指定挂起的时间以毫秒计，PAUSE之后呢？该如何处理才能重新启动？</td>
</tr>
<tr>
<td>5</td>
<td>CLIENT KILL</td>
<td>关闭客户端连接</td>
</tr>
</tbody></table>
<h2 id="Redis-管道技术"><a href="#Redis-管道技术" class="headerlink" title="Redis 管道技术"></a>Redis 管道技术</h2><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这就意味着通常情况下一个请求会遵循以下步骤：</p>
<ul>
<li>客户端向服务器发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应</li>
<li>服务端处理命令，并将结果返回给客户端</li>
</ul>
<h3 id="Redis管道技术"><a href="#Redis管道技术" class="headerlink" title="Redis管道技术"></a>Redis管道技术</h3><p>Redis管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应</p>
<p>实例<br>查看Redis管道，只需要启动redis实例并输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行下面这个命令不能有密码，还没查如果有密码的话，该如何执行</span></span><br><span class="line">[root@localhost redis-6.2.6]<span class="comment"># (echo -en &quot;PING\r\n SET runoobkey redis\r\nGET runoobkey\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n&quot;; sleep 10) | nc localhost 6379</span></span><br><span class="line">+PONG</span><br><span class="line">+OK</span><br><span class="line"><span class="variable">$5</span></span><br><span class="line">redis</span><br><span class="line">:1</span><br><span class="line">:2</span><br><span class="line">:3</span><br></pre></td></tr></table></figure>
<p>上面的实例中我们通过使用PING命令查看redis服务是否可用，之后我们设置了runoobkey的值为redis，然后我们获取runoobkey的值并使得visitor自增3次<br>在返回的结果中我们可以看到这些命令一次性向redis服务提交，并最终一次性读取所有服务端的响应</p>
<h3 id="管道技术的优势"><a href="#管道技术的优势" class="headerlink" title="管道技术的优势"></a>管道技术的优势</h3><p>管道技术最显著的优势就是提高Redis服务的性能。在下面的测试中，我们将使用Redis的Ruby客户端，支持管道技术特性，测试管道技术对速度的提升效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require <span class="string">&#x27;rubygems&#x27;</span></span><br><span class="line">require <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">def bench(descr)</span><br><span class="line">start = Time.now</span><br><span class="line">yield</span><br><span class="line">puts <span class="string">&quot;#&#123;descr&#125; #&#123;Time.now-start&#125; seconds&quot;</span></span><br><span class="line">end</span><br><span class="line">def without_pipelining</span><br><span class="line">r = Redis.new</span><br><span class="line">10000.times &#123;</span><br><span class="line">    r.ping</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">def with_pipelining</span><br><span class="line">r = Redis.new</span><br><span class="line">r.pipelined &#123;</span><br><span class="line">    10000.times &#123;</span><br><span class="line">        r.ping</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">bench(<span class="string">&quot;without pipelining&quot;</span>) &#123;</span><br><span class="line">    without_pipelining</span><br><span class="line">&#125;</span><br><span class="line">bench(<span class="string">&quot;with pipelining&quot;</span>) &#123;</span><br><span class="line">    with_pipelining</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从处于局域网中的Mac OS X系统上执行上面这个简单脚本的数据表明，开启了管道操作后，往返延时已经被改善得相当低了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">without pipelining 1.185238 seconds</span><br><span class="line">with pipelining 0.250783 seconds</span><br></pre></td></tr></table></figure>
<p>开启管道后，我们的速度效率提升了5倍</p>
<h2 id="Redis-分区"><a href="#Redis-分区" class="headerlink" title="Redis 分区"></a>Redis 分区</h2><p>分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子级</p>
<h4 id="分区优势"><a href="#分区优势" class="headerlink" title="分区优势"></a>分区优势</h4><ul>
<li>通过利用多态计算机的内存的和值，允许构造更大的数据库</li>
<li>通过多核和多台计算机，允许扩展计算能力；通过多台计算机和网络适配器，允许扩展网络带宽</li>
</ul>
<h4 id="分区不足"><a href="#分区不足" class="headerlink" title="分区不足"></a>分区不足</h4><p>redis的一些特性在分区方面表现不是很好：</p>
<ul>
<li>涉及多个key的操作通常是不被支持的，举例来说，当两个set映射到不同的Redis实例上时，就不能对这两个set执行交集操作</li>
<li>设计多个key的redis事务不能使用</li>
<li>当使用分区时，数据处理较为复杂，比如需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件</li>
<li>增加或删除容量也比较复杂。Redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而一种叫做presharding的技术对比是有帮助的</li>
</ul>
<h3 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h3><p>Redis有两种类型分区。假设有4个Redis实例R0，R1，R2，R3和类似user:1，user:2这样的表示用户的多个key，对既定的key油多种不同的方式来选择这个key存放在哪个实例中。也就是说，有不同的系统来映射某个key到某个Redis服务</p>
<h3 id="范围区分"><a href="#范围区分" class="headerlink" title="范围区分"></a>范围区分</h3><p>最简单的分区方式是按范围分区，就是映射一定范围的对象到指定的Redis实例<br>比如，ID从0到10000的用户保存到实例R0，ID从10001到20000的用户会保存到R1，以此类推<br>这种方式是可行的，并且在实际中使用，不足就是要有一个区间范围到实例的映射表，这个表要被管理，同时还需要各种对象的映射表，通常对Redis来说并非是好的方法。</p>
<h3 id="哈希分区"><a href="#哈希分区" class="headerlink" title="哈希分区"></a>哈希分区</h3><p>另外一种分区方法是hash分区。这对任何key都是用，也无需是object_name这种形式，像下面描述的一样简单</p>
<ul>
<li>用一个hash函数将key转换成一个数据，比如是用crc32 hash函数。对key foobar执行crc32(foobar)会输出类型93024922的证书。</li>
<li>对这个整数取模，将其转化为0-3之间的数字，就可以将这个整数映射到4个Redis实例中的一个了。93024922%4=2，就说明key foobar应该北村到R2梳理中</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置文件建议</title>
    <url>/2022/01/04/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_8.jpg"><br>之前Nginx的配置文件都是用啥搜啥，但是最近发现了一个比较正规的Nginx配置文件，因此记录下，以备用</p>
<h2 id="Nginx常规配置"><a href="#Nginx常规配置" class="headerlink" title="Nginx常规配置"></a>Nginx常规配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">		charset utf-8;</span><br><span class="line"></span><br><span class="line">		location / &#123;</span><br><span class="line">            root   /home/xxxx/projects/xxxxx-ui;</span><br><span class="line">			try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		location /prod-api/ &#123;</span><br><span class="line">			proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">			proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">			proxy_pass http://localhost:8080/;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="开启Gzip"><a href="#开启Gzip" class="headerlink" title="开启Gzip"></a>开启Gzip</h2><p>在<code>http</code>配置中加入如下代码对全局资源进行压缩，可以减小文件体积加快页面的访问速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启gzip压缩</span></span><br><span class="line">gzip on;</span><br><span class="line"><span class="comment"># 不压缩临界值，大于1K的才压缩，一般不用改</span></span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"><span class="comment"># 压缩缓冲区</span></span><br><span class="line">gzip_buffers 16 64K;</span><br><span class="line"><span class="comment"># 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line"><span class="comment"># 压缩级别，1-10，数字越大压缩的越好，时间也越长</span></span><br><span class="line">gzip_comp_level 5;</span><br><span class="line"><span class="comment"># 进行压缩的文件类型</span></span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml application/javascript;</span><br><span class="line"><span class="comment"># 跟Squid等缓存服务有关，on的话会在Header里增加&quot;Vary: Accept-Encoding&quot;</span></span><br><span class="line">gzip_vary on;</span><br><span class="line"><span class="comment"># IE6对Gzip不怎么友好，不给它Gzip了</span></span><br><span class="line">gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>中间件</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>中间件</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>APP消息推送之个推</title>
    <url>/2022/01/05/APP%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E4%B9%8B%E4%B8%AA%E6%8E%A8/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_8.jpg"></p>
<p>最近公司做APP的时候用到了推送，但是前端使用的UNIAPP，所以相应的推送也就限定死了得使用UniPush，看了下发现UniPush的后端基本上就是使用的个推的，想到个推不应该也就和极光一样，集成起来比较简单（若干年前干过），但是干起来才发现不是那么回事，离线接收不到消息等问题频繁出现，因此昨晚之后在此记录下，如果需要查看原文的文档，可看这个地址<a href="https://ask.dcloud.net.cn/article/35622">https://ask.dcloud.net.cn/article/35622</a></p>
<h2 id="步骤及代码"><a href="#步骤及代码" class="headerlink" title="步骤及代码"></a>步骤及代码</h2><p>后台的项目框架是使用的SpringBoot，因此包管理，变量的获取，Bean的注入相对来说说就简单的多</p>
<ol>
<li><p>首先就是引入包，在pom.xml文件下新增如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--UniPush消息推送--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.getui.push<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>restful-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>维护一下调用接口需要的一些常规的参数，这里使用的yml配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#unipush推送配置</span></span><br><span class="line"><span class="attr">unipush:</span></span><br><span class="line">    <span class="attr">appId:</span> <span class="string">IuxxxxYQixxxxxwj67xxxxV7</span></span><br><span class="line">    <span class="attr">appKey:</span> <span class="string">J12DKRxxxxxxxxxxxxx93</span></span><br><span class="line">    <span class="attr">mastersecret:</span> <span class="string">qb55xxxxxxxxxxxxhVmA</span></span><br><span class="line">    <span class="attr">baseUrl:</span> <span class="string">https://restapi.getui.com/v2/</span></span><br><span class="line">    <span class="comment">#应用程序打包名称</span></span><br><span class="line">    <span class="attr">packageName:</span> <span class="string">com.xxxxxx.xxxxxx</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后就是创建Config配置文件，用来注入个推使用的一些UserApi(用户相关的一些操作接口，包含绑定设备和用户之间的关系，删除绑定关系之类的)、PushApi（消息推送的Api）、StatisticsApi（数据统计相关的一些API）等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.ApiHelper;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.GtApiConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.api.PushApi;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.api.UserApi;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniPushConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;unipush.appId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;unipush.appKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;unipush.mastersecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mastersecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;unipush.baseUrl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组装配置信息公共方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.getui.push.v2.sdk.GtApiConfiguration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xxxxxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/12/28 9:44</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> GtApiConfiguration <span class="title">buildConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置httpClient最大连接数，当并发较大时建议调大此参数。或者启动参数加上 -Dhttp.maxConnections=200</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;http.maxConnections&quot;</span>, <span class="string">&quot;200&quot;</span>);</span><br><span class="line">        GtApiConfiguration apiConfiguration = <span class="keyword">new</span> GtApiConfiguration();</span><br><span class="line">        <span class="comment">//填写应用配置</span></span><br><span class="line">        apiConfiguration.setAppId(appId);</span><br><span class="line">        apiConfiguration.setAppKey(appKey);</span><br><span class="line">        apiConfiguration.setMasterSecret(mastersecret);</span><br><span class="line">        <span class="comment">// 接口调用前缀，请查看文档: 接口调用规范 -&gt; 接口前缀, 可不填写appId</span></span><br><span class="line">        apiConfiguration.setDomain(baseUrl);</span><br><span class="line">        <span class="keyword">return</span> apiConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入pushApi对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.getui.push.v2.sdk.api.PushApi</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Daniel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/12/28 9:44</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;pushApi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PushApi <span class="title">getPushApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GtApiConfiguration apiConfiguration = buildConfig();</span><br><span class="line">        <span class="comment">// 实例化ApiHelper对象，用于创建接口对象</span></span><br><span class="line">        ApiHelper apiHelper = ApiHelper.build(apiConfiguration);</span><br><span class="line">        <span class="comment">// 创建对象，建议复用。目前有PushApi、StatisticApi、UserApi</span></span><br><span class="line">        PushApi pushApi = apiHelper.creatApi(PushApi.class);</span><br><span class="line">        <span class="keyword">return</span> pushApi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入userApi对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.getui.push.v2.sdk.api.UserApi</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xxxxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/12/28 9:44</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userApi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserApi <span class="title">getUserApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GtApiConfiguration apiConfiguration = buildConfig();</span><br><span class="line">        <span class="comment">// 实例化ApiHelper对象，用于创建接口对象</span></span><br><span class="line">        ApiHelper apiHelper = ApiHelper.build(apiConfiguration);</span><br><span class="line">        <span class="comment">// 创建对象，建议复用。目前有PushApi、StatisticApi、UserApi</span></span><br><span class="line">        UserApi userApi = apiHelper.creatApi(UserApi.class);</span><br><span class="line">        <span class="keyword">return</span> userApi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建的几个对象，用作接收消息或者绑定用户的时候使用到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绑定设备和用户ID关系参数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/3 9:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniPushBindAlias</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniPushMessageContent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息接收用户的别名，用作发送消息确定接收设备的别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String receiverAlias;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息的标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息的参数信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; pushParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>消息推送的Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.api.PushApi;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.common.ApiResult;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.Audience;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.CidAliasListDTO;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.Settings;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.Strategy;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.PushChannel;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.PushDTO;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.PushMessage;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.android.AndroidDTO;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.android.GTNotification;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.android.ThirdNotification;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.dto.req.message.android.Ups;</span><br><span class="line"><span class="keyword">import</span> com.xxxx.unipush.entity.UniPushBindAlias;</span><br><span class="line"><span class="keyword">import</span> com.xxxxxxx.unipush.entity.UniPushMessageContent;</span><br><span class="line"><span class="keyword">import</span> com.xxxxxxx.util.BaseController;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.getui.push.v2.sdk.api.UserApi;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 发送UniPush消息推送</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-12-1 14:55:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;interface/uniPush&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;发送UniPush消息推送&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniPushInterface</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(UniPushInterface.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;unipush.packageName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String packageName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PushApi pushApi;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserApi userApi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定用户ID和设备号之间的关系，用作消息推送使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uniPushBindAlias</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.alibaba.fastjson.JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/12/3 9:29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;绑定用户ID和设备号之间的关系，用作消息推送使用&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/bindAlias&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResult&lt;Void&gt;  <span class="title">bindAlias</span><span class="params">(<span class="meta">@RequestBody</span> UniPushBindAlias uniPushBindAlias)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 组装unipush要求的格式</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String userId = uniPushBindAlias.getUserId();</span><br><span class="line">        String clientId = uniPushBindAlias.getClientId();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;UNI-PUSH开始绑定用户：&quot;</span>+userId+<span class="string">&quot;,ClientId：&quot;</span>+clientId);</span><br><span class="line">        CidAliasListDTO.CidAlias cidAlias = <span class="keyword">new</span> CidAliasListDTO.CidAlias(clientId, userId);</span><br><span class="line">        CidAliasListDTO cidAliasListDTO = <span class="keyword">new</span> CidAliasListDTO();</span><br><span class="line">        cidAliasListDTO.add(cidAlias);</span><br><span class="line"></span><br><span class="line">        ApiResult&lt;Void&gt; bindResult = userApi.bindAlias(cidAliasListDTO);</span><br><span class="line">        logger.info(<span class="string">&quot;UNI-PUSH结束绑定用户：&quot;</span>+userId+<span class="string">&quot;,ClientId：&quot;</span>+clientId+<span class="string">&quot;,绑定结果为：&quot;</span>+JSONObject.toJSONString(bindResult));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bindResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送APP推送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uniPushMessageContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.alibaba.fastjson.JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/12/3 9:28</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;发送APP推送消息&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/sendMessageToSignle&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">sendMessageToSignle</span><span class="params">(<span class="meta">@RequestBody</span> UniPushMessageContent uniPushMessageContent)</span> </span>&#123;</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取传递的自定义参数</span></span><br><span class="line">        String payloadStr = JSONObject.toJSONString(uniPushMessageContent.getPushParams());</span><br><span class="line">        String title = uniPushMessageContent.getTitle();</span><br><span class="line">        String content = uniPushMessageContent.getContent();</span><br><span class="line">        String intentStr = <span class="string">&quot;intent:#Intent;launchFlags=0x04000000;action=android.intent.action.oppopush;component=&quot;</span>+packageName+<span class="string">&quot;/io.dcloud.PandoraEntry;S.UP-OL-SU=true;S.title=&quot;</span>+title+<span class="string">&quot;;S.content=&quot;</span>+content+<span class="string">&quot;;S.payload=&quot;</span>+payloadStr+<span class="string">&quot;;end&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据cid进行单推</span></span><br><span class="line">        PushDTO&lt;Audience&gt; pushDTO = <span class="keyword">new</span> PushDTO&lt;Audience&gt;();</span><br><span class="line">        <span class="comment">// 设置推送参数</span></span><br><span class="line">        pushDTO.setRequestId(System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">/**** 设置个推通道参数 *****/</span></span><br><span class="line">        PushMessage pushMessage = <span class="keyword">new</span> PushMessage();</span><br><span class="line">        pushDTO.setPushMessage(pushMessage);</span><br><span class="line">        GTNotification notification = <span class="keyword">new</span> GTNotification();</span><br><span class="line">        pushMessage.setNotification(notification);</span><br><span class="line">        notification.setTitle(title);</span><br><span class="line">        notification.setBody(content);</span><br><span class="line">        notification.setBigText(content);</span><br><span class="line">        notification.setClickType(<span class="string">&quot;intent&quot;</span>);</span><br><span class="line">        notification.setIntent(intentStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**** 设置个推通道参数，更多参数请查看文档或对象源码 *****/</span></span><br><span class="line">        Settings settings = <span class="keyword">new</span> Settings();</span><br><span class="line">        pushDTO.setSettings(settings);</span><br><span class="line">        settings.setTtl(<span class="number">3600000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置策略1: 表示该消息在用户在线时推送个推通道，用户离线时推送厂商通道;</span></span><br><span class="line">        <span class="comment">//2: 表示该消息只通过厂商通道策略下发，不考虑用户是否在线;</span></span><br><span class="line">        <span class="comment">//3: 表示该消息只通过个推通道下发，不考虑用户是否在线；</span></span><br><span class="line">        <span class="comment">//4: 表示该消息优先从厂商通道下发，若消息内容在厂商通道代发失败后会从个推通道下发</span></span><br><span class="line">        Strategy strategy = <span class="keyword">new</span> Strategy();</span><br><span class="line">        strategy.setDef(<span class="number">1</span>);</span><br><span class="line">        settings.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**** 设置厂商相关参数 ****/</span></span><br><span class="line">        PushChannel pushChannel = <span class="keyword">new</span> PushChannel();</span><br><span class="line">        pushDTO.setPushChannel(pushChannel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//*配置安卓通道的参数*//*</span></span><br><span class="line">        AndroidDTO androidDTO = <span class="keyword">new</span> AndroidDTO();</span><br><span class="line">        pushChannel.setAndroid(androidDTO);</span><br><span class="line">        Ups ups = <span class="keyword">new</span> Ups();</span><br><span class="line">        androidDTO.setUps(ups);</span><br><span class="line">        ThirdNotification thirdNotification = <span class="keyword">new</span> ThirdNotification();</span><br><span class="line">        ups.setNotification(thirdNotification);</span><br><span class="line">        thirdNotification.setTitle(title);</span><br><span class="line">        thirdNotification.setBody(content);</span><br><span class="line">        thirdNotification.setClickType(<span class="string">&quot;intent&quot;</span>);</span><br><span class="line">        thirdNotification.setIntent(intentStr);</span><br><span class="line">        <span class="comment">/*配置安卓厂商参数结束，更多参数请查看文档或对象源码*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置ios厂商参数--------先注释掉，后期有可能做IOS端的，所以到时候还得用*/</span></span><br><span class="line">        <span class="comment">/*IosDTO iosDTO = new IosDTO();</span></span><br><span class="line"><span class="comment">        pushChannel.setIos(iosDTO);</span></span><br><span class="line"><span class="comment">        // 相同的collapseId会覆盖之前的消息</span></span><br><span class="line"><span class="comment">        iosDTO.setApnsCollapseId(&quot;xxx&quot;);</span></span><br><span class="line"><span class="comment">        Aps aps = new Aps();</span></span><br><span class="line"><span class="comment">        iosDTO.setAps(aps);</span></span><br><span class="line"><span class="comment">        Alert alert = new Alert();</span></span><br><span class="line"><span class="comment">        aps.setAlert(alert);</span></span><br><span class="line"><span class="comment">        alert.setTitle(&quot;ios title&quot;);</span></span><br><span class="line"><span class="comment">        alert.setBody(&quot;ios body&quot;);*/</span></span><br><span class="line">        <span class="comment">/*设置ios厂商参数结束，更多参数请查看文档或对象源码*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置接收人信息*/</span></span><br><span class="line">        Audience audience = <span class="keyword">new</span> Audience();</span><br><span class="line">        pushDTO.setAudience(audience);</span><br><span class="line">        audience.addAlias(uniPushMessageContent.getReceiverAlias());</span><br><span class="line">        <span class="comment">/*设置接收人信息结束*/</span></span><br><span class="line">        <span class="comment">/**** 设置厂商相关参数，更多参数请查看文档或对象源码 ****/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据别名单推</span></span><br><span class="line">        ApiResult&lt;Map&lt;String, Map&lt;String, String&gt;&gt;&gt; apiResult = pushApi.pushToSingleByAlias(pushDTO);</span><br><span class="line">        <span class="keyword">if</span> (apiResult.isSuccess()) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;code&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, apiResult.getMsg());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// failed</span></span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, apiResult.getMsg());</span><br><span class="line">            System.out.println(<span class="string">&quot;code:&quot;</span> + apiResult.getCode() + <span class="string">&quot;, msg: &quot;</span> + apiResult.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;UNI-PUSH推送消息，消息内容为：&quot;</span>+JSONObject.toJSONString(uniPushMessageContent)+<span class="string">&quot;，推送结果为：&quot;</span>+JSONObject.toJSONString(apiResult));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
        <category>消息推送</category>
      </categories>
      <tags>
        <tag>个推</tag>
        <tag>消息推送</tag>
      </tags>
  </entry>
  <entry>
    <title>Java PDF转图片</title>
    <url>/2022/01/06/Java-PDF%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="/images/banner/banner_9.jpg"><br>大前提是最近要做的一个接口中给返回PDF的地址，前端小程序根据地址直接显示PDF的文件内容即可，但奈何小程序对于PDF的预览支持不是很好，因此需要将接口中返回的PDF转化为图片，然后给小程序，让小程序进行反显</p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="引入Jar包"><a href="#引入Jar包" class="headerlink" title="引入Jar包"></a>引入Jar包</h3><p>因为之前的时候做PDF解析的时候用到过pdfbox，感觉很好用，这里就直接用这个了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.rendering.ImageType;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.rendering.PDFRenderer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/generateReport&quot;)</span></span><br><span class="line">  <span class="meta">@ApiResponses(&#123;@ApiResponse(code = 0, message = &quot;OK&quot;, response = ResponseModel.class)&#125;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResponseModel <span class="title">generateReport</span><span class="params">(String phoneNumbers, String name, String idCardNumber, String resId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//假设这个路径是PDF的下载路径</span></span><br><span class="line">      String reportUrl = <span class="string">&quot;http://127.0.0.1/pdf/temp.pdf&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用请求，用byte数组接收</span></span><br><span class="line">      ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = restTemplate.exchange(reportUrl, HttpMethod.GET, <span class="keyword">new</span> HttpEntity&lt;&gt;(headers), <span class="keyword">byte</span>[].class);</span><br><span class="line">      <span class="keyword">byte</span>[] body = entity.getBody();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//转换成PDDocument文件</span></span><br><span class="line">          PDDocument pd = PDDocument.load(body);</span><br><span class="line">          PDFRenderer pdfRenderer = <span class="keyword">new</span> PDFRenderer(pd);</span><br><span class="line">          BufferedImage combined = <span class="keyword">null</span>;</span><br><span class="line">          <span class="comment">//获取PDF的页数，并进行一页一页的遍历</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> page = <span class="number">0</span>; page &lt; pd.getNumberOfPages(); ++page) &#123;</span><br><span class="line">              <span class="comment">//将当前的获取到的页进行转换成缓存Image</span></span><br><span class="line">              BufferedImage bim = pdfRenderer.renderImageWithDPI(page, <span class="number">170</span>, ImageType.RGB);</span><br><span class="line">              <span class="keyword">if</span> (page == <span class="number">0</span>) &#123;</span><br><span class="line">                # 如果是第一页，直接赋值给临时变量</span><br><span class="line">                  combined = bim;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                # 如果是后续就进行合并</span><br><span class="line">                  combined = merge(combined, bim);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//如果图片不为空</span></span><br><span class="line">          <span class="keyword">if</span> (combined != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//添加水印</span></span><br><span class="line">              combined = addWaterMask(combined, <span class="string">&quot;水印内容&quot;</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">//输出文件</span></span><br><span class="line">              ImageIO.write(combined, <span class="string">&quot;png&quot;</span>, <span class="keyword">new</span> File(filePath));</span><br><span class="line">          &#125;</span><br><span class="line">          pd.close();</span><br><span class="line">          <span class="keyword">return</span> updateCount &gt; <span class="number">0</span> ? ResponseModel.ok(viewPath) : ResponseModel.error(<span class="string">&quot;生成初审报告失败!&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          <span class="keyword">return</span> ResponseModel.error(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合并图片</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> image1</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> image2</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title">merge</span><span class="params">(BufferedImage image1, BufferedImage image2)</span> </span>&#123;</span><br><span class="line">      BufferedImage combined = <span class="keyword">new</span> BufferedImage(</span><br><span class="line">              image1.getWidth(),</span><br><span class="line">              image1.getHeight() + image2.getHeight(),</span><br><span class="line">              BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">      Graphics g = combined.getGraphics();</span><br><span class="line">      g.drawImage(image1, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">      g.drawImage(image2, <span class="number">0</span>, image1.getHeight(), <span class="keyword">null</span>);</span><br><span class="line">      g.dispose();</span><br><span class="line">      <span class="keyword">return</span> combined;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加水印</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> image 图片</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> maskStr 水印字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title">addWaterMask</span><span class="params">(BufferedImage image, String maskStr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> imgHeight = image.getHeight();</span><br><span class="line">      <span class="keyword">int</span> imgWidth = image.getWidth();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取 Graphics2D 对象</span></span><br><span class="line">      Graphics2D g = image.createGraphics();</span><br><span class="line">      <span class="comment">//设置绘图区域</span></span><br><span class="line">      g.drawImage(image, imgWidth, imgHeight, <span class="keyword">null</span>);</span><br><span class="line">      <span class="comment">//设置字体</span></span><br><span class="line">      <span class="keyword">int</span> timeFontSize = <span class="number">50</span>;</span><br><span class="line">      Font font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, timeFontSize);</span><br><span class="line">      g.setFont(font);</span><br><span class="line">      <span class="comment">// 根据图片的背景设置水印颜色</span></span><br><span class="line">      g.setColor(Color.GRAY);</span><br><span class="line">      <span class="comment">//设置透明</span></span><br><span class="line">      AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, <span class="number">0.35f</span>);</span><br><span class="line">      g.setComposite(alphaComposite);</span><br><span class="line">      <span class="comment">//设置抗锯齿</span></span><br><span class="line">      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">      <span class="comment">//设置偏转</span></span><br><span class="line">      g.rotate(-Math.PI / <span class="number">5</span>, imgWidth / <span class="number">2</span>, imgHeight / <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = -imgHeight; x &lt; imgHeight; x += <span class="number">600</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> y = -imgHeight; y &lt; imgHeight; y += <span class="number">300</span>) &#123;</span><br><span class="line">              g.drawString(maskStr + <span class="string">&quot; &quot;</span> + DateUtils.getDate(), x, y);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      g.dispose();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> image;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PDF</tag>
        <tag>PDFBox</tag>
        <tag>图片</tag>
      </tags>
  </entry>
</search>
